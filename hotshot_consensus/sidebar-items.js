window.SIDEBAR_ITEMS = {"constant":[["_DERIVE_core_fmt_Debug_FOR_Consensus",""]],"enum":[["ViewInner","A view’s state"]],"mod":[["da_member","Contains the [`DAMember`] struct used for the committee member step in the consensus algorithm with DA committee, i.e. in the sequencing consensus."],["leader","Contains the [`ValidatingLeader`] struct used for the leader step in the hotstuff consensus algorithm."],["next_leader","Contains the [`NextValidatingLeader`] struct used for the next leader step in the hotstuff consensus algorithm."],["replica","Contains the [`Replica`] struct used for the replica step in the hotstuff consensus algorithm."],["sequencing_leader","Contains the [`DALeader`], [`ConsensusLeader`] and [`ConsensusNextLeader`] structs used for the leader steps in the consensus algorithm with DA committee, i.e. in the sequencing consensus."],["sequencing_replica","Contains the [`SequencingReplica`] struct used for the replica step in the consensus algorithm with DA committee, i.e. in the sequencing consensus."],["traits","Contains the [`ConsensusApi`] trait."],["utils","Utility functions, type aliases, helper structs and enum definitions."]],"struct":[["BlockStore","Mapping from block commitments to full blocks."],["Consensus","A reference to the consensus algorithm"],["ConsensusLeader","Implemenation of the consensus leader for a DA/Sequencing consensus.  Handles sending out a proposal to the entire network For now this step happens after the `DALeader` completes it’s proposal and collects enough votes."],["ConsensusMetrics","The metrics being collected for the consensus algorithm"],["ConsensusNextLeader","Implenting the next leader.  Collect votes on the previous leaders proposal and return the QC"],["DALeader","This view’s DA committee leader"],["DAMember","This view’s DA committee member."],["NextValidatingLeader","The next view’s validating leader"],["Replica","This view’s replica"],["SendToTasks","metadata for sending information to replica (and in the future, the leader)"],["SequencingReplica","This view’s replica for sequencing consensus."],["ValidatingLeader","This view’s validating leader"],["View","This exists so we can perform state transitions mutably"],["ViewQueue","struct containing messages for a view to send to replica"]],"trait":[["ConsensusApi","The API that `HotStuff` needs to talk to the system. This should be implemented in the `hotshot` crate and passed to all functions on `HotStuff`."]],"type":[["CommitmentMap","A type alias for `HashMap<Commitment<T>, T>`"]]};
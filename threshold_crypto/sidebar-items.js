initSidebarItems({"constant":[["PK_SIZE","The size of a key’s representation in bytes."],["SIG_SIZE","The size of a signature’s representation in bytes."]],"fn":[["hash_g2","Returns a hash of the given message in `G2`."]],"mod":[["error","Crypto errors."],["poly","Utilities for distributed key generation: uni- and bivariate polynomials and commitments."],["serde_impl","Serialization and deserialization implementations for group and field elements."]],"struct":[["Ciphertext","An encrypted message."],["DecryptionShare","A decryption share. A threshold of decryption shares can be used to decrypt a message."],["Fr","Eighth Mersenne prime field element"],["FrRepr","Eighth Mersenne prime field element"],["G1","Projective type for `Mersenne8`."],["G1Affine","Affine type for `Mersenne8`."],["G2","Projective type for `Mersenne8`."],["G2Affine","Affine type for `Mersenne8`."],["PEngine","A `pairing` Engine based on `Mersenne8` prime fields."],["PublicKey","A public key."],["PublicKeySet","A public key and an associated set of public key shares."],["PublicKeyShare","A public key share."],["SecretKey","A secret key; wraps a single prime field element. The field element is heap allocated to avoid any stack copying that result when passing `SecretKey`s between stack frames."],["SecretKeySet","A secret key and an associated set of secret key shares."],["SecretKeyShare","A secret key share."],["Signature","A signature."],["SignatureShare","A signature share."]],"trait":[["IntoFr","A conversion into an element of the field `Fr`."]]});
(function() {var type_impls = {
"hotshot_types":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Advz%3CE,+H%3E\" class=\"impl\"><a href=\"#impl-Advz%3CE,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, H&gt; Advz&lt;E, H&gt;<div class=\"where\">where\n    E: Pairing,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    payload_chunk_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>,\n    num_storage_nodes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>,\n    srs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;&lt;UnivariateKzgPCS&lt;E&gt; as PolynomialCommitmentScheme&gt;::SRS&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Advz&lt;E, H&gt;, VidError&gt;</h4></section></summary><div class=\"docblock\"><p>Return a new instance of <code>Self</code>.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<p>Return [<code>VidError::Argument</code>] if <code>num_storage_nodes &lt; payload_chunk_size</code>.</p>\n</div></details></div></details>",0,"hotshot_types::data::VidScheme"],["<section id=\"impl-StructuralPartialEq-for-Advz%3CE,+H%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-Advz%3CE,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for Advz&lt;E, H&gt;<div class=\"where\">where\n    E: Pairing,</div></h3></section>","StructuralPartialEq","hotshot_types::data::VidScheme"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PayloadProver%3CSmallRangeProof%3C%3CUnivariateKzgPCS%3CE%3E+as+PolynomialCommitmentScheme%3E::Proof%3E%3E-for-Advz%3CE,+H%3E\" class=\"impl\"><a href=\"#impl-PayloadProver%3CSmallRangeProof%3C%3CUnivariateKzgPCS%3CE%3E+as+PolynomialCommitmentScheme%3E::Proof%3E%3E-for-Advz%3CE,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, H&gt; PayloadProver&lt;SmallRangeProof&lt;&lt;UnivariateKzgPCS&lt;E&gt; as PolynomialCommitmentScheme&gt;::Proof&gt;&gt; for Advz&lt;E, H&gt;<div class=\"where\">where\n    E: Pairing,\n    H: HasherDigest,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.payload_proof\" class=\"method trait-impl\"><a href=\"#method.payload_proof\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">payload_proof</a>&lt;B&gt;(\n    &amp;self,\n    payload: B,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;SmallRangeProof&lt;&lt;UnivariateKzgPCS&lt;E&gt; as PolynomialCommitmentScheme&gt;::Proof&gt;, VidError&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Compute a proof for a subslice of payload data. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.payload_verify\" class=\"method trait-impl\"><a href=\"#method.payload_verify\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">payload_verify</a>(\n    &amp;self,\n    stmt: Statement&lt;'_, Advz&lt;E, H&gt;&gt;,\n    proof: &amp;SmallRangeProof&lt;&lt;UnivariateKzgPCS&lt;E&gt; as PolynomialCommitmentScheme&gt;::Proof&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;, VidError&gt;</h4></section></summary><div class='docblock'>Verify a proof made by [<code>PayloadProver::payload_proof</code>]. <a>Read more</a></div></details></div></details>","PayloadProver<SmallRangeProof<<UnivariateKzgPCS<E> as PolynomialCommitmentScheme>::Proof>>","hotshot_types::data::VidScheme"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PayloadProver%3CLargeRangeProof%3C%3CUnivariateKzgPCS%3CE%3E+as+PolynomialCommitmentScheme%3E::Evaluation%3E%3E-for-Advz%3CE,+H%3E\" class=\"impl\"><a href=\"#impl-PayloadProver%3CLargeRangeProof%3C%3CUnivariateKzgPCS%3CE%3E+as+PolynomialCommitmentScheme%3E::Evaluation%3E%3E-for-Advz%3CE,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, H&gt; PayloadProver&lt;LargeRangeProof&lt;&lt;UnivariateKzgPCS&lt;E&gt; as PolynomialCommitmentScheme&gt;::Evaluation&gt;&gt; for Advz&lt;E, H&gt;<div class=\"where\">where\n    E: Pairing,\n    H: HasherDigest,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.payload_proof\" class=\"method trait-impl\"><a href=\"#method.payload_proof\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">payload_proof</a>&lt;B&gt;(\n    &amp;self,\n    payload: B,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;LargeRangeProof&lt;&lt;UnivariateKzgPCS&lt;E&gt; as PolynomialCommitmentScheme&gt;::Evaluation&gt;, VidError&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Compute a proof for a subslice of payload data. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.payload_verify\" class=\"method trait-impl\"><a href=\"#method.payload_verify\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">payload_verify</a>(\n    &amp;self,\n    stmt: Statement&lt;'_, Advz&lt;E, H&gt;&gt;,\n    proof: &amp;LargeRangeProof&lt;&lt;UnivariateKzgPCS&lt;E&gt; as PolynomialCommitmentScheme&gt;::Evaluation&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;, VidError&gt;</h4></section></summary><div class='docblock'>Verify a proof made by [<code>PayloadProver::payload_proof</code>]. <a>Read more</a></div></details></div></details>","PayloadProver<LargeRangeProof<<UnivariateKzgPCS<E> as PolynomialCommitmentScheme>::Evaluation>>","hotshot_types::data::VidScheme"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VidScheme-for-Advz%3CE,+H%3E\" class=\"impl\"><a href=\"#impl-VidScheme-for-Advz%3CE,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, H&gt; <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a> for Advz&lt;E, H&gt;<div class=\"where\">where\n    E: Pairing,\n    H: HasherDigest,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Commit\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Commit\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Commit\" class=\"associatedtype\">Commit</a> = HasherNode&lt;H&gt;</h4></section></summary><div class='docblock'>Payload commitment.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Share\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Share\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Share\" class=\"associatedtype\">Share</a> = Share&lt;E, H&gt;</h4></section></summary><div class='docblock'>Share-specific data sent to a storage node.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Common\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Common\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Common\" class=\"associatedtype\">Common</a> = Common&lt;E, H&gt;</h4></section></summary><div class='docblock'>Common data sent to all storage nodes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.commit_only\" class=\"method trait-impl\"><a href=\"#method.commit_only\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#tymethod.commit_only\" class=\"fn\">commit_only</a>&lt;B&gt;(\n    &amp;self,\n    payload: B\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;Advz&lt;E, H&gt; as <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a>&gt;::<a class=\"associatedtype\" href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Commit\" title=\"type hotshot_types::data::VidSchemeTrait::Commit\">Commit</a>, VidError&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Compute a payload commitment</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.disperse\" class=\"method trait-impl\"><a href=\"#method.disperse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#tymethod.disperse\" class=\"fn\">disperse</a>&lt;B&gt;(&amp;self, payload: B) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;VidDisperse&lt;Advz&lt;E, H&gt;&gt;, VidError&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><div class='docblock'>Compute shares to send to the storage nodes</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.verify_share\" class=\"method trait-impl\"><a href=\"#method.verify_share\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#tymethod.verify_share\" class=\"fn\">verify_share</a>(\n    &amp;self,\n    share: &amp;&lt;Advz&lt;E, H&gt; as <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a>&gt;::<a class=\"associatedtype\" href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Share\" title=\"type hotshot_types::data::VidSchemeTrait::Share\">Share</a>,\n    common: &amp;&lt;Advz&lt;E, H&gt; as <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a>&gt;::<a class=\"associatedtype\" href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Common\" title=\"type hotshot_types::data::VidSchemeTrait::Common\">Common</a>,\n    commit: &amp;&lt;Advz&lt;E, H&gt; as <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a>&gt;::<a class=\"associatedtype\" href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Commit\" title=\"type hotshot_types::data::VidSchemeTrait::Commit\">Commit</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;, VidError&gt;</h4></section></summary><div class='docblock'>Verify a share. Used by both storage node and retrieval client.\nWhy is return type a nested <code>Result</code>? See <a href=\"https://sled.rs/errors\">https://sled.rs/errors</a>\nReturns: <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#tymethod.verify_share\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recover_payload\" class=\"method trait-impl\"><a href=\"#method.recover_payload\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#tymethod.recover_payload\" class=\"fn\">recover_payload</a>(\n    &amp;self,\n    shares: &amp;[&lt;Advz&lt;E, H&gt; as <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a>&gt;::<a class=\"associatedtype\" href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Share\" title=\"type hotshot_types::data::VidSchemeTrait::Share\">Share</a>],\n    common: &amp;&lt;Advz&lt;E, H&gt; as <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a>&gt;::<a class=\"associatedtype\" href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Common\" title=\"type hotshot_types::data::VidSchemeTrait::Common\">Common</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>&gt;, VidError&gt;</h4></section></summary><div class='docblock'>Recover payload from shares.\nDo not verify shares or check recovered payload against anything.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_consistent\" class=\"method trait-impl\"><a href=\"#method.is_consistent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#tymethod.is_consistent\" class=\"fn\">is_consistent</a>(\n    commit: &amp;&lt;Advz&lt;E, H&gt; as <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a>&gt;::<a class=\"associatedtype\" href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Commit\" title=\"type hotshot_types::data::VidSchemeTrait::Commit\">Commit</a>,\n    common: &amp;&lt;Advz&lt;E, H&gt; as <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a>&gt;::<a class=\"associatedtype\" href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Common\" title=\"type hotshot_types::data::VidSchemeTrait::Common\">Common</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, VidError&gt;</h4></section></summary><div class='docblock'>Check that a <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Common\" title=\"associated type hotshot_types::data::VidSchemeTrait::Common\"><code>VidScheme::Common</code></a> is consistent with a\n<a href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Commit\" title=\"associated type hotshot_types::data::VidSchemeTrait::Commit\"><code>VidScheme::Commit</code></a>. <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#tymethod.is_consistent\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_payload_byte_len\" class=\"method trait-impl\"><a href=\"#method.get_payload_byte_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#tymethod.get_payload_byte_len\" class=\"fn\">get_payload_byte_len</a>(common: &amp;&lt;Advz&lt;E, H&gt; as <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a>&gt;::<a class=\"associatedtype\" href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Common\" title=\"type hotshot_types::data::VidSchemeTrait::Common\">Common</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Extract the payload byte length data from a <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Common\" title=\"associated type hotshot_types::data::VidSchemeTrait::Common\"><code>VidScheme::Common</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_num_storage_nodes\" class=\"method trait-impl\"><a href=\"#method.get_num_storage_nodes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#tymethod.get_num_storage_nodes\" class=\"fn\">get_num_storage_nodes</a>(common: &amp;&lt;Advz&lt;E, H&gt; as <a class=\"trait\" href=\"hotshot_types/data/trait.VidSchemeTrait.html\" title=\"trait hotshot_types::data::VidSchemeTrait\">VidScheme</a>&gt;::<a class=\"associatedtype\" href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Common\" title=\"type hotshot_types::data::VidSchemeTrait::Common\">Common</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Extract the number of storage nodes from a <a href=\"hotshot_types/data/trait.VidSchemeTrait.html#associatedtype.Common\" title=\"associated type hotshot_types::data::VidSchemeTrait::Common\"><code>VidScheme::Common</code></a>.</div></details></div></details>","VidScheme","hotshot_types::data::VidScheme"],["<section id=\"impl-StructuralEq-for-Advz%3CE,+H%3E\" class=\"impl\"><a href=\"#impl-StructuralEq-for-Advz%3CE,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for Advz&lt;E, H&gt;<div class=\"where\">where\n    E: Pairing,</div></h3></section>","StructuralEq","hotshot_types::data::VidScheme"],["<section id=\"impl-Eq-for-Advz%3CE,+H%3E\" class=\"impl\"><a href=\"#impl-Eq-for-Advz%3CE,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for Advz&lt;E, H&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + Pairing,\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","hotshot_types::data::VidScheme"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Advz%3CE,+H%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Advz%3CE,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Advz&lt;E, H&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + Pairing,\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Advz&lt;E, H&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hotshot_types::data::VidScheme"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Advz%3CE,+H%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Advz%3CE,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Advz&lt;E, H&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + Pairing,\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hotshot_types::data::VidScheme"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Advz%3CE,+H%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-Advz%3CE,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for Advz&lt;E, H&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + Pairing,\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Advz&lt;E, H&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","hotshot_types::data::VidScheme"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()
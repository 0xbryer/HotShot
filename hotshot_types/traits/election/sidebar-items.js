window.SIDEBAR_ITEMS = {"enum":[["Checked","For items that will always have the same validity outcome on a successful check, allows for the case of “not yet possible to check” where the check might be attempted again at a later point in time, but saves on repeated checking when the outcome is already knowable."],["ElectionError","Error for election problems"],["ViewSyncVoteData","Data which `ViewSyncVotes` are signed over"],["VoteData","Data to vote on for different types of votes."]],"struct":[["CommitteeExchange","Standard implementation of [`CommitteeExchangeType`] utilizing a DA committee."],["MathSnafu","SNAFU context selector for the `ElectionError::MathError` variant"],["QuorumExchange","Standard implementation of [`QuroumExchangeType`] based on Hot Stuff consensus."],["StubSnafu","SNAFU context selector for the `ElectionError::StubError` variant"],["ViewSyncExchange","Standard implementation of [`ViewSyncExchangeType`] based on Hot Stuff consensus."]],"trait":[["CommitteeExchangeType","A [`ConsensusExchange`] where participants vote to provide availability for blobs of data."],["ConsensusExchange","Protocol for exchanging proposals and votes to make decisions in a distributed network."],["ElectionConfig","election config"],["Membership","A protocol for determining membership in and participating in a ccommittee."],["QuorumExchangeType","A [`ConsensusExchange`] where participants vote to append items to a log."],["SignedCertificate","A certificate of some property which has been signed by a quroum of nodes."],["TestableElection","Testable implementation of a [`Membership`]. Will expose a method to generate a vote token used for testing."],["ViewSyncExchangeType","A [`ConsensusExchange`] where participants synchronize which view the network should be in."],["VoteToken","Proof of this entity’s right to vote, and of the weight of those votes"]]};
var searchIndex = JSON.parse('{\
"counter":{"doc":"","t":"F","n":["main"],"q":[[0,"counter"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[4,"Result"]]},\
"hotshot":{"doc":"Provides a generic rust implementation of the <code>HotShot</code> BFT …","t":"NNNNRREDDIDNNNNNNNDDNNRLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLAMLLLLLLMKLMLLALLLLLLLLLLLLLALLLLLLMMLLLLLLLLLLLLLLLLMLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLMLCMKLLLLLLLLLLLLLLMLLALLLLLLLAKLMLLLLLLLLLLLLLLLLLLALLLLLLMMMMMMMMMMMDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLMLLLLLLLLMLAANNDNDNDNDNNDNDEEDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLFFLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLNENLFFFFFLLLLLLLLLLLLLLLLFLLLLLIQNNQQNQQQNNQNNEININIIQGIQNQNNNKKKLLLLLKLLLKKKKKLLLLAALLLLKKLALLLLLLKAKKKAKLKKLKALLLKLKLMMMMMMMDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLADGDDLLLMMLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLMLLLLLLLLLLLLLLLLLLLLLDDDDDDDDGDDDMMMMMMMMNNDNDNDNDNNEIDNDNDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAMLMKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAMMMMMMMENDDDGRLLLLLLLLLLLMMLLLLLLLLLLMMLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLMLLMLLMLLMMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLNENDDDDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLDDIDIDDLLLLMLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMLMLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLLKLKKLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMLLLLMMLLMLLMLLMLLMLLLLLLLLLLLLLLLLMMLLLLLMMMLLLLLMLLQQQQIQIKKKKKKKKGIKLKKKADDLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLMLLLLLLLLLNNDEDNQQQNIQDNILLLMLLLLLLKALLLLLLKLLLLLLKLLLLLLLLLLLAMLLLLLLKKKKKKLAMLLLMLLLLLLLLLLLLMMLMMLKMKLLLLLLLLLLLLKMLLLMMMMMMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLNNDENNNMMMMMMMMMDLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLMMLLLLLLMLLLLLLL","n":["BadBlock","Continue","FailedToBroadcast","FailedToMessageLeader","H_256","H_512","HotShotError","HotShotInitializer","HotShotSequencingConsensusApi","HotShotType","HotShotValidatingConsensusApi","InconsistentBlock","InsufficientValidSignatures","InvalidState","LeafNotFound","Misc","NetworkFault","StorageError","SystemContext","SystemContextInner","TimeoutError","ViewTimeoutError","_DERIVE_core_fmt_Debug_FOR_HotShotSequencingConsensusApi","__clone_box","__clone_box","__clone_box","_metrics","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","certificate","channel_maps","clone","clone","clone","clone_into","clone_into","clone_into","config","consensus","consensus","consensus","create_or_obtain_chan_from_read","create_or_obtain_chan_from_write","demos","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","documentation","drop","drop","drop","drop","drop","drop","event_sender","exchanges","fmt","fmt","fmt","from","from","from","from","from","from","from_genesis","from_reload","get_consensus","get_decided_leaf","get_next_view_timeout","get_state","header","id","in_current_span","init","init","init","init","init","init","init","inner","inner","inner","inner","internal_event_stream","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","max_transactions","max_transactions","min_transactions","min_transactions","new","output_event_stream","private_key","private_key","private_key","propose_max_round_time","propose_max_round_time","propose_min_round_time","propose_min_round_time","provide","public_key","public_key","public_key","publish_transaction_async","rand","recv_network_lookup","run_tasks","run_tasks","send_broadcast_message","send_broadcast_message","send_da_broadcast","send_direct_da_message","send_direct_message","send_direct_message","send_event","send_event","send_transaction","should_start_round","should_start_round","source","start_consensus","storage","store_leaf","store_leaf","tasks","timeout_view","to_owned","to_owned","to_owned","to_string","total_nodes","total_nodes","traits","transactions","transactions","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","types","vzip","vzip","vzip","vzip","vzip","vzip","context","context","num_valid_signatures","source","source","source","source","source","state","threshold","view_number","QuorumCertificate","__clone_box","as_any","as_any_mut","block_commitment","borrow","borrow_mut","clone","clone_into","commit","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fill","fmt","fmt","from","from_signatures_and_commitment","genesis","get_hash","hash","header","init","into","into_any","into_any_arc","into_any_rc","is_genesis","is_genesis","leaf_commitment","leaf_commitment","serialize","set_leaf_commitment","signatures","signatures","tag","to_owned","to_string","try_from","try_into","try_resolve","type_id","view_number","view_number","vzip","sdemo","vdemo","Genesis","GenesisAfterStart","GenesisAfterStartSnafu","GenesisCantHaveTransactions","GenesisCantHaveTransactionsSnafu","GenesisFailed","GenesisFailedSnafu","InvalidBlock","InvalidBlockSnafu","Normal","PreviousStateMismatch","PreviousStateMismatchSnafu","ReusedTxn","ReusedTxnSnafu","SDemoBlock","SDemoError","SDemoGenesisBlock","SDemoNode","SDemoNormalBlock","SDemoState","SDemoTransaction","SDemoTypes","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add_transaction_raw","append","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","block_commitment","block_commitment","block_commitment","block_height","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit","commit","commit","compare","contained_transactions","create_random_transaction","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fail","fail","fail","fail","fail","fail","fill","fill","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","genesis","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","header","header","id","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","into_error","into_error","into_error","into_error","into_error","new","new","new","next_block","on_commit","padding","partial_cmp","prev_state_commitment","previous_state","provide","random_quorum_certificate","random_sequencing_leaf","serialize","serialize","serialize","serialize","serialize","serialize","source","tag","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_resolve","try_resolve","try_resolve","txn_count","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_block","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Dummy","GlobalEvent","Shutdown","__clone_box","add_consensus_task","add_da_task","add_network_event_task","add_network_message_task","add_view_sync_task","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","init","into","into_any","into_any_arc","into_any_rc","network_lookup_task","to_owned","try_from","try_into","type_id","vzip","Block","BlockType","CentralizedServer","ChannelSend","CommitteeElectionConfig","ConsensusMessage","CouldNotDeliver","Error","Error","Exchanges","FailedToDeserialize","FailedToSerialize","Leaf","Libp2p","MemoryNetwork","NetworkError","NetworkReliability","NoSuchNode","NodeImplementation","ShutDown","State","Storage","Storage","StorageResult","TestableNodeImplementation","Time","Timeout","Transaction","UnableToCancel","UnimplementedFeature","WebServer","add_transaction_raw","append","append","append_single_view","as_any","as_any_mut","as_error_source","backtrace","block_genesis","borrow","borrow_mut","cause","cleanup_storage_up_to_view","commit","committee_election_config_generator","construct_tmp_storage","contained_transactions","deref","deref_mut","description","drop","dummy","election","fmt","fmt","from","from","get_anchored_view","get_full_state","header","implementations","in_current_span","init","into","into_any","into_any_arc","into_any_rc","leaf_create_random_transaction","networking","new","new_channel_maps","next_block","node_implementation","on_commit","provide","sample_delay","sample_keep","source","state_create_random_transaction","storage","to_string","try_from","try_into","txn_count","type_id","validate_block","vzip","source","source","source","source","source","source","source","DummyState","__clone_box","append","as_any","as_any_mut","block_commitment","borrow","borrow_mut","clone","clone_into","commit","create_random_transaction","default","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fill","fmt","from","get_hash","hash","init","into","into_any","into_any_arc","into_any_rc","next_block","nonce","on_commit","random","serialize","tag","to_owned","try_from","try_into","try_resolve","type_id","validate_block","vzip","static_committee","GeneralStaticCommittee","StaticCommittee","StaticElectionConfig","StaticVoteToken","__clone_box","__clone_box","__clone_box","_leaf_phantom","_type_phantom","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","block_commitment","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","commit","committee_nodes","committee_nodes_with_stake","create_election","default","default_election_config","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","failure_threshold","fill","fmt","fmt","fmt","from","from","from","get_committee","get_committee_qc_stake_table","get_hash","get_leader","hash","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","make_vote_token","new","nodes","nodes_with_stake","num_nodes","pub_key","serialize","serialize","signature","success_threshold","tag","to_owned","to_owned","to_owned","total_nodes","try_from","try_from","try_from","try_into","try_into","try_into","try_resolve","type_id","type_id","type_id","validate_vote_token","vote_count","vzip","vzip","vzip","CombinedNetworks","DummyReliability","Libp2pCommChannel","Libp2pNetwork","MasterMap","MemoryCommChannel","MemoryNetwork","MemoryStorage","PeerInfoVec","WebCommChannel","WebServerNetwork","WebServerWithFallbackCommChannel","id","inner","inner","inner","inner","map","networks","server_shutdown_signal","CentralizedServer","ChannelSend","ChannelSendSnafu","CouldNotDeliver","CouldNotDeliverSnafu","FailedToDeserialize","FailedToDeserializeSnafu","FailedToSerialize","FailedToSerializeSnafu","Libp2p","MemoryNetwork","NetworkError","NetworkReliability","NetworkingMetrics","NoSuchNode","NoSuchNodeSnafu","ShutDown","ShutDownSnafu","Timeout","UnableToCancel","UnimplementedFeature","WebServer","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","connected_peers","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","incoming_message_count","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","into_error","into_error","into_error","into_error","into_error","libp2p_network","memory_network","message_failed_to_send","new","outgoing_message_count","sample_delay","sample_keep","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","web_server_libp2p_fallback","web_server_network","source","source","source","source","source","source","source","Empty","Empty","Libp2pCommChannel","Libp2pNetwork","Libp2pNetworkInner","PeerInfoVec","QC_TOPIC","__clone_box","__clone_box","_add_known_peers","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","bootstrap_addrs","bootstrap_addrs_len","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","broadcast_message","broadcast_recv","broadcast_send","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dht_timeout","direct_message","direct_message","direct_recv","direct_send","drop","drop","drop","drop","fmt","fmt","from","from","from","from","generate_network","generator","generator","handle","in_flight_message_count","in_flight_message_count","init","init","init","init","inject_consensus_info","inject_consensus_info","inner","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_bootstrapped","is_ready","is_ready","is_ready","lookup_node","lookup_node","metrics","new","new","pk","pubkey_pid_map","recv_msgs","recv_msgs","serialize","shut_down","shut_down","spawn_connect","spawn_event_generator","to_owned","to_owned","topic_map","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","wait_for_ready","wait_for_ready","wait_for_ready","Broadcast","Combo","Direct","DummyReliability","MasterMap","MemoryCommChannel","MemoryNetwork","MemoryNetworkInner","_DERIVE_core_fmt_Debug_FOR_MasterMap","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_input","broadcast_input","broadcast_message","broadcast_message","broadcast_output","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","direct_input","direct_input","direct_message","direct_message","direct_output","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","generate_network","generator","generator","id","in_flight_message_count","in_flight_message_count","in_flight_message_count","init","init","init","init","init","init","inject_consensus_info","inject_consensus_info","inner","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_ready","is_ready","lookup_node","lookup_node","map","master_map","metrics","new","new","new","recv_msgs","recv_msgs","sample_delay","sample_keep","shut_down","shut_down","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_ready","wait_for_ready","CombinedNetworks","WebServerWithFallbackCommChannel","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","broadcast_message","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","direct_message","drop","drop","fallback","fmt","fmt","from","from","generate_network","generator","generator","in_flight_message_count","in_flight_message_count","init","init","inject_consensus_info","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_ready","lookup_node","network","networks","new","recv_msgs","shut_down","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wait_for_ready","Inner","RecvMsg","RecvMsgTrait","SendMsg","SendMsgTrait","WebCommChannel","WebServerNetwork","__clone_box","__clone_box","__clone_box","__clone_box","_own_key","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","broadcast_message","broadcast_poll_queue","client","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","connected","create","dac_task_map","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","direct_message","direct_message","direct_poll_queue","drop","drop","drop","drop","drop","endpoint","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","generate_network","generator","generator","get_endpoint","get_endpoint","get_message","get_message","get_message","get_message","get_message_from_web_server","get_txs_from_web_server","in_flight_message_count","in_flight_message_count","init","init","init","init","init","inject_consensus_info","inject_consensus_info","inner","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_da","is_ready","is_ready","lookup_node","lookup_node","message","message","new","parse_post_message","phantom","poll_web_server","post_message_to_web_server","proposal_task_map","recv_msgs","recv_msgs","running","serialize","serialize","server_shutdown_signal","shut_down","shut_down","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tx_index","txn_task_map","type_id","type_id","type_id","type_id","type_id","view_sync_cert_task_map","view_sync_vote_task_map","vote_task_map","vzip","vzip","vzip","vzip","vzip","wait_between_polls","wait_for_ready","wait_for_ready","CommitteeElectionConfig","ConsensusMessage","Exchanges","Leaf","NodeImplementation","Storage","TestableNodeImplementation","block_genesis","committee_election_config_generator","construct_tmp_storage","get_full_state","leaf_create_random_transaction","new_channel_maps","state_create_random_transaction","txn_count","Result","Storage","append","append_single_view","cleanup_storage_up_to_view","commit","get_anchored_view","memory_storage","MemoryStorage","MemoryStorageInternal","__clone_box","append","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","cleanup_storage_up_to_view","clone","clone_into","commit","construct_tmp_storage","deref","deref","deref_mut","deref_mut","drop","drop","empty","failed","from","from","get_anchored_view","get_full_state","init","init","inner","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","stored","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Decide","Error","Event","EventType","Message","NextLeaderViewTimeout","PrivateKey","QCParams","QCType","ReplicaViewTimeout","SignatureKey","StakeTableEntry","SystemContextHandle","ViewFinished","VoteType","__clone_box","__clone_box","__clone_box","_phantom","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","assemble","bn254","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone_into","clone_into","clone_into","current_view","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","eq","event","event","fmt","fmt","fmt","from","from","from","from_bytes","from_private","generated_from_seed_indexed","get_public_parameter","get_sig_proof","get_stake_table_entry","get_view_number","handle","hotshot","init","init","init","internal_event_stream","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","kind","output_event_stream","purpose","registry","sender","serialize","sign","storage","to_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","view_number","vzip","vzip","vzip","block_size","error","leaf_chain","qc","view_number","view_number","view_number","BN254Priv","BN254Pub","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","assemble","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone","clone_into","clone_into","cmp","cmp","compare","compare","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_bytes","from_private","generate","generate_from_seed","generated_from_seed_indexed","generated_from_seed_indexed","get_hash","get_public_parameter","get_seed_from_seed_indexed","get_sig_proof","get_stake_table_entry","hash","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","partial_cmp","partial_cmp","priv_key","pub_key","serialize","serialize","sign","to_bytes","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","validate","vzip","vzip","Decide","Error","Event","EventType","NextLeaderViewTimeout","ReplicaViewTimeout","ViewFinished","event","view_number","block_size","error","leaf_chain","qc","view_number","view_number","view_number","SystemContextHandle","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","create_yes_message","deref","deref_mut","drop","from","get_consensus","get_current_view","get_decided_leaf","get_event_stream","get_event_stream_known_impl","get_internal_event_stream_known_impl","get_leader","get_next_leader_receiver_channel_len","get_next_view_timeout","get_public_key","get_replica_receiver_channel_len","get_state","hotshot","init","internal_event_stream","into","into_any","into_any_arc","into_any_rc","maybe_do_genesis_init","output_event_stream","registry","send_broadcast_consensus_message","send_direct_consensus_message","shut_down","sign_validating_or_commitment_proposal","start_consensus_deprecated","storage","storage","submit_transaction","to_owned","try_from","try_into","type_id","vzip","wait_for_networks_ready"],"q":[[0,"hotshot"],[220,"hotshot::HotShotError"],[231,"hotshot::certificate"],[282,"hotshot::demos"],[284,"hotshot::demos::sdemo"],[738,"hotshot::tasks"],[769,"hotshot::traits"],[857,"hotshot::traits::NetworkError"],[864,"hotshot::traits::dummy"],[909,"hotshot::traits::election"],[910,"hotshot::traits::election::static_committee"],[1023,"hotshot::traits::implementations"],[1043,"hotshot::traits::networking"],[1239,"hotshot::traits::networking::NetworkError"],[1246,"hotshot::traits::networking::libp2p_network"],[1374,"hotshot::traits::networking::memory_network"],[1539,"hotshot::traits::networking::web_server_libp2p_fallback"],[1602,"hotshot::traits::networking::web_server_network"],[1776,"hotshot::traits::node_implementation"],[1791,"hotshot::traits::storage"],[1799,"hotshot::traits::storage::memory_storage"],[1849,"hotshot::types"],[1960,"hotshot::types::EventType"],[1967,"hotshot::types::bn254"],[2052,"hotshot::types::event"],[2061,"hotshot::types::event::EventType"],[2068,"hotshot::types::handle"]],"d":["A block failed verification","Internal value used to drive the state machine","Failed to broadcast a message on the network","Failed to Message the leader in the given stage","Length, in bytes, of a 256 bit hash","Length, in bytes, of a 512 bit hash","Reexport error type Error type for <code>HotShot</code>","initializer struct for creating starting block","A handle that exposes the interface that hotstuff needs to …","[<code>HotShot</code>] implementations that depend on […","A handle that exposes the interface that hotstuff needs to …","A block was not consistent with the existing state","Not enough valid signatures for a quorum","Invalid state machine state","Item was not present in storage","Miscelaneous error TODO fix this with #181 …","Failure in networking layer","Error accesing storage","Thread safe, shared view of a <code>HotShot</code>","Holds the state needed to participate in <code>HotShot</code> consensus","HotShot timed out waiting for msgs","HotShot timed out during round","","","","","a reference to the metrics that the implementor is using.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Data availability support Contains structures and …","Channels for sending/recv-ing proposals and votes for …","","","","","","","Configuration items for this hotshot instance","Get the [<code>hotstuff</code>] field of [<code>HotShot</code>].","","The hotstuff implementation","given a view number and a upgradable read lock on a …","given a view number and a write lock on a channel map, …","Contains implementations of the <code>HotShot</code> traits used in the …","","","","","","","","","","","","","","HotShot: A linear time, committee electing, BFT Protocol.","","","","","","","Sender for <code>Event</code>s","This <code>HotShot</code> instance’s way to interact with the nodes …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","initialize from genesis","reload previous state based on most recent leaf","Returns a copy of the consensus struct","Returns a copy of the last decided leaf","return the timeout for a view for <code>self</code>","Returns a copy of the state","","uid for instrumentation","","","","","","Initializes a new hotshot and does the work of setting up …","","","the leaf specified initialization","Handle to internal hotshot implementation","Reference to the <code>SystemContextInner</code>","Reference to the <code>SystemContextInner</code>","access to the internal event stream, in case we need to, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Creates a new hotshot with the given configuration options …","Access to the output event stream.","","","The private key of this node","","","","","","","","The public key of this node","Publishes a transaction asynchronously to the network","Reexport rand crate","for receiving messages in the network lookup task","Spawn all tasks that operate on the given [<code>HotShot</code>].","","Send a broadcast message.","","","","Send a direct message to a given recipient.","","","","","Generates and encodes a vote token","Generates and encodes a vote token","","“Starts” consensus by sending a <code>ViewChange</code> event","Networking interface for this hotshot instance This <code>HotShot</code>…","","","Provides a number of tasks that run continuously on a […","Marks a given view number as timed out. This should be …","","","","","","","Contains traits consumed by [<code>HotShot</code>]","Get the [<code>transactions</code>] field of [<code>HotShot</code>].","","Transactions (this is shared btwn hotshot and <code>Consensus</code>)","","","","","","","","","","","","","","","","","","","Contains types used by the crate","","","","","","","source of error","Context","Number of valid signatures","Underlying error","source of error","The underlying network fault","The underlying network fault","Underlying network fault","The state that the round was in when it timed out","Threshold of signatures needed for a quorum","view number","The type used for Quorum Certificates","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","If this QC is for the genesis block","","commitment to previous leaf","","","","assembled signature for certificate aggregation","","","","","","","","","Which view this QC relates to","","this is a demo for sequencing consensus Sequencing …","this is a demo for validating consensus","genesis block","Genesis reencountered after initialization","SNAFU context selector for the …","no transasctions added to genesis","SNAFU context selector for the …","Genesis failure","SNAFU context selector for the <code>SDemoError::GenesisFailed</code> …","invalid block","SNAFU context selector for the <code>SDemoError::InvalidBlock</code> …","normal block","Previous state commitment does not match","SNAFU context selector for the …","Nonce was reused","SNAFU context selector for the <code>SDemoError::ReusedTxn</code> …","The block for the sequencing demo","The error type for the sequencing demo","genesis block","The node implementation for the sequencing demo","Any block after genesis","sequencing demo entry state","The transaction for the sequencing demo","Implementation of <code>NodeType</code> for [<code>VDemoNode</code>]","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the block height","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","identifier for the transaction","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create a new transaction","","Create a new <code>SDemoNode</code>","","","padding to add to txn (to make it larger and thereby more …","","the previous state commitment","Block state commitment","","Provides a random <code>QuorumCertificate</code>","Provides a random <code>SequencingLeaf</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Transaction vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the view number","","","","","","","","","","","","","","","dummy (TODO delete later)","event for global event stream","shut everything down","","add the consensus task","add the Data Availability task","Add the network task to handle events and send messages.","Add the network task to handle messages and publish events.","add the view sync task","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Task to look up a node in the future as needed","","","","","","Abstraction over the full contents of a block","The type of block this state is associated with","Centralized server specific errors","Error sending output to consumer of …","Election config for the DA committee","Consensus message type.","Could not deliver a message to a specified recipient","The error type for this type of block","The error type for this particular type of ledger state","Consensus type selected exchanges.","Failed to deserealize a network message","Failed to serialize a network message","Leaf type for this consensus implementation","Libp2p specific errors","memory network specific errors","Error type for networking","interface describing how reliable the network is","Attempted to deliver a message to an unknown node","Node implementation aggregate trait","The underlying connection has been shut down","Abstraction over the state that blocks modify","Abstraction over on disk persistence of node state","Storage type for this consensus implementation","Result for a storage type","extra functions required on a node implementation to be …","Time compatibility needed for reward collection","A timeout occurred","The type of the transitions we are applying","unable to cancel a request, the request has already been …","unimplemented functionality","Web server specific errors","Attempts to add a transaction, returning an Error if it …","Appends the given block to this state, returning an new …","Append the list of views to this storage","Insert a single view. Shorthand for","","","","","generate a genesis block","","","","Cleans up the storage up to the given view. The given view …","Commit this storage.","Generates a committee-specific election","Create ephemeral storage Will be deleted/lost immediately …","returns hashes of all the transactions in this block TODO …","","","","","Dummy testing implementations","Sortition trait elections used for consensus","","","","Returns the argument unchanged.","Get the latest anchored view","Return the full internal state. This is useful for …","","Module for publicly usable implementations of the traits","","","Calls <code>U::from(self)</code>.","","","","Creates random transaction if possible otherwise panics …","Network access compatibility","Construct an empty or genesis block.","Create channels for sending/recv-ing proposals and votes …","Returns an empty, template next block given this current …","Composite trait for node behavior","Gets called to notify the persistence backend that this …","","sample from uniform distribution to decide whether or not …","Sample from bernoulli distribution to decide whether or …","","Creates random transaction if possible otherwise panics …","Abstraction over on-disk storage of node state","","","","the number of transactions in a block","","Returns true if and only if the provided block is valid …","","source of error","source of error","source of error","source of error","Originating bincode error","originating bincode error","Source of error","The dummy state","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","Generate a random <code>DummyState</code>","","","","","","","","","","static (round robin) committee election","Dummy implementation of <code>Membership</code>","static committee using a vrf kp","configuration for static committee. stub for now","Vote token for a static committee","","","","Leaf phantom","Node type phantom","","","","","","","","","","","","","","","","","","","","","The nodes on the static committee","The nodes on the static committee and their stake","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Clone the public key and corresponding stake table for …","","Index the vector of public keys with the current view …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Simply make the partial signature","Creates a new dummy elector","All the nodes participating","All the nodes participating and their stake","Number of nodes on the committee","public key","","","signature","","","","","","","","","","","","","","","","","","","","","","Wrapper for the tuple of <code>WebServerNetwork</code> and <code>Libp2pNetwork</code>","dummy implementation of network reliability","libp2p identity communication channel","Networking implementation that uses libp2p generic over <code>M</code> …","Shared state for in-memory mock networking.","memory identity communication channel","In memory only network simulator.","In memory, ephemeral, storage for a <code>HotShot</code> instance","Type alias for a shared collection of peerid, multiaddrs","Represents the communication channel abstraction for the …","The web server network state","A communication channel with 2 networks, where we can fall …","The id of this <code>MemoryNetwork</code> cluster","holds the state of the libp2p network","The actual internal state","The inner, core state of the web server network","The inner state of this <code>MemoryStorage</code>","The list of <code>MemoryNetwork</code>s","The two networks we’ll use for send/recv","An optional shutdown signal. This is only used when this …","Centralized server specific errors","Error sending output to consumer of …","SNAFU context selector for the <code>NetworkError::ChannelSend</code> …","Could not deliver a message to a specified recipient","SNAFU context selector for the …","Failed to deserealize a network message","SNAFU context selector for the …","Failed to serialize a network message","SNAFU context selector for the …","Libp2p specific errors","memory network specific errors","Error type for networking","interface describing how reliable the network is","Contains the metrics that we’re interested in from the …","Attempted to deliver a message to an unknown node","SNAFU context selector for the <code>NetworkError::NoSuchNode</code> …","The underlying connection has been shut down","SNAFU context selector for the <code>NetworkError::ShutDown</code> …","A timeout occurred","unable to cancel a request, the request has already been …","unimplemented functionality","Web server specific errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","A <code>Gauge</code> which tracks how many peers are connected","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A <code>Counter</code> which tracks how many messages have been received","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Libp2p based/production networking implementation This …","In memory network simulator","A <code>Counter</code> which tracks how many messages failed to send","Create a new instance of this <code>NetworkingMetrics</code> struct, …","A <code>Counter</code> which tracks how many messages have been send","sample from uniform distribution to decide whether or not …","Sample from bernoulli distribution to decide whether or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Networking Implementation that has a primary and a …","A network implementation that connects to a web server.","source of error","source of error","source of error","source of error","Originating bincode error","originating bincode error","Source of error","Stubbed out Ack","Empty value","libp2p identity communication channel","Networking implementation that uses libp2p generic over <code>M</code> …","The underlying state of the libp2p network","Type alias for a shared collection of peerid, multiaddrs","hardcoded topic of QC used","","","make network aware of known peers","","","","","","","","","this is really cheating to enable local tests hashset of …","bootstrap","","","","","","","","","","","map of known replica peer ids to public keys","Sender for broadcast messages","","","","","","","","","","","","","max time before dropping message due to DHT error","","","Receiver for direct messages","Sender for direct messages (only used for sending messages …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a boxed function …","Returns a boxed function …","handle to control the network","","","","","","","","","holds the state of the libp2p network","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","whether or not we’ve bootstrapped into the DHT yet","","","whether or not the network is ready to send","","","The networking metrics we’re keeping track of","Constructs new network for a node. Note that this network …","create a new libp2p communication channel","this node’s public key","Bidirectional map from public key provided by espresso to …","","","","","","Initiates connection to the outside world","task to propagate messages to handlers terminates on shut …","","","topic map hash(hashset) -&gt; topic btreemap ordered so is …","","","","","","","","","","","","","","","","","","Returns when network is ready","","Broadcast message","Internal enum for combining streams","Direct message","dummy implementation of network reliability","Shared state for in-memory mock networking.","memory identity communication channel","In memory only network simulator.","Internal state for a <code>MemoryNetwork</code> instance","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Send a <code>Vec&lt;u8&gt;</code> message to the inner <code>broadcast_input</code>","Input for broadcast messages","","","Output for broadcast messages","","","","","","","","","","","","","","","","","","","Send a <code>Vec&lt;u8&gt;</code> message to the inner <code>direct_input</code>","Input for direct messages","","","Output for direct messages","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","The id of this <code>MemoryNetwork</code> cluster","","","Count of messages that are in-flight (send but not …","","","","","","","","","The actual internal state","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","The list of <code>MemoryNetwork</code>s","The master map","The networking metrics we’re keeping track of","Create a new, empty, <code>MasterMap</code>","Creates a new <code>MemoryNetwork</code> and hooks it up to the group …","create new communication channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper for the tuple of <code>WebServerNetwork</code> and <code>Libp2pNetwork</code>","A communication channel with 2 networks, where we can fall …","","","","","","","","","","","","","","","","","","","","","","","Get a ref to the backup network","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Get the number of messages in-flight.","Get the number of messages in-flight.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Get a ref to the primary network","The two networks we’ll use for send/recv","Constructor","","","","","","","","","","","","","","Represents the core of web server networking","A message being received from the web server","Trait for messages being received from the web server","A message being sent to the web server","Trait for messages being sent to the web server","Represents the communication channel abstraction for the …","The web server network state","","","","","Our own key","","","","","","","","","","","","","","","","","","","","","broadcast message to those listening on the communication …","broadcast message to some subset of nodes blocking","Queue for broadcasted messages","The connectioni to the web server","","","","","","","","","The web server connection is ready","Creates a new instance of the <code>WebServerNetwork</code>","Task map for DACs.","","","","","","","","","","","","","Sends a direct message to a specific node blocking","Sends a direct message to a specific node blocking","Queue for direct messages","","","","","","The endpoint to send the message to","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the endpoint to send the message to","","Returns the actual message being sent","Returns the actual message being received","","","Sends a GET request to the webserver for some specified …","Fetches transactions from web server","","","","","","","","","","The inner, core state of the web server network","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Whether we are connecting to a DA server","checks if the network is ready nonblocking","checks if the network is ready nonblocking","look up a node blocking","look up a node blocking","The optional message, or body, to send","The optional message being received","Create new communication channel","Parses a message to find the appropriate endpoint Returns …","Phantom data for generic types","Pull a web server.","Post a message to the web server and return the result","Task map for quorum proposals.","Moves out the entire queue of received messages of ’…","Moves out the entire queue of received messages of ’…","Client is running","","","An optional shutdown signal. This is only used when this …","Shut down this network. Afterwards this network should no …","Blocks until the network is shut down then returns true","","","","","","","","","","","","","","","The last tx_index we saw from the web server","Task map for transactions","","","","","","Task map for view sync certificates.","Task map for view sync votes.","Task map for quorum votes.","","","","","","The duration to wait between poll attempts","Blocks until node is successfully initialized into the …","Blocks until the network is successfully initialized","Election config for the DA committee","Consensus message type.","Consensus type selected exchanges.","Leaf type for this consensus implementation","Node implementation aggregate trait","Storage type for this consensus implementation","extra functions required on a node implementation to be …","generate a genesis block","Generates a committee-specific election","Create ephemeral storage Will be deleted/lost immediately …","Return the full internal state. This is useful for …","Creates random transaction if possible otherwise panics …","Create channels for sending/recv-ing proposals and votes …","Creates random transaction if possible otherwise panics …","the number of transactions in a block","Result for a storage type","Abstraction over on disk persistence of node state","Append the list of views to this storage","Insert a single view. Shorthand for","Cleans up the storage up to the given view. The given view …","Commit this storage.","Get the latest anchored view","<code>HashMap</code> and <code>Vec</code> based implementation of the storage trait","In memory, ephemeral, storage for a <code>HotShot</code> instance","Internal state for a <code>MemoryStorage</code>","","","","","","","","","","","","","","","","","","","","","","Create a new instance of the memory storage with the given …","The views that have failed","Returns the argument unchanged.","Returns the argument unchanged.","","","","","The inner state of this <code>MemoryStorage</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The views that have been stored","","","","","","","","","","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","Incoming message","A next leader task was canceled by a timeout interrupt","The private key type for this signature algorithm","The type of the quorum certificate parameters used for …","The type of the assembled qc: assembled signature + <code>BitVec</code>","A replica task was canceled by a timeout interrupt","Trait for abstracting public key signatures","The type of the entry that contain both public key and …","Event streaming handle for a <code>SystemContext</code> instance …","The view has finished.  If values were decided on, a <code>Decide</code>…","The vote sent by consensus messages.","","","","Phantom data.","","","","","","","assemble the signature from the partial signature and the …","Demonstration implementation of the <code>SignatureKey</code> trait …","","","","","","","check the quorum certificate for the assembled signature","","","","","","","The view this vote was cast for.","","","","","","","","","","","","Events that a <code>HotShot</code> instance can emit","The underlying event","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a public key from bytes","Produce a public key from a private key","Generate a new key pair","get the public parameter for the assembled signature …","get the assembled signature and the <code>BitVec</code> separately from …","get the stake table entry from the public key and stake …","get the view number out of a message","Provides an event-streaming handle for a [<code>HotShot</code>] running …","Internal reference to the underlying [<code>HotShot</code>]","","","","access to the internal ev ent stream, in case we need to, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","The message kind","The sender for the output stream from the background …","","registry for controlling tasks","The sender of this message","","Produce a signature","Our copy of the <code>Storage</code> view for a hotshot","Serialize a public key to bytes","","","","","","","","","","","","","Validate a signature","The view number that this event originates from","","","","Optional information of the number of transactions in the …","The underlying error","The chain of Leafs that were committed by this decision","The QC signing the most recent leaf in <code>leaf_chain</code>.","The view that timed out","The view that timed out","The view number that has just finished","Private key type for a bn254 keypair","Public key type for an bn254 <code>SignatureKey</code> pair","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a new private key from scratch","Generate a new private key from a seed","Generate a new private key from a seed and a number","","","","Get real seed used for random key generation funtion","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","A next leader task was canceled by a timeout interrupt","A replica task was canceled by a timeout interrupt","The view has finished.  If values were decided on, a <code>Decide</code>…","The underlying event","The view number that this event originates from","Optional information of the number of transactions in the …","The underlying error","The chain of Leafs that were committed by this decision","The QC signing the most recent leaf in <code>leaf_chain</code>.","The view that timed out","The view that timed out","The view number that has just finished","Event streaming handle for a <code>SystemContext</code> instance …","","","","","","","","create a yes message","","","","Returns the argument unchanged.","Get the underyling consensus state for this <code>SystemContext</code>","Wrapper to get this node’s current view","Gets most recent decided leaf","Will pull all the currently available events out of the …","HACK so we can know the types when running tests… there …","HACK so we can know the types when running tests… there …","Wrapper for <code>HotShotConsensusApi</code>’s <code>get_leader</code> function","Get length of the next leaders’s receiver channel","return the timeout for a view of the underlying …","Wrapper to get this node’s public key","Get length of the replica’s receiver channel","Gets the current committed state of the [<code>HotShot</code>] instance","Internal reference to the underlying [<code>HotShot</code>]","","access to the internal ev ent stream, in case we need to, …","Calls <code>U::from(self)</code>.","","","","performs the genesis initializaiton","The sender for the output stream from the background …","registry for controlling tasks","Wrapper around <code>HotShotConsensusApi</code>’s …","Wrapper around <code>HotShotConsensusApi</code>’s …","Shut down the the inner hotshot and wait until all …","Wrapper around <code>HotShotConsensusApi</code>’s …","begin consensus by sending a genesis event Use …","iterate through all events on a <code>NodeImplementation</code> and …","Our copy of the <code>Storage</code> view for a hotshot","Submits a transaction to the backing [<code>HotShot</code>] instance.","","","","","","Block the underlying quorum (and committee) networking …"],"i":[5,5,5,5,0,0,0,0,0,0,0,5,5,5,5,5,5,5,0,0,5,5,0,10,11,12,164,164,28,5,10,11,12,164,28,5,10,11,12,5,5,164,28,5,10,11,12,164,28,5,10,11,12,5,0,164,10,11,12,10,11,12,164,165,10,164,10,10,0,164,28,5,10,11,12,164,28,5,10,11,12,5,0,164,28,5,10,11,12,164,164,5,5,12,164,28,5,10,11,12,28,28,10,10,10,10,5,164,5,164,28,5,10,10,11,12,28,10,11,12,164,164,28,5,10,11,12,164,28,5,10,11,12,164,28,5,10,11,12,164,28,5,10,11,12,11,12,11,12,10,164,11,12,164,11,12,11,12,5,11,12,164,10,0,164,165,10,10,12,12,12,10,12,11,12,12,11,12,5,10,164,11,12,0,10,10,11,12,5,11,12,0,165,10,164,164,28,5,10,11,12,164,28,5,10,11,12,164,28,5,10,11,12,0,164,28,5,10,11,12,166,167,168,169,170,171,172,173,174,168,174,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,67,69,0,69,0,69,0,69,0,67,69,0,69,0,0,0,0,0,0,0,0,0,76,77,78,67,68,70,71,72,73,74,75,79,81,67,68,76,77,78,67,68,69,70,71,72,73,74,75,79,81,76,77,78,67,68,69,70,71,72,73,74,75,79,81,69,69,76,67,68,68,76,77,78,67,68,69,70,71,72,73,74,75,79,81,76,77,78,67,68,69,70,71,72,73,74,75,79,81,70,71,72,73,74,75,69,76,77,78,67,68,70,71,72,73,74,75,79,81,76,77,78,67,68,70,71,72,73,74,75,79,81,79,76,67,68,79,67,68,68,79,81,76,76,77,78,67,68,69,70,71,72,73,74,75,79,81,76,77,78,67,68,69,70,71,72,73,74,75,79,81,69,76,77,78,67,68,79,76,77,78,67,68,69,70,71,72,73,74,75,79,81,76,77,78,67,68,79,76,76,76,76,77,77,77,77,78,78,78,78,67,67,67,67,68,68,68,68,79,79,79,79,70,71,72,73,74,75,76,67,68,76,77,78,67,67,68,69,69,70,71,72,73,74,75,79,81,76,77,78,67,68,69,70,71,72,73,74,75,79,81,67,76,77,78,67,68,79,76,77,78,67,68,79,67,69,76,69,76,77,78,67,68,69,70,71,72,73,74,75,79,81,76,77,78,67,68,69,70,71,72,73,74,75,79,81,76,77,78,67,68,69,70,71,72,73,74,75,79,81,76,77,78,67,68,69,70,71,72,73,74,75,79,81,76,77,78,67,68,69,70,71,72,73,74,75,79,81,70,71,72,73,74,75,76,67,81,68,68,76,79,68,78,69,0,0,76,77,78,67,68,79,69,76,67,68,76,77,78,67,68,70,71,72,73,74,75,79,81,67,69,78,76,77,78,67,68,69,70,71,72,73,74,75,79,81,76,77,78,67,68,69,70,71,72,73,74,75,79,81,76,67,68,67,76,77,78,67,68,69,70,71,72,73,74,75,79,81,68,68,76,77,78,67,68,69,70,71,72,73,74,75,79,81,95,0,95,95,0,0,0,0,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,95,95,95,95,95,0,175,46,46,176,9,46,177,175,9,46,46,9,46,46,0,0,46,0,46,0,0,9,0,0,175,46,177,46,46,46,177,175,178,178,46,46,46,46,176,46,46,46,178,178,176,176,177,46,46,46,46,0,0,46,46,46,46,178,176,46,0,46,46,46,46,46,46,176,0,177,9,175,0,175,46,137,137,46,176,0,46,46,46,176,46,175,46,179,180,181,182,183,184,185,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,0,0,0,0,107,108,109,107,107,107,108,109,107,108,109,108,107,108,109,107,108,109,107,108,109,107,108,109,108,107,107,107,109,107,107,108,109,107,108,109,108,109,107,108,109,107,108,107,107,107,107,108,108,108,108,107,108,107,108,109,107,108,109,107,107,108,107,108,107,108,109,107,108,109,107,108,109,107,108,109,107,108,109,107,107,107,107,109,108,108,109,108,107,108,107,108,109,107,107,108,109,107,108,109,108,107,108,109,107,108,107,108,109,0,0,0,0,0,0,0,0,0,0,0,0,136,122,131,140,150,136,138,140,46,46,0,46,0,46,0,46,0,46,46,0,0,0,46,0,46,0,46,46,46,46,114,115,118,119,116,117,120,114,115,118,119,116,117,120,114,115,118,119,116,117,120,114,115,118,119,116,117,120,114,115,118,119,116,117,114,115,116,117,114,115,118,119,116,117,114,115,118,119,116,117,120,120,114,115,118,119,116,117,120,114,115,118,119,116,117,120,114,115,118,119,116,117,114,115,116,117,114,115,118,119,116,117,120,114,115,118,119,116,117,120,120,114,115,118,119,116,117,120,114,115,118,119,116,117,120,114,115,118,119,116,117,120,114,115,118,119,116,117,120,114,115,118,119,116,117,114,115,118,119,116,117,0,0,120,120,120,137,137,114,115,118,119,116,117,120,114,115,118,119,116,117,120,114,115,118,119,116,117,120,114,115,118,119,116,117,120,114,115,118,119,116,117,0,0,179,180,181,182,183,184,185,0,130,0,0,0,0,0,122,125,122,186,130,122,125,186,130,122,125,186,186,186,130,122,125,186,130,122,125,122,125,186,186,122,125,122,125,186,130,122,125,186,130,122,125,186,122,125,186,186,186,130,122,125,122,125,186,130,122,125,125,122,125,186,122,125,186,130,122,125,122,125,122,186,130,122,125,186,130,122,125,186,130,122,125,186,130,122,125,186,122,125,186,122,125,186,122,125,186,186,122,125,130,122,125,122,122,122,125,186,186,130,122,125,186,130,122,125,186,130,122,125,186,130,122,125,122,122,125,187,0,187,0,0,0,0,0,0,135,131,134,187,188,135,136,131,134,187,188,135,136,131,134,187,188,135,136,131,134,187,188,135,136,131,134,131,188,131,134,188,135,131,134,135,131,134,187,188,135,136,131,134,187,188,135,136,131,134,131,188,131,134,188,187,188,135,136,131,134,135,136,131,134,187,188,135,136,131,134,134,131,134,136,131,134,188,187,188,135,136,131,134,131,134,131,187,188,135,136,131,134,187,188,135,136,131,134,187,188,135,136,131,134,187,188,135,136,131,134,131,134,131,134,136,188,188,136,131,134,131,134,135,135,131,134,135,131,134,187,188,135,136,131,134,187,188,135,136,131,134,187,188,135,136,131,134,187,188,135,136,131,134,131,134,0,0,138,139,138,139,138,139,138,139,138,139,138,138,139,138,139,138,139,138,139,138,138,139,138,138,139,138,139,138,138,139,138,139,138,139,138,138,139,138,139,138,139,138,139,138,138,138,138,138,138,138,138,139,138,139,138,139,138,139,138,139,138,0,0,0,0,0,0,0,141,140,143,144,146,141,140,146,143,144,141,140,146,143,144,141,140,146,143,144,141,140,146,143,144,141,140,146,146,141,140,143,144,141,140,143,144,146,140,146,141,140,146,143,144,141,140,146,143,144,143,144,141,140,146,141,140,146,143,144,143,143,144,141,140,146,143,144,141,140,146,143,144,141,141,140,189,143,189,190,143,144,146,146,141,140,141,140,146,143,144,141,140,140,141,140,146,143,144,141,140,146,143,144,141,140,146,143,144,141,140,146,143,144,146,141,140,141,140,143,144,141,140,146,146,140,146,141,140,146,143,144,140,141,140,141,140,143,144,141,140,146,143,144,141,140,146,143,144,146,146,141,140,146,143,144,146,146,146,141,140,146,143,144,146,141,140,176,9,9,9,0,9,0,176,176,176,176,176,9,176,176,0,0,178,178,178,178,178,0,0,0,150,150,191,150,191,150,191,150,191,150,150,150,150,150,150,191,150,191,150,191,150,150,191,191,150,150,150,191,150,150,191,150,191,150,191,150,191,150,191,150,191,150,191,150,191,150,191,150,155,155,0,0,0,155,106,106,106,155,0,106,0,155,0,48,155,92,92,48,155,92,48,155,92,106,0,48,155,92,48,155,92,106,48,155,92,48,155,92,124,48,155,92,48,155,92,92,48,155,92,92,0,48,48,155,92,48,155,92,106,106,106,106,106,106,92,0,90,48,155,92,90,48,155,92,48,155,92,48,155,92,48,155,92,92,90,92,90,92,92,106,90,106,48,155,92,48,155,92,48,155,92,48,155,92,106,48,48,155,92,192,193,192,192,194,195,196,0,0,160,161,160,161,160,161,161,160,161,160,161,161,160,161,160,161,160,161,160,161,160,161,160,161,160,161,160,161,160,161,160,160,160,160,161,161,161,161,160,161,160,161,161,161,160,160,160,161,161,161,160,161,161,161,160,161,160,161,160,161,160,161,160,161,160,161,160,161,160,161,161,161,160,161,160,161,160,161,160,161,161,160,161,155,155,0,0,155,155,155,48,48,192,193,192,192,194,195,196,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[[5,[4]]],[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[4]]],[[7,[3]]]],0,0,[[[10,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]]]]],[[10,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]]]]]],[[[11,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]]]]],[[11,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]]]]]],[[[12,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]]]]],[[12,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]]]]]],[[]],[[]],[[]],0,[[],[[15,[[14,[13]]]]]],[[[10,[4,[9,[4]]]]],[[15,[[14,[[13,[4]]]]]]]],0,[[[17,[[16,[4,[9,[4]]]]]]],[[18,[4,[9,[4]]]]]],[[[19,[[16,[4,[9,[4]]]]]]],[[18,[4,[9,[4]]]]]],0,[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[[[5,[4]]],21],0,[20],[20],[20],[20],[20],[20],0,0,[[[5,[4]],22],[[24,[23]]]],[[[5,[[0,[25,4]]]],22],[[24,[23]]]],[[[12,[4,[9,[4]]]],22],26],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[24,[[28,[4,27]],[5,[4]]]]]],[27,[[28,[4,27]]]],[[[10,[4,[9,[4]]]]],[[15,[[14,[[13,[4]]]]]]]],[[[10,[4,[9,[4]]]]]],[[[10,[4,[9,[4]]]]],29],[[[10,[4,[9,[4]]]]]],[[[0,[30,31,32]]],[[33,[[0,[30,31,32]]]]]],0,[[]],[[],20],[[],20],[[],20],[[],20],[[29,34,[28,[4]],[36,[35]]],[[24,[[5,[4]]]]]],[[],20],[[],20],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[[[11,[4,[9,[4]]]]],39],[[[12,[4,[9,[4]]]]],39],[[[11,[4,[9,[4]]]]],20],[[[12,[4,[9,[4]]]]],20],[[29,34,[28,[4]],[36,[35]]],[[24,[[10,[4,[9,[4]]]],[5,[4]]]]]],0,[[[11,[4,[9,[4]]]]]],[[[12,[4,[9,[4]]]]]],0,[[[11,[4,[9,[4]]]]],40],[[[12,[4,[9,[4]]]]],40],[[[11,[4,[9,[4]]]]],40],[[[12,[4,[9,[4]]]]],40],[41],[[[11,[4,[9,[4]]]]]],[[[12,[4,[9,[4]]]]]],0,[[[10,[4,[9,[4]]]]],[[24,[[5,[4]]]]]],0,0,[[],[[43,[[36,[42]]]]]],[[[10,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],[[[10,[4,[9,[4]]]],[45,[[44,[4,[9,[4]]]]]]],[[24,[46]]]],[[[12,[4,[9,[4]]]],[47,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],[[[12,[4,[9,[4]]]],[47,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],[[[12,[4,[9,[4]]]],[47,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],[[[10,[4,[9,[4]]]],[45,[[44,[4,[9,[4]]]]]]],[[24,[46]]]],[[[12,[4,[9,[4]]]],[47,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],[[[11,[4,[9,[4]]]],[48,[4]]],[[43,[[36,[42]]]]]],[[[12,[4,[9,[4]]]],[48,[4]]],[[43,[[36,[42]]]]]],[[[12,[4,[9,[4]]]],[49,[4]]],[[43,[[36,[42]]]]]],[[[11,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],[[[12,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],[[[5,[4]]],[[7,[3]]]],[[[10,[4,[9,[4]]]]]],0,[[[11,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],[[[12,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],0,[[[10,[4,[9,[4]]]],50,[7,[50]]]],[[]],[[]],[[]],[[],51],[[[11,[4,[9,[4]]]]],39],[[[12,[4,[9,[4]]]]],39],0,[[],[[15,[[54,[[53,[52]]]]]]]],[[[10,[4,[9,[4]]]]],[[15,[[54,[[53,[52]]]]]]]],0,[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],2],[[],2],[[],52],[[]],[[]],[[[56,[[0,[8,4]],[0,[8,27]]]]],[[56,[[0,[8,4]],[0,[8,27]]]]]],[[]],[[[56,[4,27]]],[[52,[[56,[4,27]]]]]],[20],[20],[57,[[24,[[56,[4,27]]]]]],[20],[[[56,[[0,[[58,[[0,[[58,[[0,[[58,[[0,[58,4]]]],4]]]],4]]]],4]],[0,[[58,[[0,[[58,[[0,[[58,[[0,[58,27]]]],27]]]],27]]]],27]]]],[56,[[0,[[58,[[0,[[58,[[0,[[58,[[0,[58,4]]]],4]]]],4]]]],4]],[0,[[58,[[0,[[58,[[0,[[58,[[0,[58,27]]]],27]]]],27]]]],27]]]]],59],[[],59],[[],59],[[],59],[[],59],[[],24],[[[56,[4,27]],22],[[24,[23]]]],[[[56,[4,27]],22],[[24,[23]]]],[[]],[[[60,[4]],[52,[27]],[7,[29]]],[[56,[4,27]]]],[[],[[56,[4,27]]]],[[[0,[61,62]],63],29],[[[56,[[0,[61,4]],[0,[61,27]]]],64]],[[[0,[30,31,32]]],[[33,[[0,[30,31,32]]]]]],[[],20],[[]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[[[56,[4,27]]],59],0,[[[56,[4,27]]],[[52,[27]]]],0,[[[56,[[0,[4,65]],[0,[27,65]]]],66],24],[[[56,[4,27]],[52,[27]]]],[[[56,[4,27]]],[[60,[4]]]],0,[[],51],[[]],[[],51],[[],24],[[],24],[[],24],[[],55],[[[56,[4,27]]]],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[67,[[24,[67]]]],[68,[[24,[68]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[69,[[7,[6]]]],[[],52],[[],52],[[],52],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70,69],[71,69],[72,69],[73,69],[74,69],[75,69],[69,[[7,[3]]]],[76,76],[77,77],[78,78],[67,67],[68,68],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[79,79],[[[81,[[0,[[80,[79]],25]]]]],[[81,[[0,[[80,[79]],25]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[79,79],82],[76,[[52,[76]]]],[67,[[52,[67]]]],[68,[[52,[68]]]],[[],82],[67,[[83,[52]]]],[[[7,[68]],84,29]],[[],68],[[],79],[[],[[81,[[0,[[80,[79]],25]]]]]],[76],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[69,21],[57,[[24,[76]]]],[57,[[24,[77]]]],[57,[[24,[78]]]],[57,[[24,[67]]]],[57,[[24,[68]]]],[57,[[24,[79]]]],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[[76,76],59],[[77,77],59],[[78,78],59],[[67,67],59],[[68,68],59],[[79,79],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[70,[[24,[69]]]],[71,[[24,[69]]]],[72,[[24,[69]]]],[73,[[24,[69]]]],[74,[[24,[69]]]],[75,[[24,[69]]]],[[],24],[[],24],[[],24],[[76,22],26],[[77,22],26],[[78,22],26],[[67,22],26],[[67,22],26],[[68,22],26],[[69,22],26],[[69,22],26],[[70,22],26],[[71,22],26],[[72,22],26],[[73,22],26],[[74,22],26],[[75,22],26],[[79,22],26],[[[81,[[0,[[80,[79]],25]]]],22],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],67],[[[0,[61,62]],63],29],[[[0,[61,62]],63],29],[[[0,[61,62]],63],29],[[[0,[61,62]],63],29],[[[0,[61,62]],63],29],[[[0,[61,62]],63],29],[[76,64]],[[77,64]],[[78,64]],[[67,64]],[[68,64]],[[79,64]],[[[0,[30,31,32]]],[[33,[[0,[30,31,32]]]]]],[[[0,[30,31,32]]],[[33,[[0,[30,31,32]]]]]],0,[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[70,69],[71,69],[72,69],[73,69],[74,69],[75,69],[29,76],[[],67],[[],[[81,[[0,[[80,[79]],25]]]]]],[[[7,[68]]]],[68],0,[[79,79],[[7,[82]]]],0,0,[41],[84,[[56,[4,27]]]],[[[85,[52]],84],[[86,[4]]]],[[76,66],24],[[77,66],24],[[78,66],24],[[67,66],24],[[68,66],24],[[79,66],24],[69,[[7,[3]]]],[[],51],[[],51],[[],51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],51],[[],51],0,[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[67,29],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[68,59],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[1],[[87,[89,[[88,[4,[9,[4]]]]]],[89,[[48,[4]]]],[90,[4,[9,[4]]]]],87],[[87,[89,[[88,[4,[9,[4]]]]]],[91,[4,[9,[4]]]],[90,[4,[9,[4]]]]],87],[[87,[89,[[88,[4,[9,[4]]]]]],[93,[4,[92,[4,[9,[4]]]]]],94],87],[[87,[89,[[88,[4,[9,[4]]]]]],[93,[4,[92,[4,[9,[4]]]]]]],87],[[87,[89,[[88,[4,[9,[4]]]]]],[90,[4,[9,[4]]]]],87],[[],2],[[],2],[[]],[[]],[95,95],[[]],[20],[20],[20],[[95,22],26],[[]],[[],20],[[]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[[[10,[4,[9,[4]]]],[15,[96]]]],[[]],[[],24],[[],24],[[],55],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],24],[[],24],[[[98,[97,37]]],[[43,[[36,[42,37]]]]]],[99,[[43,[[36,[42,37]]]]]],[[],2],[[],2],[[],3],[46,[[7,[6]]]],[[]],[[]],[[]],[46,[[7,[3]]]],[[],[[43,[[36,[42,37]]]]]],[[],[[43,[[36,[42,37]]]]]],[[],[[36,[100,37]]]],[[],[[24,[101]]]],[[],[[83,[52,102]]]],[20],[20],[46,21],[20],0,0,[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[103,46],[[]],[[],[[43,[[36,[42,37]]]]]],[[],[[43,[[36,[42,37]]]]]],[[[0,[30,31,32]]],[[33,[[0,[30,31,32]]]]]],0,[[]],[[],20],[[]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[[84,29]],0,[[]],[[]],[7],0,[[]],[41],[[],40],[[],59],[46,[[7,[3]]]],[[7,84,29]],0,[[],51],[[],24],[[],24],[[],29],[[],55],[[],59],[[]],0,0,0,0,0,0,0,0,[1],[104,[[24,[104]]]],[[],2],[[],2],[[],52],[[]],[[]],[104,104],[[]],[104,[[52,[104]]]],[[[7,[104]],84,29],105],[[],104],[20],[20],[57,[[24,[104]]]],[20],[[104,104],59],[[],59],[[],59],[[],59],[[],59],[[],24],[[104,22],[[24,[23]]]],[[]],[[[0,[61,62]],63],29],[[104,64]],[[],20],[[]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[[[7,[104]]]],0,[104],[84,104],[[104,66],24],[[],51],[[]],[[],24],[[],24],[[],24],[[],55],[104,59],[[]],0,0,0,0,0,[1],[1],[1],0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],52],[[]],[[]],[[]],[[]],[[]],[[]],[[[107,[8,[0,[8,27]],[0,[8,106]]]]],[[107,[8,[0,[8,27]],[0,[8,106]]]]]],[[[108,[[0,[8,106]]]]],[[108,[[0,[8,106]]]]]],[109,109],[[]],[[]],[[]],[[[108,[106]]],[[52,[[108,[106]]]]]],0,0,[[98,[98,[106]]],[[107,[4,27,106]]]],[[],109],[29],[20],[20],[20],[20],[20],[20],[57,[[24,[[108,[106]]]]]],[57,[[24,[109]]]],[20],[20],[20],[[[107,[58,[0,[58,27]],[0,[58,106]]]],[107,[58,[0,[58,27]],[0,[58,106]]]]],59],[[[108,[[0,[58,106]]]],[108,[[0,[58,106]]]]],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[[107,[4,27,106]]],110],[[],24],[[[107,[25,[0,[25,27]],[0,[25,106]]]],22],26],[[[108,[[0,[25,106]]]],22],26],[[109,22],26],[[]],[[]],[[]],[[[107,[4,27,106]]],111],[[[107,[4,27,106]]],98],[[[0,[61,62]],63],29],[[[107,[4,27,106]]],106],[[[108,[[0,[61,106]]]],64]],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[[[107,[4,27,106]]],[[24,[[7,[[108,[106]]]],112]]]],[[[98,[106]],98],[[107,[27,106]]]],0,0,0,0,[[[108,[[0,[65,106]]]],66],24],[[109,66],24],0,[[[107,[4,27,106]]],110],[[],51],[[]],[[]],[[]],[[[107,[4,27,106]]],20],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],55],[[],55],[[],55],[[[107,[4,27,106]],106,113],[[24,[113,112]]]],[[[108,[106]]],110],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[114,46],[115,46],[116,46],[117,46],[114,114],[115,115],[118,118],[119,119],[116,116],[117,117],[[]],[[]],[[]],[[]],[[]],[[]],0,[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[114,[[24,[46]]]],[115,[[24,[46]]]],[116,[[24,[46]]]],[117,[[24,[46]]]],[[114,22],[[24,[23]]]],[[115,22],[[24,[23]]]],[[118,22],[[24,[23]]]],[[119,22],[[24,[23]]]],[[116,22],[[24,[23]]]],[[117,22],[[24,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[114,46],[115,46],[118,46],[119,46],[116,46],[117,46],0,0,0,[35,120],0,[[],40],[[],59],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[[122,[121,106]],98],[[24,[46]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[122,[121,106]],121,[111,[106]]],[[43,[[36,[42]]]]]],[[[125,[4,[9,[4]],123,[124,[4]],[80,[4]]]],[92,[4,[9,[4]]]],[80,[4]]],[[43,[[36,[42]]]]]],0,0,[[[122,[[0,[8,121]],[0,[8,106]]]]],[[122,[[0,[8,121]],[0,[8,106]]]]]],[[[125,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]],[0,[8,123]],[0,[8,[124,[[0,[8,4]]]]]],[0,[8,[80,[[0,[8,4]]]]]]]]],[[125,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]],[0,[8,123]],[0,[8,[124,[[0,[8,4]]]]]],[0,[8,[80,[[0,[8,4]]]]]]]]]],[[]],[[]],[20],[20],[20],[20],[20],[20],[20],[20],0,[[[122,[121,106]],121,106],[[43,[[36,[42]]]]]],[[[125,[4,[9,[4]],123,[124,[4]],[80,[4]]]],[92,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],0,0,[20],[20],[20],[20],[[[122,[121,106]],22],26],[[[125,[[0,[25,4]],[0,[25,[9,[[0,[25,4]]]]]],[0,[25,123]],[0,[25,[124,[[0,[25,4]]]]]],[0,[25,[80,[[0,[25,4]]]]]]]],22],26],[[]],[[]],[[]],[[]],[[],[[36,[100]]]],[[20,20,20,20,59],[[36,[100]]]],[[20,20,20,20,59],[[36,[100]]]],0,[[[122,[[92,[4,[9,[4]]]]]]],[[7,[20]]]],[[[125,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[7,[20]]]],[[],20],[[],20],[[],20],[[],20],[[[122,[121,106]],126],[[43,[[36,[42]]]]]],[[[125,[4,[9,[4]],123,[124,[4]],[80,[4]]]],126],[[43,[[36,[42]]]]]],0,[[]],[[]],[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],0,[[[122,[121,106]]],[[43,[[36,[42]]]]]],[[[125,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],0,[[[122,[121,106]],106],[[43,[[36,[42]]]]]],[[[125,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],0,[[[36,[35]],127,106,[15,[[14,[98]]]],20,20,[111,[106]],[111,[106]]],[[24,[[122,[121,106]],46]]]],[[[15,[[122,[[92,[4,[9,[4]]]]]]]]],[[125,[4,[9,[4]],123,[124,[4]],[80,[4]]]]]],0,0,[[[122,[121,106]],128],[[129,[[24,[[98,[121]],46]]]]]],[[[125,[4,[9,[4]],123,[124,[4]],[80,[4]]]],128],[[129,[[24,[[98,[[92,[4,[9,[4]]]]]],46]]]]]],[[130,66],24],[[[122,[121,106]]],129],[[[125,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],129],[[[122,[121,106]],20]],[[[122,[121,106]],[50,[121]],[50,[121]]]],[[]],[[]],0,[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],55],[[],55],[[],55],[[],55],[[]],[[]],[[]],[[]],[[[122,[121,106]]],[[43,[[36,[42]]]]]],[[[122,[121,106]]]],[[[125,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],0,0,0,0,0,0,0,0,0,[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[131,[121,106]],[98,[132]]],[[24,[[133,[[98,[132]]]]]]]],0,[[[131,[121,106]],121,[111,[106]]],[[43,[[36,[42]]]]]],[[[134,[4,[9,[4]],123,[124,[4]],[80,[4]]]],[92,[4,[9,[4]]]],[80,[4]]],[[43,[[36,[42]]]]]],0,[135,135],[[[131,[[0,[8,121]],[0,[8,106]]]]],[[131,[[0,[8,121]],[0,[8,106]]]]]],[[[134,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]],[0,[8,123]],[0,[8,[124,[[0,[8,4]]]]]],[0,[8,[80,[[0,[8,4]]]]]]]]],[[134,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]],[0,[8,123]],[0,[8,[124,[[0,[8,4]]]]]],[0,[8,[80,[[0,[8,4]]]]]]]]]],[[]],[[]],[[]],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[[[131,[121,106]],[98,[132]]],[[24,[[133,[[98,[132]]]]]]]],0,[[[131,[121,106]],121,106],[[43,[[36,[42]]]]]],[[[134,[4,[9,[4]],123,[124,[4]],[80,[4]]]],[92,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],0,[20],[20],[20],[20],[20],[20],[[135,22],26],[[[136,[121,106]],22],26],[[[131,[121,106]],22],26],[[[134,[[0,[25,4]],[0,[25,[9,[[0,[25,4]]]]]],[0,[25,123]],[0,[25,[124,[[0,[25,4]]]]]],[0,[25,[80,[[0,[25,4]]]]]]]],22],26],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[36,[100]]]],[[20,20,20,20,59],[[36,[100]]]],[[20,20,20,20,59],[[36,[100]]]],0,[[[131,[[92,[4,[9,[4]]]]]]],[[7,[20]]]],[[[134,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[7,[20]]]],0,[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[[131,[121,106]],126],[[43,[[36,[42]]]]]],[[[134,[4,[9,[4]],123,[124,[4]],[80,[4]]]],126],[[43,[[36,[42]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[[[131,[121,106]]],[[43,[[36,[42]]]]]],[[[134,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],[[[131,[121,106]],106],[[43,[[36,[42]]]]]],[[[134,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],0,0,0,[[],[[15,[[136,[121,106]]]]]],[[106,[36,[35]],[15,[[136,[121,106]]]],[7,[[15,[137]]]]],[[131,[121,106]]]],[[[15,[[131,[[92,[4,[9,[4]]]]]]]]],[[134,[4,[9,[4]],123,[124,[4]],[80,[4]]]]]],[[[131,[121,106]],128],[[129,[[24,[[98,[121]],46]]]]]],[[[134,[4,[9,[4]],123,[124,[4]],[80,[4]]]],128],[[129,[[24,[[98,[[92,[4,[9,[4]]]]]],46]]]]]],[135,40],[135,59],[[[131,[121,106]]],129],[[[134,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],129],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[]],[[]],[[]],[[]],[[]],[[]],[[[131,[121,106]]],[[43,[[36,[42]]]]]],[[[134,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[[138,[4,[9,[4]],[80,[4]]]],[92,[4,[9,[4]]]],[80,[4]]],[[43,[[36,[42]]]]]],[[[138,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]],[0,[8,[80,[[0,[8,4]]]]]]]]],[[138,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]],[0,[8,[80,[[0,[8,4]]]]]]]]]],[[[139,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]],[0,[8,[80,[[0,[8,4]]]]]]]]],[[139,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]],[0,[8,[80,[[0,[8,4]]]]]]]]]],[[]],[[]],[20],[20],[20],[20],[[[138,[4,[9,[4]],[80,[4]]]],[92,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],[20],[20],[[[138,[4,[9,[4]],[80,[4]]]]],[[122,[[92,[4,[9,[4]]]]]]]],[[[138,[[0,[25,4]],[0,[25,[9,[[0,[25,4]]]]]],[0,[25,[80,[[0,[25,4]]]]]]]],22],26],[[[139,[[0,[25,4]],[0,[25,[9,[[0,[25,4]]]]]],[0,[25,[80,[[0,[25,4]]]]]]]],22],26],[[]],[[]],[[],[[36,[100]]]],[[20,20,20,20,59],[[36,[100]]]],[[20,20,20,20,59],[[36,[100]]]],[[[138,[4,[9,[4]],[80,[4]]]]],[[7,[20]]]],[[[139,[4,[9,[4]],[80,[4]]]]],[[7,[20]]]],[[],20],[[],20],[[[138,[4,[9,[4]],[80,[4]]]],126],[[43,[[36,[42]]]]]],[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[[[138,[4,[9,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],[[[138,[4,[9,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],[[[138,[4,[9,[4]],[80,[4]]]]],[[140,[[92,[4,[9,[4]]]],4]]]],0,[[[15,[[139,[4,[9,[4]],[80,[4]]]]]]],[[138,[4,[9,[4]],[80,[4]]]]]],[[[138,[4,[9,[4]],[80,[4]]]],128],[[129,[[24,[[98,[[92,[4,[9,[4]]]]]],46]]]]]],[[[138,[4,[9,[4]],[80,[4]]]]],129],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],55],[[],55],[[]],[[]],[[[138,[4,[9,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],0,0,0,0,0,0,0,[1],[1],[1],[1],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[141,[4,[9,[4]],123,[124,[4]],[80,[4]]]],[92,[4,[9,[4]]]],[80,[4]]],[[43,[[36,[42]]]]]],[[[140,[[0,[121,[142,[4]]]],106,4]],[0,[121,[142,[4]]]],[111,[106]]],[[43,[[36,[42]]]]]],0,0,[[[141,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]],[0,[8,123]],[0,[8,[124,[[0,[8,4]]]]]],[0,[8,[80,[[0,[8,4]]]]]]]]],[[141,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]],[0,[8,123]],[0,[8,[124,[[0,[8,4]]]]]],[0,[8,[80,[[0,[8,4]]]]]]]]]],[[[140,[[0,[8,121]],[0,[8,106]],[0,[8,4]]]]],[[140,[[0,[8,121]],[0,[8,106]],[0,[8,4]]]]]],[[[143,[[0,[8,121]]]]],[[143,[[0,[8,121]]]]]],[[[144,[[0,[8,121]]]]],[[144,[[0,[8,121]]]]]],[[]],[[]],[[]],[[]],0,[[21,145,40,59],[[140,[[0,[121,[142,[4]]]],106,4]]]],0,[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[57,[[24,[[143,[121]]]]]],[57,[[24,[[144,[121]]]]]],[[[141,[4,[9,[4]],123,[124,[4]],[80,[4]]]],[92,[4,[9,[4]]]]],[[43,[[36,[42]]]]]],[[[140,[[0,[121,[142,[4]]]],106,4]],[0,[121,[142,[4]]]],106],[[43,[[36,[42]]]]]],0,[20],[20],[20],[20],[20],0,[[[143,[[0,[58,121]]]],[143,[[0,[58,121]]]]],59],[[[144,[[0,[58,121]]]],[144,[[0,[58,121]]]]],59],[[[141,[[0,[25,4]],[0,[25,[9,[[0,[25,4]]]]]],[0,[25,123]],[0,[25,[124,[[0,[25,4]]]]]],[0,[25,[80,[[0,[25,4]]]]]]]],22],26],[[[140,[[0,[25,121]],[0,[25,106]],[0,[25,4]]]],22],26],[[[146,[[0,[25,121]],[0,[25,106]],[0,[25,4]]]],22],26],[[[143,[[0,[25,121]]]],22],26],[[[144,[[0,[25,121]]]],22],26],[[]],[[]],[[]],[[]],[[]],[[],[[36,[100]]]],[[20,20,20,20,59],[[36,[100]]]],[[20,20,20,20,59],[[36,[100]]]],[[],51],[[[143,[121]]],51],[[],7],[[],7],[[[143,[121]]],[[7,[121]]]],[[[144,[121]]],[[7,[121]]]],[[[146,[121,106,4]],51],[[24,[[7,[[98,[[144,[121]]]]]],46]]]],[[[146,[121,106,4]],51],[[24,[7,46]]]],[[[141,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[7,[20]]]],[[[140,[[92,[4,[9,[4]]]],4]]],[[7,[20]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[[141,[4,[9,[4]],123,[124,[4]],[80,[4]]]],126],[[43,[[36,[42]]]]]],[[[140,[[0,[121,[142,[4]]]],106,4]],126],[[43,[[36,[42]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],0,[[[141,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],[[[140,[[0,[121,[142,[4]]]],106,4]]],[[43,[[36,[42]]]]]],[[[141,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],[[[140,[[0,[121,[142,[4]]]],106,4]],106],[[43,[[36,[42]]]]]],0,0,[[[15,[[140,[[92,[4,[9,[4]]]],4]]]]],[[141,[4,[9,[4]],123,[124,[4]],[80,[4]]]]]],[[[0,[121,[142,[4]]]]],[[24,[[143,[[0,[121,[142,[4]]]]]],147]]]],0,[[[146,[121,106,4]],[148,[126]],149,29],[[24,[46]]]],[[[140,[121,106,4]],[143,[121]]],[[24,[46]]]],0,[[[141,[4,[9,[4]],123,[124,[4]],[80,[4]]]],128],[[129,[[24,[[98,[[92,[4,[9,[4]]]]]],46]]]]]],[[[140,[[0,[121,[142,[4]]]],106,4]],128],[[129,[[24,[[98,[[0,[121,[142,[4]]]]]],46]]]]]],0,[[[143,[[0,[65,121]]]],66],24],[[[144,[[0,[65,121]]]],66],24],0,[[[141,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],129],[[[140,[[0,[121,[142,[4]]]],106,4]]],129],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,[[],55],[[],55],[[],55],[[],55],[[],55],0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[[141,[4,[9,[4]],123,[124,[4]],[80,[4]]]]],[[43,[[36,[42]]]]]],[[[140,[[0,[121,[142,[4]]]],106,4]]],[[43,[[36,[42]]]]]],0,0,0,0,0,0,0,[[]],[[],[[36,[100,37]]]],[[],[[24,[101]]]],[[],[[43,[[36,[42,37]]]]]],[[84,29]],[[]],[[7,84,29]],[[],29],0,0,[[[98,[97,37]]],[[43,[[36,[42,37]]]]]],[99,[[43,[[36,[42,37]]]]]],[[],[[43,[[36,[42,37]]]]]],[[],[[43,[[36,[42,37]]]]]],[[],[[43,[[36,[42,37]]]]]],0,0,0,[1],[[[150,[4,27]],[98,[[97,[4,27]]]]],[[43,[[36,[42]]]]]],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[[150,[4,27]]],[[43,[[36,[42]]]]]],[[[150,[[0,[8,4]],[0,[8,27]]]]],[[150,[[0,[8,4]],[0,[8,27]]]]]],[[]],[[[150,[4,27]]],[[43,[[36,[42]]]]]],[[],[[151,[[150,[4,27]]]]]],[20],[20],[20],[20],[20],[20],[[],[[150,[4,27]]]],0,[[]],[[]],[[[150,[4,27]]],[[43,[[36,[42]]]]]],[[[150,[4,27]]],[[43,[[36,[42]]]]]],[[],20],[[],20],0,[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],0,[[]],[[],24],[[],24],[[],24],[[],24],[[],55],[[],55],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[153,[20,152]],154]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[154,[132]]],59],[[[48,[[0,[8,4]],[0,[8,27]]]]],[[48,[[0,[8,4]],[0,[8,27]]]]]],[[[155,[[0,[8,4]],[0,[8,27]]]]],[[155,[[0,[8,4]],[0,[8,27]]]]]],[[[92,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]]]]],[[92,[[0,[8,4]],[0,[8,[9,[[0,[8,4]]]]]]]]]],[[]],[[]],[[]],[[]],[20],[20],[20],[20],[20],[20],[57,[[24,[[92,[4,[9,[4]]]]]]]],[20],[20],[20],[[[92,[4,[9,[4]]]],[92,[4,[9,[4]]]]],59],0,0,[[[48,[[0,[25,4]],[0,[25,27]]]],22],[[24,[23]]]],[[[155,[[0,[25,4]],[0,[25,27]]]],22],[[24,[23]]]],[[[92,[[0,[25,4]],[0,[25,[9,[[0,[25,4]]]]]]]],22],[[24,[23]]]],[[]],[[]],[[]],[156,7],[[]],[[[157,[132]],29]],[[[98,[37]],158]],[[]],[29],[[[92,[4,[9,[4]]]]]],0,0,[[],20],[[],20],[[],20],0,[[]],[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],0,0,[[[92,[4,[9,[4]]]]],149],0,0,[[[92,[4,[9,[4]]]],66],24],[[[154,[132]]],159],0,[[],156],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],55],[[],55],[[],55],[[159,[154,[132]]],59],0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[[153,[20,152]],154]],[[]],[[]],[[]],[[]],[[[154,[132]]],59],[160,160],[161,161],[[]],[[]],[[160,160],82],[[161,161],82],[[],82],[[],82],[20],[20],[20],[20],[57,[[24,[160]]]],[57,[[24,[161]]]],[20],[20],[[160,160],59],[[161,161],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[160,22],[[24,[23]]]],[[161,22],[[24,[23]]]],[[]],[[]],[156,[[7,[161]]]],[[],161],[[],160],[[[157,[132]]],160],[[[157,[132]],29],160],[[[157,[132]],29]],[[[0,[61,62]],63],29],[[[98,[37]],158]],[[[157,[132]],29],[[157,[132]]]],[[]],[[161,29]],[[161,64]],[[],20],[[],20],[[]],[[]],[[[36,[37]]],[[36,[2,37]]]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[38,[[38,[2]]]],[[160,160],[[7,[82]]]],[[161,161],[[7,[82]]]],0,0,[[160,66],24],[[161,66],24],[[[154,[132]]],159],[161,156],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],55],[[],55],[[161,159,[154,[132]]],59],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],2],[[],2],[[]],[[]],[[[90,[4,[9,[4]]]]],[[90,[4,[9,[4]]]]]],[[]],[[[90,[4,[9,[4]]]],[52,[[56,[4]]]],52],[[162,[4,[9,[4]]]]]],[20],[20],[20],[[]],[[[90,[4,[9,[4]]]]],[[15,[[14,[[13,[4]]]]]]]],[[[90,[4,[9,[4]]]]]],[[[90,[4,[9,[4]]]]]],[[[90,[4,[9,[4]]]],[163,[[48,[4]]]]]],[[[90,[4,[9,[4]]]],[163,[[48,[4]]]]]],[[[90,[4,[9,[4]]]],[163,[[88,[4,[9,[4]]]]]]]],[[[90,[4,[9,[4]]]]]],[[[90,[4,[9,[4]]]]],[[7,[20]]]],[[[90,[4,[9,[4]]]]],29],[[[90,[4,[9,[4]]]]]],[[[90,[4,[9,[4]]]]],[[7,[20]]]],[[[90,[4,[9,[4]]]]]],0,[[],20],0,[[]],[[[36,[37]]],[[36,[2,37]]]],[15,[[15,[2]]]],[38,[[38,[2]]]],[[[90,[4,[9,[4]]]]]],0,0,[[[90,[4,[9,[4]]]]]],[[[90,[4,[9,[4]]]]]],[[[90,[4,[9,[4]]]]],129],[[[90,[4,[9,[4]]]],52],159],[[[90,[4,[9,[4]]]]]],[[[90,[4,[9,[4]]]]]],0,[[[90,[4,[9,[4]]]]],[[24,[[5,[4]]]]]],[[]],[[],24],[[],24],[[],55],[[]],[[[90,[4,[9,[4]]]]]]],"c":[2107],"p":[[3,"Private"],[8,"Any"],[8,"Error"],[8,"NodeType"],[4,"HotShotError"],[3,"Backtrace"],[4,"Option"],[8,"Clone"],[8,"NodeImplementation"],[3,"SystemContext"],[3,"HotShotValidatingConsensusApi"],[3,"HotShotSequencingConsensusApi"],[3,"Consensus"],[3,"RwLock"],[3,"Arc"],[3,"SendToTasks"],[3,"RwLockUpgradableReadGuard"],[3,"ViewQueue"],[3,"RwLockWriteGuard"],[15,"usize"],[15,"str"],[3,"Formatter"],[3,"Error"],[4,"Result"],[8,"Debug"],[6,"Result"],[8,"LeafType"],[3,"HotShotInitializer"],[15,"u64"],[8,"Display"],[8,"Send"],[8,"Sync"],[3,"IndentedSection"],[3,"HotShotConfig"],[8,"Metrics"],[3,"Box"],[3,"Global"],[3,"Rc"],[3,"NonZeroUsize"],[3,"Duration"],[3,"Demand"],[8,"Future"],[3,"Pin"],[4,"MessageKind"],[8,"Into"],[4,"NetworkError"],[3,"SequencingMessage"],[3,"Event"],[4,"DataMessage"],[3,"UnboundedSender"],[3,"String"],[3,"Commitment"],[3,"HashMap"],[3,"SubscribableRwLock"],[3,"TypeId"],[3,"QuorumCertificate"],[8,"Deserializer"],[8,"PartialEq"],[15,"bool"],[4,"AssembledSignature"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[8,"Serialize"],[8,"Serializer"],[4,"SDemoBlock"],[3,"SDemoState"],[4,"SDemoError"],[3,"PreviousStateMismatchSnafu"],[3,"ReusedTxnSnafu"],[3,"GenesisFailedSnafu"],[3,"GenesisAfterStartSnafu"],[3,"GenesisCantHaveTransactionsSnafu"],[3,"InvalidBlockSnafu"],[3,"SDemoTransaction"],[3,"SDemoGenesisBlock"],[3,"SDemoNormalBlock"],[3,"SDemoTypes"],[8,"Membership"],[3,"SDemoNode"],[4,"Ordering"],[3,"HashSet"],[8,"RngCore"],[4,"Either"],[3,"SequencingLeaf"],[3,"TaskRunner"],[4,"SequencingHotShotEvent"],[3,"ChannelStream"],[3,"SystemContextHandle"],[6,"CommitteeEx"],[3,"Message"],[8,"ConsensusExchange"],[4,"NetworkTaskKind"],[4,"GlobalEvent"],[3,"AtomicBool"],[4,"ViewEntry"],[3,"Vec"],[3,"StoredView"],[8,"Fn"],[4,"StorageError"],[3,"RandomState"],[4,"NetworkNodeHandleError"],[3,"DummyState"],[4,"DummyTransaction"],[8,"SignatureKey"],[3,"GeneralStaticCommittee"],[3,"StaticVoteToken"],[3,"StaticElectionConfig"],[3,"NonZeroU64"],[3,"BTreeSet"],[4,"ElectionError"],[4,"Checked"],[3,"CouldNotDeliverSnafu"],[3,"NoSuchNodeSnafu"],[3,"ChannelSendSnafu"],[3,"ShutDownSnafu"],[3,"FailedToSerializeSnafu"],[3,"FailedToDeserializeSnafu"],[3,"NetworkingMetrics"],[8,"NetworkMsg"],[3,"Libp2pNetwork"],[8,"ProposalType"],[8,"VoteType"],[3,"Libp2pCommChannel"],[4,"ConsensusIntentEvent"],[3,"NetworkNodeConfig"],[4,"TransmitType"],[6,"BoxSyncFuture"],[4,"Empty"],[3,"MemoryNetwork"],[15,"u8"],[3,"SendError"],[3,"MemoryCommChannel"],[3,"DummyReliability"],[3,"MasterMap"],[8,"NetworkReliability"],[3,"WebServerWithFallbackCommChannel"],[3,"CombinedNetworks"],[3,"WebServerNetwork"],[3,"WebCommChannel"],[8,"ViewMessage"],[3,"SendMsg"],[3,"RecvMsg"],[15,"u16"],[3,"Inner"],[4,"WebServerNetworkError"],[3,"UnboundedReceiver"],[4,"MessagePurpose"],[3,"MemoryStorage"],[6,"StorageResult"],[3,"Lsb0"],[3,"BitSlice"],[15,"slice"],[4,"EventType"],[3,"EncodedPublicKey"],[15,"array"],[3,"U256"],[3,"EncodedSignature"],[3,"BN254Priv"],[3,"BN254Pub"],[4,"GeneralConsensusMessage"],[3,"FilterEvent"],[3,"SystemContextInner"],[8,"HotShotType"],[13,"Misc"],[13,"InvalidState"],[13,"InsufficientValidSignatures"],[13,"StorageError"],[13,"TimeoutError"],[13,"FailedToMessageLeader"],[13,"FailedToBroadcast"],[13,"NetworkFault"],[13,"ViewTimeoutError"],[8,"State"],[8,"TestableNodeImplementation"],[8,"Block"],[8,"Storage"],[13,"Libp2p"],[13,"MemoryNetwork"],[13,"CentralizedServer"],[13,"WebServer"],[13,"FailedToSerialize"],[13,"FailedToDeserialize"],[13,"Timeout"],[3,"Libp2pNetworkInner"],[4,"Combo"],[3,"MemoryNetworkInner"],[8,"SendMsgTrait"],[8,"RecvMsgTrait"],[3,"MemoryStorageInternal"],[13,"Decide"],[13,"Error"],[13,"ReplicaViewTimeout"],[13,"NextLeaderViewTimeout"],[13,"ViewFinished"]]},\
"hotshot_orchestrator":{"doc":"","t":"IDLLLLLAMLLAMLFLLLLKLLLLLLMFLMKLKLKLKLFMLLLLLDDLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLMMMMLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLMMM","n":["OrchestratorApi","OrchestratorState","__clone_box","as_any","as_any_mut","borrow","borrow_mut","client","client","clone","clone_into","config","config","default","define_api","deref","deref_mut","drop","from","get_start","get_start","init","into","into_any","into_any_arc","into_any_rc","latest_index","libp2p_generate_indexed_identity","new","nodes_connected","post_getconfig","post_getconfig","post_identity","post_identity","post_ready","post_ready","post_run_results","post_run_results","run_orchestrator","start","to_owned","try_from","try_into","type_id","vzip","OrchestratorClient","ValidatorArgs","__clone_box","as_any","as_any","as_any_mut","as_any_mut","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","client","clone","clone_into","command","command_for_update","connect_to_orchestrator","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from_arg_matches","from_arg_matches_mut","get_config_from_orchestrator","group_id","host","identify_with_orchestrator","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","port","public_ip","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","wait_for_all_nodes_ready","wait_for_fn_from_orchestrator","HotShotConfigFile","Libp2pConfig","Libp2pConfigFile","NetworkConfig","NetworkConfigFile","WebServerConfig","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","base_port","base_port","bootstrap_mesh_n","bootstrap_mesh_n","bootstrap_mesh_n_high","bootstrap_mesh_n_high","bootstrap_mesh_n_low","bootstrap_mesh_n_low","bootstrap_mesh_outbound_min","bootstrap_mesh_outbound_min","bootstrap_nodes","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","committee_nodes","config","config","da_web_server_config","da_web_server_config","default","default_config","default_padding","default_rounds","default_start_delay_seconds","default_transactions_per_round","default_web_server_config","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","election_config_type_name","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","host","index_ports","index_ports","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","key_type_name","libp2p_config","libp2p_config","max_transactions","mesh_n","mesh_n","mesh_n_high","mesh_n_high","mesh_n_low","mesh_n_low","mesh_outbound_min","mesh_outbound_min","min_transactions","next_view_timeout","next_view_timeout","next_view_timeout","node_index","node_index","node_index","num_bootstrap","num_bootstrap_nodes","num_bootstrap_nodes","num_txn_per_round","num_txn_per_round","online_time","online_time","padding","padding","port","propose_max_round_time","propose_max_round_time","propose_max_round_time","propose_min_round_time","propose_min_round_time","propose_min_round_time","public_ip","round_start_delay","rounds","rounds","seed","seed","serialize","serialize","serialize","serialize","serialize","serialize","start_delay","start_delay_seconds","start_delay_seconds","timeout_ratio","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_nodes","transactions_per_round","transactions_per_round","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","wait_between_polls","web_server_config","web_server_config"],"q":[[0,"hotshot_orchestrator"],[45,"hotshot_orchestrator::client"],[104,"hotshot_orchestrator::config"]],"d":["","","","","","","","","connection to the web server","","","","The network configuration","","Sets up all API routes","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","Tracks the latest node index we have generated a …","yeesh maybe we should just implement SignatureKey for this…","","The total nodes that have posted they are ready to start","","","","","","","","","Runs the orchestrator","Whether nodes should start their HotShot instances Will be …","","","","","","Holds the client connection to the orchestrator","Arguments passed to the validator","","","","","","","","","","","","","","","","","Creates the client that connects to the orchestrator","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the run configuration from the orchestrator Will …","","The address the orchestrator runs on","Sends an identify message to the server Returns this …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The port the orchestrator runs on","This node’s public IP address, for libp2p If no IP …","","","","","","","","","","","","Tells the orchestrator this validator is ready to start …","Generic function that waits for the orchestrator to return …","Holds configuration for a <code>HotShot</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of committee nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Maximum transactions per block","","","","","","","","","Minimum transactions per block","","","Base duration for next-view timeout, in milliseconds","","","","Number of network bootstrap nodes","","","","","","","","","","","","The maximum amount of time a leader can wait to start a …","","","The minimum amount of time a leader has to wait to start a …","","The delay a leader inserts before starting pre-commit, in …","","","","","","","","","","","Delay after init before starting consensus, in milliseconds","","","The exponential backoff ration for the next-view timeout","","","","","","","Total number of nodes in the network","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,4,4,4,4,4,0,4,4,4,0,4,4,0,4,4,4,4,52,4,4,4,4,4,4,4,0,4,4,52,4,52,4,52,4,52,4,0,4,4,4,4,4,4,0,0,33,34,33,34,33,33,33,34,33,34,33,34,33,33,33,33,34,34,33,34,33,34,33,33,34,33,33,33,34,33,33,34,34,33,34,33,34,33,34,33,34,33,33,33,33,34,33,34,33,34,33,33,33,34,33,34,34,0,0,0,0,0,0,43,44,45,27,46,47,43,44,45,27,46,47,43,44,45,27,46,47,43,44,43,44,43,44,43,44,43,44,43,43,44,45,27,46,47,43,44,45,27,46,47,43,44,45,27,46,47,43,44,45,27,46,47,47,27,46,27,46,27,0,0,0,0,0,0,43,44,45,27,46,47,43,44,45,27,46,47,43,44,45,27,46,47,43,44,45,27,46,47,27,43,44,45,27,46,47,43,44,45,27,27,46,47,45,43,44,43,44,45,27,46,47,43,44,45,27,46,47,43,44,45,27,46,47,43,44,45,27,46,47,43,44,45,27,46,47,27,27,46,47,43,44,43,44,43,44,43,44,47,43,44,47,43,27,46,47,43,44,43,44,43,44,27,46,45,43,44,47,43,44,47,43,47,27,46,27,46,43,44,45,27,46,47,47,27,46,47,43,44,45,27,46,47,47,27,46,43,44,45,27,46,47,43,44,45,27,46,47,43,44,45,27,46,47,43,44,45,27,46,47,45,27,46],"f":[0,0,[1],[[],2],[[],2],[[]],[[]],0,0,[[[4,[3,3,3]]],[[4,[3,3,3]]]],[[]],0,0,[[],[[4,[5,5,5]]]],[[],[[13,[[11,[[0,[6,7,8,9]],10]],12]]]],[14],[14],[14],[[]],[[],[[13,[15,10]]]],[[[4,[[0,[16,3,17]],[0,[16,3,6]]]]],[[13,[15,10]]]],[[],14],[[]],[[[19,[18]]],[[19,[2,18]]]],[20,[[20,[2]]]],[21,[[21,[2]]]],0,[[[23,[22]],24],25],[[[27,[17,26]]],[[4,[17,26]]]],0,[28,[[13,[27,10]]]],[[[4,[[0,[16,3,17]],[0,[16,3,6]]]],28],[[13,[[27,[[0,[16,3,17]],[0,[16,3,6]]]],10]]]],[29,[[13,[28,10]]]],[[[4,[[0,[16,3,17]],[0,[16,3,6]]]],29],[[13,[28,10]]]],[[],[[13,[10]]]],[[[4,[[0,[16,3,17]],[0,[16,3,6]]]]],[[13,[10]]]],[[],[[13,[10]]]],[[[4,[[0,[16,3,17]],[0,[16,3,6]]]]],[[13,[10]]]],[[[27,[[0,[17,16]],[0,[26,16]]]],29,28],30],0,[[]],[[],13],[[],13],[[],31],[[]],0,0,[1],[[],2],[[],2],[[],2],[[],2],[32,32],[32,32],[[]],[[]],[[]],[[]],0,[33,33],[[]],[[],32],[[],32],[33,34],[14],[14],[14],[14],[14],[14],[[33,35],36],[[]],[[]],[37,[[13,[33,38]]]],[37,[[13,[33,38]]]],[[34,28],27],[[],[[40,[39]]]],0,[[34,41],28],[[],14],[[],14],[[]],[[]],[[[19,[18]]],[[19,[2,18]]]],[[[19,[18]]],[[19,[2,18]]]],[20,[[20,[2]]]],[20,[[20,[2]]]],[21,[[21,[2]]]],[21,[[21,[2]]]],0,0,[[]],[[],13],[[],13],[[],13],[[],13],[[],31],[[],31],[[33,37],[[13,[38]]]],[[33,37],[[13,[38]]]],[[]],[[]],[[34,24],15],[[34,42]],0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,43],[44,44],[45,45],[[[27,[3,3,3]]],[[27,[3,3,3]]]],[46,46],[47,47],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[],27],[[],47],[[],14],[[],14],[[],24],[[],14],[[],[[40,[45]]]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[48,[[13,[43]]]],[48,[[13,[44]]]],[48,[[13,[45]]]],[48,[[13,[[27,[49,49,49]]]]]],[48,[[13,[46]]]],[48,[[13,[47]]]],[14],[14],[14],[14],[14],[14],0,[[43,35],36],[[44,35],36],[[45,35],36],[[[27,[50,50,50]],35],36],[[46,35],36],[[47,35],36],[[]],[[]],[[]],[46,27],[[]],[[]],[[]],0,0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[[19,[18]]],[[19,[2,18]]]],[[[19,[18]]],[[19,[2,18]]]],[[[19,[18]]],[[19,[2,18]]]],[[[19,[18]]],[[19,[2,18]]]],[[[19,[18]]],[[19,[2,18]]]],[[[19,[18]]],[[19,[2,18]]]],[20,[[20,[2]]]],[20,[[20,[2]]]],[20,[[20,[2]]]],[20,[[20,[2]]]],[20,[[20,[2]]]],[20,[[20,[2]]]],[21,[[21,[2]]]],[21,[[21,[2]]]],[21,[[21,[2]]]],[21,[[21,[2]]]],[21,[[21,[2]]]],[21,[[21,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[43,51],13],[[44,51],13],[[45,51],13],[[[27,[16,16,16]],51],13],[[46,51],13],[[47,51],13],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0],"c":[],"p":[[3,"Private"],[8,"Any"],[8,"Clone"],[3,"OrchestratorState"],[8,"Default"],[8,"Send"],[8,"Sync"],[8,"ReadState"],[8,"WriteState"],[3,"ServerError"],[3,"Api"],[4,"ApiError"],[4,"Result"],[15,"usize"],[15,"bool"],[8,"Serialize"],[8,"SignatureKey"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[15,"u8"],[15,"array"],[15,"u64"],[3,"Keypair"],[8,"ElectionConfig"],[3,"NetworkConfig"],[15,"u16"],[4,"IpAddr"],[6,"Result"],[3,"TypeId"],[3,"Command"],[3,"ValidatorArgs"],[3,"OrchestratorClient"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[4,"Option"],[3,"String"],[8,"Fn"],[3,"Libp2pConfig"],[3,"Libp2pConfigFile"],[3,"WebServerConfig"],[3,"NetworkConfigFile"],[3,"HotShotConfigFile"],[8,"Deserializer"],[8,"Deserialize"],[8,"Debug"],[8,"Serializer"],[8,"OrchestratorApi"]]},\
"hotshot_qc":{"doc":"This crates offer implementations of quorum certificates …","t":"AAADDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLDDDLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLAQIIKKKKFKKK","n":["bit_vector","bit_vector_old","snarked","BitVectorQC","QCParams","agg_sig_pp","as_any","as_any","as_any_mut","as_any_mut","assemble","borrow","borrow","borrow_mut","borrow_mut","check","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","serialize","sign","stake_table","threshold","trace","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BitVectorQC","QCParams","StakeTableEntry","__clone_box","__clone_box","agg_sig_pp","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","assemble","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","hash","hash","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","serialize","serialize","serialize","sign","stake_amount","stake_entries","stake_key","threshold","to_owned","to_owned","trace","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","circuit","KeyType","QCKeyAggregateGadget","VerKeyVar","aggregate_with_selectors","check_aggregate_vk","check_stake_table_digest","check_threshold","compute_stake_table_hash","enforce_equal","is_equal","native_vars"],"q":[[0,"hotshot_qc"],[3,"hotshot_qc::bit_vector"],[50,"hotshot_qc::bit_vector_old"],[135,"hotshot_qc::snarked"],[136,"hotshot_qc::snarked::circuit"]],"d":["Implementation for BitVectorQC that uses BLS signature + …","Implementation for BitVectorQC that uses BLS signature + …","This is a SNARKed QC implemenation, see more in HotShot …","An implementation of QC using BLS signature and a …","Public parameters of <code>BitVectorQC</code>","public parameter for the aggregated signature scheme","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","the stake table (snapshot) this QC is verified against","threshold for the accumulated “weight” of votes to …","","","","","","","","","","An implementation of QC using BLS signature and a …","Public parameters of <code>BitVectorQC</code>","Stake table entry","","","public parameter for the aggregated signature scheme","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Stake table value","the stake table (snapshot) this QC is verified against","Stake table key","threshold for the accumulated “weight” of votes to …","","","","","","","","","","","","","","","","Circuit implementation of stake key aggregation for quorum …","","Plonk circuit gadget for stake key aggregation for quorum …","Traits for verification keys","Aggregate the verification keys with Boolean selectors.","Key aggregation circuit","Stake table commitment checking circuit","Quorum threshold checking circuit","Digest a list of verification keys and their associated …","Enforce that two input verification key variables are …","Check whether two input verification key variables are …","Returns a list of variables associated with this key …"],"i":[0,0,0,0,0,12,44,12,44,12,44,44,12,44,12,44,44,12,44,12,12,44,12,12,12,44,12,44,12,44,12,44,12,44,12,44,12,12,44,12,12,44,44,12,44,12,44,12,44,12,0,0,0,30,31,31,32,30,31,32,30,31,32,32,30,31,32,30,31,32,30,31,30,31,32,30,31,32,30,31,32,30,31,32,30,31,30,31,30,30,30,31,32,30,31,30,31,32,30,31,32,30,31,32,30,31,32,30,31,32,30,31,32,30,31,32,30,31,30,31,30,31,32,32,30,31,32,30,31,32,30,31,32,30,31,0,40,0,0,40,45,45,45,0,40,40,40],"f":[0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[2,3],[[5,[4]]]],[[]],[[]],[[]],[[]],[6,[[5,[4]]]],[7],[7],[7],[7],[8,[[5,[[12,[9,[0,[10,11]]]]]]]],[7],[7],[[[12,[[0,[13,9]],[0,[13,11]]]],[12,[[0,[13,9]],[0,[13,11]]]]],14],[[[12,[[0,[15,9]],[0,[15,11]]]],16],17],[[]],[[]],[[],7],[[],7],[[]],[[]],[[[19,[18]]],[[19,[1,18]]]],[[[19,[18]]],[[19,[1,18]]]],[20,[[20,[1]]]],[20,[[20,[1]]]],[21,[[21,[1]]]],[21,[[21,[1]]]],[[[12,[9,[0,[22,11]]]],23],5],[[6,[0,[24,25]]],[[5,[4]]]],0,0,[6,[[5,[26,4]]]],[[],5],[[],5],[[],5],[[],5],[[],27],[[],27],[[]],[[]],0,0,0,[28],[28],0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[2,3],[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[6,[[5,[4]]]],[[[30,[29]]],[[30,[29]]]],[[[31,[29,29]]],[[31,[29,29]]]],[[]],[[]],[7],[7],[7],[7],[7],[7],[8,[[5,[[32,[[0,[9,22,10]]]]]]]],[8,[[5,[[30,[10]]]]]],[8,[[5,[[31,[10,10]]]]]],[7],[7],[7],[[[30,[13]],[30,[13]]],14],[[[31,[13,13]],[31,[13,13]]],14],[[],14],[[],14],[[[30,[15]],16],17],[[[31,[15,15]],16],17],[[]],[[]],[[]],[[[30,[33]],34]],[[[31,[33,33]],34]],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[[19,[18]]],[[19,[1,18]]]],[[[19,[18]]],[[19,[1,18]]]],[[[19,[18]]],[[19,[1,18]]]],[20,[[20,[1]]]],[20,[[20,[1]]]],[20,[[20,[1]]]],[21,[[21,[1]]]],[21,[[21,[1]]]],[21,[[21,[1]]]],[[[32,[[0,[9,22,10]]]],23],5],[[[30,[22]],23],5],[[[31,[22,22]],23],5],[[6,[0,[24,25]]],[[5,[4]]]],0,0,0,0,[[]],[[]],[6,[[5,[26,4]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],27],[[],27],[[],27],[[]],[[]],[[]],0,0,0,0,[[[36,[35]],3,[3,[37]],[38,[35]]],[[5,[39]]]],[[[3,[[40,[38]]]],[3,[37]],[40,[38]],38],[[5,[39]]]],[[[3,[[40,[38]]]],[3,[41]],41],[[5,[39]]]],[[[3,[41]],[3,[37]],41],[[5,[39]]]],[[[3,[42]],[3,[[43,[42]]]]],42],[[[36,[35]]],[[5,[39]]]],[[[36,[35]]],[[5,[37,39]]]],[[],[[26,[41]]]]],"c":[],"p":[[8,"Any"],[3,"BitSlice"],[15,"slice"],[4,"PrimitivesError"],[4,"Result"],[3,"GenericArray"],[15,"usize"],[8,"Deserializer"],[8,"AggregateableSignatureSchemes"],[8,"Deserialize"],[8,"StakeTableScheme"],[3,"QCParams"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[8,"Serialize"],[8,"Serializer"],[8,"CryptoRng"],[8,"RngCore"],[3,"Vec"],[3,"TypeId"],[3,"Private"],[8,"Clone"],[3,"StakeTableEntry"],[3,"QCParams"],[3,"BitVectorQC"],[8,"Hash"],[8,"Hasher"],[8,"PrimeField"],[3,"PlonkCircuit"],[3,"BoolVar"],[8,"EmulationConfig"],[4,"CircuitError"],[8,"VerKeyVar"],[6,"Variable"],[8,"RescueParameter"],[8,"SerializableEmulatedStruct"],[3,"BitVectorQC"],[8,"QCKeyAggregateGadget"]]},\
"hotshot_signature_key":{"doc":"This crates offer implementations of quorum certificates …","t":"ADDAAMMDRLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLL","n":["bn254","BN254Priv","BN254Pub","bn254_priv","bn254_pub","priv_key","pub_key","BN254Priv","_DERIVE_core_fmt_Debug_FOR_BN254Priv","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","fmt","from","generate","generate_from_seed","generated_from_seed_indexed","get_seed_from_seed_indexed","init","into","into_any","into_any_arc","into_any_rc","partial_cmp","priv_key","serialize","to_owned","try_from","try_into","type_id","vzip","BN254Pub","__clone_box","as_any","as_any_mut","assemble","borrow","borrow_mut","check","clone","clone_into","cmp","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","fmt","from","from_bytes","from_private","generated_from_seed_indexed","get_public_parameter","get_sig_proof","get_stake_table_entry","hash","init","into","into_any","into_any_arc","into_any_rc","partial_cmp","pub_key","serialize","sign","to_bytes","to_owned","try_from","try_into","type_id","validate","vzip"],"q":[[0,"hotshot_signature_key"],[1,"hotshot_signature_key::bn254"],[7,"hotshot_signature_key::bn254::bn254_priv"],[43,"hotshot_signature_key::bn254::bn254_pub"]],"d":["Demonstration implementation of the <code>SignatureKey</code> trait …","Private key type for a bn254 keypair","Public key type for an bn254 <code>SignatureKey</code> pair","<code>BN254Priv</code> implementation","<code>BN254Pub</code> implementation","The private key for  this keypair","The public key for this keypair","Private key type for a bn254 keypair","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Generate a new private key from scratch","Generate a new private key from a seed","Generate a new private key from a seed and a number","Get real seed used for random key generation funtion","","Calls <code>U::from(self)</code>.","","","","","The private key for  this keypair","","","","","","","Public key type for an bn254 <code>SignatureKey</code> pair","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","The public key for this keypair","","","","","","","","",""],"i":[0,0,0,0,0,3,23,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23],"f":[0,0,0,0,0,0,0,0,0,[1],[[],2],[[],2],[[]],[[]],[3,3],[[]],[[3,3],4],[5],[5],[6,[[7,[3]]]],[5],[[3,3],8],[[],8],[[],8],[[3,9],10],[[]],[[],3],[[[12,[11]]],3],[[[12,[11]],13],3],[[[12,[11]],13],[[12,[11]]]],[[],5],[[]],[[[15,[14]]],[[15,[2,14]]]],[16,[[16,[2]]]],[17,[[17,[2]]]],[[3,3],[[18,[4]]]],0,[[3,19],7],[[]],[[],7],[[],7],[[],20],[[]],0,[1],[[],2],[[],2],[[21,22]],[[]],[[]],[[[22,[11]]],8],[23,23],[[]],[[23,23],4],[5],[5],[6,[[7,[23]]]],[5],[[23,23],8],[[],8],[[],8],[[23,9],10],[[]],[24,[[18,[23]]]],[[],23],[[[12,[11]],13]],[[25,26]],[[]],[[23,13]],[[23,27]],[[],5],[[]],[[[15,[14]]],[[15,[2,14]]]],[16,[[16,[2]]]],[17,[[17,[2]]]],[[23,23],[[18,[4]]]],0,[[23,19],7],[[[22,[11]]],28],[23,24],[[]],[[],7],[[],7],[[],20],[[23,28,[22,[11]]],8],[[]]],"c":[],"p":[[3,"Private"],[8,"Any"],[3,"BN254Priv"],[4,"Ordering"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"array"],[15,"u64"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[4,"Option"],[8,"Serializer"],[3,"TypeId"],[3,"BitSlice"],[15,"slice"],[3,"BN254Pub"],[3,"EncodedPublicKey"],[3,"Vec"],[3,"U256"],[8,"Hasher"],[3,"EncodedSignature"]]},\
"hotshot_stake_table":{"doc":"This crate contains some stake table implementations for …","t":"ADLLLLLLLLLALLLLLLMLLLLLLMMLALLLLMLLMLLLLLLLLLLLLLLGGRFNNNIDINNDGEDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLMMLLLLLLLLLLMLFLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMMMMMMMMMMM","n":["mt_based","StakeTable","__clone_box","advance","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","commitment","config","contains_key","deref","deref_mut","deregister","deserialize","drop","epoch_start","eq","equivalent","equivalent","fmt","from","get_root","head","height","init","internal","into","into_any","into_any_arc","into_any_rc","last_epoch_start","len","lookup","mapping","new","register","sample","serialize","set_value","simple_lookup","to_owned","total_stake","try_from","try_into","try_iter","type_id","update","vzip","Digest","FieldType","TREE_BRANCH","u256_to_field","Branch","Branch","Empty","IntoFields","IntoIter","Key","Leaf","Leaf","MerkleCommitment","MerklePath","MerklePathEntry","MerkleProof","PersistentMerkleNode","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_check","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comm","commitment","compute_root","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","digest","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_merkle_path","from_str","get_key","get_key_by_stake","get_key_value","get_value","hash","hash","hash","hash","header","height","index","index","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_fields","into_iter","into_iter","lookup","multiunzip","new","new","next","num_keys","num_visited","path","register","serialize","serialize","serialize","serialize","serialize_with_mode","serialized_size","set_value","simple_lookup","size","size","tag","to_merkle_path","to_owned","to_owned","to_owned","to_owned","to_string","total_stakes","tree_height","tree_height","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unvisited","update","verify","vzip","vzip","vzip","vzip","vzip","key","pos","siblings","value","children","comm","comm","key","num_keys","total_stakes","value"],"q":[[0,"hotshot_stake_table"],[1,"hotshot_stake_table::mt_based"],[51,"hotshot_stake_table::mt_based::config"],[55,"hotshot_stake_table::mt_based::internal"],[244,"hotshot_stake_table::mt_based::internal::MerklePathEntry"],[248,"hotshot_stake_table::mt_based::internal::PersistentMerkleNode"]],"d":["A stake table implementation that’s based on Append-only …","Locally maintained stake table, generic over public key …","","Update the stake table when the epoch number advances, …","","","","","","","","Config file for stake table","","","","","","","The snapshot of stake table at the beginning of the …","","","","","Returns the argument unchanged.","","The most up-to-date stake table, where the incoming …","Height of the underlying merkle tree, determines the …","","Utilities and internals for maintaining a local stake table","Calls <code>U::from(self)</code>.","","","","The stake table used for leader election.","","","The mapping from public keys to their location in the …","Initiating an empty stake table. Overall capacity is …","","Almost uniformly samples a key weighted by its stake from …","","Set the stake withheld by <code>key</code> to be <code>value</code>. Return the …","","","","","","","","","","Hash algorithm used in Merkle tree, using a RATE-3 rescue","Internal type of Merkle node value(commitment)","Branch of merkle tree. Set to 3 because we are currently …","convert a U256 to a field element.","","","","A trait that converts into a field element. Help avoid “…","An owning iterator over the (key, value) entries of a …","Common trait bounds for generic key type <code>K</code> for …","","","A succint commitment for Merkle tree","Path from a Merkle root to a leaf","A compressed Merkle node for Merkle path","An existential proof","A persistent merkle tree tailored for the stake table. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merkle tree digest","Returns the succint commitment of this subtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a list of Merkle path branches back to an index","","","Imagine that the keys in this subtree is sorted, returns …","","","","","","","","Height of a tree","","Index for the given key","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns a Merkle proof to the given location","","create a new merkle tree iterator from a <code>root</code>. This …","","","Returns the total number of keys in this subtree","","A Merkle path for the given leaf","Insert a new <code>key</code> into the Merkle tree","","","","","","","Set the stake of <code>key</code> to be <code>value</code>. Return the previous stake","Returns the stakes withhelded by a public key, None if the …","","Number of leaves","","Convert an index to a list of Merkle path branches","","","","","","Returns the total stakes in this subtree","","","","","","","","","","","","","","","","","","","","","Update the stake of the <code>key</code> with …","","","","","","","","","","","","","","","","",""],"i":[0,0,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,16,32,16,0,0,0,16,32,0,0,0,0,0,16,32,33,31,47,16,32,33,31,47,16,32,33,31,31,47,16,32,33,31,47,16,32,33,31,31,16,32,33,31,16,32,33,31,31,16,33,47,16,32,33,31,47,16,32,33,31,16,32,33,31,31,31,47,16,32,33,31,16,32,33,31,16,16,32,32,33,33,31,31,16,32,33,31,31,47,16,32,33,31,0,31,33,16,33,33,16,32,33,31,31,31,33,33,47,16,32,33,31,47,16,32,33,31,47,16,32,33,31,47,16,32,33,31,47,16,32,33,31,53,47,16,16,47,47,31,47,16,47,33,16,16,32,33,31,31,31,16,16,31,31,31,0,16,32,33,31,31,16,33,31,47,16,32,33,31,31,31,47,16,32,33,31,47,16,32,33,31,47,16,33,47,16,32,33,31,54,55,55,54,56,56,57,57,56,56,57],"f":[0,0,[1],[[[3,[2]]]],[[],4],[[],4],[[]],[[]],[[[3,[[0,[5,2]]]]],[[3,[[0,[5,2]]]]]],[[]],[[[3,[2]],6],[[8,[7]]]],0,[[[3,[2]]],9],[10],[10],[[[3,[2]]],[[8,[7]]]],[11,[[8,[[3,[2]]]]]],[10],0,[[[3,[[0,[12,2]]]],[3,[[0,[12,2]]]]],9],[[],9],[[],9],[[[3,[[0,[13,2]]]],14],15],[[]],[[[3,[2]],6],[[8,[[17,[[16,[2]]]],7]]]],0,0,[[],10],0,[[]],[[[19,[18]]],[[19,[4,18]]]],[17,[[17,[4]]]],[20,[[20,[4]]]],0,[[[3,[2]],6],[[8,[10,7]]]],[[[3,[2]],6],[[8,[7]]]],0,[10,[[3,[2]]]],[[[3,[2]]],[[8,[7]]]],[[[3,[2]],[0,[21,22]]],23],[[[3,[2]],24],8],[[[3,[2]],2,25],[[8,[25,7]]]],[[[3,[2]],6,2],[[8,[7]]]],[[]],[[[3,[2]],6],[[8,[7]]]],[[],8],[[],8],[[[3,[2]],6],[[8,[7]]]],[[],26],[[[3,[2]],9],[[8,[7]]]],[[]],0,0,0,[25,27],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[0,[28,29]]],[[8,[30]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,[[8,[30]]]],[[[16,[[0,[5,2]]]]],[[16,[[0,[5,2]]]]]],[[[32,[5]]],[[32,[5]]]],[[[33,[5]]],[[33,[5]]]],[31,31],[[]],[[]],[[]],[[]],0,[[[16,[2]]],34],[[[33,[2]]],[[8,[34,7]]]],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[11,[[8,[[16,[2]]]]]],[11,[[8,[[32,[35]]]]]],[11,[[8,[[33,[35]]]]]],[11,[[8,[31]]]],[[36,37,38],[[8,[31,30]]]],[31,34],[10],[10],[10],[10],[10],[[[16,[[0,[12,2]]]],[16,[[0,[12,2]]]]],9],[[[32,[12]],[32,[12]]],9],[[[33,[12]],[33,[12]]],9],[[31,31],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[16,[[0,[13,2]]]],14],15],[[[32,[13]],14],15],[[[33,[13]],14],15],[[31,14],15],[[31,14],15],[[]],[[]],[[]],[[]],[[]],[[[39,[10]]],10],[40,[[8,[31]]]],[[[33,[2]]],[[23,[2]]]],[[[16,[2]],25],23],[[[33,[2]]],23],[[[33,[2]]],[[23,[25]]]],[[[16,[[0,[41,2]]]],42]],[[[32,[41]],42]],[[[33,[41]],42]],[[31,42]],[[[0,[43,29,44]]],[[45,[[0,[43,29,44]]]]]],0,[[[33,[2]]],10],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[[19,[18]]],[[19,[4,18]]]],[[[19,[18]]],[[19,[4,18]]]],[[[19,[18]]],[[19,[4,18]]]],[[[19,[18]]],[[19,[4,18]]]],[[[19,[18]]],[[19,[4,18]]]],[17,[[17,[4]]]],[17,[[17,[4]]]],[17,[[17,[4]]]],[17,[[17,[4]]]],[17,[[17,[4]]]],[20,[[20,[4]]]],[20,[[20,[4]]]],[20,[[20,[4]]]],[20,[[20,[4]]]],[20,[[20,[4]]]],[[],46],[[]],[[[16,[2]]]],[[[16,[2]],10,[39,[10]]],[[8,[[33,[2]],7]]]],[[]],[[[17,[[16,[2]]]]],[[47,[2]]]],[[34,10,10],31],[[[47,[2]]],23],[[[16,[2]]],10],0,0,[[[16,[2]],10,[39,[10]],2,25],[[8,[[17,[[16,[2]]]],7]]]],[[[16,[2]],24],8],[[[32,[48]],24],8],[[[33,[48]],24],8],[[31,24],8],[[31,49,37],[[8,[30]]]],[[31,37],10],[[[16,[2]],10,[39,[10]],2,25],[[8,[7]]]],[[[16,[2]],10,[39,[10]]],[[8,[25,7]]]],[31,10],0,[[],50],[[10,10],[[51,[10]]]],[[]],[[]],[[]],[[]],[[],50],[[[16,[2]]],25],[[[33,[2]]],10],[31,10],[[],8],[[],8],[[],8],[[],8],[52,[[8,[31]]]],[52,[[8,[31]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],26],[[],26],[[],26],[[],26],[[],26],0,[[[16,[2]],10,[39,[10]],2,25,9],[[8,[7]]]],[[[33,[2]],31],[[8,[7]]]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"Private"],[8,"Key"],[3,"StakeTable"],[8,"Any"],[8,"Clone"],[4,"SnapshotVersion"],[4,"StakeTableError"],[4,"Result"],[15,"bool"],[15,"usize"],[8,"Deserializer"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"PersistentMerkleNode"],[3,"Arc"],[3,"Global"],[3,"Box"],[3,"Rc"],[8,"SeedableRng"],[8,"CryptoRngCore"],[4,"Option"],[8,"Serializer"],[3,"U256"],[3,"TypeId"],[8,"PrimeField"],[8,"Iterator"],[8,"Send"],[4,"SerializationError"],[3,"MerkleCommitment"],[4,"MerklePathEntry"],[3,"MerkleProof"],[6,"Fq"],[8,"Deserialize"],[8,"Read"],[4,"Compress"],[4,"Validate"],[15,"slice"],[15,"str"],[8,"Hash"],[8,"Hasher"],[8,"Display"],[8,"Sync"],[3,"IndentedSection"],[15,"array"],[3,"IntoIter"],[8,"Serialize"],[8,"Write"],[3,"String"],[3,"Vec"],[3,"TaggedBase64"],[8,"IntoFields"],[13,"Leaf"],[13,"Branch"],[13,"Branch"],[13,"Leaf"]]},\
"hotshot_task":{"doc":"Abstractions meant for usage with long running consensus …","t":"GDDDDMMFMLLLLLLLLFALLLLMMFAMMMLLLLLLLLLLFLLLLLLLLLLMAAAALLLLLLLLLLLLLDDDIQIGQLLLLLLLLLLLKLLLLLMLLLLLMLKLLKLLMLLLLLLLLLLLKLLDGDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLNQQQDNDDNDNEEINNGQQNIDNNQNIILLLLLLLLLLLLLLLKLLLLLLLLLLLLLMMLLLLLLLLMMMMMMMMLLLLLLLLLLLLMMMMLLLLMMLLLLLMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLDDDIIDMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLMMLLLDNNNNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLL","n":["BoxSyncFuture","GeneratedStream","Merge","MergeN","ProjectedStreamableThing","a","a_first","assert_future","b","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed_sync","event_stream","from","from","from","from","generator","generator","get_pin_mut_from_vec","global_registry","idx","in_progress_fut","in_progress_fut","into","into","into","into","into_stream","into_stream","into_stream","new","new","new","poll_next","poll_next","poll_next","poll_next","project","project","project","project_ref","project_ref","project_ref","size_hint","streams","task","task_impls","task_launcher","task_state","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_poll_next","type_id","type_id","type_id","type_id","ChannelStream","ChannelStreamInner","DummyStream","EventStream","EventType","SendableStream","StreamId","StreamType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","direct_message","direct_message","direct_message","from","from","from","inner","into","into","into","into_stream","new","next_stream_id","poll_next","publish","publish","publish","subscribe","subscribe","subscribe","subscribers","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unsubscribe","unsubscribe","unsubscribe","GlobalRegistry","HotShotTaskId","Modifier","ShutdownFn","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","fmt","from","from","from","get_task_state","into","into","into","is_shutdown","new","operate_on_task","pause_task","register","run_task","shutdown_all","shutdown_task","state_cache","state_list","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_cache","Error","Error","Event","EventStream","FilterEvent","FilterEvent","HST","HandleEvent","HandleEvent","HandleMessage","HandleMessage","HotShotTaskCompleted","HotShotTaskHandler","HotShotTaskTypes","LostReturnValue","LostState","MaybePinnedEventStream","Message","MessageStream","MissingHandler","PassType","ProjectedHST","ShutDown","Shutdown","State","StreamsDied","TS","TaskErr","base_check","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","check_event_stream","check_ip_shutdown_fut","check_message_stream","clone","clone_into","create_shutdown_fut","default","default","deref","deref","deref","eq","event_check","event_stream","event_stream","fmt","from","from","from","from","from","from","from","handle_event","handle_event","handle_message","handle_message","in_progress_fut","in_progress_fut","in_progress_shutdown_fut","in_progress_shutdown_fut","into","into","into","into","into","into","into","into_future","into_future","launch","launch_shutdown_fut","message_check","message_stream","message_stream","name","name","new","poll","project","project_ref","r_val","r_val","register_event_stream","register_handler","register_message_stream","register_registry","register_state","shutdown_fns","shutdown_fns","state","state","status","status","stream_id","stream_id","tid","tid","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","HSTWithEvent","HSTWithEventAndMessage","HSTWithMessage","ImplEventStream","ImplMessageStream","TaskBuilder","_pd","_pd","_pd","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","from","from","from","from","get_stream_id","get_task_id","into","into","into","into","new","register_event_handler","register_event_stream","register_message_handler","register_message_stream","register_registry","register_state","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","TaskRunner","add_task","borrow","borrow_mut","default","from","into","launch","new","registry","tasks","try_from","try_into","type_id","AtomicTaskStatus","Completed","NotStarted","Paused","Running","TaskState","TaskStatus","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compare_and_swap","compare_exchange","compare_exchange_weak","default","deserialize","eq","equivalent","fmt","fmt","fmt","from","from","from","from","from_status","from_usize","get","get_status","into","into","into","into_inner","load","new","new","next","partial_cmp","prev","serialize","set","set_state","store","swap","swap_mut","to_owned","to_owned","to_usize","try_from","try_from","try_from","try_into","try_into","try_into","try_next","type_id","type_id","type_id"],"q":[[0,"hotshot_task"],[69,"hotshot_task::event_stream"],[123,"hotshot_task::global_registry"],[169,"hotshot_task::task"],[303,"hotshot_task::task_impls"],[352,"hotshot_task::task_launcher"],[366,"hotshot_task::task_state"]],"d":["gotta make the futures sync","may be treated as a stream","Stream returned by the <code>merge</code> method.","merge <code>N</code> streams of the same type","","first stream to merge","When <code>true</code>, poll <code>a</code> first, otherwise, <code>poll</code> b`.","yoinked from futures crate","second stream to merge","","","","","","","","","yoinked from futures crate, adds sync bound that we need","mpmc streamable to all subscribed tasks","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Stream generator.","Get a pinned mutable pointer from a list.","the global registry storing the status of all tasks as …","idx to start polling","","Optional in-progress future.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","create a new stream","create a new Merged stream","create a generator","poll the next item in the merged stream","","","","","","","","","","","Streams to be merged.","The <code>HotShot</code> Task. The main point of this library. Uses all …","the task implementations with different features","The hotshot task launcher. Useful for constructing tasks","Astractions over the state of a task and a stream …","","","","","","","","","","","","","","Event stream implementation using channels as the …","trick to make the event stream clonable","a stream that does nothing. it’s immediately closed","Async pub sub event stream NOTE: static bound indicates …","the type of event to process","a stream that plays nicely with async","this is only used for indexing","the type of stream to use","","","","","","","","","","","","send direct message to node","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","inner field. Useful for having the stream itself be clone","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","construct a new event stream","the next unused assignable id","","publish an event to the event stream","","publish an event to the event stream","subscribe to a particular set of events specified by <code>filter</code>…","","","the subscribers to the channel","","","","","","","","","","","","unsubscribe from the stream","","","the global registry provides a place to:","id of task. Usize instead of u64 because used for …","function to modify state","function to shut down gobal registry","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","if the <code>uid</code> is registered with the global registry return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","checks if all registered tasks have completed","create new registry","internal function to run <code>modifier</code> on <code>uid</code> if it exists","set <code>uid</code>’s state to paused returns true upon success and …","register with the global registry return a function to the …","set <code>uid</code>’s state to running returns true upon success and …","shut down all tasks in registry","shut down a task from a different thread returns true if …","possibly stale read version of state NOTE: must include …","up-to-date shared list of statuses only used if <code>state_cache</code>…","","","","","","","","","","","","update the cache","the task encountered an error","the error to return","the event type from the event stream","the global event stream","Return <code>true</code> if the event should be filtered","filter an event","hot shot task","Type wrapper for handling an event","handle an event","Type wrapper for handling a message","handle a message","enum describing how the tasks completed","ADT for wrapping all possible handler types","group of types needed for a hotshot task","lost the return value somehow","we somehow lost the state this is definitely a bug.","an option of a pinned boxed fused event stream","the message stream to receive","the steam of messages from other tasks","Stream exists but missing handler","restrictions on types we wish to pass around. Includes …","","the task shut down successfully","deregister with the registry","the state of the task","the streams the task was listening for died","the task state","a task error that has nice qualities","Do a consistency check on the <code>HST</code> construction","","","","","","","","","","","","","","","build a task NOTE: done here and not on <code>TaskBuilder</code> because","check the event stream returns either a poll if there’s …","checks the in progress shutdown future, <code>fut</code>","check the message stream returns either a poll if there’…","","","creates the shutdown future and returns it","","","","","","","perform event sanity checks","","shared stream","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","handler for events","","handler for messages","","the in progress future","","if we have a future for tracking shutdown progress","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","launch the task NOTE: the only way to get a <code>HST</code> is by usage","launches the shutdown future","perform message sanity checks","","stream of messages","","name of task","create a new task","","","","","the eventual return value, post-cleanup","register an event stream with the task","register a handler with the task","register a message with the task","register with the registry","register state with the task","","functions performing cleanup one should shut down the task …","","state","","state of the task TODO make this boxed. We don’t want to …","","Optional ID of the stream.","","task id","","","","","","","","","","","","","","","","","","","","","","","a hotshot task with an event stream","hotshot task with even and message","a hotshot task with a message","trait to specify features","trait to specify features","builder for task","phantom data","phantom data","phantom data","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","obtains stream id if it exists","get the task id in the global registry","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","create a new task builder","register an event handler","register an event stream","register a message handler","register a message stream","register with the global registry","register the state","","","","","","","","","","","","","runner for tasks <code>N</code> specifies the number of tasks to ensure …","to support builder pattern","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","returns a <code>Vec</code> because type isn’t known","create new runner","global registry","internal set of tasks to launch","","","","A wrapper around <code>TaskStatus</code> which can be safely shared …","the task completed","the task hasn’t started running","NOTE: not useful generally, but VERY useful for byzantine …","the task is running","The state of a task <code>AtomicTaskStatus</code> + book keeping to …","Nit: wish this was for u8 but sadly no Represents the …","","","","","","","","","","","","Stores a value into the atomic if the current value is the …","Stores a value into the atomic if the current value is the …","Stores a value into the atomic if the current value is the …","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","create a task state from a task status","","Gets the value of the atomic without performing an atomic …","gets a possibly stale version of the state","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Loads a value from the atomic.","Creates a new atomic <code>TaskStatus</code>.","create a new state","next status","","previous status","","Sets the value of the atomic without performing an atomic …","sets the state","Stores a value into the atomic.","Stores a value into the atomic, returning the previous …","Stores a value into the atomic, returning the previous …","","","","","","","","","","Try to get the next task status.","","",""],"i":[0,0,0,0,0,13,13,0,13,12,13,21,16,12,13,21,16,0,0,12,13,21,16,21,16,0,0,12,21,16,12,13,21,16,12,13,16,12,13,16,0,12,13,16,12,13,16,12,13,16,13,12,0,0,0,0,12,13,21,16,12,13,21,16,16,12,13,21,16,0,0,0,0,52,0,0,52,66,24,27,66,24,27,24,27,24,27,27,52,24,27,66,24,27,27,66,24,27,24,27,66,24,52,24,27,52,24,27,66,24,27,66,24,27,66,24,27,66,24,27,52,24,27,0,0,0,0,37,31,32,37,31,32,31,32,31,32,32,31,32,37,31,32,32,37,31,32,32,32,32,32,32,32,32,32,32,32,31,32,37,31,32,37,31,32,37,31,32,32,45,41,41,41,0,50,0,0,50,0,50,0,0,0,45,45,0,41,41,45,0,0,45,50,41,45,0,0,42,50,46,47,45,44,42,30,50,46,47,45,44,42,30,41,44,44,44,30,30,44,46,30,46,47,30,45,42,44,42,45,50,46,47,45,44,42,30,44,42,44,42,44,42,44,42,50,46,47,45,44,42,30,42,42,42,44,42,44,42,44,42,42,42,42,42,44,42,42,42,42,42,42,44,42,44,42,44,42,44,42,44,42,30,50,46,47,45,44,42,30,50,46,47,45,44,42,30,50,46,47,45,44,42,30,0,0,0,0,0,0,54,56,57,43,54,56,57,43,54,56,57,54,56,57,43,54,56,57,43,43,43,54,56,57,43,43,43,43,43,43,43,43,54,56,57,43,54,56,57,43,54,56,57,0,60,60,60,60,60,60,60,60,60,60,60,60,60,0,36,36,36,36,0,0,62,36,39,62,36,39,36,39,36,39,36,62,62,62,39,36,36,36,62,36,39,62,62,36,39,39,62,62,39,62,36,39,62,62,62,39,39,36,39,36,62,39,62,62,62,36,39,62,62,36,39,62,36,39,39,62,36,39],"f":[0,0,0,0,0,0,0,[1,1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[1,2,3,4]]],5],0,[[]],[[]],[[]],[[]],0,0,[[[7,[6]],[9,[8]]],[[10,[7]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[11]]],[[12,[11]]]],[[11,11],[[13,[11,11]]]],[[[15,[14]]],16],[[[7,[11]],[7,[11]],17,18],[[20,[[10,[19]]]]]],[[[7,[[12,[11]]]],17],[[20,[10]]]],[[[7,[[13,[11,11]]]],17],[[20,[10]]]],[[[7,[16]],17],[[20,[10]]]],[[[7,[[12,[11]]]]],[[0,[11]]]],0,[[[7,[16]]],21],[[[7,[[12,[11]]]]],[[0,[11]]]],0,0,[[[13,[11,11]]]],0,0,0,0,0,[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[7,17],[[20,[[10,[22]]]]]],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[24,24],[[[27,[[0,[25,26]]]]],[[27,[[0,[25,26]]]]]],[[]],[[]],[[],[[27,[26]]]],[28,[[7,[[29,[1]]]]]],[[24,28],[[7,[[29,[1]]]]]],[[[27,[26]],28],[[7,[[29,[1]]]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],[[27,[26]]]],0,[[[7,[24]],17],[[20,[10]]]],[[],[[7,[[29,[1]]]]]],[24,[[7,[[29,[1]]]]]],[[[27,[26]]],[[7,[[29,[1]]]]]],[30,[[7,[[29,[1]]]]]],[[24,30],[[7,[[29,[1]]]]]],[[[27,[26]],30],[[7,[[29,[1]]]]]],0,[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[28,[[7,[[29,[1]]]]]],[[24,28],[[7,[[29,[1]]]]]],[[[27,[26]],28],[[7,[[29,[1]]]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[32,32],[[]],[[]],[[],32],[31],[[32,33],34],[[]],[[]],[[]],[[32,35],[[10,[36]]]],[[]],[[]],[[]],[32,18],[[],32],[[32,35,37],[[19,[36,18]]]],[[32,35],18],[[32,38,39]],[[32,35],18],[32],[[32,40],18],0,0,[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[42,[41]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[43,[2]]],[[42,[2]]]],[[[44,[41]],17],[[19,[[20,[45]],18]]]],[[[44,[41]],[7,[[29,[1]]]],17],[[20,[45]]]],[[[44,[41]],17],[[19,[[20,[45]],18]]]],[[[30,[[0,[25,26]]]]],[[30,[[0,[25,26]]]]]],[[]],[[[44,[41]]],[[7,[[29,[1]]]]]],[[],[[46,[41]]]],[[],[[30,[26]]]],[[[46,[41]]]],[[[47,[41]]]],[[[30,[26]]]],[[45,45],18],[[[42,[41]]]],0,0,[[45,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[41]]],[[48,[45]]]],[[[44,[41]],17],[[20,[45]]]],[[[42,[41]]]],0,0,0,0,[49,[[42,[41]]]],[[[7,[[42,[41]]]],17],20],[[[7,[[42,[41]]]]],[[44,[41]]]],[[[7,[[42,[41]]]]],[[0,[41]]]],0,0,[[[42,[41]],30],[[42,[41]]]],[[[42,[41]],[50,[41]]],[[42,[41]]]],[[[42,[41]]],[[42,[41]]]],[[[42,[41]],32],[[42,[41]]]],[[[42,[41]]],[[42,[41]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[43,[[54,[51,26,52,53]]]]],[[42,[[54,[51,26,52,53]]]]]],[[[43,[[56,[51,26,55,53]]]]],[[42,[[56,[51,26,55,53]]]]]],[[[43,[[57,[51,26,52,26,55,53]]]]],[[42,[[57,[51,26,52,26,55,53]]]]]],[[]],[[]],[[]],[[]],[[[43,[41]]],[[10,[28]]]],[[[43,[41]]],[[10,[35]]]],[[]],[[]],[[]],[[]],[49,[[43,[41]]]],[[[43,[58,41]],[46,[58,41]]],[[43,[58,41]]]],[[[43,[58,41]],30],[[43,[58,41]]]],[[[43,[59,41]],[47,[59,41]]],[[43,[59,41]]]],[[[43,[59,41]]],[[43,[59,41]]]],[[[43,[41]],32],[[43,[41]]]],[[[43,[41]]],[[43,[41]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],0,[[60,35,49,[48,[45]]],60],[[]],[[]],[[],60],[[]],[[]],[60,6],[[],60],0,0,[[],22],[[],22],[[],23],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[36,36],[39,39],[[]],[[]],[[36,36],61],[[62,36,36,63],36],[[62,36,36,63,63],[[22,[36,36]]]],[[62,36,36,63,63],[[22,[36,36]]]],[[],39],[64,[[22,[36]]]],[[36,36],18],[[],18],[[62,33],34],[[36,33],34],[[39,33],34],[[]],[36,62],[[]],[[]],[[[15,[62]]],39],[40,36],[62,36],[39,36],[[]],[[]],[[]],[62,36],[[62,63],36],[36,62],[[],39],0,[[36,36],[[10,[61]]]],0,[[36,65],22],[[62,36]],[[39,36]],[[62,36,63]],[[62,36,63],36],[[62,36],36],[[]],[[]],[36,40],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[[7,[39]]],[[10,[36]]]],[[],23],[[],23],[[],23]],"c":[384],"p":[[8,"Future"],[8,"Sized"],[8,"Send"],[8,"Sync"],[6,"BoxSyncFuture"],[3,"Vec"],[3,"Pin"],[15,"slice"],[8,"SliceIndex"],[4,"Option"],[8,"Stream"],[3,"MergeN"],[3,"Merge"],[8,"Fn"],[3,"Arc"],[3,"GeneratedStream"],[3,"Context"],[15,"bool"],[4,"Either"],[4,"Poll"],[3,"ProjectedStreamableThing"],[4,"Result"],[3,"TypeId"],[3,"DummyStream"],[8,"Clone"],[8,"PassType"],[3,"ChannelStream"],[6,"StreamId"],[3,"Box"],[3,"FilterEvent"],[3,"ShutdownFn"],[3,"GlobalRegistry"],[3,"Formatter"],[6,"Result"],[6,"HotShotTaskId"],[4,"TaskStatus"],[3,"Modifier"],[15,"str"],[3,"TaskState"],[15,"usize"],[8,"HotShotTaskTypes"],[3,"HST"],[3,"TaskBuilder"],[3,"ProjectedHST"],[4,"HotShotTaskCompleted"],[3,"HandleEvent"],[3,"HandleMessage"],[6,"BoxFuture"],[3,"String"],[4,"HotShotTaskHandler"],[8,"TaskErr"],[8,"EventStream"],[8,"TS"],[3,"HSTWithEvent"],[8,"SendableStream"],[3,"HSTWithMessage"],[3,"HSTWithEventAndMessage"],[8,"ImplEventStream"],[8,"ImplMessageStream"],[3,"TaskRunner"],[4,"Ordering"],[3,"AtomicTaskStatus"],[4,"Ordering"],[8,"Deserializer"],[8,"Serializer"],[3,"ChannelStreamInner"]]},\
"hotshot_task_impls":{"doc":"The consensus layer for hotshot. This currently implements …","t":"AAAAAADDGDDGLMMMLLLLLLLLLLMLLLLLLLLLLMLLMMFMMMLLLLLLLLLLLLLMMLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMLLMMMMFLMMLLLLLLLLLLLLLLLMFLLLLLDDDGDGLMMLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLMMLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMFLLLLLNNNNNNNNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLDDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLFLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLNDGDGDEDNNLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLNNNNEDGDGDDDDGLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLMLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLL","n":["consensus","da","events","harness","network","view_sync","ConsensusTaskError","ConsensusTaskSnafu","ConsensusTaskTypes","SequencingConsensusTaskState","VoteCollectionTaskState","VoteCollectionTypes","__clone_box","_pd","accumulator","api","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","block","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","certs","clone","clone_into","committee_exchange","consensus","consensus_event_filter","cur_view","cur_view","current_proposal","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","event_stream","event_stream","fail","fmt","fmt","fmt","from","from","from","from","genesis_leaf","handle_event","header","id","id","in_current_span","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","output_event_stream","provide","publish_proposal_if_able","qc","quorum_exchange","quorum_exchange","registry","sequencing_consensus_handle","source","timeout","timeout_task","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_view","vote_collector","vote_handle","vote_if_able","vzip","vzip","vzip","vzip","ConsensusTaskError","ConsensusTaskSnafu","DATaskState","DATaskTypes","DAVoteCollectionTaskState","DAVoteCollectionTypes","__clone_box","accumulator","api","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone_into","committee_exchange","committee_exchange","consensus","cur_view","cur_view","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","event_stream","event_stream","fail","filter","fmt","fmt","fmt","from","from","from","from","handle_event","header","id","id","in_current_span","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","provide","registry","source","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vote_collector","vote_handle","vzip","vzip","vzip","vzip","wait_for_transactions","DACRecv","DACSend","DAProposalRecv","DAProposalSend","DAVoteRecv","DAVoteSend","QCFormed","QuorumProposalRecv","QuorumProposalSend","QuorumVoteRecv","QuorumVoteSend","SendDABlockData","SequencingHotShotEvent","Shutdown","Timeout","TransactionSend","TransactionsRecv","ViewChange","ViewSyncCertificateRecv","ViewSyncCertificateSend","ViewSyncTimeout","ViewSyncTrigger","ViewSyncVoteRecv","ViewSyncVoteSend","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","from","hash","init","into","into_any","into_any_arc","into_any_rc","to_owned","try_from","try_into","type_id","vzip","TestHarnessState","TestHarnessTaskError","TestHarnessTaskSnafu","TestHarnessTaskTypes","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","expected_output","fail","fmt","fmt","fmt","from","from","from","handle_event","header","in_current_span","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_error","provide","run_harness","source","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Committee","NetworkEventTaskState","NetworkEventTaskTypes","NetworkMessageTaskState","NetworkMessageTaskTypes","NetworkTaskError","NetworkTaskKind","NetworkTaskSnafu","Quorum","ViewSync","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","channel","clone","clone","clone_into","clone_into","committee_filter","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","event_stream","event_stream","fail","filter","fmt","fmt","fmt","fmt","from","from","from","from","from","handle_event","handle_messages","header","in_current_span","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","phantom","provide","quorum_filter","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","view","view_sync_filter","vzip","vzip","vzip","vzip","vzip","Commit","Finalize","None","PreCommit","ViewSyncPhase","ViewSyncRelayTaskState","ViewSyncRelayTaskStateTypes","ViewSyncReplicaTaskState","ViewSyncReplicaTaskStateTypes","ViewSyncTaskError","ViewSyncTaskInfo","ViewSyncTaskSnafu","ViewSyncTaskState","ViewSyncTaskStateTypes","__clone_box","__clone_box","accumulator","api","api","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone","clone_into","clone_into","current_view","current_view","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","event_stream","event_stream","event_stream","event_stream_id","exchange","exchange","exchange","fail","filter","finalized","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","handle_event","handle_event","handle_event","hash","header","id","id","id","in_current_span","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","last_garbage_collected_view","next_view","next_view","num_timeouts_tracked","partial_cmp","phase","provide","registry","relay","relay_task_map","replica_task_map","sent_view_change_event","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_sync_timeout","view_sync_timeout","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"hotshot_task_impls"],[6,"hotshot_task_impls::consensus"],[129,"hotshot_task_impls::da"],[239,"hotshot_task_impls::events"],[289,"hotshot_task_impls::harness"],[366,"hotshot_task_impls::network"],[496,"hotshot_task_impls::view_sync"]],"d":["the task which implements the main parts of consensus","The task which implements the main parts of data …","Defines the events passed between tasks","Defines the types to run unit tests for a task.","The task which implements the network.","The task which implements view synchronization","Error returned by the consensus task","SNAFU context selector for the <code>ConsensusTaskError</code> error","Type alias for Consensus task","The state for the consensus task.  Contains all of the …","State for the vote collection task.  This handles the …","Type allias for consensus’ vote collection task","","needed to typecheck","Accumulator for votes","Consensus api","","","","","","","","","","","Current block submitted to DA","","","","","","","","","Consume the selector and return the associated error","","All the DA certs we’ve received for current and future …","","","the committee exchange","Reference to consensus. The replica will require a write …","Filter for consensus, returns true for event types the …","View number this view is executing in.","View which this vote collection task is collecting votes in","The most recent proposal we have, will correspond to the …","","","","","","","","","","","","","","Global events stream to publish events","The event stream shared by all tasks","Consume the selector and return a <code>Result</code> with the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Handles a consensus event received on the event stream","","The node’s id","Node id","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Event stream to publish events to the application layer","","Sends a proposal if possible from the high qc we have","The most Recent QC we’ve formed from votes, if we’ve …","the quorum exchange","the quorum exchange","The global task registry","Event handle for consensus","","View timeout from config.","Have we already sent a proposal for a particular view …","","","","","","","","","","","","","","","Must only update the view and GC if the view actually …","Current Vote collection task, with it’s view.","","","","","","","Error type for consensus tasks","SNAFU context selector for the <code>ConsensusTaskError</code> error","Tracks state of a DA task","Type alias for DA Task Types","Struct to maintain DA Vote Collection task state","Type alias for DA Vote Collection Types","","the vote accumulator","The state’s api","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","the committee exchange","the committee exchange","Reference to consensus. Leader will require a read lock on …","View number this view is executing in.","the current view","","","","","","","","","","","","","","Global events stream to publish events","event stream for channel events","Consume the selector and return a <code>Result</code> with the …","Filter the DA event.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","main task event handler","","This state’s ID","the id of this task state","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Global registry task for the state","","","","","","","","","","","","","","","","The view and ID of the current vote collection task, if …","","","","","","return None if we can’t get transactions","A Data Availability Certificate (DAC) has been recieved by …","The DA leader has collected enough votes to form a DAC; …","A DA proposal has been received from the network; handled …","Send a DA proposal to the DA committee; emitted by the DA …","A DA vote has been received by the network; handled by the …","Send a DA vote to the DA leader; emitted by DA committee …","The next leader has collected enough votes to form a QC; …","A quorum proposal has been received from the network; …","Send a quorum proposal to the network; emitted by the …","A quorum vote has been received from the network; handled …","Send a quorum vote to the next leader; emitted by a …","Event to send DA block data from DA leader to next quorum …","All of the possible events that can be passed between …","Shutdown the task","A consensus view has timed out; emitted by a replica in …","Send transactions to the network","Receive transactions from the network","The current view has changed; emitted by the replica in …","Receive a view sync certificate from the network; received …","Send a view sync certificate to the network; emitted by a …","Timeout for the view sync protocol; emitted by a replica …","Trigger the start of the view sync protocol; emitted by …","Receive a view sync vote from the network; received by a …","Send a view sync vote to the network; emitted by a replica …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","The state for the test harness task. Keeps track of which …","Error emitted if the test harness task fails","SNAFU context selector for the <code>TestHarnessTaskError</code> error","Type alias for the Test Harness Task","","","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","","","","","","","","","","","The expected events we get from the test.  Maps an event …","Consume the selector and return a <code>Result</code> with the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handles an event for the Test Harness Task.  If the event …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Runs a test by building the task using <code>build_fn</code> and then …","","","","","","","","","","","","","","","","da committee","network event task state","network event task types","the network message task state","networking message task types","network error (no errors right now, only stub)","the type of network task","SNAFU context selector for the <code>NetworkTaskError</code> error","quorum: the normal “everyone” committee","view sync","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","","comm channel","","","","","committee filter","","","","","","","","","","","","","","","","","event stream (used for publishing)","event stream","Consume the selector and return a <code>Result</code> with the …","network filter","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handle the given event.","Handle the message.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","phantom data","","quorum filter","","","","","","","","","","","","","","","","","","","","view number","view sync filter","","","","","","Commit phase","Finalize phase","No phase; before the protocol has begun","PreCommit phase","Phases of view sync","State of a view sync relay task","Types used by the view sync relay task","State of a view sync replica task","Types for view sync replica state","Stub of a view sync error","Information about view sync sub-tasks","SNAFU context selector for the <code>ViewSyncTaskError</code> error","Main view sync task state","Types for the main view sync task","","","Vote accumulator","HotShot consensus API","HotShot consensus API","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","","","View HotShot is currently in","Current round HotShot is in","","","","","","","","","","","","","","","","","","","","","","","","","","","Event stream to publish events to","Event stream to publish events to","Event stream to publish events to","Id of the event stream of a certain task","View sync exchange","View sync exchange","View sync exchange","Consume the selector and return a <code>Result</code> with the …","Filter view sync related events.","Whether we have seen a finalized certificate","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handles incoming events for the main view sync task","Handle incoming events for the view sync replica task","Handles incoming events for the view sync relay task","","","Our node id; for logging","Our node id; for logging","Our node id; for logging","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Last view we garbage collected old tasks","View HotShot wishes to be in","Round HotShot wishes to be in","How many timeouts we’ve seen in a row; is reset upon a …","","The last seen phase of the view sync protocol","","Registry to register sub tasks","The relay index we are currently on","Map of running relay tasks","Map of running replica tasks","Whether we have already sent a view change event for …","","","","","","","","","","","","","","","","","","","","","","","","","","Timeout duration for view sync rounds","Timeout for view sync rounds","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,7,19,32,19,19,32,4,7,19,32,4,7,4,4,19,19,32,4,7,19,32,4,7,7,4,19,7,7,19,19,0,19,32,19,19,32,4,7,19,32,4,7,4,19,32,4,7,19,32,7,4,4,7,19,32,4,7,19,19,4,19,32,4,19,32,4,7,19,32,4,7,19,32,4,7,19,32,4,7,19,32,4,7,7,19,4,19,19,19,32,19,0,4,19,19,7,4,19,32,4,7,19,32,4,7,19,32,4,7,19,19,0,19,19,32,4,7,0,0,0,0,0,0,34,37,35,35,37,33,34,35,37,33,34,33,33,35,37,33,34,35,37,33,34,34,33,34,34,35,37,35,35,37,35,37,33,34,35,37,33,34,33,35,37,33,34,35,37,34,35,33,33,34,35,37,33,34,35,33,35,37,33,35,37,33,34,35,37,33,34,35,37,33,34,35,37,33,34,35,37,33,34,34,33,35,33,34,33,35,37,33,34,35,37,33,34,35,37,33,34,35,0,35,37,33,34,35,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,45,46,44,45,46,44,45,44,44,46,44,45,46,44,45,45,44,45,45,46,44,45,46,44,45,44,46,44,45,46,45,44,44,45,46,44,45,0,44,44,46,44,45,46,44,45,46,44,45,46,44,45,46,44,45,45,44,0,44,45,44,46,44,45,46,44,45,46,44,45,46,44,45,52,0,0,0,0,0,0,0,52,52,52,51,60,59,52,50,51,60,59,52,50,51,50,50,60,59,52,50,51,60,59,52,50,51,51,50,59,52,51,52,51,59,60,59,52,50,51,60,59,52,50,51,50,60,59,52,50,51,60,59,51,59,52,50,50,51,60,59,52,50,51,59,60,50,50,60,59,52,50,51,60,59,52,50,51,60,59,52,50,51,60,59,52,50,51,60,59,52,50,51,51,59,50,59,50,52,51,50,60,59,52,50,51,60,59,52,50,51,60,59,52,50,51,59,59,60,59,52,50,51,63,63,63,63,0,0,0,0,0,0,0,0,0,0,63,62,67,65,66,65,66,67,63,64,61,62,65,66,67,63,64,61,62,61,61,65,66,67,63,64,61,62,65,66,67,63,64,61,62,62,61,63,62,63,62,65,66,64,65,66,67,63,64,61,62,65,66,67,63,64,61,62,61,65,66,67,63,64,61,62,63,63,63,65,66,67,64,65,66,67,62,65,66,63,61,61,62,65,66,67,63,64,61,62,65,66,67,63,61,65,66,67,61,65,66,67,63,64,61,62,65,66,67,63,64,61,62,65,66,67,63,64,61,62,65,66,67,63,64,61,62,65,66,67,63,64,61,62,62,65,65,66,65,63,66,61,65,66,65,65,66,61,63,62,61,65,66,67,63,64,61,62,65,66,67,63,64,61,62,65,66,67,63,64,61,62,65,66,65,66,67,63,64,61,62],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[1],0,0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[4,[[6,[5]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,4],[4,[[6,[3]]]],0,[7,7],[[]],0,0,[[[10,[8,[9,[8]]]]],11],0,0,0,[12],[12],[12],[12],[12],[12],[12],[12],[4,13],[12],[12],[12],[12],0,0,[7,[[14,[4]]]],[[4,15],16],[[4,15],16],[[7,15],16],[[]],[[]],[[]],[[]],[[[19,[8,[9,[8]],[18,[8,[17,[8]],[9,[8]]]]]]],[[6,[[17,[8]]]]]],[[[19,[8,[9,[8]],[18,[8,[17,[8]],[9,[8]]]]]],[10,[8,[9,[8]]]]]],[[[0,[20,21,22]]],[[23,[[0,[20,21,22]]]]]],0,0,[[]],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[7,4],0,[28],[[[19,[8,[9,[8]],[18,[8,[17,[8]],[9,[8]]]]]],[29,[8]]],11],0,0,0,0,[[[10,[8,[9,[8]]]],[19,[8,[9,[8]],[18,[8,[17,[8]],[9,[8]]]]]]]],[4,[[6,[3]]]],0,0,[[]],[[],30],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],31],[[],31],[[],31],[[],31],[[[19,[8,[9,[8]],[18,[8,[17,[8]],[9,[8]]]]]]],11],0,[[[32,[8,[9,[8]]]],[10,[8,[9,[8]]]]]],[[[19,[8,[9,[8]],[18,[8,[17,[8]],[9,[8]]]]]]],11],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[1],0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[33,[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,33],[33,[[6,[3]]]],[34,34],[[]],0,0,0,0,0,[12],[12],[12],[12],[12],[12],[12],[12],[33,13],[12],[12],[12],[12],0,0,[34,[[14,[33]]]],[[[10,[8,[9,[8]]]]],11],[[33,15],16],[[33,15],16],[[34,15],16],[[]],[[]],[[]],[[]],[[[35,[8,[9,[8]],[18,[8,[17,[8]],[9,[8]]]]]],[10,[8,[9,[8]]]]],[[6,[36]]]],[[[0,[20,21,22]]],[[23,[[0,[20,21,22]]]]]],0,0,[[]],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[34,33],[28],0,[33,[[6,[3]]]],[[]],[[],30],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],31],[[],31],[[],31],[[],31],0,[[[37,[8,[9,[8]]]],[10,[8,[9,[8]]]]]],[[]],[[]],[[]],[[]],[[[35,[8,[9,[8]],[18,[8,[17,[8]],[9,[8]]]]]],[17,[8]]],[[6,[38]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],2],[[],2],[[]],[[]],[[[10,[[0,[39,8]],[0,[39,[9,[[0,[39,8]]]]]]]]],[[10,[[0,[39,8]],[0,[39,[9,[[0,[39,8]]]]]]]]]],[[]],[12],[12],[12],[[[10,[[0,[40,8]],[0,[40,[9,[[0,[40,8]]]]]]]],[10,[[0,[40,8]],[0,[40,[9,[[0,[40,8]]]]]]]]],11],[[],11],[[],11],[[[10,[[0,[41,8]],[0,[41,[9,[[0,[41,8]]]]]]]],15],16],[[]],[[[10,[[0,[42,8]],[0,[42,[9,[[0,[42,8]]]]]]]],43]],[[],12],[[]],[[[25,[24]]],[[25,[2,24]]]],[26,[[26,[2]]]],[27,[[27,[2]]]],[[]],[[],14],[[],14],[[],31],[[]],0,0,0,0,[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[44,[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[45,44],[44,[[6,[3]]]],[45,45],[[]],[12],[12],[12],[12],[12],[12],[44,13],[12],[12],[12],0,[45,[[14,[44]]]],[[44,15],16],[[44,15],16],[[45,15],16],[[]],[[]],[[]],[[[10,[8,[9,[8]]]],[46,[8,[9,[8]]]]]],[[[0,[20,21,22]]],[[23,[[0,[20,21,22]]]]]],[[]],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[45,44],[28],[[[38,[[10,[8,[9,[8]]]]]],[47,[[10,[8,[9,[8]]]],12]],[6,[[48,[[10,[8,[9,[8]]]]]]]],49]],[44,[[6,[3]]]],[[]],[[],30],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],31],[[],31],[[],31],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[50,[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,50],[50,[[6,[3]]]],0,[52,52],[51,51],[[]],[[]],[[[10,[8,[9,[8]]]]],11],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[50,13],[12],[12],[12],[12],[12],0,0,[51,[[14,[50]]]],[52,[[53,[[10,[8,[9,[8]]]]]]]],[[52,15],16],[[50,15],16],[[50,15],16],[[51,15],16],[[]],[[]],[[]],[[]],[[]],[[[59,[8,[9,[8]],54,[55,[8]],[56,[8]],[58,[8,[57,[8,[9,[8]]]],54,[55,[8]],[56,[8]]]]]],[10,[8,[9,[8]]]],[56,[8]]],[[6,[36]]]],[[[60,[8,[9,[8]]]],[38,[[57,[8,[9,[8]]]]]]]],[[[0,[20,21,22]]],[[23,[[0,[20,21,22]]]]]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[51,50],0,[28],[[[10,[8,[9,[8]]]]],11],[50,[[6,[3]]]],[[]],[[]],[[],30],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],31],[[],31],[[],31],[[],31],[[],31],0,[[[10,[8,[9,[8]]]]],11],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],0,0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[61,[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62,61],[61,[[6,[3]]]],[63,63],[62,62],[[]],[[]],0,0,[[],64],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[61,13],[12],[12],[12],[12],[12],[12],[12],[[63,63],11],[[],11],[[],11],0,0,0,0,0,0,0,[62,[[14,[61]]]],[[[10,[8,[9,[8]]]]],11],0,[[63,15],16],[[61,15],16],[[61,15],16],[[62,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[65,[8,[9,[8]],[0,[[18,[8,[17,[8]],[9,[8]]]],39]]]],[10,[8,[9,[8]]]]]],[[[66,[8,[9,[8]],[18,[8,[17,[8]],[9,[8]]]]]],[10,[8,[9,[8]]]]]],[[[67,[8,[9,[8]]]],[10,[8,[9,[8]]]]]],[[63,43]],[[[0,[20,21,22]]],[[23,[[0,[20,21,22]]]]]],0,0,0,[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[[[25,[24]]],[[25,[2,24]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[26,[[26,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[27,[[27,[2]]]],[62,61],0,0,0,0,[[63,63],[[6,[68]]]],0,[28],0,0,0,0,0,[61,[[6,[3]]]],[[]],[[]],[[],30],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"Private"],[8,"Any"],[8,"Error"],[3,"ConsensusTaskError"],[3,"Backtrace"],[4,"Option"],[3,"ConsensusTaskSnafu"],[8,"NodeType"],[8,"NodeImplementation"],[4,"SequencingHotShotEvent"],[15,"bool"],[15,"usize"],[15,"str"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"SequencingLeaf"],[8,"SequencingConsensusApi"],[3,"SequencingConsensusTaskState"],[8,"Display"],[8,"Send"],[8,"Sync"],[3,"IndentedSection"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"Demand"],[3,"QuorumCertificate"],[3,"String"],[3,"TypeId"],[3,"VoteCollectionTaskState"],[3,"ConsensusTaskError"],[3,"ConsensusTaskSnafu"],[3,"DATaskState"],[4,"HotShotTaskCompleted"],[3,"DAVoteCollectionTaskState"],[3,"Vec"],[8,"Clone"],[8,"PartialEq"],[8,"Debug"],[8,"Hash"],[8,"Hasher"],[3,"TestHarnessTaskError"],[3,"TestHarnessTaskSnafu"],[3,"TestHarnessState"],[3,"HashMap"],[3,"ChannelStream"],[8,"FnOnce"],[3,"NetworkTaskError"],[3,"NetworkTaskSnafu"],[4,"NetworkTaskKind"],[3,"FilterEvent"],[8,"ProposalType"],[8,"VoteType"],[8,"Membership"],[3,"Message"],[8,"CommunicationChannel"],[3,"NetworkEventTaskState"],[3,"NetworkMessageTaskState"],[3,"ViewSyncTaskError"],[3,"ViewSyncTaskSnafu"],[4,"ViewSyncPhase"],[3,"ViewSyncTaskInfo"],[3,"ViewSyncTaskState"],[3,"ViewSyncReplicaTaskState"],[3,"ViewSyncRelayTaskState"],[4,"Ordering"]]},\
"hotshot_testing":{"doc":"","t":"ENNENGLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLAAAAAAALLLLLALLLLDEDDGNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLGGDGDDGDGDGGGGGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNDNDNDNDNDNDDEGDDGNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLMLMMMMMMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMDNDDDDGNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLFFFFDDLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMLLMLLLLMLLLLGGGGGDGDGLLLLLLLLLMMMLLLLLLLLMLLLLLLLLLLMLMMMMLLLLMLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMMMMMLMLLLLLLLLLNNDEDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLL","n":["GlobalTestEvent","SafetyViolation","ShutDown","ShutDownReason","SuccessfullyCompleted","TestTask","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","completion_task","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","node_types","overall_safety_task","spinning_task","task_helpers","test_builder","test_launcher","test_runner","to_owned","try_from","try_from","try_into","try_into","txn_task","type_id","type_id","vzip","vzip","CompletionTask","CompletionTaskDescription","CompletionTaskErr","CompletionTaskErrSnafu","CompletionTaskTypes","TimeBasedCompletionTaskBuilder","TimeBasedCompletionTaskDescription","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_and_launch","build_and_launch","cause","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","duration","fail","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","handles","header","in_current_span","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","provide","source","test_event_stream","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","SequencingFallbackExchange","SequencingLibp2pExchange","SequencingLibp2pImpl","SequencingMemoryExchange","SequencingMemoryImpl","SequencingTestTypes","SequencingWebExchanges","SequencingWebImpl","StaticFallbackComm","StaticFallbackImpl","StaticLibp2pDAComm","StaticLibp2pQuorumComm","StaticLibp2pViewSyncComm","StaticMembership","StaticMemoryDAComm","StaticMemoryQuorumComm","StaticMemoryViewSyncComm","StaticWebDAComm","StaticWebQuorumComm","StaticWebViewSyncComm","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","gen_comm_channels","gen_comm_channels","gen_comm_channels","gen_comm_channels","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new_channel_maps","new_channel_maps","new_channel_maps","new_channel_maps","partial_cmp","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Err","Failed","InProgress","InconsistentBlocks","InconsistentBlocksSnafu","InconsistentStates","InconsistentStatesSnafu","InconsistentTxnsNum","InconsistentTxnsNumSnafu","MismatchedLeaf","MismatchedLeafSnafu","NotEnoughDecides","NotEnoughDecidesSnafu","Ok","OverallSafetyPropertiesDescription","OverallSafetyTask","OverallSafetyTaskErr","OverallSafetyTaskTypes","RoundCtx","RoundResult","StateAndBlock","TooManyFailures","TooManyFailuresSnafu","ViewStatus","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","block_map","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","build","cause","check_block","check_leaf","check_state","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","ctx","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","expected","expected","fail","fail","fail","fail","fail","fail","failed_nodes","failed_views","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","gen_leaves","got","got","handles","header","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","insert_error_to_context","insert_into_result","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","into_error","into_error","into_error","into_error","into_error","leaf_map","map","num_failed_views","num_successful_views","num_txns_map","provide","round_results","source","state_map","status","success_nodes","successful_views","test_event_stream","threshold_calculator","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transaction_threshold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_status","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","expected","expected","got","got","map","ChangeNode","Down","SpinningTask","SpinningTaskDescription","SpinningTaskErr","SpinningTaskErrSnafu","SpinningTaskTypes","Up","UpDown","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","cause","changes","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","fail","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","handles","header","idx","in_current_span","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","late_start","node_changes","provide","source","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","updown","vzip","vzip","vzip","vzip","vzip","vzip","build_quorum_proposal","build_quorum_proposal_and_signature","build_system_handle","key_pair_for_id","TestMetadata","TimingData","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","completion_task_description","da_committee_size","default","default","default_more_nodes_less_success","default_multiple_rounds","default_stress","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","gen_launcher","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","min_transactions","next_view_timeout","num_bootstrap_nodes","overall_safety_properties","propose_max_round_time","propose_min_round_time","round_start_delay","spinning_properties","start_delay","start_nodes","timeout_ratio","timing_data","to_owned","to_owned","total_nodes","try_from","try_from","try_into","try_into","txn_description","type_id","type_id","vzip","vzip","CommitteeNetworkGenerator","Generator","Hook","Networks","QuorumNetworkGenerator","ResourceGenerators","TaskGenerator","TestLauncher","ViewSyncNetworkGenerator","add_hook","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","channel_generator","completion_task_generator","config","deref","deref","deref_mut","deref_mut","drop","drop","from","from","hooks","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","launch","metadata","modify_default_config","overall_safety_task_generator","resource_generator","spinning_task_generator","storage","try_from","try_from","try_into","try_into","txn_task_generator","type_id","type_id","vzip","vzip","with_completion_task_generator","with_hooks","with_overall_safety_task_generator","with_resource_generator","with_spinning_task_generator","with_txn_task_generator","Node","TestRunner","__clone_box","add_node_with_config","add_nodes","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","from","from","handle","init","init","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","late_start","launcher","next_node_id","node_id","nodes","run_test","task_runner","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DistributionBased","RoundRobinTimeBased","TxnTask","TxnTaskDescription","TxnTaskErr","TxnTaskErrSnafu","TxnTaskTypes","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","cause","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","fail","fmt","fmt","fmt","fmt","from","from","from","from","handles","header","in_current_span","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","next_node_idx","provide","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":[[0,"hotshot_testing"],[54,"hotshot_testing::completion_task"],[180,"hotshot_testing::node_types"],[367,"hotshot_testing::overall_safety_task"],[703,"hotshot_testing::overall_safety_task::OverallSafetyTaskErr"],[708,"hotshot_testing::spinning_task"],[860,"hotshot_testing::task_helpers"],[864,"hotshot_testing::test_builder"],[932,"hotshot_testing::test_launcher"],[993,"hotshot_testing::test_runner"],[1042,"hotshot_testing::txn_task"]],"d":["","","","","","","","","","","","","","","","","","task that decides when things are complete","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","node types","task that’s consuming events and asserting safety","task to spin nodes up and down","Helpers for initializing system context handle and …","builder","launcher","runner","","","","","","task that’s submitting transactions to the stream","","","","","Data availability task state","Description for a completion task.","the idea here is to run as long as we want Data …","SNAFU context selector for the <code>CompletionTaskErr</code> error","Completion task types","Time-based completion task.","Description for a time-based completion task.","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","create the task and launch it","Build and launch a completion task.","","","","","","","","","","","","","","","","","","","","","","","","Duration of the task.","Consume the selector and return a <code>Result</code> with the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","safety violation","failure","in progress","mismatched blocks for a view","SNAFU context selector for the …","mismatched states for a view","SNAFU context selector for the …","inconsistent txn nums","SNAFU context selector for the …","mismatched leaves for a view","SNAFU context selector for the …","not enough decides","SNAFU context selector for the …","success","cross node safety properties","Data availability task state","possible errors","overall types for safety task","context for a round TODO eventually we want these to just …","Result of running a round of consensus","","too many failed  views","SNAFU context selector for the …","the status of a view","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","block -&gt; # entries decided on that block","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","build a task","","whether or not to check the block","whether or not to check the leaf","whether or not to check the state","","","","","","","","","","","","","","","","","","","ctx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Nodes that failed to commit this round","during the run view refactor","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generate leaves","","","handles","","","","","","","","","","","","","","","inserts an error into the context","insert into round result","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","NOTE: technically a map is not needed left one anyway for …","","num of total rounds allowed to fail","required number of successful views","","","results from previous rounds view number -&gt; round result","","state -&gt; # entries decided on that state","whether or not the round succeeded (for a custom defn of …","Transactions that were submitted Nodes that committed this …","successful views","event stream for publishing safety violations","threshold calculator. Given number of live and total …","","","","","","","","","","","whether or not to check that we have threshold amounts of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","determines whether or not the round passes also do a …","","","","","","","","","","","","","expected number of failures","expected number of decides","actual number of failures","acutal number of decides","","denotes a change in node state","spin the node down","","","","SNAFU context selector for the <code>SpinningTaskErr</code> error","Completion task types","spin the node up","Spin the node up or down","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","the index of the node","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin the node up or down","","","","","","","","","","","metadata describing a test","data describing how a round should be timed.","","","","","","","","","","","","","","","","Size of the DA committee for the test","","by default, just a single round","Default setting with 20 nodes and 10 views of successful …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Minimum transactions required for a block","Base duration for next-view timeout, in milliseconds","number of bootstrap nodes (libp2p usage only)","","The maximum amount of time a leader can wait to start a …","The minimum amount of time a leader has to wait to start a …","The delay a leader inserts before starting pre-commit, in …","spinning properties","Delay after init before starting consensus, in milliseconds","nodes available at start","The exponential backoff ration for the next-view timeout","timing data","","","Total number of nodes in the test","","","","","","","","","","Wrapper Type for committee function that takes a …","Wrapper for a function that takes a <code>node_id</code> and returns an …","Wrapper type for a hook.","","Wrapper Type for quorum function that takes a …","generators for resources used by each node","Wrapper type for a task generator.","test launcher","","add a hook","","","","","","","","","","overrideable timeout task generator function","configuration used to generate each hotshot node","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","launch the test","metadasta used for tasks","Modifies the config used when generating nodes with <code>f</code>","overall safety task generator","generator for resources","","generate a new storage for each node","","","","","overrideable txn task generator function","","","","","overridde the completion task generator","overwrite hooks with more hooks","override the safety task generator","override resource generators","override the safety task generator","override the txn task generator","","The runner of a test network spin up and down nodes, …","","add a specific node with a config","add nodes","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","excecute test","","","","","","","","","","","TODO","submit transactions in a round robin style using every …","state of task that decides when things are completed","build the transaction task","Data Availability task error","SNAFU context selector for the <code>TxnTaskErr</code> error","types for task that deices when things are completed","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","build a task","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handles for all nodes.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Optional index of the next node.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,93,3,0,93,0,3,93,3,93,3,93,3,93,3,3,3,0,93,3,93,3,93,3,3,93,3,93,3,93,3,93,3,93,3,93,3,0,0,0,0,0,0,0,3,93,3,93,3,0,93,3,93,3,0,0,0,0,0,23,0,17,18,23,21,14,17,18,23,21,14,17,18,23,14,14,21,14,17,18,23,21,14,17,18,23,17,18,23,14,17,18,23,17,18,23,21,14,17,18,23,21,14,17,18,23,14,21,14,17,18,23,18,17,14,14,17,18,23,21,14,17,18,23,21,14,14,21,14,17,18,23,21,14,17,18,23,21,14,17,18,23,21,14,17,18,23,21,14,17,18,23,17,14,14,21,17,18,23,14,21,14,17,18,23,21,14,17,18,23,21,14,17,18,23,21,14,17,18,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,31,31,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35,31,32,33,34,35,31,32,33,34,35,94,95,96,97,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,32,33,34,35,31,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,31,32,33,34,35,57,57,57,46,0,46,0,46,0,46,0,46,0,57,0,0,0,0,0,0,0,46,0,0,57,46,49,50,51,52,53,54,55,56,57,46,49,50,51,52,53,54,60,61,55,56,57,46,49,50,51,52,53,54,60,61,55,46,46,60,56,57,46,49,50,51,52,53,54,60,61,55,56,57,46,49,50,51,52,53,54,60,61,55,49,50,51,52,53,54,55,46,55,55,55,57,46,49,50,51,52,53,54,55,57,46,49,50,51,52,53,54,55,56,60,61,55,56,57,46,49,50,51,52,53,54,60,61,55,56,57,46,49,50,51,52,53,54,60,61,55,46,56,57,46,49,50,51,52,53,54,60,61,55,50,51,49,50,51,52,53,54,60,61,57,46,46,49,50,51,52,53,54,60,61,55,56,57,46,49,50,51,52,53,54,60,61,55,60,50,51,56,46,46,56,57,46,49,50,51,52,53,54,60,61,55,61,60,56,57,46,49,50,51,52,53,54,60,61,55,56,57,46,49,50,51,52,53,54,60,61,55,56,57,46,49,50,51,52,53,54,60,61,55,56,57,46,49,50,51,52,53,54,60,61,55,49,50,51,52,53,54,60,49,55,55,60,46,61,46,60,60,60,61,56,55,57,46,49,50,51,52,53,54,55,46,55,56,57,46,49,50,51,52,53,54,60,61,55,56,57,46,49,50,51,52,53,54,60,61,55,56,57,46,49,50,51,52,53,54,60,61,55,60,56,57,46,49,50,51,52,53,54,60,61,55,98,99,98,99,100,0,68,0,0,0,0,0,68,0,65,68,69,66,67,64,65,68,69,66,67,64,65,68,69,66,64,64,67,64,65,68,69,66,67,64,65,68,69,66,65,66,64,67,65,68,69,66,65,68,69,66,67,64,65,68,69,66,67,64,65,68,69,66,64,67,64,65,68,69,66,65,64,64,65,68,69,66,67,64,65,68,69,66,67,64,69,64,67,64,65,68,69,66,67,64,65,68,69,66,67,64,65,68,69,66,67,64,65,68,69,66,67,64,65,68,69,66,65,67,66,64,64,65,68,69,66,64,67,64,65,68,69,66,67,64,65,68,69,66,67,64,65,68,69,66,69,67,64,65,68,69,66,0,0,0,0,0,0,74,75,74,75,74,75,74,75,74,75,74,75,74,75,75,75,74,75,75,75,75,74,75,74,75,74,75,74,75,74,75,75,74,75,74,75,74,75,74,75,74,75,75,74,75,75,74,74,74,75,74,75,74,75,74,75,75,74,75,74,75,75,74,75,74,75,0,0,0,0,0,0,0,0,0,77,82,77,82,77,82,77,82,77,82,77,82,82,77,82,77,82,77,82,77,77,82,77,82,77,82,77,82,82,77,77,77,77,77,77,77,82,82,77,82,77,77,82,77,82,77,77,77,77,77,77,77,0,0,89,79,79,79,89,79,89,79,89,79,89,89,89,79,89,79,89,79,89,79,89,89,79,89,79,89,79,89,89,79,89,79,79,79,89,79,79,79,89,79,89,79,89,79,89,79,89,92,92,0,0,0,0,0,91,92,83,90,91,92,83,90,91,92,90,90,83,90,91,92,83,90,91,92,91,92,90,91,92,91,92,83,90,91,92,83,90,91,92,90,83,90,91,92,91,90,90,91,92,83,90,91,92,83,90,90,83,90,91,92,83,90,91,92,83,90,91,92,83,90,91,92,83,90,91,92,91,83,90,90,91,92,90,83,90,91,92,83,90,91,92,83,90,91,92,83,90,91,92],"f":[0,0,0,0,0,0,[1],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[3,3],[[]],0,[4],[4],[4],[4],[4],[4],[[3,5],6],[[]],[[]],[[],4],[[],4],[[]],[[]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],0,0,0,0,0,0,0,[[]],[[],11],[[],11],[[],11],[[],11],0,[[],12],[[],12],[[]],[[]],0,0,0,0,0,0,0,[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],13],[14,[[16,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,14],[18,[[22,[[21,[19,[20,[19]]]]]]]],[23,[[22,[[21,[19,[20,[19]]]]]]]],[14,[[16,[13]]]],[17,17],[18,18],[23,23],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[14,24],[4],[4],[4],[4],[4],0,[17,[[11,[14]]]],[[14,5],6],[[14,5],6],[[17,5],6],[[18,5],6],[[23,5],6],[[]],[[]],[[]],[[]],[[]],0,[[[0,[25,26,27]]],[[28,[[0,[25,26,27]]]]]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[17,14],[29],[14,[[16,[13]]]],0,[[]],[[]],[[]],[[],30],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[32,32],[33,33],[34,34],[35,35],[[]],[[]],[[]],[[]],[[]],[[31,31],36],[[],36],[[],31],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[37,[[11,[31]]]],[37,[[11,[32]]]],[37,[[11,[33]]]],[37,[[11,[34]]]],[37,[[11,[35]]]],[4],[4],[4],[4],[4],[[31,31],38],[[32,32],38],[[33,33],38],[[34,34],38],[[35,35],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[31,5],6],[[32,5],6],[[33,5],6],[[34,5],6],[[35,5],6],[[]],[[]],[[]],[[]],[[]],[[4,4,4],[[8,[39]]]],[[4,4,4],[[8,[39]]]],[[4,4,4],[[8,[39]]]],[[4,4,4],[[8,[39]]]],[[[0,[40,41]],42],43],[[[0,[40,41]],42],43],[[[0,[40,41]],42],43],[[[0,[40,41]],42],43],[[[0,[40,41]],42],43],[[31,44]],[[32,44]],[[33,44]],[[34,44]],[[35,44]],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[[]],[[]],[[]],[[]],[[31,31],[[16,[36]]]],[[31,45],11],[[32,45],11],[[33,45],11],[[34,45],11],[[35,45],11],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],13],[46,[[16,[15]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[49,[[48,[[47,[43,4]]]]]]],46],[[[50,[[48,[4]],[48,[4]]]]],46],[[[51,[[48,[4]],[48,[4]]]]],46],[52,46],[53,46],[54,46],[55,[[22,[[56,[19,[20,[19]]]]]]]],[46,[[16,[13]]]],0,0,0,[57,57],[46,46],[[[49,[58]]],[[49,[58]]]],[[[50,[58,58]]],[[50,[58,58]]]],[[[51,[58,58]]],[[51,[58,58]]]],[52,52],[53,53],[54,54],[55,55],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[60,[19,59]]]],[[],[[61,[19,[20,[19]]]]]],[[],55],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[46,24],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,0,[[[49,[[48,[[47,[43,4]]]]]]],[[11,[46]]]],[[[50,[[48,[4]],[48,[4]]]]],[[11,[46]]]],[[[51,[[48,[4]],[48,[4]]]]],[[11,[46]]]],[52,[[11,[46]]]],[53,[[11,[46]]]],[54,[[11,[46]]]],0,0,[[57,5],6],[[46,5],6],[[46,5],6],[[[49,[62]],5],6],[[[50,[62,62]],5],6],[[[51,[62,62]],5],6],[[52,5],6],[[53,5],6],[[54,5],6],[[[60,[[0,[62,19]],[0,[62,59]]]],5],6],[[[61,[[0,[62,19]],[0,[62,[20,[[0,[62,19]]]]]]]],5],6],[[55,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[60,[19,59]]],[[47,[59,4]]]],0,0,0,[[[0,[25,26,27]]],[[28,[[0,[25,26,27]]]]]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[61,[19,[20,[19]]]],[9,[[63,[19]]]]]],[[[60,[19,59]],4,[16,[43]]],[[16,[59]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[[[49,[[48,[[47,[43,4]]]]]]],46],[[[50,[[48,[4]],[48,[4]]]]],46],[[[51,[[48,[4]],[48,[4]]]]],46],[52,46],[53,46],[54,46],0,0,0,0,0,[29],0,[46,[[16,[13]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[60,[19,59]],4,4,59,38,38,38,43]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],13],[64,[[16,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65,64],[66,[[22,[[67,[19,[20,[19]]]]]]]],[64,[[16,[13]]]],0,[65,65],[68,68],[69,69],[66,66],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[64,24],[4],[4],[4],[4],[4],[4],[65,[[11,[64]]]],[[64,5],6],[[64,5],6],[[65,5],6],[[68,5],6],[[69,5],6],[[66,5],6],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[0,[25,26,27]]],[[28,[[0,[25,26,27]]]]]],0,[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[65,64],0,0,[29],[64,[[16,[13]]]],[[]],[[]],[[]],[[]],[[],30],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[70,[31,32]],43],[[73,[[72,[31,[71,[31]]]]]]]],[[[70,[31,32]],43]],[43],[43],0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[74,74],[75,75],[[]],[[]],0,0,[[],74],[[],75],[[],75],[[],75],[[],75],[4],[4],[4],[4],[4],[4],[[74,5],6],[[75,5],6],[[]],[[]],[75,[[77,[19,[0,[[76,[19]],[20,[19]]]]]]]],[[],4],[[],4],[[]],[[]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[],11],[[],11],[[],11],[[],11],0,[[],12],[[],12],[[]],[[]],0,0,0,0,0,0,0,0,0,[[[77,[19,[20,[19]]]],78],[[77,[19,[20,[19]]]]]],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],0,0,0,[4],[4],[4],[4],[4],[4],[[]],[[]],0,[[],4],[[],4],[[]],[[]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[9,[[9,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[[[77,[19,[20,[19]]]]],[[79,[19,[20,[19]]]]]],0,[[[77,[19,[20,[19]]]],80],[[77,[19,[20,[19]]]]]],0,0,0,0,[[],11],[[],11],[[],11],[[],11],0,[[],12],[[],12],[[]],[[]],[[[77,[19,[20,[19]]]],[22,[[21,[19,[20,[19]]]]]]],[[77,[19,[20,[19]]]]]],[[[77,[19,[20,[19]]]],[81,[78]]],[[77,[19,[20,[19]]]]]],[[[77,[19,[20,[19]]]],[22,[[56,[19,[20,[19]]]]]]],[[77,[19,[20,[19]]]]]],[[[77,[19,[20,[19]]]],[82,[19,[20,[19]]]]],[[77,[19,[20,[19]]]]]],[[[77,[19,[20,[19]]]],[22,[[67,[19,[20,[19]]]]]]],[[77,[19,[20,[19]]]]]],[[[77,[19,[20,[19]]]],[22,[[83,[19,[20,[19]]]]]]],[[77,[19,[20,[19]]]]]],0,0,[1],[[[79,[19,[20,[19]]]],[84,[19,[20,[19]]]],[85,[19]],86],[[87,[19,[20,[19]]]]]],[[[79,[19,[20,[19]]]],4,[88,[43]]],[[81,[43]]]],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[[89,[[0,[58,19]],[0,[58,[20,[[0,[58,19]]]]]]]]],[[89,[[0,[58,19]],[0,[58,[20,[[0,[58,19]]]]]]]]]],[[]],[4],[4],[4],[4],[4],[4],[[]],[[]],0,[[],4],[[],4],[[]],[[]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[9,[[9,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],0,0,0,0,0,[[[79,[19,[20,[19]]]]]],0,[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[]],[[]],0,0,0,0,0,0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],13],[90,[[16,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[91,90],[92,[[22,[[83,[19,[0,[[76,[19]],[20,[19]]]]]]]]]],[90,[[16,[13]]]],[91,91],[92,92],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[90,24],[4],[4],[4],[4],[91,[[11,[90]]]],[[90,5],6],[[90,5],6],[[91,5],6],[[92,5],6],[[]],[[]],[[]],[[]],0,[[[0,[25,26,27]]],[[28,[[0,[25,26,27]]]]]],[[]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[[[8,[7]]],[[8,[2,7]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[9,[[9,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[10,[[10,[2]]]],[91,90],0,[29],[90,[[16,[13]]]],[[]],[[]],[[],30],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"Private"],[8,"Any"],[4,"GlobalTestEvent"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[4,"Result"],[3,"TypeId"],[8,"Error"],[3,"CompletionTaskErr"],[3,"Backtrace"],[4,"Option"],[3,"CompletionTaskErrSnafu"],[3,"TimeBasedCompletionTaskDescription"],[8,"NodeType"],[8,"TestableNodeImplementation"],[3,"CompletionTask"],[6,"TaskGenerator"],[4,"CompletionTaskDescription"],[15,"str"],[8,"Display"],[8,"Send"],[8,"Sync"],[3,"IndentedSection"],[3,"Demand"],[3,"String"],[3,"SequencingTestTypes"],[3,"SequencingMemoryImpl"],[3,"SequencingLibp2pImpl"],[3,"SequencingWebImpl"],[3,"StaticFallbackImpl"],[4,"Ordering"],[8,"Deserializer"],[15,"bool"],[8,"Fn"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[8,"Serializer"],[4,"OverallSafetyTaskErr"],[3,"HashMap"],[8,"Into"],[3,"InconsistentTxnsNumSnafu"],[3,"TooManyFailuresSnafu"],[3,"NotEnoughDecidesSnafu"],[3,"MismatchedLeafSnafu"],[3,"InconsistentStatesSnafu"],[3,"InconsistentBlocksSnafu"],[3,"OverallSafetyPropertiesDescription"],[3,"OverallSafetyTask"],[4,"ViewStatus"],[8,"Clone"],[8,"LeafType"],[3,"RoundResult"],[3,"RoundCtx"],[8,"Debug"],[4,"HotShotError"],[3,"SpinningTaskErr"],[3,"SpinningTaskErrSnafu"],[3,"SpinningTaskDescription"],[3,"SpinningTask"],[4,"UpDown"],[3,"ChangeNode"],[3,"SystemContextHandle"],[3,"SequencingLeaf"],[3,"QuorumProposal"],[3,"Proposal"],[3,"TimingData"],[3,"TestMetadata"],[8,"NodeImplementation"],[3,"TestLauncher"],[6,"Hook"],[3,"TestRunner"],[8,"FnMut"],[3,"Vec"],[3,"ResourceGenerators"],[3,"TxnTask"],[6,"Networks"],[3,"HotShotInitializer"],[3,"HotShotConfig"],[3,"SystemContext"],[3,"HashSet"],[3,"Node"],[3,"TxnTaskErr"],[3,"TxnTaskErrSnafu"],[4,"TxnTaskDescription"],[4,"ShutDownReason"],[6,"SequencingLibp2pExchange"],[6,"SequencingMemoryExchange"],[6,"SequencingWebExchanges"],[6,"SequencingFallbackExchange"],[13,"TooManyFailures"],[13,"NotEnoughDecides"],[13,"InconsistentTxnsNum"]]},\
"hotshot_types":{"doc":"Types and Traits for the <code>HotShot</code> consensus module","t":"NEDNRLLLLLLLLLLALLLLAAMALLLLLLLLMAAMLLLLLLLLLLLLLLMMMAMMMMMMLLMMLLMALLLLLLAALLENNDNNNNDDEDNNNDNRRRRRLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMMMLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLDGDDCCCRLLLLLLLLLLLLLMLLLMMLLLLLLLMMLLLMMLLLLLLLLMLLLLLLLLLLLLLLLLLMMMMMLMMMMMMMMMMLMMMMLMLLLLLLLLLMLMLLLRFDIQQDDGGGGGGGIQQQQIDDIGGDDDRRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMKLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMKLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFKLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLKLLKLLKLLKLLKLLKLLKLLKKLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMKLLLMMMLMMMMLFMMMLLLLLLLFLLLKLLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLMMMMMLLLLLLLLNDNDNDNDENDNDNDNNNNNNDNDNDNNNNENDNNDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMMMMMMMMMMMNNDENNNLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMLLMMMMMMMEQNINNNNNNNNNEEQNENNDEEDEQEGDNNNDINNNNNNNNNNNNLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLKLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLCCAAAAAAAAAAAIDQIQLKLLLLLLLKLLLLALLLLLLLLLLLKLLLLLLLNDDCELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLIIKKKKKKKKLKKKLLKLLKKKQEQDIINIENNDIQQNQDIINDINNNNDINNQEINLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLKLKKLKLKLKLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLKLLLLLLLLLLLLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKKLLKLLLMMMKLLLMMMKLLLMMMLKLLLMMMLKKLKLKLKLKLKLKLKLKLKLKLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLLLIIIIIDLKLKLLLLLLLLKLKLKLKLLLLLLLLLLLLKKLLKLLLLLKLLNNNNNNNNEDNDNDNDIIENDNNDNDNDNDNDNEDQEEIINDNDNNNNNNNNNDNDIINDENDNDINEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLKKKKKLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKMMMMMMMQDGQGQGGGGQQQQIQIIGGGQGGGGDDGQQQIIQQDGGQGGGGQLLLMLLLLLLLLKLLLLLLLLMLLLLLLKKLMKKLMLLLLLLLLLLLLLLLLLLKKMLLLLLLLLLLLLLLLLLLLLKLLKMKLMMMKLKLLLLLLLLLLLKLLLLKLMMLLLLKLQQQQIQKKKKDDQQQIQRRLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLKKKKLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLKLLQNQNNNNQQNNQNNNNENEINRLLLLLLLLLLLLKKLLLLKLLLLLLLLLLLLLLLLLLKKLKKKLKLLLLKLLKLLQIQIIIQKKAKLKKKKKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLNNDGIEDDNIELLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKKMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMLMMMLLLLLLLLLLLLLLLLLLLMLLLLLNNNNNDEDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLMMINDNNNENDDEDDGINDLLLLLLLKLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMMLMMLLLLLLLMLLMMMMLLLMMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMLLLLLLLLM","n":["Continuous","ExecutionType","HotShotConfig","Incremental","_DERIVE_core_fmt_Debug_FOR_HotShotConfig","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","certificate","clone","clone","clone_into","clone_into","consensus","constants","da_committee_size","data","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","election_config","error","event","execution_type","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","known_nodes","known_nodes_with_stake","max_transactions","message","min_transactions","next_view_timeout","num_bootstrap","propose_max_round_time","propose_min_round_time","round_start_delay","serialize","serialize","start_delay","timeout_ratio","to_owned","to_owned","total_nodes","traits","try_from","try_from","try_into","try_into","type_id","type_id","utils","vote","vzip","vzip","AssembledSignature","Commit","DA","DACertificate","Finalize","Genesis","No","PreCommit","QuorumCertificate","TimeoutCertificate","ViewSyncCertificate","ViewSyncCertificateInternal","ViewSyncCommit","ViewSyncFinalize","ViewSyncPreCommit","VoteMetaData","Yes","_DERIVE_core_fmt_Debug_FOR_DACertificate","_DERIVE_core_fmt_Debug_FOR_QuorumCertificate","_DERIVE_core_fmt_Debug_FOR_TimeoutCertificate","_DERIVE_core_fmt_Debug_FOR_ViewSyncCertificate","_DERIVE_core_fmt_Debug_FOR_ViewSyncCertificateInternal","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_bytes","block_commitment","block_commitment","block_commitment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","commit","commitment","data","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","encoded_key","encoded_signature","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fill","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_signatures_and_commitment","from_signatures_and_commitment","from_signatures_and_commitment","genesis","genesis","genesis","get_view_number","hash","hash","hash","hash","hash","hash","header","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_genesis","is_genesis","is_genesis","is_genesis","leaf_commitment","leaf_commitment","leaf_commitment","leaf_commitment","relay","relay","round","serialize","serialize","serialize","serialize","serialize","serialize","set_leaf_commitment","set_leaf_commitment","set_leaf_commitment","signatures","signatures","signatures","signatures","signatures","signatures","signatures","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_resolve","try_resolve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_number","view_number","view_number","view_number","view_number","view_number","view_number","vote_token","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BlockStore","CommitmentMap","Consensus","ConsensusMetrics","View","ViewInner","ViewQueue","_DERIVE_core_fmt_Debug_FOR_Consensus","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","broadcast_messages_received","clone","clone_into","collect_garbage","cur_view","current_view","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","direct_messages_received","discarded_views_per_decide_event","drop","drop","drop","empty_views_per_decide_event","failed_to_send_messages","fmt","fmt","from","from","from","get","get_decided_leaf","get_transactions","high_qc","increment_view","init","init","init","insert","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","invalid_qc","invalid_qc_views","last_decided_view","locked_view","metrics","new","number_of_timeouts","number_of_views_per_decide_event","number_of_views_since_last_commit","outgoing_broadcast_messages","outgoing_direct_messages","outstanding_transactions","outstanding_transactions_memory_size","proposal_build_duration","proposal_wait_duration","rejected_transactions","remove","saved_blocks","saved_leaves","seen_transactions","state_map","to_owned","transactions","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","view_duration","visit_leaf_ancestors","vote_validate_duration","vzip","vzip","vzip","LOOK_AHEAD","genesis_proposer_id","DAProposal","DeltasType","DeltasType","Error","InconsistentDeltasError","InconsistentDeltasSnafu","LeafBlock","LeafDeltas","LeafDeltasError","LeafNode","LeafState","LeafTime","LeafTransaction","LeafType","MaybeState","NodeType","NodeType","NodeType","ProposalType","QuorumProposal","SequencingLeaf","TestableLeaf","Transaction","TxnCommitment","ValidatingLeaf","ValidatingProposal","ViewNumber","_DERIVE_core_fmt_Debug_FOR_DAProposal","_DERIVE_core_fmt_Debug_FOR_QuorumProposal","_DERIVE_core_fmt_Debug_FOR_ValidatingProposal","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","add_assign","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","block","block","block_commitment","block_commitment","block_commitment","block_commitment","block_commitment","block_commitment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit","commit","commit","commitment","commitment","create_random_transaction","create_random_transaction","create_random_transaction","dac","deltas","deltas","deltas","deltas","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_unchecked","deserialize_uncompressed","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fail","fake_commitment","fill","fill","fill","fill","fill_deltas","fill_deltas","fill_deltas","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_stored_view","from_stored_view","from_stored_view","genesis","get_deltas","get_deltas","get_deltas","get_deltas_commitment","get_deltas_commitment","get_deltas_commitment","get_height","get_height","get_height","get_justify_qc","get_justify_qc","get_justify_qc","get_parent_commitment","get_parent_commitment","get_parent_commitment","get_proposer_id","get_proposer_id","get_proposer_id","get_rejected","get_rejected","get_rejected","get_state","get_state","get_state","get_timestamp","get_timestamp","get_timestamp","get_view_number","get_view_number","get_view_number","get_view_number","get_view_number","get_view_number","get_view_number","hash","hash","hash","hash","hash","hash","header","header","header","height","height","height","height","in_current_span","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","justify_qc","justify_qc","justify_qc","justify_qc","new","new","new","new","parent_commitment","parent_commitment","parent_commitment","partial_cmp","proposer_id","proposer_id","proposer_id","proposer_id","provide","random_commitment","rejected","rejected","rejected","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_signature","serialize_unchecked","serialize_uncompressed","serialized_size","set_height","set_height","set_height","source","state","state_commitment","sub","tag","timeout_certificate","timestamp","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_resolve","try_resolve","try_resolve","try_resolve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","view_number","view_number","view_number","view_number","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BadBlock","BadBlockSnafu","Continue","ContinueSnafu","FailedToBroadcast","FailedToBroadcastSnafu","FailedToMessageLeader","FailedToMessageLeaderSnafu","HotShotError","InconsistentBlock","InconsistentBlockSnafu","InsufficientValidSignatures","InsufficientValidSignaturesSnafu","InvalidState","InvalidStateSnafu","LeaderMinRoundTimeNotReached","LeaderWaitingForCommitVotes","LeaderWaitingForHighQC","LeaderWaitingForPreCommitVotes","LeaderWaitingForPrepareVotes","LeafNotFound","LeafNotFoundSnafu","Misc","MiscSnafu","NetworkFault","NetworkFaultSnafu","ReplicaWaitingForCommit","ReplicaWaitingForDecide","ReplicaWaitingForPreCommit","ReplicaWaitingForPrepare","RoundTimedoutState","StorageError","StorageSnafu","TestCollectRoundEventsTimedOut","TimeoutError","TimeoutSnafu","ViewTimeoutError","ViewTimeoutSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","build","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","context","context","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fail","fail","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","num_valid_signatures","provide","source","state","threshold","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","context","context","num_valid_signatures","source","source","source","source","source","state","threshold","view_number","Decide","Error","Event","EventType","NextLeaderViewTimeout","ReplicaViewTimeout","ViewFinished","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","event","fmt","fmt","from","from","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","view_number","vzip","vzip","block_size","error","leaf_chain","qc","view_number","view_number","view_number","CommitteeConsensusMessage","CommitteeConsensusMessage","Consensus","ConsensusMessageType","DAC","DACertificate","DACertificate","DAProposal","DAProposal","DAVote","DAVote","Data","Data","DataMessage","GeneralConsensusMessage","GeneralConsensusMessage","Internal","InternalTrigger","InternalTrigger","InternalTrigger","Message","MessageKind","MessagePurpose","Messages","ProcessedCommitteeConsensusMessage","ProcessedConsensusMessage","ProcessedGeneralConsensusMessage","ProcessedSequencingMessage","Proposal","Proposal","Proposal","Proposal","SequencingMessage","SequencingMessageType","SubmitTransaction","Timeout","ViewSyncCertificate","ViewSyncCertificate","ViewSyncProposal","ViewSyncVote","ViewSyncVote","ViewSyncVote","Vote","Vote","Vote","_Unreachable","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_phantom","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_consensus_message","get_view_number","get_view_number","hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","kind","new","new","purpose","purpose","purpose","purpose","sender","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_number","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Block","State","block_contents","consensus_api","election","metrics","network","node_implementation","qc","signature_key","stake_table","state","storage","Block","BlockCommitment","Error","Transaction","Transaction","__clone_box","add_transaction_raw","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","cmp","contained_transactions","deref","deref_mut","deserialize","drop","dummy","eq","equivalent","equivalent","fmt","from","hash","init","into","into_any","into_any_arc","into_any_rc","new","partial_cmp","serialize","to_owned","try_from","try_into","type_id","vzip","Dummy","DummyBlock","DummyError","DummyState","DummyTransaction","__clone_box","__clone_box","add_transaction_raw","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_error_source","block_commitment","block_commitment","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","commit","commit","contained_transactions","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fill","fill","fmt","fmt","fmt","fmt","fmt","from","from","from","genesis","hash","hash","header","header","in_current_span","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","new","nonce","provide","random","serialize","serialize","tag","tag","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_resolve","try_resolve","txn_count","type_id","type_id","type_id","vzip","vzip","vzip","ConsensusSharedApi","SequencingConsensusApi","max_transactions","min_transactions","private_key","propose_max_round_time","propose_min_round_time","public_key","send_broadcast_message","send_da_broadcast","send_decide","send_direct_da_message","send_direct_message","send_event","send_next_leader_timeout","send_replica_timeout","send_transaction","send_view_error","send_view_finished","should_start_round","store_leaf","total_nodes","Certificate","Checked","Commitment","CommitteeExchange","CommitteeExchangeType","ConsensusExchange","DA","ElectionConfig","ElectionError","Inval","MathError","MathSnafu","Membership","Membership","Networking","No","Proposal","QuorumExchange","QuorumExchangeType","SignedCertificate","StubError","StubSnafu","TestableElection","Timeout","Unchecked","Valid","ViewSyncCommit","ViewSyncExchange","ViewSyncExchangeType","ViewSyncFinalize","ViewSyncPreCommit","Vote","VoteData","VoteToken","Yes","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","accumulate_vote","accumulate_vote","accumulate_vote","accumulate_vote","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_bytes","as_error_source","backtrace","block_commitment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","cause","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","create","create","create","create","create_commit_message","create_commit_message","create_da_message","create_da_message","create_election","create_finalize_message","create_finalize_message","create_no_message","create_no_message","create_precommit_message","create_precommit_message","create_timeout_message","create_timeout_message","create_yes_message","create_yes_message","default_election_config","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","entry","entry","entry","eq","equivalent","equivalent","fail","fail","failure_threshold","failure_threshold","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_signatures_and_commitment","generate_test_vote_token","genesis","get_committee","get_committee_qc_stake_table","get_leader","get_leader","hash","header","in_current_span","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","into_error","is_genesis","is_leader","is_valid_cert","is_valid_view_sync_cert","is_valid_view_sync_cert","is_valid_vote","leaf_commitment","make_vote_token","make_vote_token","make_vote_token","membership","membership","membership","membership","membership","membership","membership","network","network","network","network","network","network","network","private_key","private_key","private_key","private_key","private_key","private_key","private_key","provide","public_key","public_key","public_key","public_key","public_key","public_key","public_key","serialize","set_leaf_commitment","sign_certificate_proposal","sign_certificate_proposal","sign_commit_message","sign_commit_message","sign_da_proposal","sign_da_proposal","sign_da_vote","sign_da_vote","sign_finalize_message","sign_finalize_message","sign_no_vote","sign_no_vote","sign_precommit_message","sign_precommit_message","sign_timeout_vote","sign_timeout_vote","sign_validating_or_commitment_proposal","sign_validating_or_commitment_proposal","sign_yes_vote","sign_yes_vote","signatures","source","success_threshold","success_threshold","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","total_nodes","total_nodes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_resolve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_vote_token","view_number","vote_count","vote_data","vote_data","vote_data","vote_data","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Counter","Gauge","Histogram","Label","Metrics","NoMetrics","__clone_box","add","add","add_point","add_point","as_any","as_any_mut","borrow","borrow_mut","boxed","clone","clone_into","create_counter","create_counter","create_gauge","create_gauge","create_histogram","create_histogram","create_label","create_label","default","deref","deref_mut","drop","fmt","from","init","into","into_any","into_any_arc","into_any_rc","set","set","set","set","subgroup","subgroup","to_owned","try_from","try_into","type_id","update","update","vzip","Broadcast","CancelPollForDAC","CancelPollForProposal","CancelPollForTransactions","CancelPollForViewSyncCertificate","CancelPollForViewSyncVotes","CancelPollForVotes","CentralizedServer","CentralizedServerNetworkError","CentralizedServerSnafu","ChannelSend","ChannelSendSnafu","ClientDisconnected","ClientDisconnectedSnafu","ClientError","ClientSnafu","CommunicationChannel","ConnectedNetwork","ConsensusIntentEvent","CouldNotDeliver","CouldNotDeliverSnafu","Direct","EndpointError","EndpointSnafu","FailedToDeserialize","FailedToDeserializeSnafu","FailedToSerialize","FailedToSerializeSnafu","IncorrectConsensusData","IncorrectConsensusDataSnafu","Libp2p","Libp2pSnafu","MemoryNetwork","MemoryNetworkError","MemoryNetworkSnafu","NETWORK","NetworkChange","NetworkError","NetworkMsg","NetworkReliability","NoMessagesInQueue","NoMessagesInQueueSnafu","NoSuchNode","NoSuchNodeSnafu","NodeConnected","NodeDisconnected","PollForDAC","PollForProposal","PollForTransactions","PollForViewSyncCertificate","PollForViewSyncVotes","PollForVotes","ShutDown","ShutDownSnafu","Stub","StubSnafu","TestableChannelImplementation","TestableNetworkingImplementation","Timeout","TimeoutSnafu","TransmitType","UnableToCancel","UnableToCancelSnafu","UnimplementedFeature","UnimplementedFeatureSnafu","ViewMessage","WebServer","WebServerNetworkError","WebServerSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","as_error_source","as_error_source","as_error_source","backtrace","backtrace","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","broadcast_message","build","build","build","build","build","build","build","build","build","build","build","build","cause","cause","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","description","description","description","deserialize","direct_message","direct_message","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generate_network","generator","get_view_number","header","header","header","header","in_current_span","in_current_span","in_current_span","in_current_span","in_flight_message_count","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inject_consensus_info","inject_consensus_info","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","is_ready","is_ready","lookup_node","lookup_node","provide","provide","provide","provide","purpose","recv_msgs","recv_msgs","sample_delay","sample_keep","serialize","shut_down","shut_down","source","source","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_ready","wait_for_ready","source","source","source","source","source","source","source","BlockType","ChannelMaps","CommitteeCommChannel","CommitteeElectionConfig","CommitteeEx","CommitteeExchange","CommitteeMembership","CommitteeNetwork","CommitteeProposalType","CommitteeVote","ConsensusMessage","ElectionConfigType","ElectionConfigs","Exchanges","ExchangesType","Leaf","NodeImplementation","NodeType","ProcessedConsensusMessageType","QuorumCommChannel","QuorumEx","QuorumExchange","QuorumMembership","QuorumNetwork","QuorumProposalType","QuorumVoteType","SendToTasks","SequencingExchanges","SequencingQuorumEx","SignatureKey","StateType","Storage","TestableExchange","TestableNodeImplementation","Time","Transaction","ViewQueue","ViewSyncCommChannel","ViewSyncEx","ViewSyncExchange","ViewSyncMembership","ViewSyncNetwork","ViewSyncProposalType","ViewSyncVoteType","VoteTokenType","__clone_box","__clone_box","__clone_box","_phantom","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","block_genesis","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_map","clone","clone","clone","clone_into","clone_into","clone_into","committee_election_config_generator","committee_exchange","committee_exchange","committee_exchange","construct_tmp_storage","create","create","cur_view","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","from","from","from","from","gen_comm_channels","get_full_state","has_received_proposal","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","leaf_create_random_transaction","new","new","new_channel_maps","proposal_channel","quorum_exchange","quorum_exchange","quorum_exchange","receiver_chan","sender_chan","shut_down_networks","shut_down_networks","state_create_random_transaction","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","txn_count","type_id","type_id","type_id","type_id","view_sync_exchange","view_sync_exchange","view_sync_exchange","vote_channel","vzip","vzip","vzip","vzip","wait_for_networks_ready","wait_for_networks_ready","MessageLength","QC","QCProverParams","QCVerifierParams","QuorumCertificate","QuorumSize","assemble","check","sign","trace","EncodedPublicKey","EncodedSignature","PrivateKey","QCParams","QCType","SignatureKey","StakeTableEntry","_DERIVE_core_fmt_Debug_FOR_EncodedPublicKey","_DERIVE_core_fmt_Debug_FOR_EncodedSignature","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","as_bits","as_ref","assemble","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone","clone_into","clone_into","cmp","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize_unchecked","deserialize_uncompressed","drop","drop","encode_hex","encode_hex_upper","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_private","from_str","generated_from_seed_indexed","get_public_parameter","get_sig_proof","get_stake_table_entry","hash","hash","header","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize_unchecked","serialize_uncompressed","serialized_size","sign","tag","to_bytes","to_owned","to_owned","to_string","try_as_bits","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","uncompressed_size","validate","vzip","vzip","Amount","BlockNum","Commitment","EpochStart","ExistingKey","Head","InsufficientFund","IntoIter","Key","KeyNotFound","LastEpochStart","LookupProof","MalformedProof","MismatchedKey","RescueError","SnapshotUnsupported","SnapshotVersion","StakeOverflow","StakeTableError","StakeTableScheme","VerificationError","_DERIVE_Display_FOR_StakeTableError","as_any","as_any","as_any_mut","as_any_mut","as_error_source","batch_deregister","batch_register","batch_update","borrow","borrow","borrow_mut","borrow_mut","commitment","contains_key","deref","deref","deref_mut","deref_mut","deregister","drop","drop","fmt","fmt","from","from","header","in_current_span","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","len","lookup","provide","register","sample","simple_lookup","to_string","total_stake","try_from","try_from","try_into","try_into","try_iter","type_id","type_id","update","vzip","vzip","BlockType","ConsensusTime","Error","State","TestableBlock","TestableState","Time","append","create_random_transaction","dummy","genesis","genesis","new","next_block","on_commit","txn_count","validate_block","DummyState","__clone_box","append","as_any","as_any_mut","block_commitment","borrow","borrow_mut","clone","clone_into","commit","create_random_transaction","default","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","fill","fmt","from","hash","init","into","into_any","into_any_arc","into_any_rc","next_block","nonce","on_commit","random","serialize","tag","to_owned","try_from","try_into","try_resolve","type_id","validate_block","vzip","Failed","NoGenesisView","NoGenesisViewSnafu","Result","Storage","StorageError","StorageState","StoredView","Success","TestableStorage","ViewEntry","__clone_box","__clone_box","__clone_box","append","append_single_view","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","cleanup_storage_up_to_view","clone","clone","clone","clone_into","clone_into","clone_into","commit","construct_tmp_storage","deltas","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","eq","eq","eq","fail","failed","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_fd","from_fd","from_filelike","from_filelike","from_into_filelike","from_into_filelike","from_into_socketlike","from_into_socketlike","from_qc_block_and_state","from_socketlike","from_socketlike","get_anchored_view","get_full_state","header","height","in_current_span","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_error","justify_qc","parent","proposer_id","provide","rejected","source","state","stored","timestamp","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","view_number","vzip","vzip","vzip","vzip","vzip","DA","Exclusive","Failed","Inclusive","Leaf","RoundFinishedEvent","Terminator","View","ViewInner","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","get_block_commitment","get_leaf_commitment","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","view_inner","view_number","vzip","vzip","vzip","vzip","block","leaf","Accumulator","Commit","DAVote","Finalize","No","PreCommit","QuorumVote","Timeout","TimeoutVote","ViewSyncData","ViewSyncVote","ViewSyncVoteInternal","VoteAccumulator","VoteMap","VoteType","Yes","YesOrNoVote","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","append","append","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","block_commitment","block_commitment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","current_view","current_view","current_view","current_view","current_view","current_view","current_view","da_vote_outcomes","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","failure_threshold","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","high_qc","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","justify_qc_commitment","leaf_commitment","no_vote_outcomes","relay","relay","relay","relay_pub_key","round","round","round","serialize","serialize","serialize","serialize","serialize","serialize","serialize","sig_lists","signature","signature","signature","signature","signature","signature","signature_key","signature_key","signature_key","signers","success_threshold","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_vote_outcomes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_resolve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","viewsync_commit_vote_outcomes","viewsync_finalize_vote_outcomes","viewsync_precommit_vote_outcomes","vote_data","vote_data","vote_data","vote_data","vote_token","vote_token","vote_token","vote_token","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","yes_vote_outcomes"],"q":[[0,"hotshot_types"],[78,"hotshot_types::certificate"],[338,"hotshot_types::consensus"],[443,"hotshot_types::constants"],[445,"hotshot_types::data"],[830,"hotshot_types::error"],[1239,"hotshot_types::error::HotShotError"],[1250,"hotshot_types::event"],[1303,"hotshot_types::event::EventType"],[1310,"hotshot_types::message"],[1677,"hotshot_types::traits"],[1690,"hotshot_types::traits::block_contents"],[1729,"hotshot_types::traits::block_contents::dummy"],[1834,"hotshot_types::traits::consensus_api"],[1856,"hotshot_types::traits::election"],[2193,"hotshot_types::traits::metrics"],[2243,"hotshot_types::traits::network"],[2974,"hotshot_types::traits::network::NetworkError"],[2981,"hotshot_types::traits::node_implementation"],[3142,"hotshot_types::traits::qc"],[3152,"hotshot_types::traits::signature_key"],[3252,"hotshot_types::traits::stake_table"],[3329,"hotshot_types::traits::state"],[3346,"hotshot_types::traits::state::dummy"],[3388,"hotshot_types::traits::storage"],[3551,"hotshot_types::utils"],[3645,"hotshot_types::utils::ViewInner"],[3647,"hotshot_types::vote"]],"d":["constantly increment view as soon as view finishes","the type of consensus to run. Either: wait for a signal to …","Holds configuration for a <code>HotShot</code>","wait for a signal","","","","","","","","","","","","Provides two types of cerrtificates and their accumulators.","","","","","Provides the core consensus types","configurable constants for hotshot","List of DA committee nodes for static DA committe","Provides types useful for representing <code>HotShot</code>’s data …","","","","","","","","","the election configuration","Error type for <code>HotShot</code>","Events that a <code>HotShot</code> instance can emit","Whether to run one view or continuous views","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","List of known node’s public keys, including own, sorted …","List of known node’s public keys and stake value for …","Maximum transactions per block","Network message types","Minimum transactions per block","Base duration for next-view timeout, in milliseconds","Number of network bootstrap nodes","The maximum amount of time a leader can wait to start a …","The minimum amount of time a leader has to wait to start a …","The delay a leader inserts before starting pre-commit, in …","","","Delay after init before starting consensus, in milliseconds","The exponential backoff ration for the next-view timeout","","","Total number of nodes in the network","Common traits for the <code>HotShot</code> protocol","","","","","","","Utility functions, type aliases, helper structs and enum …","Vote and vote accumulator types","","","Enum representing whether a signatures is for a ‘Yes’ …","Commit phase.","These signatures are for a ‘DA’ certificate","A <code>DACertificate</code> is a threshold signature that some data is …","Finalize phase.","These signatures are for genesis certificate","These signatures are for a ‘No’ certificate","Pre-commit phase.","The type used for Quorum Certificates","Timeout Certificate","Certificate for view sync.","A view sync certificate representing a quorum of votes for …","These signatures are for ViewSyncCommit","These signatures are for ViewSyncFinalize","These signatures are for ViewSyncPreCommit","Data from a vote needed to accumulate into a …","These signatures are for a ‘Yes’ certificate","","","","","","","","","","","","","","","","","","","","","","","","","","Serialize the certificate into bytes.","","","committment to the block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Commitment to what’s voted on.  E.g. the leaf for a …","Data of the vote, yes, no, timeout, or DA","","","","","","","","","","","","","","","","","","","","","","","","","","","","Voter’s public key","Votes signature","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Build a QC from the threshold signature and commitment","","","To be used only for generating the genesis quorum …","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Get whether the certificate is for the genesis block.","If this QC is for the genesis block","","","Get the leaf commitment.","commitment to previous leaf","The relay index for view sync","Relay the votes are intended for","View number the network is attempting to synchronize on","","","","","","","","","Set the leaf commitment.","","","Get signatures.","Assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","Aggregated QC","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the view number.","View number for the vote","The view number this quorum certificate was generated …","Which view this QC relates to","View that timed out","The votes’s token","","","","","","","","Mapping from block commitments to full blocks.","A type alias for <code>HashMap&lt;Commitment&lt;T&gt;, T&gt;</code>","A reference to the consensus algorithm","The metrics being collected for the consensus algorithm","","","","","","","","","","","","","","","","","","Total broadcast messages received","","","garbage collects based on state change right now, this …","cur_view from pseudocode","The current view","","","","","","","","Total messages received","Number of views that were discarded since from one achor …","","","","Views where no proposal was seen from one anchor to the …","Total number of messages which couldn’t be sent","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a saved block, if available.","Gets the last decided state","return a clone of the internal storage of unclaimed …","the highqc per spec","increment the current view NOTE may need to do gc here","","","","Save <code>block</code> for later retrieval.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Amount of invalid QCs we’ve seen since the last commit …","Number of invalid QCs between anchors","last view had a successful decide event","The <code>locked_qc</code> view number","A reference to the metrics trait","Create a new instance of this <code>ConsensusMetrics</code> struct, …","Number of views that timed out","Number of views that are in-flight since the last anchor …","Number of views that are in-flight since the last …","Total broadcasts sent","Total direct messages this node sent out","Number of outstanding transactions","Memory size in bytes of the serialized transactions still …","The duration to build the proposal","The duration we waited for txns before building the …","Number of rejected transactions","Drop a reference to a saved block.","Saved blocks","Map of leaf hash -&gt; leaf","A list of transactions we’ve seen decided, but didn’t …","The phases that are currently loaded in memory","","A list of undecided transactions","","","","","","","","","","The duration of each view, in seconds","gather information from the parent chain of leafs","The duration to collect votes in a view (only applies when …","","","","the number of views to gather information for ahead of time","the genesis proposer pk unfortunately need to allocate on …","A proposal to start providing data availability for a …","A state change encoded in a leaf.","Type of block contained by this leaf.","Errors reported by this type.","Error which occurs when <code>DeltasType::fill</code> is called with a …","SNAFU context selector for the <code>InconsistentDeltasError</code> …","The <code>Block</code> in a <code>LeafType</code>.","The <code>DeltasType</code> in a <code>LeafType</code>.","Errors reported by the <code>DeltasType</code> in a <code>LeafType</code>.","The <code>NodeType</code> in a <code>LeafType</code>.","The [<code>StateType</code>] in a <code>LeafType</code>.","The <code>ConsensusTime</code> used by a <code>LeafType</code>.","The <code>Transaction</code> in a <code>LeafType</code>.","An item which is appended to a blockchain.","Either state or empty","Type of nodes that can vote on this proposal.","Type of nodes participating in the network.","Type of nodes participating in the network.","A proposal to a network of voting nodes.","Proposal to append a block.","This is the consensus-internal analogous concept to a …","Additional functions required to use a <code>LeafType</code> with …","The <code>Transaction</code> type associated with a <code>State</code>, as a …","<code>Commitment</code> to the <code>Transaction</code> type associated with a <code>State</code>…","This is the consensus-internal analogous concept to a …","subset of state that we stick into a leaf. original …","Type-safe wrapper around <code>u64</code> so we know the thing we’re …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The block with the wrong commitment.","Get a cryptographic commitment to the block represented by …","","","","current view’s block commitment","The commitment to append.","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","The expected commitment.","Create a transaction that can be added to the block …","","","Data availibity certificate","Block leaf wants to apply","Block leaf wants to apply","Block leaf wants to apply","The block or block commitment to be applied","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Fake the thing a genesis block points to. Needed to avoid …","Fill this <code>DeltasType</code> by providing a complete block.","","","","Fill this leaf with the entire corresponding block.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a leaf from information stored about a view.","","","Create a genesis view number (0)","The block contained in this leaf.","","","A commitment to the block contained in this leaf.","","","Height of this leaf in the chain.","","","The QC linking this leaf to its parent in the chain.","","","Commitment to this leaf’s parent.","","","Identity of the network participant who proposed this leaf.","","","Transactions rejected or invalidated by the application of …","","","The blockchain state after appending this leaf.","","","Real-world time when this leaf was created.","","","Time at which this proposal is valid.","Time when this leaf was created.","","","","","","","","","","","","","","","Height from leader when proposing leaf","Height from leader when proposing leaf","Number of leaves before this one in the chain","Number of leaves before this one in the chain","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Per spec, justification","Per spec, justification","Per spec, justification","Per spec, justification","Create a new leaf from its components.","Create a new <code>ViewNumber</code> with the given value.","","","The hash of the parent <code>Leaf</code> So we can ask if it extends","The hash of the parent <code>Leaf</code> So we can ask if it extends","The hash of the parent <code>SequencingLeaf</code> So we can ask if it …","","the propser id","the propser id","the proposer id of the leaf","the proposer id of the leaf","","create a random commitment","Transactions that were marked for rejection while …","Transactions that were marked for rejection while …","Transactions that were marked for rejection while …","","","","","","","","Serialization for the QC assembled signature","","","","Change the height of this leaf.","","","","What the state should be AFTER applying <code>self.deltas</code>","What the state should be after applying <code>self.deltas</code>","","","Possible timeout certificate.  Only present if the …","the timestamp the leaf was constructed at, in nanoseconds. …","the timestamp the leaf was constructed at, in nanoseconds. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the full block if it is available, otherwise return …","","","","","","","","","","","","","CurView from leader when proposing leaf","View this proposal applies to","CurView from leader when proposing leaf","CurView from leader when proposing leaf","CurView from leader when proposing leaf","","","","","","","","","A block failed verification","SNAFU context selector for the <code>HotShotError::BadBlock</code> …","Internal value used to drive the state machine","SNAFU context selector for the <code>HotShotError::Continue</code> …","Failed to broadcast a message on the network","SNAFU context selector for the …","Failed to Message the leader in the given stage","SNAFU context selector for the …","Error type for <code>HotShot</code>","A block was not consistent with the existing state","SNAFU context selector for the …","Not enough valid signatures for a quorum","SNAFU context selector for the …","Invalid state machine state","SNAFU context selector for the <code>HotShotError::InvalidState</code> …","Leader is in a Prepare phase and timed out before the …","Leader is waiting for commit votes","Leader is in a Prepare phase and is waiting for a HighQC","Leader is waiting for precommit votes","Leader is waiting for prepare votes","Item was not present in storage","SNAFU context selector for the <code>HotShotError::LeafNotFound</code> …","Miscelaneous error TODO fix this with #181 …","SNAFU context selector for the <code>HotShotError::Misc</code> variant","Failure in networking layer","SNAFU context selector for the <code>HotShotError::NetworkFault</code> …","Replica is waiting for a commit message","Replica is waiting for a decide message","Replica is waiting for a pre-commit message","Replica is waiting for a prepare message","Contains information about what the state of the …","Error accesing storage","SNAFU context selector for the <code>HotShotError::StorageError</code> …","HotShot-testing tried to collect round events, but it …","HotShot timed out waiting for msgs","SNAFU context selector for the <code>HotShotError::TimeoutError</code> …","HotShot timed out during round","SNAFU context selector for the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","source of error","Context","Number of valid signatures","Underlying error","source of error","The underlying network fault","The underlying network fault","Underlying network fault","The state that the round was in when it timed out","Threshold of signatures needed for a quorum","view number","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","A next leader task was canceled by a timeout interrupt","A replica task was canceled by a timeout interrupt","The view has finished.  If values were decided on, a <code>Decide</code>…","","","","","","","","","","","","","","","","","","","","","The underlying event","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","The view number that this event originates from","","","Optional information of the number of transactions in the …","The underlying error","The chain of Leafs that were committed by this decision","The QC signing the most recent leaf in <code>leaf_chain</code>.","The view that timed out","The view that timed out","The view number that has just finished","Messages related to the sequencing consensus protocol for …","Messages for DA committee only.","Messages related to the consensus protocol","Messages related to the consensus protocol.","Message with a DAC.","Certificate for the DA.","Certificate data is available","Proposal for the DA committee.","Proposal for data availability committee","Vote from the DA committee.","vote for data availability committee","Data message","Messages relating to sharing data between nodes","Messages related to sending data between nodes","Messages related to both validating and sequencing …","The type of messages for both validating and sequencing …","Message for internal use","Internal triggers sent by consensus messages.","Internal ONLY message indicating a view interrupt.","Internal ONLY message indicating a view interrupt.","Incoming message","Enum representation of any message type","A message type agnostic description of a messages purpose","A wrapper type for implementing <code>PassType</code> on a vector of …","A processed consensus message for the DA committee in …","The type of processed consensus messages.","A processed consensus message for both validating and …","A processed consensus message for sequencing consensus.","Prepare qc from the leader","Message with a quorum proposal.","Message with a quorum proposal.","Message with a quorum proposal.","Messages for sequencing consensus.","Messages related to the sequencing consensus protocol.","Contains a transaction to be submitted TODO rethink this …","Internal timeout at the specified view number.","Message with a view sync certificate.","Message with a view sync certificate.","Message with a view sync proposal.","Message with a view sync vote.","Message with a view sync vote.","Message with a view sync vote.","Message with a quorum vote.","Message with a quorum vote.","Message with a quorum vote.","Phantom data.","","","","","","","","","","","","","Phantom data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The data being proposed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Construct a <code>MessageKind</code> from [<code>I::ConsensusMessage</code>].","get the view number out of a message","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The message kind","Create a <code>ProcessedGeneralConsensusMessage</code> from a …","Create a <code>ProcessedCommitteeConsensusMessage</code> from a …","Get the message purpose.","","","","The sender of this message","","","","","","","","","","","The proposal must be signed by the view leader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the view number when the message was sent or the view …","","","","","","","","","","","","","","","","Abstraction over the contents of a block","Contains the <code>SequencingConsensusApi</code> and […","The election trait, used to decide which node is the …","The <code>Metrics</code> trait is used to collect information from …","Network access compatibility","Composite trait for node behavior","The quorum certificate (QC) trait is a certificate of a …","Minimal compatibility over public key signatures","Trait for stake table data structures","Abstraction over the global state that blocks modify","Abstraction over on-disk storage of node state","Abstraction over the full contents of a block","Commitment to a block, used by data availibity","The error type for this type of block","Abstraction over any type of transaction. Used by <code>Block</code>.","The type of the transitions we are applying","","Attempts to add a transaction, returning an Error if it …","","","","","","","","returns hashes of all the transactions in this block TODO …","","","","","Dummy implementation of <code>BlockContents</code> for unit tests","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Construct an empty or genesis block.","","","","","","","","the only variant. Dummy.","The dummy block","Dummy error","","dummy transaction. No functionality","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Some dummy data","","Generate a random <code>DummyBlock</code>","","","","","","","","","","","","","","","","","","","","","","","","The API that [<code>HotStuff</code>] needs to talk to the system, …","The API that [<code>HotStuff</code>] needs to talk to the system, for …","Retuns the maximum transactions allowed in a block","Returns the minimum transactions that must be in a block","Get a reference to the private key.","The maximum amount of time a leader can wait before …","The minimum amount of time a leader has to wait before …","Get a reference to the public key.","Send a broadcast message to the entire network.","Send a broadcast to the DA comitee, stub for now","sends a decide event down the channel","send a direct message using the DA communication channel","Send a direct message to the given recipient","Notify the system of an event within <code>hotshot-consensus</code>.","notifies client of a next leader timeout","notifies client of a replica timeout","Send a message with a transaction. This function is …","notifies client of an error","Sends a <code>ViewFinished</code> event","Returns <code>true</code> if hotstuff should start the given round. A …","Store a leaf in the storage","Total number of nodes in the network. Also known as <code>n</code>.","A <code>SignedCertificate</code> attesting to a decision taken by the …","For items that will always have the same validity outcome …","Commitments to items which are the subject of proposals …","Standard implementation of <code>CommitteeExchangeType</code> utilizing …","A <code>ConsensusExchange</code> where participants vote to provide …","Protocol for exchanging proposals and votes to make …","Vote to provide availability for a block.","election config","Error for election problems","This item has been checked, and is not valid","Math error doing something NOTE: it would be better to …","SNAFU context selector for the <code>ElectionError::MathError</code> …","A protocol for determining membership in and participating …","The committee eligible to make decisions.","Network used by <code>Membership</code> to communicate.","Vote to reject a leaf from the log.","A proposal for participants to vote on.","Standard implementation of [<code>QuroumExchangeType</code>] based on …","A <code>ConsensusExchange</code> where participants vote to append …","A certificate of some property which has been signed by a …","stub error to be filled in","SNAFU context selector for the <code>ElectionError::StubError</code> …","Testable implementation of a <code>Membership</code>. Will expose a …","Vote to time out and proceed to the next view.","This item has not been checked","This item has been checked, and is valid","Vote to commit the view sync.","Standard implementation of <code>ViewSyncExchangeType</code> based on …","A <code>ConsensusExchange</code> where participants synchronize which …","Vote to finalize the view sync.","Vote to pre-commit the view sync.","A vote on a <code>Proposal</code>.","Data to vote on for different types of votes.","Proof of this entity’s right to vote, and of the weight …","Vote to append a leaf to the log.","","","","","","","Add a vote to the accumulating signature.  Return The …","Add a vote to the accumulating signature.  Return The …","Add a vote to the accumulating signature.  Return The …","","","","","","","","","","","","","","","","","","Convert vote data into bytes.","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","Join a <code>ConsensusExchange</code> with the given identity (<code>pk</code> and <code>sk</code>…","","","","Creates a commit vote","","Create a message with a vote on DA proposal.","Create a message with a vote on DA proposal.","create an election TODO may want to move this to a …","Creates a finalize vote","","Create a message with a negative vote on validating or …","Create a message with a negative vote on validating or …","Creates a precommit vote","","Create a message with a timeout vote on validating or …","Create a message with a timeout vote on validating or …","Create a message with a positive vote on validating or …","Create a message with a positive vote on validating or …","generate a default election configuration","","","","","","","","","","","","","","","","","","","","","","","","","","","Entry with public key and staking value for certificate …","Entry with public key and staking value for certificate …","Entry with public key and staking value for certificate …","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Returns the threshold for a specific <code>Membership</code> …","Threshold required to know a success threshold will not be …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Build a QC from the threshold signature and commitment","Generate a vote token used for testing.","To be used only for generating the genesis quorum …","The members of the committee for view <code>view_number</code>.","Clone the public key and corresponding stake table for …","The leader of the committee for view <code>view_number</code>.","The leader of the <code>Membership</code> at time <code>view_number</code>.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Get whether the certificate is for the genesis block.","Whether this participant is leader at time <code>view_number</code>.","Validate a QC.","Validate a certificate.","","Validate a vote by checking its signature and token.","Get the leaf commitment.","Attempts to generate a vote token for self","Attempts to generate a vote token for participation at …","","The committee which votes on proposals.","","","","The committee which votes on proposals.","The committee which votes on proposals.","The committee which votes on proposals.","The network being used by this exchange.","","","","The network being used by this exchange.","The network being used by this exchange.","The network being used by this exchange.","This participant’s private key.","","","","This participant’s private key.","This participant’s private key.","This participant’s private key.","","This participant’s public key.","","","","This participant’s public key.","This participant’s public key.","This participant’s public key.","","Set the leaf commitment.","Sign a certificate.","","Signs a commit vote","","Sign a DA proposal.","Sign a DA proposal.","Sign a vote on DA proposal.","Sign a vote on DA proposal.","Sings a finalize vote","","Sign a neagtive vote on validating or commitment proposal.","Sign a neagtive vote on validating or commitment proposal.","Signs a precommit vote","","Sign a timeout vote.","Sign a timeout vote.","Sign a validating or commitment proposal.","Sign a validating or commitment proposal.","Sign a positive vote on validating or commitment proposal.","Sign a positive vote on validating or commitment proposal.","Get signatures.","","Returns the threshold for a specific <code>Membership</code> …","Threshold required to approve a <code>Proposal</code>.","","","","","","","","","Returns the number of total nodes in the committee","The total number of nodes in the committee.","","","","","","","","","","","","","","","","","","","","","","","","","","Checks the claims of a received vote token","Get the view number.","the count, which validation will confirm","The contents of a vote on <code>commit</code>.","","","","","","","","","","","","An ever-incrementing counter","A gauge that stores the latest value.","A histogram which will record a series of points.","A label that stores the last string value.","The metrics type.","Use this if you’re not planning to use any metrics. All …","","Add a value to the counter","","Add a point to this histogram.","","","","","","Create a new <code>Box&lt;dyn Metrics&gt;</code> with this <code>NoMetrics</code>","","","Create a <code>Counter</code> with an optional <code>unit_label</code>.","","Create a <code>Gauge</code> with an optional <code>unit_label</code>.","","Create a <code>Histogram</code> with an optional <code>unit_label</code>.","","Create a <code>Label</code>.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Set the gauge value","Set the label value","","","Create a subgroup with a specified prefix.","","","","","","Update the guage value","","","broadcast the message to all","Cancal polling for DAC.","Cancel polling for proposals.","Cancel polling for transactions","Cancel polling for view sync certificate.","Cancel polling for view sync votes.","Cancel polling for votes","Centralized server specific errors","Centralized server specific errors","SNAFU context selector for the …","Error sending output to consumer of …","SNAFU context selector for the <code>NetworkError::ChannelSend</code> …","Client disconnected","SNAFU context selector for the …","The client returned an error","SNAFU context selector for the …","API for interacting directly with a consensus committee …","represents a networking implmentration exposes low level …","Events to poll or cancel consensus processes.","Could not deliver a message to a specified recipient","SNAFU context selector for the …","directly transmit","Endpoint parsed incorrectly","SNAFU context selector for the …","Failed to deserealize a network message","SNAFU context selector for the …","Failed to serialize a network message","SNAFU context selector for the …","The injected consensus data is incorrect","SNAFU context selector for the …","Libp2p specific errors","SNAFU context selector for the <code>NetworkError::Libp2p</code> variant","memory network specific errors","for any errors we decide to add to memory network","SNAFU context selector for the <code>NetworkError::MemoryNetwork</code> …","Underlying Network implementation’s type","Changes that can occur in the network","Error type for networking","common traits we would like our network messages to …","interface describing how reliable the network is","The centralized server could not find a specific message.","SNAFU context selector for the …","Attempted to deliver a message to an unknown node","SNAFU context selector for the <code>NetworkError::NoSuchNode</code> …","A node is connected","A node is disconnected","Poll for a DAC for a particular view","Poll for a proposal for a particular view","Poll for new transactions","Poll for view sync proposals (certificates) for a …","Poll for view sync votes starting at a particular view","Poll for votes for a particular view","The underlying connection has been shut down","SNAFU context selector for the <code>NetworkError::ShutDown</code> …","stub","SNAFU context selector for the <code>MemoryNetworkError::Stub</code> …","Describes additional functionality needed by the test …","Describes additional functionality needed by the test …","A timeout occurred","SNAFU context selector for the <code>NetworkError::Timeout</code> …","the type of transmission","unable to cancel a request, the request has already been …","SNAFU context selector for the <code>NetworkError::UnableToCancel</code>…","unimplemented functionality","SNAFU context selector for the …","a message","Web server specific errors","Web server specific errors","SNAFU context selector for the <code>NetworkError::WebServer</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","broadcast message to those listening on the communication …","broadcast message to some subset of nodes blocking","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sends a direct message to a specific node blocking","Sends a direct message to a specific node blocking","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generates the <code>CommunicationChannel</code> given it’s associated …","generates a network given an expected node count","get the view out of the message","","","","","","","","","Get the number of messages in-flight.","","","","","","","","","","","","","","","","","","","","","","","","","","","Injects consensus data such as view number into the …","Injects consensus data such as view number into the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","checks if the network is ready nonblocking","checks if the network is ready nonblocking","look up a node blocking","look up a node blocking","","","","","get the purpose of the message","Moves out the entire queue of received messages of ’…","Moves out the entire queue of received messages of ’…","sample from uniform distribution to decide whether or not …","Sample from bernoulli distribution to decide whether or …","","Shut down this network. Afterwards this network should no …","Blocks until the network is shut down then returns true","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the view number of the event.","","","","","","","","","","","","","","","","","","","","","","","","","","","Blocks until node is successfully initialized into the …","Blocks until the network is successfully initialized","source of error","source of error","source of error","source of error","Originating bincode error","originating bincode error","Source of error","The block type that this hotshot setup is using.","Channels for sending/recv-ing proposals and votes.","Communication channel for <code>CommitteeProposalType</code> and [<code>DAVote</code>…","Election config for the DA committee","Alias for the [<code>CommitteeExchange</code>] type.","Protocol for exchanging data availability proposals and …","Protocol for determining membership in a DA committee.","Type for the underlying committee <code>ConnectedNetwork</code> that …","A proposal to provide data availability for a new leaf.","A vote on a [<code>ComitteeProposal</code>].","Consensus message type.","The election config type that this hotshot setup is using.","Election configurations for exchanges","Consensus type selected exchanges.","Contains the protocols for exchanging proposals and votes.","Leaf type for this consensus implementation","Node implementation aggregate trait","Trait with all the type definitions that are used in the …","Alias for the [<code>ProcessedConsensusMessage</code>] type of a …","Communication channel for <code>QuorumProposalType</code> and […","Alias for the [<code>QuorumExchange</code>] type.","Protocol for exchanging quorum proposals and votes.","Protocol for determining membership in a consensus …","Type for the underlying quorum <code>ConnectedNetwork</code> that will …","A proposal to append a new leaf to the log which is output …","A vote on a <code>QuorumProposalType</code>.","metadata for sending information to the leader, replica, …","Implementes [<code>SequencingExchangesType</code>].","Alias for the [<code>CommitteeExchange</code>] type for sequencing …","The signature key that this hotshot setup is using.","The state type that this hotshot setup is using.","Storage type for this consensus implementation","an exchange that is testable","extra functions required on a node implementation to be …","The time type that this hotshot setup is using.","The transaction type that this hotshot setup is using.","struct containing messages for a view to send to a replica …","Communication channel for <code>ViewSyncProposalType</code> and […","Alias for the [<code>ViewSyncExchange</code>] type.","Protocol for exchanging view sync proposals and votes.","Protocol for determining membership in a view sync …","Type for the underlying view sync <code>ConnectedNetwork</code> that …","A proposal to sync the view.","A vote on a [<code>ViewSyncProposal</code>].","The vote token that this hotshot setup is using.","","","","Phantom data.","","","","","","","","","generate a genesis block","","","","","","","","","a map from view number to ViewQueue one of (replica|next …","","","","","","","Generates a committee-specific election","Get the committee exchange.","","Committee exchange.","Create ephemeral storage Will be deleted/lost immediately …","Create all exchanges.","","the current view number this should always be in sync with …","create new view queue","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generate communication channels","Return the full internal state. This is useful for …","<code>true</code> if this queue has already received a proposal","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Creates random transaction if possible otherwise panics …","create new sendtosasks","Create channels starting from a given view.","Create channels for sending/recv-ing proposals and votes …","Channel for the next consensus leader or DA leader.","Get the quorum exchange.","","Quorum exchange.","to recv networking events for a replica or DA committee …","to send networking events to a replica or DA committee …","Shut down the the underlying networking interfaces.","","Creates random transaction if possible otherwise panics …","","","","","","","","","","","","the number of transactions in a block","","","","","Get the view sync exchange.","","View sync exchange.","Channel for the replica or DA committee member.","","","","","Block the underlying networking interfaces until node is …","","Allows to fix the size of the message at compilation time.","Type of the actual quorum certificate object","Public parameters for generating the QC E.g: snark …","Public parameters for validating the QC E.g: verifying …","Trait for validating a QC built from different signatures …","Type of the quorum size (e.g. number of votes or …","Computes an aggregated signature from a set of partial …","Checks an aggregated signature over some message provided …","Produces a partial signature on a message with a single …","Trace the list of signers given a qc.","Type saftey wrapper for byte encoded keys","Type saftey wrapper for byte encoded signature","The private key type for this signature algorithm","The type of the quorum certificate parameters used for …","The type of the assembled qc: assembled signature + <code>BitVec</code>","Trait for abstracting public key signatures","The type of the entry that contain both public key and …","","","","","","","","","","","assemble the signature from the partial signature and the …","","","","","check the quorum certificate for the assembled signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a public key from bytes","Produce a public key from a private key","","Generate a new key pair","get the public parameter for the assembled signature …","get the assembled signature and the <code>BitVec</code> separately from …","get the stake table entry from the public key and stake …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Produce a signature","","Serialize a public key to bytes","","","","","","","","","","","","","","Validate a signature","","","type for the staked amount","at arbitrary block height","type for the commitment to the current stake table","marks the snapshot at the beginning of the current epoch","Key already exists","the latest “Head” where all new changes are applied to","Insufficient fund: the number of stake cannot be negative","type for the iterator over (key, value) entries","type for stake key","Key not found","marks the beginning of the last epoch","type for the proof associated with the lookup result (if …","Malformed Merkle proof","Key mismatched","Internal error caused by Rescue","The historical snapshot requested is not supported.","Snapshots of the stake table","The number of stake exceed U256","Error type for <code>StakeTableScheme</code>","Common interfaces required for a stake table used in …","Verification Error","","","","","","","Batch deregister a list of keys. A default implementation …","Batch register a list of new keys. A default …","Batch update the stake balance of <code>keys</code>. Read documentation …","","","","","Returns the commitment to the <code>version</code> of stake table.","Returns true if <code>key</code> is currently registered, else returns …","","","","","Deregister an existing key from the stake table. Returns …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns the number of keys in the <code>version</code> of the table.","Lookup the stake under a key against a specific historical …","","Register a new key into the stake table.","Randomly sample a (key, stake amount) pair proportional to …","Returns the stakes withhelded by a public key, None if the …","","Returns the accumulated stakes of all registered keys of …","","","","","Returns an iterator over all (key, value) entries of the …","","","Update the stake of the <code>key</code> with …","","","The type of block this state is associated with","Trait for time compatibility needed for reward collection","The error type for this particular type of ledger state","Abstraction over the state that blocks modify","extra functions required on block to be usable by …","extra functions required on state to be usable by …","Time compatibility needed for reward collection","Appends the given block to this state, returning an new …","Creates random transaction if possible otherwise panics …","Dummy implementation of <code>State</code> for unit tests","generate a genesis block","Create a new instance of this time unit at time number 0","Create a new instance of this time unit","Returns an empty, template next block given this current …","Gets called to notify the persistence backend that this …","the number of transactions in this block","Returns true if and only if the provided block is valid …","The dummy state","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","Some dummy data","","Generate a random <code>DummyState</code>","","","","","","","","","","A failed view","No genesis view was inserted","SNAFU context selector for the <code>StorageError::NoGenesisView</code> …","Result for a storage type","Abstraction over on disk persistence of node state","Errors that can occur in the storage layer.","An internal representation of the data stored in a <code>Storage</code>.","A view stored in the <code>Storage</code>","A succeeded view","Extra requirements on Storage implementations required for …","An entry to <code>Storage::append</code>. This makes it possible to …","","","","Append the list of views to this storage","Insert a single view. Shorthand for","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","","Cleans up the storage up to the given view. The given view …","","","","","","","Commit this storage.","Create ephemeral storage Will be deleted/lost immediately …","The deltas of this view","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","The views that have failed","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Create a new <code>StoredView</code> from the given QC, Block and State.","","","Get the latest anchored view","Return the full internal state. This is useful for …","","The index of <code>parent</code> in the chain","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The justify QC of this view. See the hotstuff paper for …","The parent of this view","the proposer id","","transactions rejected in this view","","The state of this view","The views that have been successful","the timestamp this view was recv-ed in nanonseconds","","","","","","","","","","","","","","","","","","","","The view number of this view","","","","","","A pending view with an available block but not leaf …","Stop right before this view number","Leaf has failed","Stop including this view number","Undecided view","A struct containing information about a finished round.","Whether or not to stop inclusively or exclusively when …","This exists so we can perform state transitions mutably","A view’s state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","return the underlying block hash if it exists","return the underlying leaf hash if it exists","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","The view data. Wrapped in a struct so we can mutate","The round that finished","","","","","Available block.","Proposed leaf","The aggreation of votes, implemented by <code>VoteAccumulator</code>.","Commit vote","A vote on DA proposal.","Finalize vote","Negative vote.","PreCommit vote","Votes on validating or commitment proposal.","Timeout vote.","A timeout vote.","The data View Sync votes are signed over","Votes to synchronize the network on a single view","The internals of a view sync vote","Describe the process of collecting signatures on block or …","Mapping of commitments to vote tokens by key.","The vote sent by consensus messages.","Posivite vote.","A positive or negative vote on validating or commitment …","","","","","","","","Accumate the <code>val</code> to the current state.","","","","","","","","","","","","","","","","","","","The block commitment being voted on.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The view this vote was cast for.","","","","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","Map of all da signatures accumlated so far","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enough stake to know that we cannot possibly get a quorum, …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","The highest valid QC this node knows about","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","TODO we should remove this this is correct, but highly …","The leaf commitment being voted on.","Map of all no signatures accumlated so far","Get the relay.","The relay this vote is intended for","The relay this vote is intended for","The public key associated with the relay.","Get the round number.","The view number we are trying to sync on","The view number we are trying to sync on","","","","","","","","A list of valid signatures for certificate aggregation","Get the encoded signature.","Get the encoded signature.","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","This node’s signature over the VoteData","Get the signature key.","Get the signature key.","Get the signature key.","A bitvec to indicate which node is active and send out a …","A quorum’s worth of stake, generall 2f + 1","","","","","","","","Map of all signatures accumlated so far","","","","","","","","","","","","","","","","","","","","","","","","","","Map of all view sync commit votes accumulated thus far","Map of all view sync finalize votes accumulated thus far","Map of all view sync precommit votes accumulated thus far","The vote data this vote is signed over","The vote data this vote is signed over","The vote data this vote is signed over","The vote data this vote is signed over","The vote token generated by this replica","The vote token generated by this replica","The vote token generated by this replica","The vote token generated by this replica","","","","","","","","","Map of all yes signatures accumlated so far"],"i":[3,0,0,3,0,3,5,3,5,3,5,3,5,3,5,0,3,5,3,5,0,0,5,0,3,5,3,5,3,5,3,5,5,0,0,5,3,5,3,5,3,5,3,5,3,5,3,5,3,5,5,5,5,0,5,5,5,5,5,5,3,5,5,5,3,5,5,0,3,5,3,5,3,5,0,0,3,5,0,20,29,0,20,29,29,20,0,0,0,0,29,29,29,0,29,0,0,0,0,0,24,26,27,20,28,29,219,24,26,27,20,28,29,219,24,26,27,20,28,29,20,26,20,24,219,24,26,27,20,28,29,219,24,26,27,20,28,29,24,26,27,20,28,29,24,26,27,20,28,29,26,20,219,219,219,24,26,27,20,28,29,219,24,26,27,20,28,29,24,26,27,20,28,29,219,24,26,27,20,28,29,219,219,24,26,27,20,28,29,24,24,26,26,27,27,20,20,29,29,26,20,24,26,26,27,20,28,29,219,24,26,27,20,28,29,24,26,20,24,26,20,20,24,26,27,20,28,29,26,219,24,26,27,20,28,29,219,24,26,27,20,28,29,219,24,26,27,20,28,29,219,24,26,27,20,28,29,219,24,26,27,20,28,29,24,26,20,26,24,26,20,26,219,28,28,24,26,27,20,28,29,24,26,20,24,26,20,24,26,27,28,26,20,24,26,27,20,28,29,26,219,24,26,27,20,28,29,219,24,26,27,20,28,29,26,20,219,24,26,27,20,28,29,24,26,20,219,24,26,27,219,219,24,26,27,20,28,29,0,0,0,0,0,0,0,0,44,49,45,44,49,45,44,49,45,44,49,45,44,49,44,44,45,45,49,44,49,45,44,49,45,44,49,49,49,45,44,49,49,45,44,49,45,44,44,45,45,45,45,49,45,44,44,49,45,44,49,45,44,49,45,44,49,45,44,45,49,45,45,45,49,49,49,49,49,49,49,49,49,49,49,44,45,45,45,45,44,45,49,45,44,49,45,44,49,45,44,49,45,49,49,45,44,0,0,0,0,25,220,0,0,0,0,0,0,0,0,0,0,25,108,25,221,0,0,0,0,0,0,0,0,0,0,0,0,54,60,61,62,59,56,63,64,54,54,54,60,61,62,59,56,63,64,54,60,61,62,59,56,63,64,56,56,59,56,220,54,63,64,60,62,54,60,61,62,59,56,63,64,54,60,61,62,59,56,63,64,59,56,54,60,61,62,59,56,63,64,54,60,61,62,59,56,63,64,54,54,63,64,59,56,221,63,64,62,60,61,63,64,54,54,60,61,62,59,56,63,64,54,60,61,62,59,56,63,64,56,54,54,60,61,62,63,64,54,54,54,60,61,62,59,56,63,64,54,60,61,62,63,64,54,54,60,60,61,61,62,62,63,63,64,64,59,0,220,54,63,64,25,63,64,54,60,61,62,59,56,56,63,63,64,64,54,60,60,61,62,59,56,63,64,25,63,64,54,25,63,64,25,63,64,25,63,64,25,63,64,25,63,64,25,63,64,25,63,64,25,63,64,25,63,64,108,25,60,61,62,63,64,54,60,61,62,63,64,56,63,64,60,62,63,64,56,54,60,61,62,59,56,63,64,54,60,61,62,59,56,63,64,54,60,61,62,59,56,63,64,54,60,61,62,59,56,63,64,54,60,61,62,59,56,63,64,59,60,62,63,64,25,54,63,64,60,63,64,54,60,62,63,64,56,0,60,63,64,54,54,60,61,62,63,64,0,54,54,54,25,63,64,56,63,60,54,63,62,63,64,54,60,61,62,59,56,63,64,56,63,64,54,60,61,62,59,56,63,64,54,60,61,62,59,56,63,64,220,54,63,64,54,60,61,62,59,56,63,64,54,60,61,62,63,64,54,60,61,62,59,56,63,64,52,0,52,0,52,0,52,0,0,52,0,52,0,52,0,83,83,83,83,83,52,0,52,0,52,0,83,83,83,83,0,52,0,83,52,0,52,0,89,90,79,80,91,81,92,82,93,84,86,87,88,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,52,52,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,79,80,81,82,84,86,87,88,52,89,90,79,80,91,81,92,82,93,84,86,87,88,83,89,90,79,80,91,81,92,82,93,84,86,87,88,83,82,87,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,52,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,79,80,81,82,84,86,87,88,89,90,79,80,91,81,92,82,93,84,86,87,88,52,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,52,52,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,86,52,52,84,86,89,90,79,80,91,81,92,82,93,84,86,87,88,83,52,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,84,89,90,79,80,91,81,92,82,93,84,86,87,88,52,83,222,223,224,225,226,227,228,229,230,224,230,95,95,0,0,95,95,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,94,95,231,232,231,231,233,234,235,0,236,100,0,99,103,105,103,105,103,105,99,100,0,0,237,99,0,102,104,0,0,0,0,0,237,0,0,0,99,102,104,0,0,107,101,102,104,99,99,102,104,99,102,104,100,97,98,99,100,101,102,103,104,105,106,107,109,97,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,100,101,102,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,99,100,101,102,103,104,105,107,109,101,101,107,107,109,109,97,98,100,101,102,103,104,105,106,107,109,110,97,98,99,100,100,101,102,103,104,104,105,105,106,106,107,109,100,97,100,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,102,103,237,97,100,106,97,97,100,101,102,103,104,105,106,107,109,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,97,98,99,100,101,102,103,104,105,106,107,109,237,106,97,98,99,100,101,102,103,104,105,106,107,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,111,112,111,112,112,112,112,112,112,112,111,112,112,112,112,0,112,112,112,112,112,112,112,112,112,112,112,111,112,112,112,112,112,112,112,117,0,0,0,0,116,117,116,116,118,117,116,118,117,118,116,117,116,118,117,116,118,117,116,117,116,117,116,117,116,116,118,117,116,118,117,116,117,116,118,117,116,117,116,116,117,117,116,117,116,116,118,118,117,116,118,117,116,116,117,116,118,118,116,118,117,116,118,117,116,118,117,116,118,117,116,118,117,116,116,118,116,116,117,116,117,116,117,116,118,116,118,117,116,118,117,116,117,116,116,118,117,116,118,117,0,0,238,238,238,238,238,238,239,239,238,239,239,238,238,238,239,238,238,238,238,238,240,0,240,0,0,0,124,0,0,140,136,0,0,240,240,124,240,0,0,0,136,0,0,124,140,140,124,0,0,124,124,240,0,0,124,137,138,124,131,133,135,240,131,133,135,140,136,137,138,124,131,133,135,140,136,137,138,124,131,133,135,124,136,136,124,140,136,137,138,124,131,133,135,140,136,137,138,124,131,133,135,137,138,136,137,138,124,131,133,135,137,138,124,131,133,135,124,240,131,133,135,182,135,181,131,127,182,135,180,133,182,135,180,133,180,133,127,140,136,137,138,124,131,133,135,140,136,137,138,124,131,133,135,136,124,140,136,137,138,124,131,133,135,131,133,135,124,124,124,137,138,127,240,124,136,136,137,138,124,131,133,135,140,136,137,138,124,131,133,135,241,242,241,127,127,127,240,124,136,136,140,136,137,138,124,131,133,135,140,136,137,138,124,131,133,135,140,136,137,138,124,131,133,135,140,136,137,138,124,131,133,135,140,136,137,138,124,131,133,135,137,138,241,240,240,182,135,240,241,127,240,131,240,131,133,135,131,133,135,240,131,133,135,131,133,135,240,131,133,135,131,133,135,136,240,131,133,135,131,133,135,124,241,182,135,182,135,181,131,181,131,182,135,180,133,182,135,180,133,180,133,180,133,241,136,127,240,124,137,138,124,131,133,135,136,127,240,140,136,137,138,124,131,133,135,140,136,137,138,124,131,133,135,124,140,136,137,138,124,131,133,135,127,241,215,240,131,133,135,140,136,137,138,124,131,133,135,0,0,0,0,0,0,141,143,141,145,141,141,141,141,141,141,141,141,48,141,48,141,48,141,48,141,141,141,141,141,141,141,141,141,141,141,141,144,146,141,141,48,141,141,141,141,141,144,141,141,164,172,172,172,172,172,172,151,0,0,151,0,150,0,150,0,0,0,0,151,0,164,150,0,151,0,151,0,150,0,151,0,151,0,0,130,0,0,0,0,149,0,151,0,174,174,172,172,172,172,172,172,151,0,148,0,0,0,151,0,0,151,0,151,0,0,151,0,0,152,153,154,155,156,157,164,165,166,167,168,158,159,160,169,170,171,161,162,163,172,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,148,149,150,151,148,149,150,151,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,130,243,152,153,154,155,156,157,158,159,160,161,162,163,148,149,150,151,152,153,154,155,156,157,164,165,166,167,168,158,159,160,169,170,171,161,162,163,172,152,153,154,155,156,157,164,165,166,167,168,158,159,160,169,170,171,161,162,163,172,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,148,149,150,151,164,130,243,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,152,153,154,155,156,157,158,159,160,161,162,163,152,148,148,153,149,149,154,155,156,157,150,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,151,172,174,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,151,172,174,244,245,246,148,149,150,151,148,149,150,151,245,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,130,243,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,152,153,154,155,156,157,165,166,167,168,158,159,160,169,170,171,161,162,163,130,243,130,243,148,149,150,151,246,130,243,247,247,164,130,243,148,149,150,151,152,153,154,155,156,157,164,165,166,167,168,158,159,160,169,170,171,161,162,163,172,148,149,150,151,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,172,152,148,153,149,154,155,156,157,150,164,165,166,167,168,158,159,160,169,170,171,161,162,163,151,172,174,130,243,248,249,250,251,252,253,254,19,0,0,255,0,256,0,0,0,0,96,19,256,96,0,96,0,0,0,0,0,256,0,0,0,0,0,0,0,19,19,96,0,0,19,19,0,0,0,256,0,0,0,0,19,178,179,183,183,185,178,179,183,185,178,179,183,255,185,178,179,183,185,178,179,183,185,178,179,183,178,179,183,255,256,183,183,255,256,183,185,178,185,178,179,183,185,178,179,183,185,178,179,183,183,185,178,179,183,257,255,178,185,178,179,183,185,178,179,183,185,178,179,183,185,178,179,183,185,178,179,183,255,185,179,96,179,256,183,183,178,178,256,183,255,178,179,183,185,178,179,183,185,178,179,183,255,185,178,179,183,256,183,183,179,185,178,179,183,256,183,258,258,258,258,0,258,258,258,258,258,0,0,173,173,173,0,173,0,0,53,123,53,123,53,123,123,123,173,53,123,53,123,173,53,123,53,123,53,123,53,123,53,123,53,53,123,53,53,53,123,123,123,53,123,53,53,123,123,53,53,123,53,123,173,173,53,173,173,173,173,53,123,53,53,123,53,123,53,123,53,123,53,123,53,123,53,53,123,53,53,53,173,53,173,53,123,53,123,53,53,53,123,53,123,53,123,53,173,53,123,259,200,259,200,199,200,199,259,259,199,200,259,199,199,199,199,0,199,0,0,199,0,200,199,200,199,199,259,259,259,200,199,200,199,259,259,200,199,200,199,259,200,199,199,199,200,199,199,199,200,199,200,199,200,199,200,199,200,199,259,259,199,259,259,259,199,259,200,199,200,199,259,200,199,259,200,199,260,0,260,0,0,0,260,260,261,0,262,263,263,260,260,262,260,0,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,204,184,0,0,0,0,0,0,204,0,0,205,184,72,264,264,205,184,207,204,72,205,184,207,204,72,184,184,205,184,207,204,72,205,184,207,204,72,205,184,264,205,184,72,205,184,72,264,265,72,205,184,207,204,72,205,184,207,204,72,184,205,184,207,204,72,207,204,72,205,207,205,184,184,207,204,72,205,184,207,204,204,204,204,72,72,72,204,72,204,72,204,72,204,72,72,204,72,264,265,184,72,184,205,184,207,204,72,205,184,207,204,72,205,184,207,204,72,205,184,207,204,72,205,184,207,204,72,205,72,72,72,184,72,184,72,207,72,205,184,72,184,205,184,207,204,72,205,184,207,204,72,205,184,207,204,72,72,205,184,207,204,72,214,50,214,50,214,0,0,0,0,212,50,214,213,212,50,214,213,212,50,214,213,212,50,214,213,212,50,212,50,212,50,214,213,213,212,50,214,213,212,50,214,213,212,50,214,213,212,50,214,213,212,50,214,214,214,213,212,50,214,213,212,50,214,213,212,50,214,213,212,50,214,213,212,50,212,50,214,213,212,50,214,213,212,50,214,213,212,50,213,212,214,213,212,50,266,267,0,134,0,134,132,134,0,132,0,0,0,0,0,0,0,132,0,129,216,217,218,35,134,132,268,125,125,129,216,217,218,35,134,132,125,129,216,217,218,35,134,132,35,129,125,129,216,217,218,35,134,132,125,129,216,217,218,35,134,132,129,216,217,218,35,134,132,129,216,217,218,35,134,132,35,269,129,134,132,129,216,217,125,125,129,216,217,218,35,134,132,125,129,216,217,218,35,134,132,129,216,217,218,35,134,132,125,129,216,217,218,35,134,132,129,216,217,218,35,134,132,129,129,216,216,217,217,218,218,35,35,134,134,132,132,125,35,129,216,217,218,35,134,132,125,129,216,217,218,35,134,132,129,216,217,218,35,134,132,217,125,129,216,217,218,35,134,132,125,129,216,217,218,35,134,132,125,129,216,217,218,35,134,132,125,129,216,217,218,35,134,132,125,129,216,217,218,35,134,132,216,216,125,134,218,35,218,134,218,35,129,216,217,218,35,134,132,125,134,132,129,216,217,218,129,134,132,125,125,129,216,217,218,35,134,132,125,125,129,216,217,218,35,134,132,125,129,216,217,218,35,134,132,35,125,129,216,217,218,35,134,132,125,125,125,129,216,217,218,129,216,217,218,125,129,216,217,218,35,134,132,125],"f":[0,0,0,0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],0,[3,3],[[[5,[4,4,4]]],[[5,[4,4,4]]]],[[]],[[]],0,0,0,0,[6],[6],[6],[6],[7,[[8,[3]]]],[7,[[8,[[5,[9,9,9]]]]]],[6],[6],0,0,0,0,[[3,10],11],[[5,10],11],[[]],[[]],[[],6],[[],6],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],0,0,0,0,0,0,0,0,0,0,[[3,16],8],[[[5,[17,17,17]],16],8],0,0,[[]],[[]],0,0,[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[20,[19]]],[[22,[21]]]],[[],23],[[],23],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[[0,[4,19]]]]],[[24,[[0,[4,19]]]]]],[[[26,[[0,[4,19]],[0,[4,25]]]]],[[26,[[0,[4,19]],[0,[4,25]]]]]],[[[27,[[0,[4,19]]]]],[[27,[[0,[4,19]]]]]],[[[20,[[0,[4,19]]]]],[[20,[[0,[4,19]]]]]],[[[28,[[0,[4,19]]]]],[[28,[[0,[4,19]]]]]],[[[29,[[0,[4,19]]]]],[[29,[[0,[4,19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[19,25]]],[[23,[[26,[19,25]]]]]],[[[20,[19]]],[[23,[[20,[19]]]]]],0,0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[7,[[8,[[24,[19]]]]]],[7,[[8,[[26,[19,25]]]]]],[7,[[8,[[27,[19]]]]]],[7,[[8,[[20,[19]]]]]],[7,[[8,[[28,[19]]]]]],[7,[[8,[[29,[19]]]]]],[6],[6],[6],[6],[6],[6],[6],0,0,[[[24,[[0,[30,19]]]],[24,[[0,[30,19]]]]],31],[[[26,[[0,[30,19]],[0,[30,25]]]],[26,[[0,[30,19]],[0,[30,25]]]]],31],[[[27,[[0,[30,19]]]],[27,[[0,[30,19]]]]],31],[[[20,[[0,[30,19]]]],[20,[[0,[30,19]]]]],31],[[[28,[[0,[30,19]]]],[28,[[0,[30,19]]]]],31],[[[29,[[0,[30,19]]]],[29,[[0,[30,19]]]]],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],8],[[],8],[[[24,[19]],10],11],[[[26,[19,25]],10],11],[[[26,[19,25]],10],11],[[[27,[19]],10],11],[[[20,[19]],10],11],[[[28,[19]],10],11],[[[29,[[0,[32,19]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[29,[19]],23,[34,[33]]],[[24,[19]]]],[[[29,[19]],[23,[25]],[34,[33]]],[[26,[19,25]]]],[[[29,[19]],[23,[[35,[19]]]],[34,[33]]],[[20,[19]]]],[[],[[24,[19]]]],[[],[[26,[19,25]]]],[[],[[20,[19]]]],[[[20,[19]]]],[[[24,[[0,[36,19]]]],37]],[[[26,[[0,[36,19]],[0,[36,25]]]],37]],[[[27,[[0,[36,19]]]],37]],[[[20,[[0,[36,19]]]],37]],[[[28,[[0,[36,19]]]],37]],[[[29,[[0,[36,19]]]],37]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[[[24,[19]]],31],[[[26,[19,25]]],31],[[[20,[19]]],31],0,[[[24,[19]]],23],[[[26,[19,25]]],[[23,[25]]]],[[[20,[19]]],[[23,[[35,[19]]]]]],0,0,0,0,[[[24,[[0,[17,19]]]],16],8],[[[26,[[0,[17,19]],[0,[17,25]]]],16],8],[[[27,[[0,[17,19]]]],16],8],[[[20,[[0,[17,19]]]],16],8],[[[28,[[0,[17,19]]]],16],8],[[[29,[19]],16],8],[[[24,[19]],23]],[[[26,[19,25]],[23,[25]]]],[[[20,[19]],[23,[[35,[19]]]]]],[[[24,[19]]],[[29,[19]]]],[[[26,[19,25]]],[[29,[19]]]],[[[20,[19]]],[[29,[19]]]],0,0,0,0,[[],42],[[],42],[[]],[[]],[[]],[[]],[[]],[[]],[[],42],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[24,[19]]]],[[[26,[19,25]]]],[[[20,[19]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[44,[[0,[4,43]]]]],[[44,[[0,[4,43]]]]]],[[]],[[[45,[19,25]]]],0,0,[[],[[44,[43]]]],[6],[6],[6],[6],[6],[6],0,0,[6],[6],[6],0,0,[[[45,[19,25]],10],11],[[[44,[[0,[32,43]]]],10],11],[[]],[[]],[[]],[[[44,[43]],[23,[43]]],[[34,[43]]]],[[[45,[19,25]]],25],[[[45,[19,25]]],[[14,[[47,[[46,[23]]]]]]]],0,[[[45,[19,25]]]],[[],6],[[],6],[[],6],[[[44,[43]],43]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],0,0,0,0,0,[48,49],0,0,0,0,0,0,0,0,0,0,[[[44,[43]],[23,[43]]],[[34,[43]]]],0,0,0,0,[[]],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],[[],18],0,[[[45,[19,25]],50,31,51],[[8,[[52,[19]]]]]],0,[[]],[[]],[[]],0,[[],53],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[[54,33]],[[54,33]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],55],[[[56,[[0,[43,32]]]]],[[34,[57]]]],0,0,[[],23],[[],23],[[],23],[[],23],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[59,[[58,[[0,[43,32]]]],[58,[[23,[[0,[43,32]]]]]]]]],[[56,[[0,[43,32]]]]]],[[[56,[[0,[43,32]]]]],[[34,[55]]]],[54,54],[[[60,[[0,[4,19]],[0,[43,4,25]]]]],[[60,[[0,[4,19]],[0,[43,4,25]]]]]],[[[61,[[0,[4,19]]]]],[[61,[[0,[4,19]]]]]],[[[62,[[0,[4,19]],[0,[4,25]]]]],[[62,[[0,[4,19]],[0,[4,25]]]]]],[[[59,[4,4]]],[[59,[4,4]]]],[[[56,[[0,[4,43,32]]]]],[[56,[[0,[4,43,32]]]]]],[[[63,[[0,[4,19]]]]],[[63,[[0,[4,19]]]]]],[[[64,[[0,[4,19]]]]],[[64,[[0,[4,19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[54,54],65],[54,[[23,[54]]]],[[[63,[19]]],[[23,[[63,[19]]]]]],[[[64,[19]]],[[23,[[64,[19]]]]]],0,0,[[66,33]],[[[63,[19]],66,33]],[[[64,[19]],66,33]],0,0,0,0,0,[54],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[[56,[[0,[43,32]]]]],67],[7,[[8,[54]]]],[68,[[8,[54,69]]]],[7,[[8,[[60,[19,[0,[43,25]]]]]]]],[7,[[8,[[61,[19]]]]]],[7,[[8,[[62,[19,25]]]]]],[7,[[8,[[63,[19]]]]]],[7,[[8,[[64,[19]]]]]],[68,[[8,[54,69]]]],[68,[[8,[54,69]]]],[6],[6],[6],[6],[6],[6],[6],[6],[[54,54],31],[[[60,[[0,[30,19]],[0,[43,30,25]]]],[60,[[0,[30,19]],[0,[43,30,25]]]]],31],[[[61,[[0,[30,19]]]],[61,[[0,[30,19]]]]],31],[[[62,[[0,[30,19]],[0,[30,25]]]],[62,[[0,[30,19]],[0,[30,25]]]]],31],[[[63,[[0,[30,19]]]],[63,[[0,[30,19]]]]],31],[[[64,[19]],[64,[19]]],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[[59,[[58,[[0,[43,32]]]],[58,[[23,[[0,[43,32]]]]]]]]],[[8,[[56,[[0,[43,32]]]]]]]],[[],[[23,[43]]]],[[],8],[[],8],[[],8],[[],8],[70,[[8,[71]]]],[[[63,[19]],[70,[[63,[19]]]]],[[8,[[71,[[63,[19]]]]]]]],[[[64,[19]],[70,[[64,[19]]]]],[[8,[[71,[[64,[19]]]]]]]],[[54,10],11],[[[60,[19,[0,[43,25]]]],10],11],[[[61,[19]],10],11],[[[62,[19,25]],10],11],[[[59,[32,32]],10],11],[[[56,[[0,[43,32]]]],10],11],[[[56,[[0,[32,43,32]]]],10],11],[[[63,[19]],10],11],[[[63,[[0,[32,19]]]],10],11],[[[64,[[0,[32,19]]]],10],11],[[[64,[19]],10],11],[[]],[[]],[[[63,[19]]],[[60,[19,[63,[19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[72],[[[72,[[63,[19]]]]],[[63,[19]]]],[[[72,[[64,[19]]]]],[[64,[19]]]],[[],54],[[]],[[[63,[19]]]],[[[64,[19]]]],[[],[[23,[70]]]],[[[63,[19]]],23],[[[64,[19]]],23],[[],33],[[[63,[19]]],33],[[[64,[19]]],33],[[],26],[[[63,[19]]],[[26,[19,[63,[19]]]]]],[[[64,[19]]],[[26,[19,[64,[19]]]]]],[[],23],[[[63,[19]]],[[23,[[63,[19]]]]]],[[[64,[19]]],[[23,[[64,[19]]]]]],[[],53],[[[63,[19]]],53],[[[64,[19]]],53],[[],[[22,[73]]]],[[[63,[19]]],22],[[[64,[19]]],22],[[]],[[[63,[19]]]],[[[64,[19]]]],[[],74],[[[63,[19]]],74],[[[64,[19]]],74],[[]],[[],75],[[[60,[19,25]]]],[[[61,[19]]]],[[[62,[19,25]]]],[[[63,[19]]]],[[[64,[19]]]],[[54,37]],[[[60,[[0,[36,19]],[0,[43,36,25]]]],37]],[[[61,[[0,[36,19]]]],37]],[[[62,[[0,[36,19]],[0,[36,25]]]],37]],[[[63,[[0,[36,19]]]],37]],[[[64,[19]],37]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],0,0,0,0,[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[[[59,[[58,[[0,[43,32]]]],[58,[[23,[[0,[43,32]]]]]]]]],[[56,[[0,[43,32]]]]]],0,0,0,0,[[75,26,70,76]],[33,54],[[[26,[[63,[19]]]]],[[63,[19]]]],[[[26,[[64,[19]]]]],[[64,[19]]]],0,0,0,[[54,54],[[34,[65]]]],0,0,0,0,[77],[66,[[23,[43]]]],0,0,0,[[54,16],8],[[54,78],[[8,[69]]]],[[[60,[[0,[17,19]],[0,[43,17,25]]]],16],8],[[[61,[19]],16],8],[[[62,[[0,[17,19]],[0,[17,25]]]],16],8],[[[63,[[0,[17,19]]]],16],8],[[[64,[[0,[17,19]]]],16],8],[[[29,[19]]],[[22,[21]]]],[[54,78],[[8,[69]]]],[[54,78],[[8,[69]]]],[54,6],[33],[[[63,[19]],33]],[[[64,[19]],33]],[[[56,[[0,[43,32]]]]],[[34,[55]]]],0,0,[[54,33]],[[],42],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],42],[[],42],[[],42],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[54,6],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],55],[[[52,[19]]],[[34,[57]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[79,[[52,[19]]]],[80,[[52,[19]]]],[81,[[52,[19]]]],[[[82,[[58,[42]]]]],[[52,[19]]]],[[[84,[58,[58,[83]]]]],[[52,[19]]]],[[[86,[[58,[6]],[58,[85]]]]],[[52,[19]]]],[[[87,[[58,[42]]]]],[[52,[19]]]],[88,[[52,[19]]]],[[[52,[19]]],[[34,[55]]]],[89,89],[90,90],[79,79],[80,80],[91,91],[81,81],[92,92],[[[82,[4]]],[[82,[4]]]],[93,93],[[[84,[4,4]]],[[84,[4,4]]]],[[[86,[4,4]]],[[86,[4,4]]]],[[[87,[4]]],[[87,[4]]]],[88,88],[83,83],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[[52,[19]]],67],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[79,[[8,[[52,[19]]]]]],[80,[[8,[[52,[19]]]]]],[81,[[8,[[52,[19]]]]]],[[[82,[[58,[42]]]]],[[8,[[52,[19]]]]]],[[[84,[58,[58,[83]]]]],[[8,[[52,[19]]]]]],[[[86,[[58,[6]],[58,[85]]]]],[[8,[[52,[19]]]]]],[[[87,[[58,[42]]]]],[[8,[[52,[19]]]]]],[88,[[8,[[52,[19]]]]]],[[89,10],11],[[90,10],11],[[79,10],11],[[80,10],11],[[91,10],11],[[81,10],11],[[92,10],11],[[[82,[32]],10],11],[[93,10],11],[[[84,[32,32]],10],11],[[[86,[32,32]],10],11],[[[87,[32]],10],11],[[88,10],11],[[[52,[[0,[32,19]]]],10],11],[[[52,[19]],10],11],[[83,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[89,[[52,[19]]]],[90,[[52,[19]]]],[79,[[52,[19]]]],[80,[[52,[19]]]],[91,[[52,[19]]]],[81,[[52,[19]]]],[92,[[52,[19]]]],[[[82,[[58,[42]]]]],[[52,[19]]]],[93,[[52,[19]]]],[[[84,[58,[58,[83]]]]],[[52,[19]]]],[[[86,[[58,[6]],[58,[85]]]]],[[52,[19]]]],[[[87,[[58,[42]]]]],[[52,[19]]]],[88,[[52,[19]]]],0,[77],[[[52,[19]]],[[34,[55]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],42],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[[94,[[0,[4,19]],[0,[4,25]]]]],[[94,[[0,[4,19]],[0,[4,25]]]]]],[[[95,[[0,[4,19]],[0,[4,25]]]]],[[95,[[0,[4,19]],[0,[4,25]]]]]],[[]],[[]],[6],[6],[6],[6],[6],[6],0,[[[94,[[0,[32,19]],[0,[32,25]]]],10],11],[[[95,[[0,[32,19]],[0,[32,25]]]],10],11],[[]],[[]],[[],6],[[],6],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[97,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]],[[97,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]]],[[[98,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]],[[98,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]]],[99,99],[[[100,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]],[[100,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]]],[[[101,[[0,[4,19]]]]],[[101,[[0,[4,19]]]]]],[[[102,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]],[[102,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]]],[[[103,[[0,[4,19]]]]],[[103,[[0,[4,19]]]]]],[[[104,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]],[[104,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]]],[[[105,[[0,[4,19]]]]],[[105,[[0,[4,19]]]]]],[[[106,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]],[[106,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]]],[[[107,[[0,[4,19]]]]],[[107,[[0,[4,19]]]]]],[[[109,[[0,[4,108]]]]],[[109,[[0,[4,108]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[7,[[8,[[97,[19,[96,[19]]]]]]]],[7,[[8,[[100,[19,[96,[19]]]]]]]],[7,[[8,[[101,[19]]]]]],[7,[[8,[[102,[19,[96,[19]]]]]]]],[7,[[8,[[104,[19,[96,[19]]]]]]]],[7,[[8,[[105,[19]]]]]],[7,[[8,[[106,[19,[96,[19]]]]]]]],[7,[[8,[[107,[19]]]]]],[7,[[8,[[109,[108]]]]]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[[97,[19,[96,[19]]]],[97,[19,[96,[19]]]]],31],[[99,99],31],[[[100,[[0,[30,19]],[0,[30,[96,[[0,[30,19]]]]]]]],[100,[[0,[30,19]],[0,[30,[96,[[0,[30,19]]]]]]]]],31],[[[101,[[0,[30,19]]]],[101,[[0,[30,19]]]]],31],[[[102,[[0,[30,19]],[0,[30,[96,[[0,[30,19]]]]]]]],[102,[[0,[30,19]],[0,[30,[96,[[0,[30,19]]]]]]]]],31],[[[103,[[0,[30,19]]]],[103,[[0,[30,19]]]]],31],[[[104,[[0,[30,19]],[0,[30,[96,[[0,[30,19]]]]]]]],[104,[[0,[30,19]],[0,[30,[96,[[0,[30,19]]]]]]]]],31],[[[105,[[0,[30,19]]]],[105,[[0,[30,19]]]]],31],[[[107,[[0,[30,19]]]],[107,[[0,[30,19]]]]],31],[[[109,[[0,[30,108]]]],[109,[[0,[30,108]]]]],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[[97,[[0,[32,19]],[0,[32,[96,[[0,[32,19]]]]]]]],10],11],[[[98,[[0,[32,19]],[0,[32,[96,[[0,[32,19]]]]]]]],10],11],[[[100,[[0,[32,19]],[0,[32,[96,[[0,[32,19]]]]]]]],10],11],[[[101,[[0,[32,19]]]],10],11],[[[102,[[0,[32,19]],[0,[32,[96,[[0,[32,19]]]]]]]],10],11],[[[103,[[0,[32,19]]]],10],11],[[[104,[[0,[32,19]],[0,[32,[96,[[0,[32,19]]]]]]]],10],11],[[[105,[[0,[32,19]]]],10],11],[[[106,[[0,[32,19]],[0,[32,[96,[[0,[32,19]]]]]]]],10],11],[[[107,[[0,[32,19]]]],10],11],[[[109,[[0,[32,108]]]],10],11],[[[102,[19,[96,[19]]]]],[[110,[19,[96,[19]]]]]],[[]],[[]],[[]],[[[107,[19]]],[[100,[19,[96,[19]]]]]],[[]],[[]],[[]],[[]],[[[102,[19,[96,[19]]]]],[[104,[19,[96,[19]]]]]],[[]],[[]],[[[103,[19]]],[[105,[19]]]],[[]],[[[110,[19,[96,[19]]]]],[[106,[19,[96,[19]]]]]],[[]],[[]],[[],[[100,[19,[96,[19]]]]]],[[[97,[19,[96,[19]]]]]],[[[100,[19,[96,[19]]]]]],[[[107,[[0,[36,19]]]],37]],[[[109,[[0,[36,108]]]],37]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],0,[[[104,[19,[96,[19]]]]],[[102,[19,[96,[19]]]]]],[[[105,[19]]],[[103,[19]]]],[[],99],[[[97,[19,[96,[19]]]]],99],[[[100,[19,[96,[19]]]]],99],[[[106,[19,[96,[19]]]]],99],0,[[[97,[19,[96,[19]]]],16],8],[[[100,[19,[96,[19]]]],16],8],[[[101,[19]],16],8],[[[102,[[0,[17,19]],[0,[17,[96,[[0,[17,19]]]]]]]],16],8],[[[103,[[0,[17,19]]]],16],8],[[[104,[19,[96,[19]]]],16],8],[[[105,[19]],16],8],[[[106,[19,[96,[19]]]],16],8],[[[107,[19]],16],8],[[[109,[[0,[17,108]]]],16],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[[106,[19,[96,[19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],8],[[],2],[[],2],[[]],[[]],[[[112,[[0,[4,111]]]]],[[112,[[0,[4,111]]]]]],[[]],[[[112,[[0,[113,111]]]],[112,[[0,[113,111]]]]],65],[[],[[114,[23]]]],[6],[6],[7,[[8,[[112,[111]]]]]],[6],0,[[[112,[[0,[30,111]]]],[112,[[0,[30,111]]]]],31],[[],31],[[],31],[[[112,[[0,[32,111]]]],10],11],[[]],[[[112,[[0,[36,111]]]],37]],[[],6],[[]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[[]],[[[112,[[0,[115,111]]]],[112,[[0,[115,111]]]]],[[34,[65]]]],[[[112,[[0,[17,111]]]],16],8],[[]],[[],8],[[],8],[[],18],[[]],0,0,0,0,0,[1],[1],[116,[[8,[116]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],55],[[],23],[[],23],[[]],[[]],[[]],[[]],[[]],[[]],[116,116],[117,117],[[]],[[]],[116,[[23,[116]]]],[117,[[23,[117]]]],[116,[[114,[23]]]],[6],[6],[6],[6],[6],[6],[7,[[8,[116]]]],[7,[[8,[117]]]],[6],[6],[6],[[116,116],31],[[117,117],31],[[],31],[[],31],[[],31],[[],31],[[],8],[[],8],[[116,10],11],[[116,10],11],[[118,10],11],[[118,10],11],[[117,10],11],[[]],[[]],[[]],[[],116],[[116,37]],[[117,37]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[]],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[[],116],0,[77],[66,116],[[116,16],8],[[117,16],8],[[],42],[[],42],[[]],[[]],[[],42],[[],42],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[116,33],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,[[],119],[[],6],[[]],[[],120],[[],120],[[]],[106,[[122,[[13,[121]]]]]],[106,[[122,[[13,[121]]]]]],[[22,26],[[122,[[13,[121]]]]]],[106,[[122,[[13,[121]]]]]],[106,[[122,[[13,[121]]]]]],[94,[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],[107,[[122,[[13,[121]]]]]],[[[14,[52]]],[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],[[],119],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[[53,123,23,124,125,[34,[33]]],[[126,[125]]]],[[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]],53,123,23,124,125,[34,[33]]],[[126,[125]]]],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]],53,123,[23,[25]],124,[125,[25]],[34,[33]]],[[126,[[125,[25]]]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]],53,123,[23,[[35,[19]]]],124,[125,[[35,[19]]]],[34,[33]]],[[126,[[125,[[35,[19]]]]]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[124,[[0,[43,17,4]]]]],[[22,[21]]]],[[],55],[136,[[34,[57]]]],[[],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[137,136],[138,136],[136,[[34,[55]]]],[137,137],[138,138],[[[124,[[0,[4,43,17,4]]]]],[[124,[[0,[4,43,17,4]]]]]],[[[131,[19,[0,[4,[127,[19]]]],[0,[4,[130,[19,128,[61,[19]],[129,[19]],[0,[4,[127,[19]]]]]]]],128]]],[[131,[19,[0,[4,[127,[19]]]],[0,[4,[130,[19,128,[61,[19]],[129,[19]],[0,[4,[127,[19]]]]]]]],128]]]],[[[133,[19,25,108,[0,[4,[127,[19]]]],[0,[4,[130,[19,128,108,[132,[19,25]],[0,[4,[127,[19]]]]]]]],128]]],[[133,[19,25,108,[0,[4,[127,[19]]]],[0,[4,[130,[19,128,108,[132,[19,25]],[0,[4,[127,[19]]]]]]]],128]]]],[[[135,[19,108,[0,[4,[127,[19]]]],[0,[4,[130,[19,128,108,[134,[19]],[0,[4,[127,[19]]]]]]]],128]]],[[135,[19,108,[0,[4,[127,[19]]]],[0,[4,[130,[19,128,108,[134,[19]],[0,[4,[127,[19]]]]]]]],128]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[124,[[0,[43,17,4]]]]],[[23,[[124,[[0,[43,17,4]]]]]]]],[[22,22]],[[22,22],[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]]]],[[22,22],[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]]]],[[22,22],[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]]]],[33,[[104,[96]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]],33],[[104,[19,[96,[19]]]]]],[23,105],[[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]],23],[[105,[19]]]],[[22,22]],[33,[[104,[96]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]],33],[[104,[19,[96,[19]]]]]],[[[23,[26]],23],[[104,[96]]]],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]],[23,[[26,[19,25]]]],[23,[25]]],[[104,[19,[96,[19]]]]]],[33,[[104,[96]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]],33],[[104,[19,[96,[19]]]]]],[26,[[104,[96]]]],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]],[26,[19,25]]],[[104,[19,[96,[19]]]]]],[[23,23],[[104,[96]]]],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]],[23,[[26,[19,25]]]],[23,[25]]],[[104,[19,[96,[19]]]]]],[33],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[136,67],[7,[[8,[[124,[[0,[43,17,4]]]]]]]],[6],[6],[6],[6],[6],[6],[6],[6],0,0,0,[[[124,[[0,[30,43,17,4]]]],[124,[[0,[30,43,17,4]]]]],31],[[],31],[[],31],[137,[[8,[136]]]],[138,[[8,[136]]]],[[],85],[[],85],[[],8],[[136,10],11],[[136,10],11],[[137,10],11],[[138,10],11],[[[124,[[0,[32,43,17,4]]]],10],11],[[[131,[19,[0,[32,[127,[19]]]],[0,[32,[130,[19,128,[61,[19]],[129,[19]],[0,[32,[127,[19]]]]]]]],128]],10],11],[[[133,[19,25,108,[0,[32,[127,[19]]]],[0,[32,[130,[19,128,108,[132,[19,25]],[0,[32,[127,[19]]]]]]]],128]],10],11],[[[135,[19,108,[0,[32,[127,[19]]]],[0,[32,[130,[19,128,108,[134,[19]],[0,[32,[127,[19]]]]]]]],128]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[29,23,[34,[33]]]],[[]],[[]],[[],139],[[],22],[[]],[[]],[[[124,[[0,[36,43,17,4]]]],37]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[137,136],[138,136],[[],31],[[],31],[23,31],[[],31],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]]],31],[[53,123,124,140],31],[[],23],[[],[[8,[34,136]]]],[[],[[8,[34,136]]]],[[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]]],[[8,[34,136]]]],[[]],[[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]]]],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]]]],0,0,0,[[]],[[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]]],[[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]]]],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]]],[[130,[19,128,108,[132,[19,25]],[127,[19]]]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]]],[[130,[19,128,108,[134,[19]],[127,[19]]]]]],0,0,0,[[]],[[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]]]],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]]]],0,0,0,[77],[[]],[[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]]]],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]]]],0,0,0,[[[124,[[0,[17,43,17,4]]]],16],8],[23],[[],123],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]]],123],[[[23,[35]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]],[23,[[35,[19]]]]]],[23,123],[[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]],23],123],[23],[[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]],23]],[[[23,[35]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]],[23,[[35,[19]]]]]],[23],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]],[23,[25]]]],[[[23,[35]]]],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]],[23,[[35,[19]]]]]],[[]],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]]]],[23,123],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]],[23,[25]]],123],[23],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]],[23,[25]]]],[[],29],[136,[[34,[55]]]],[[],85],[[],85],[[],42],[[]],[[]],[[]],[[]],[[]],[[]],[[],42],[[],6],[[],6],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[140,[[8,[140,136]]]],[[]],[[],85],[23,124],[[[131,[19,[127,[19]],[130,[19,128,[61,[19]],[129,[19]],[127,[19]]]],128]],23],124],[[[133,[19,25,108,[127,[19]],[130,[19,128,108,[132,[19,25]],[127,[19]]]],128]],23],124],[[[135,[19,108,[127,[19]],[130,[19,128,108,[134,[19]],[127,[19]]]],128]],23],124],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[1],[6],[[141,6]],[142],[[141,142]],[[],2],[[],2],[[]],[[]],[[],[[13,[48]]]],[141,141],[[]],[[42,[34,[42]]],[[13,[143]]]],[[141,42,[34,[42]]],[[13,[143]]]],[[42,[34,[42]]],[[13,[144]]]],[[141,42,[34,[42]]],[[13,[144]]]],[[42,[34,[42]]],[[13,[145]]]],[[141,42,[34,[42]]],[[13,[145]]]],[42,[[13,[146]]]],[[141,42],[[13,[146]]]],[[],141],[6],[6],[6],[[141,10],11],[[]],[[],6],[[]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[6],[42],[[141,6]],[[141,42]],[42,[[13,[48]]]],[[141,42],[[13,[48]]]],[[]],[[],8],[[],8],[[],18],[147],[[141,147]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],55],[[],55],[[],55],[[],55],[148,[[34,[57]]]],[149,[[34,[57]]]],[150,[[34,[57]]]],[151,[[34,[57]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[122,[[13,[121]]]]]],[139,[[122,[[13,[121]]]]]],[152,148],[153,149],[154,150],[155,150],[156,150],[157,150],[158,151],[159,151],[160,151],[161,151],[162,151],[163,151],[148,[[34,[55]]]],[149,[[34,[55]]]],[150,[[34,[55]]]],[151,[[34,[55]]]],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[164,164],[165,165],[166,166],[167,167],[168,168],[158,158],[159,159],[160,160],[169,169],[170,170],[171,171],[161,161],[162,162],[163,163],[172,172],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[148,67],[149,67],[150,67],[151,67],[7,[[8,[164]]]],[[],[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[152,[[8,[148]]]],[153,[[8,[149]]]],[154,[[8,[150]]]],[155,[[8,[150]]]],[156,[[8,[150]]]],[157,[[8,[150]]]],[158,[[8,[151]]]],[159,[[8,[151]]]],[160,[[8,[151]]]],[161,[[8,[151]]]],[162,[[8,[151]]]],[163,[[8,[151]]]],[[152,10],11],[[148,10],11],[[148,10],11],[[153,10],11],[[149,10],11],[[149,10],11],[[154,10],11],[[155,10],11],[[156,10],11],[[157,10],11],[[150,10],11],[[150,10],11],[[164,10],11],[[165,10],11],[[166,10],11],[[167,10],11],[[168,10],11],[[158,10],11],[[159,10],11],[[160,10],11],[[169,10],11],[[170,10],11],[[171,10],11],[[161,10],11],[[162,10],11],[[163,10],11],[[151,10],11],[[151,10],11],[[172,10],11],[[[174,[[0,[32,173]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[175,151],[[]],[[]],[[]],[[],[[13,[176]]]],[[6,6,6,6,31],[[13,[176]]]],[[]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[]],[[]],[[]],[[]],[[],[[34,[6]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[172,[[122,[[13,[121]]]]]],[172,[[122,[[13,[121]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[152,148],[153,149],[154,150],[155,150],[156,150],[157,150],[165,151],[166,151],[167,151],[168,151],[158,151],[159,151],[160,151],[169,151],[170,151],[171,151],[161,151],[162,151],[163,151],[[],[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],[77],[77],[77],[77],[[],99],[164,[[177,[[8,[22,151]]]]]],[164,[[177,[[8,[22,151]]]]]],[[],120],[[],31],[[164,16],8],[[],177],[[],177],[148,[[34,[55]]]],[149,[[34,[55]]]],[150,[[34,[55]]]],[151,[[34,[55]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],42],[[],42],[[],42],[[],42],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[172,33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[178,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]],[[178,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]]],[[[179,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]],[[179,[[0,[4,19]],[0,[4,[96,[[0,[4,19]]]]]]]]]],[[[183,[[0,[4,19]],[0,[4,128]],[0,[4,[180,[[0,[4,19]],[64,[[0,[4,19]]]],[0,[4,128]]]]]],[0,[4,[181,[[0,[4,19]],[0,[4,128]]]]]],[0,[4,[182,[[0,[4,19]],[0,[4,128]]]]]]]]],[[183,[[0,[4,19]],[0,[4,128]],[0,[4,[180,[[0,[4,19]],[64,[[0,[4,19]]]],[0,[4,128]]]]]],[0,[4,[181,[[0,[4,19]],[0,[4,128]]]]]],[0,[4,[182,[[0,[4,19]],[0,[4,128]]]]]]]]]],[[]],[[]],[[]],[[],[[13,[176]]]],[[]],[[[183,[19,128,[0,[[180,[19,[64,[19]],128]],4,32]],[0,[[181,[19,128]],4,32]],[0,[[182,[19,128]],4,32]]]]],[[0,[[181,[19,128]],4,32]]]],0,[[],[[8,[184]]]],[[22,22]],[[22,22],[[183,[19,128,[0,[[180,[19,[64,[19]],128]],4,32]],[0,[[181,[19,128]],4,32]],[0,[[182,[19,128]],4,32]]]]]],0,[[],[[178,[19,[96,[19]]]]]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[[183,[[0,[32,19]],[0,[32,128]],[0,[32,[180,[[0,[32,19]],[64,[[0,[32,19]]]],[0,[32,128]]]]]],[0,[32,[181,[[0,[32,19]],[0,[32,128]]]]]],[0,[32,[182,[[0,[32,19]],[0,[32,128]]]]]]]],10],11],[[]],[[]],[[]],[[]],[[6,6,6],[[13,[176]]]],[[],[[122,[[13,[121]]]]]],0,[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[[66,33]],[[],[[185,[19,[96,[19]]]]]],[[],[[179,[19,[96,[19]]]]]],[[]],0,[[]],[[[183,[19,128,[0,[[180,[19,[64,[19]],128]],4,32]],[0,[[181,[19,128]],4,32]],[0,[[182,[19,128]],4,32]]]]]],0,0,0,[[],[[122,[[13,[121]]]]]],[[[183,[19,128,[0,[[180,[19,[64,[19]],128]],4,32]],[0,[[181,[19,128]],4,32]],[0,[[182,[19,128]],4,32]]]]],[[122,[[13,[121]]]]]],[[34,66,33]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],33],[[],18],[[],18],[[],18],[[],18],[[]],[[[183,[19,128,[0,[[180,[19,[64,[19]],128]],4,32]],[0,[[181,[19,128]],4,32]],[0,[[182,[19,128]],4,32]]]]]],0,0,[[]],[[]],[[]],[[]],[[],[[122,[[13,[121]]]]]],[[[183,[19,128,[0,[[180,[19,[64,[19]],128]],4,32]],[0,[[181,[19,128]],4,32]],[0,[[182,[19,128]],4,32]]]]],[[122,[[13,[121]]]]]],0,0,0,0,0,0,[[186,187],[[8,[188]]]],[189,[[8,[188]]]],[[189,[0,[190,66]]],[[8,[188]]]],[189,[[8,[22,188]]]],0,0,0,0,0,0,0,0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[],[[186,[191]]]],[123,[[187,[21]]]],[[186,187]],[[]],[[]],[[]],[[]],[[[187,[21]]],31],[53,53],[123,123],[[]],[[]],[[53,53],65],[[123,123],65],[6],[6],[6],[6],[68,[[8,[53,69]]]],[7,[[8,[53]]]],[7,[[8,[123]]]],[68,[[8,[53,69]]]],[68,[[8,[53,69]]]],[6],[6],[[],[[193,[192]]]],[[],[[193,[192]]]],[[53,53],31],[[123,123],31],[[],31],[[],31],[[],31],[[],31],[[53,10],11],[[53,10],11],[[123,10],11],[[]],[[]],[53,34],[[]],[67,[[8,[53]]]],[[[194,[21]],33]],[[22,195]],[[]],[33],[[53,37]],[[123,37]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[],6],[[],6],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[[53,53],[[34,[65]]]],[[123,123],[[34,[65]]]],[[53,78],[[8,[69]]]],[[53,16],8],[[123,16],8],[[53,78],[[8,[69]]]],[[53,78],[[8,[69]]]],[53,6],[[[187,[21]]],123],[[],42],[[],53],[[]],[[]],[[],42],[[],[[8,[[186,[191]],196]]]],[[],8],[197,[[8,[53]]]],[197,[[8,[53]]]],[[],8],[[],8],[[],8],[[],18],[[],18],[53,6],[[123,[187,[21]]],31],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],[[],2],[[],2],[[],2],[[],55],[198,[[8,[199]]]],[[198,198],[[8,[199]]]],[[187,187,[22,[31]]],[[8,[22,199]]]],[[]],[[]],[[]],[[]],[200,[[8,[199]]]],[[],31],[6],[6],[6],[6],[[],[[8,[199]]]],[6],[6],[[199,10],11],[[199,10],11],[[]],[[]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],[[]],[[],6],[[],6],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[200,[[8,[6,199]]]],[200,[[8,[199]]]],[77],[[],[[8,[199]]]],[[[0,[201,202]]],34],[200,[[8,[199]]]],[[],42],[200,[[8,[199]]]],[[],8],[[],8],[[],8],[[],8],[200,[[8,[199]]]],[[],18],[[],18],[31,[[8,[199]]]],[[]],[[]],0,0,0,0,0,0,0,[[],8],[[34,66,33]],0,[[]],[[]],[33],[34],[[]],[[],33],[[],31],0,[1],[203,[[8,[203]]]],[[],2],[[],2],[[],23],[[]],[[]],[203,203],[[]],[203,[[23,[203]]]],[[[34,[203]],66,33],117],[[],203],[6],[6],[7,[[8,[203]]]],[6],[[203,203],31],[[],31],[[],31],[[],8],[[203,10],11],[[]],[[203,37]],[[],6],[[]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[[[34,[203]]]],0,[203],[66,203],[[203,16],8],[[],42],[[]],[[],8],[[],8],[[],8],[[],18],[203,31],[[]],0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[[[22,[204]]],[[122,[[13,[121]]]]]],[72,[[122,[[13,[121]]]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],55],[184,[[34,[57]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[205,184],[184,[[34,[55]]]],[[],[[122,[[13,[121]]]]]],[205,205],[184,184],[[[72,[[0,[4,19]],[0,[4,25]]]]],[[72,[[0,[4,19]],[0,[4,25]]]]]],[[]],[[]],[[]],[[],[[122,[[13,[121]]]]]],[[],206],0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[184,67],[6],[6],[6],[6],[6],[[[207,[[0,[30,19]],[0,[30,25]]]],[207,[[0,[30,19]],[0,[30,25]]]]],31],[[[204,[[0,[19,30]],[0,[25,30]]]],[204,[[0,[19,30]],[0,[25,30]]]]],31],[[[72,[[0,[30,19]],[0,[30,25]]]],[72,[[0,[30,19]],[0,[30,25]]]]],31],[205,[[8,[184]]]],0,[[205,10],11],[[184,10],11],[[184,10],11],[[[207,[[0,[32,19]],[0,[32,25]]]],10],11],[[[204,[[0,[19,32]],[0,[25,32]]]],10],11],[[[72,[[0,[32,19]],[0,[32,25]]]],10],11],[[]],[[]],[[]],[[[72,[19,25]]],[[204,[19,25]]]],[25,[[204,[19,25]]]],[208],[[]],[25,[[72,[19,25]]]],[[]],[208],[209],[209],[209],[209],[210],[210],[211],[211],[[[26,[19,25]],33,[23,[25]],22,53],[[72,[19,25]]]],[209],[209],[[],[[122,[[13,[121]]]]]],[[],[[122,[[13,[121]]]]]],[[[0,[38,39,40]]],[[41,[[0,[38,39,40]]]]]],0,[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[205,184],0,0,0,[77],0,[184,[[34,[55]]]],0,0,0,[[]],[[]],[[]],[[],42],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[1],[1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[212,[[0,[4,19]]]]],[[212,[[0,[4,19]]]]]],[[[50,[4]]],[[50,[4]]]],[[]],[[]],[6],[[[213,[19,25]]]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[[214,[[0,[32,19]],[0,[32,25]]]],10],11],[[[213,[[0,[32,19]],[0,[32,25]]]],10],11],[[[212,[[0,[32,19]]]],10],11],[[[50,[32]],10],11],[[]],[[]],[[]],[[]],[[[214,[19,25]]],[[34,[[23,[[70,[25]]]]]]]],[[[214,[19,25]]],[[34,[[23,[25]]]]]],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],[[],18],[[],18],0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[[],126],[[[125,[[0,[4,215]],[0,[43,17,4]]]]],[[126,[[125,[[0,[4,215]],[0,[43,17,4]]]],[29,[19]]]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],23],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[129,[[0,[4,19]]]]],[[129,[[0,[4,19]]]]]],[[[216,[[0,[4,19]],[0,[4,25]]]]],[[216,[[0,[4,19]],[0,[4,25]]]]]],[[[217,[[0,[4,19]],[0,[4,25]]]]],[[217,[[0,[4,19]],[0,[4,25]]]]]],[[[218,[[0,[4,19]]]]],[[218,[[0,[4,19]]]]]],[[[35,[[0,[4,19]]]]],[[35,[[0,[4,19]]]]]],[[[134,[[0,[4,19]]]]],[[134,[[0,[4,19]]]]]],[[[132,[[0,[4,19]],[0,[4,25]]]]],[[132,[[0,[4,19]],[0,[4,25]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[19]]],[[23,[[35,[19]]]]]],[[]],[[[129,[19]]]],[[[134,[19]]]],[[[132,[19,25]]]],0,0,0,0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[7,[[8,[[129,[19]]]]]],[7,[[8,[[216,[19,25]]]]]],[7,[[8,[[217,[19,25]]]]]],[7,[[8,[[218,[19]]]]]],[7,[[8,[[35,[19]]]]]],[7,[[8,[[134,[19]]]]]],[7,[[8,[[132,[19,25]]]]]],[6],[6],[6],[6],[6],[6],[6],[6],[[[129,[[0,[30,19]]]],[129,[[0,[30,19]]]]],31],[[[216,[[0,[30,19]],[0,[30,25]]]],[216,[[0,[30,19]],[0,[30,25]]]]],31],[[[217,[[0,[30,19]],[0,[30,25]]]],[217,[[0,[30,19]],[0,[30,25]]]]],31],[[[218,[[0,[30,19]]]],[218,[[0,[30,19]]]]],31],[[[35,[[0,[30,19]]]],[35,[[0,[30,19]]]]],31],[[[134,[[0,[30,19]]]],[134,[[0,[30,19]]]]],31],[[[132,[[0,[30,19]],[0,[30,25]]]],[132,[[0,[30,19]],[0,[30,25]]]]],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],0,[[],8],[[[129,[[0,[32,19]]]],10],11],[[[216,[[0,[32,19]],[0,[32,25]]]],10],11],[[[217,[[0,[32,19]],[0,[32,25]]]],10],11],[[[218,[[0,[32,19]]]],10],11],[[[35,[[0,[32,19]]]],10],11],[[[134,[[0,[32,19]]]],10],11],[[[132,[[0,[32,19]],[0,[32,25]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[129,[[0,[36,19]]]],37]],[[[216,[[0,[36,19]],[0,[36,25]]]],37]],[[[217,[[0,[36,19]],[0,[36,25]]]],37]],[[[218,[[0,[36,19]]]],37]],[[[35,[[0,[36,19]]]],37]],[[[134,[[0,[36,19]]]],37]],[[[132,[[0,[36,19]],[0,[36,25]]]],37]],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[[[13,[12]]],[[13,[2,12]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[14,[[14,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],[15,[[15,[2]]]],0,0,0,[[[134,[19]]],33],0,0,0,[[[134,[19]]]],0,0,[[[129,[19]],16],8],[[[216,[[0,[17,19]],[0,[17,25]]]],16],8],[[[217,[[0,[17,19]],[0,[17,25]]]],16],8],[[[218,[[0,[17,19]]]],16],8],[[[35,[19]],16],8],[[[134,[[0,[17,19]]]],16],8],[[[132,[[0,[17,19]],[0,[17,25]]]],16],8],0,[[[134,[19]]],123],[[[132,[19,25]]],123],0,0,0,0,[[[129,[19]]]],[[[134,[19]]]],[[[132,[19,25]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0],"c":[1850],"p":[[3,"Private"],[8,"Any"],[4,"ExecutionType"],[8,"Clone"],[3,"HotShotConfig"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"Deserialize"],[3,"Formatter"],[6,"Result"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[8,"Serializer"],[8,"Serialize"],[3,"TypeId"],[8,"NodeType"],[4,"ViewSyncCertificate"],[15,"u8"],[3,"Vec"],[3,"Commitment"],[3,"DACertificate"],[8,"LeafType"],[3,"QuorumCertificate"],[3,"TimeoutCertificate"],[3,"ViewSyncCertificateInternal"],[4,"AssembledSignature"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[15,"u64"],[4,"Option"],[3,"ViewSyncData"],[8,"Hash"],[8,"Hasher"],[8,"Display"],[8,"Send"],[8,"Sync"],[3,"IndentedSection"],[3,"String"],[8,"Committable"],[3,"BlockStore"],[3,"Consensus"],[3,"HashMap"],[3,"SubscribableRwLock"],[8,"Metrics"],[3,"ConsensusMetrics"],[4,"Terminator"],[8,"FnMut"],[4,"HotShotError"],[3,"EncodedPublicKey"],[3,"ViewNumber"],[8,"Error"],[3,"InconsistentDeltasError"],[3,"Backtrace"],[8,"Into"],[3,"InconsistentDeltasSnafu"],[3,"ValidatingProposal"],[3,"DAProposal"],[3,"QuorumProposal"],[3,"ValidatingLeaf"],[3,"SequencingLeaf"],[4,"Ordering"],[8,"RngCore"],[15,"str"],[8,"Read"],[4,"SerializationError"],[6,"LeafBlock"],[6,"LeafDeltasError"],[3,"StoredView"],[6,"LeafTransaction"],[15,"i128"],[6,"LeafTime"],[6,"LeafState"],[3,"Demand"],[8,"Write"],[3,"BadBlockSnafu"],[3,"InconsistentBlockSnafu"],[3,"LeafNotFoundSnafu"],[3,"InvalidStateSnafu"],[4,"RoundTimedoutState"],[3,"ViewTimeoutSnafu"],[3,"NonZeroU64"],[3,"InsufficientValidSignaturesSnafu"],[3,"MiscSnafu"],[3,"ContinueSnafu"],[3,"FailedToMessageLeaderSnafu"],[3,"FailedToBroadcastSnafu"],[3,"NetworkFaultSnafu"],[3,"StorageSnafu"],[3,"TimeoutSnafu"],[3,"Event"],[4,"EventType"],[8,"NodeImplementation"],[3,"Message"],[3,"Messages"],[4,"MessagePurpose"],[4,"MessageKind"],[4,"InternalTrigger"],[4,"ProcessedGeneralConsensusMessage"],[4,"ProcessedCommitteeConsensusMessage"],[4,"GeneralConsensusMessage"],[4,"CommitteeConsensusMessage"],[3,"SequencingMessage"],[4,"DataMessage"],[8,"ProposalType"],[3,"Proposal"],[6,"ProcessedSequencingMessage"],[8,"Block"],[3,"BlockCommitment"],[8,"Ord"],[3,"HashSet"],[8,"PartialOrd"],[3,"DummyBlock"],[4,"DummyTransaction"],[3,"DummyError"],[3,"NonZeroUsize"],[3,"Duration"],[8,"Future"],[3,"Pin"],[3,"EncodedSignature"],[4,"VoteData"],[3,"VoteAccumulator"],[4,"Either"],[8,"Membership"],[8,"NetworkMsg"],[3,"DAVote"],[8,"CommunicationChannel"],[3,"CommitteeExchange"],[4,"QuorumVote"],[3,"QuorumExchange"],[4,"ViewSyncVote"],[3,"ViewSyncExchange"],[4,"ElectionError"],[3,"StubSnafu"],[3,"MathSnafu"],[3,"BTreeSet"],[4,"Checked"],[3,"NoMetrics"],[15,"f64"],[8,"Counter"],[8,"Gauge"],[8,"Histogram"],[8,"Label"],[15,"i64"],[4,"MemoryNetworkError"],[4,"CentralizedServerNetworkError"],[4,"WebServerNetworkError"],[4,"NetworkError"],[3,"StubSnafu"],[3,"NoMessagesInQueueSnafu"],[3,"IncorrectConsensusDataSnafu"],[3,"ClientSnafu"],[3,"EndpointSnafu"],[3,"ClientDisconnectedSnafu"],[3,"UnimplementedFeatureSnafu"],[3,"CouldNotDeliverSnafu"],[3,"NoSuchNodeSnafu"],[3,"ChannelSendSnafu"],[3,"ShutDownSnafu"],[3,"UnableToCancelSnafu"],[4,"TransmitType"],[3,"Libp2pSnafu"],[3,"MemoryNetworkSnafu"],[3,"CentralizedServerSnafu"],[3,"WebServerSnafu"],[3,"FailedToSerializeSnafu"],[3,"FailedToDeserializeSnafu"],[3,"TimeoutSnafu"],[4,"ConsensusIntentEvent"],[8,"SignatureKey"],[4,"NetworkChange"],[4,"NetworkNodeHandleError"],[8,"Fn"],[6,"BoxSyncFuture"],[3,"ViewQueue"],[3,"ChannelMaps"],[8,"QuorumExchangeType"],[8,"CommitteeExchangeType"],[8,"ViewSyncExchangeType"],[3,"SequencingExchanges"],[4,"StorageError"],[3,"SendToTasks"],[3,"BitSlice"],[15,"slice"],[4,"PrimitivesError"],[3,"GenericArray"],[8,"CryptoRng"],[8,"BitOrder"],[15,"char"],[8,"FromIterator"],[15,"array"],[3,"U256"],[4,"BitSpanError"],[3,"TaggedBase64"],[8,"IntoIterator"],[4,"StakeTableError"],[4,"SnapshotVersion"],[8,"SeedableRng"],[8,"CryptoRngCore"],[3,"DummyState"],[4,"ViewEntry"],[3,"NoGenesisViewSnafu"],[6,"Result"],[3,"StorageState"],[15,"never"],[3,"OwnedFd"],[8,"IntoFilelike"],[8,"IntoSocketlike"],[3,"RoundFinishedEvent"],[3,"View"],[4,"ViewInner"],[8,"VoteToken"],[3,"YesOrNoVote"],[3,"TimeoutVote"],[3,"ViewSyncVoteInternal"],[3,"VoteMetaData"],[8,"DeltasType"],[8,"TestableLeaf"],[13,"Misc"],[13,"InvalidState"],[13,"InsufficientValidSignatures"],[13,"StorageError"],[13,"TimeoutError"],[13,"FailedToMessageLeader"],[13,"FailedToBroadcast"],[13,"NetworkFault"],[13,"ViewTimeoutError"],[13,"Decide"],[13,"Error"],[13,"ReplicaViewTimeout"],[13,"NextLeaderViewTimeout"],[13,"ViewFinished"],[8,"SequencingMessageType"],[8,"ConsensusMessageType"],[8,"ConsensusSharedApi"],[8,"SequencingConsensusApi"],[8,"ConsensusExchange"],[8,"SignedCertificate"],[8,"TestableElection"],[8,"ConnectedNetwork"],[8,"TestableChannelImplementation"],[8,"TestableNetworkingImplementation"],[8,"ViewMessage"],[8,"NetworkReliability"],[13,"Libp2p"],[13,"MemoryNetwork"],[13,"CentralizedServer"],[13,"WebServer"],[13,"FailedToSerialize"],[13,"FailedToDeserialize"],[13,"Timeout"],[8,"TestableNodeImplementation"],[8,"ExchangesType"],[8,"TestableExchange"],[8,"QuorumCertificate"],[8,"StakeTableScheme"],[8,"State"],[8,"TestableState"],[8,"TestableBlock"],[8,"ConsensusTime"],[8,"Storage"],[8,"TestableStorage"],[13,"DA"],[13,"Leaf"],[8,"Accumulator"],[8,"VoteType"]]},\
"hotshot_utils":{"doc":"Contains general utility structures and methods","t":"AF","n":["bincode","bincode_opts"],"q":[[0,"hotshot_utils"],[1,"hotshot_utils::bincode"]],"d":["Provides bincode options","For the wire format, we use bincode with the following …"],"i":[0,0],"f":[0,[[],[[9,[[7,[[5,[[3,[1,2]],4]],6]],8]]]]],"c":[],"p":[[3,"DefaultOptions"],[3,"Infinite"],[3,"WithOtherLimit"],[3,"LittleEndian"],[3,"WithOtherEndian"],[3,"VarintEncoding"],[3,"WithOtherIntEncoding"],[3,"RejectTrailing"],[3,"WithOtherTrailing"]]},\
"hotshot_web_server":{"doc":"","t":"GDGIDMMLLLLLLLLLLAMLFLLLLLLLLLLKLKLKLKLKLKLLLLLLLLLLLLLMMMMMMKLKLKLKLKLKLKLKLKLKLMFMMMLLLLMLLLLMMMMMMLLLRRRRRRFFFFFFFFFFFFF","n":["Error","Options","State","WebServerDataSource","WebServerState","_prng","api_path","as_any","as_any","as_any_mut","as_any_mut","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","config","da_certificates","default","define_api","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_arg_matches","from_arg_matches_mut","get_da_certificate","get_da_certificate","get_proposal","get_proposal","get_transactions","get_transactions","get_view_sync_proposal","get_view_sync_proposal","get_view_sync_votes","get_view_sync_votes","get_votes","get_votes","group_id","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","num_txns","oldest_certificate","oldest_proposal","oldest_view_sync_proposal","oldest_view_sync_vote","oldest_vote","post_completed_transaction","post_completed_transaction","post_da_certificate","post_da_certificate","post_proposal","post_proposal","post_secret_proposal","post_secret_proposal","post_staketable","post_staketable","post_transaction","post_transaction","post_view_sync_proposal","post_view_sync_proposal","post_view_sync_vote","post_view_sync_vote","post_vote","post_vote","proposal","proposal","proposals","run_web_server","shutdown","stake_table","transactions","try_from","try_from","try_into","try_into","txn_lookup","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","view_sync_proposal_index","view_sync_proposals","view_sync_vote_index","view_sync_votes","vote_index","votes","vzip","vzip","with_shutdown_signal","DEFAULT_WEB_SERVER_DA_PORT","DEFAULT_WEB_SERVER_PORT","DEFAULT_WEB_SERVER_VIEW_SYNC_PORT","MAX_TXNS","MAX_VIEWS","TX_BATCH_SIZE","get_da_certificate_route","get_proposal_route","get_transactions_route","get_view_sync_proposal_route","get_view_sync_vote_route","get_vote_route","post_da_certificate_route","post_proposal_route","post_staketable_route","post_transactions_route","post_view_sync_proposal_route","post_view_sync_vote_route","post_vote_route"],"q":[[0,"hotshot_web_server"],[104,"hotshot_web_server::config"]],"d":["","","","Trait defining methods needed for the <code>WebServerState</code>","State that tracks proposals and votes the server receives …","prng for generating endpoint","","","","","","","","","","","","","view number -&gt; (secret, da_certificates)","","Sets up all API routes","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Return the da certificate the server has received for a …","","Return the proposal the server has received for a …","","Return the transaction at the specified index (which will …","","","","","","Return all votes the server has received for a particular …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","highest transaction index","view for teh oldest DA certificate","view for oldest proposals in memory","","","view number of oldest votes in memory","","","","Stores a received DA certificate in the <code>WebServerState</code>","","Stores a received proposal in the <code>WebServerState</code>","","","","","","Stores a received group of transactions in the …","","","","","","Stores a received vote in the <code>WebServerState</code>","","","view number -&gt; (secret, proposal)","","shutdown signal","stake table with leader keys","index -&gt; transaction","","","","","","","","","","","","","","view number -&gt; highest vote index for that view number","view number -&gt; Vec(index, vote)","","","","","","","How many transactions to keep in memory","How many views to keep in memory","How many transactions to return at once","","","","","","","","","","","","",""],"i":[0,0,0,0,0,20,3,20,3,20,3,3,3,20,3,20,3,0,20,3,0,20,3,20,3,20,3,20,3,3,3,31,20,31,20,31,20,31,20,31,20,31,20,3,20,3,20,3,20,3,20,3,20,3,20,20,20,20,20,20,20,31,20,31,20,31,20,31,20,31,20,31,20,31,20,31,20,31,20,31,20,20,0,20,20,20,20,3,20,3,20,20,3,3,3,20,20,20,20,20,20,20,3,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[2,2],[2,2],[[]],[[]],[[]],[[]],0,0,[[],3],[3,[[11,[[9,[[0,[4,5,6,7]],8]],10]]]],[12],[12],[12],[12],[12],[12],[[]],[[]],[13,[[11,[3,14]]]],[13,[[11,[3,14]]]],[15,[[11,[[18,[[17,[[17,[16]]]]]],8]]]],[[[20,[19]],15],[[11,[[18,[[17,[[17,[16]]]]]],8]]]],[15,[[11,[[18,[[17,[[17,[16]]]]]],8]]]],[[[20,[19]],15],[[11,[[18,[[17,[[17,[16]]]]]],8]]]],[15,[[11,[18,8]]]],[[[20,[19]],15],[[11,[18,8]]]],[[15,15],[[11,[[18,[[17,[[17,[16]]]]]],8]]]],[[[20,[19]],15,15],[[11,[[18,[[17,[[17,[16]]]]]],8]]]],[[15,15],[[11,[[18,[[17,[[17,[16]]]]]],8]]]],[[[20,[19]],15,15],[[11,[[18,[[17,[[17,[16]]]]]],8]]]],[[15,15],[[11,[[18,[[17,[[17,[16]]]]]],8]]]],[[[20,[19]],15,15],[[11,[[18,[[17,[[17,[16]]]]]],8]]]],[[],[[18,[21]]]],[[],12],[[],12],[[]],[[]],[[[23,[22]]],[[23,[1,22]]]],[[[23,[22]]],[[23,[1,22]]]],[24,[[24,[1]]]],[24,[[24,[1]]]],[25,[[25,[1]]]],[25,[[25,[1]]]],[[],[[20,[19]]]],0,0,0,0,0,0,[[[17,[16]]],[[11,[8]]]],[[[20,[19]],[17,[16]]],[[11,[8]]]],[[15,[17,[16]]],[[11,[8]]]],[[[20,[19]],15,[17,[16]]],[[11,[8]]]],[[15,[17,[16]]],[[11,[8]]]],[[[20,[19]],15,[17,[16]]],[[11,[8]]]],[[15,[17,[16]]],[[11,[8]]]],[[[20,[19]],15,[17,[16]]],[[11,[8]]]],[[[17,[16]]],[[11,[8]]]],[[[20,[19]],[17,[16]]],[[11,[8]]]],[[[17,[16]]],[[11,[8]]]],[[[20,[19]],[17,[16]]],[[11,[8]]]],[[15,[17,[16]]],[[11,[8]]]],[[[20,[19]],15,[17,[16]]],[[11,[8]]]],[[15,[17,[16]]],[[11,[8]]]],[[[20,[19]],15,[17,[16]]],[[11,[8]]]],[[15,[17,[16]]],[[11,[8]]]],[[[20,[19]],15,[17,[16]]],[[11,[8]]]],[15,18],[[[20,[19]],15],18],0,[[[18,[26]],27],28],0,0,0,[[],11],[[],11],[[],11],[[],11],0,[[],29],[[],29],[[3,13],[[11,[14]]]],[[3,13],[[11,[14]]]],0,0,0,0,0,0,[[]],[[]],[[[20,[19]],[18,[26]]],[[20,[19]]]],0,0,0,0,0,0,[15,30],[15,30],[15,30],[[15,15],30],[[15,15],30],[[15,15],30],[15,30],[15,30],[[],30],[[],30],[15,30],[15,30],[15,30]],"c":[],"p":[[8,"Any"],[3,"Command"],[3,"Options"],[8,"Send"],[8,"Sync"],[8,"ReadState"],[8,"WriteState"],[3,"ServerError"],[3,"Api"],[4,"ApiError"],[4,"Result"],[15,"usize"],[3,"ArgMatches"],[6,"Error"],[15,"u64"],[15,"u8"],[3,"Vec"],[4,"Option"],[8,"SignatureKey"],[3,"WebServerState"],[3,"Id"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"OneShotReceiver"],[15,"u16"],[6,"Result"],[3,"TypeId"],[3,"String"],[8,"WebServerDataSource"]]},\
"libp2p_networking":{"doc":"Library for p2p communication","t":"AAADLLLLMLLLLLLLMLLMLLLLNNNNENNNNNNNNNNNNNNNNNNNNNNDDCNEEDDDEDEENNNNNNNNNNNNNNNALLLLLLLLMMLLMALLFMLLLALLLLLLLLLLLLLFFFMMMMMMLLLLMMMMMMMMAAMMMMMMMMMMMLFFMMMMLLLLLLLLLMMLLLLLLLLMMMMMMMMMMMMMMMMMMAAAAADDEENNNDDRRNNDNELLMMMMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLMMMLLMMMLLMLLMMLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLDEDNNLLLMLLLLLLMMLLLLLLLLLMLLLLLLMMLLMMLLLLLLLLLLLLDDDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDMLLLLLLLLLLLLLLLMLMMLLLLLDENMLLLLLLLLLLLLLLMLLLLMLLLLLMLLLMLLLLLLLLLLRDRLLLLLMLLLMLLLLMLLLLLLLMLLLLLLNDENDNDNNDENDNDENDNDNDNDNDNNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMDDDDDDRRCDCCCCCCRLLLAMLLLALLMLCLLLMLLMLLLLRDDDENNRLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLMMMMLMMLMMLLMMLMMLMMLLLLLLLLLLLLLMMLLLLLLLLNDNDNDNDNDNDEDDNDNDNDNDNDNDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLMALLLLMLLLLLLMMMLMLMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMCCCCCCDDLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["message","network","reexport","Message","borrow","borrow_mut","clone","clone_into","content","deserialize","eq","equivalent","equivalent","fmt","from","into","sender","serialize","to_owned","topic","try_from","try_into","type_id","vzip","AddKnownPeers","BeginBootstrap","Bootstrap","CantKillTwice","ClientRequest","Conductor","ConnectTimeout","DHTError","DHTEvent","DMEvent","DeserializationError","DirectRequest","DirectRequest","DirectResponse","DirectResponse","GetConnectedPeerNum","GetConnectedPeers","GetDHT","GetRoutingTable","GossipEvent","GossipMsg","GossipMsg","IdentifyEvent","IgnorePeers","IsBootstrapped","Killed","LookupPeer","MeshParams","NetworkDef","NetworkError","NetworkError","NetworkEvent","NetworkEventInternal","NetworkNode","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeType","NoSuchTopic","NodeConfigError","Prune","PutDHT","ReceiverEnded","RecvError","Regular","SendError","SerializationError","Shutdown","Subscribe","TimeoutError","UninitializedField","Unsubscribe","ValidationError","behaviours","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","clone","clone_into","config","def","default","deserialize","deserialize_msg","dht","eq","equivalent","equivalent","error","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","gen_multiaddr","gen_transport","get_random_handle","gossipsub","id","identify","identity","identity","identity","into","into","into","into","listen_addr","mesh_n","mesh_n_high","mesh_n_low","mesh_outbound_min","mesh_params","mesh_params","network_config","network_node_handle_error","node","node_type","node_type","peer_id","peer_id","receiver","replication_factor","replication_factor","republication_interval","republication_interval","request_response","send_network","serialize","serialize_msg","spin_up_swarm","state","swarm","to_connect_addrs","to_connect_addrs","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","ttl","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","webui_listeners","contents","key","key","notify","notify","pid","retry_count","retry_count","value","source","source","source","source","source","source","source","source","dht","direct_message","direct_message_codec","exponential_backoff","gossip","Bootstrap","DHTBehaviour","DHTEvent","DHTProgress","Finished","InProgress","IsBootstrapped","KadGetQuery","KadPutQuery","MAX_DHT_QUERY_SIZE","NUM_REPLICATED_TO_TRUST","NotStarted","NotStarted","RandomWalk","Started","State","add_address","add_bootstrap_nodes","backoff","backoff","backoff","backoff","begin_bootstrap","begin_bootstrap","bootstrap_nodes","bootstrap_state","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dht_handle_event","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","event_queue","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_record","handle_established_inbound_connection","handle_established_outbound_connection","handle_get_query","handle_pending_inbound_connection","handle_pending_outbound_connection","handle_put_query","hash","in_progress_get_closest_peers","in_progress_get_record_queries","in_progress_put_record_queries","into","into","into","into","into","into","into","into","kadem","key","key","lookup_peer","new","notify","notify","num_replicas","on_connection_handler_event","on_swarm_event","peer_id","poll","print_routing_table","progress","progress","put_record","query_closest_peers","queued_get_record_queries","queued_put_record_queries","random_walk","records","replication_factor","retry_count","state","state","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","DMBehaviour","DMEvent","DMRequest","DirectRequest","DirectResponse","add_address","add_direct_request","add_direct_response","backoff","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","failed_rr","fmt","from","from","from","handle_dm_event","handle_established_inbound_connection","handle_established_outbound_connection","handle_pending_inbound_connection","handle_pending_outbound_connection","in_progress_rr","into","into","into","new","on_connection_handler_event","on_swarm_event","out_event_queue","peer_id","poll","remove_address","request_response","retry_count","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","DirectMessageCodec","DirectMessageProtocol","DirectMessageRequest","DirectMessageResponse","MAX_MSG_SIZE_DM","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","read_request","read_response","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_request","write_response","ExponentialBackoff","backoff_factor","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","equivalent","fmt","from","hash","into","is_expired","new","reset","reset_val","start_next","started","timeout","to_owned","try_from","try_into","type_id","vzip","GossipBehaviour","GossipEvent","GossipMsg","backoff","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drain_publish_gossips","eq","equivalent","equivalent","fmt","from","from","gossip_handle_event","gossipsub","handle_established_inbound_connection","handle_established_outbound_connection","handle_pending_inbound_connection","handle_pending_outbound_connection","in_progress_gossip","into","into","new","on_connection_handler_event","on_swarm_event","out_event_queue","poll","publish_gossip","subscribe_gossip","subscribed_topics","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unsubscribe_gossip","vzip","vzip","NUM_REPLICATED_TO_TRUST","NetworkDef","_DERIVE_core_fmt_Debug_FOR_NetworkDef","add_address","add_direct_request","add_direct_response","borrow","borrow_mut","dht","fmt","from","get_record","gossipsub","handle_established_inbound_connection","handle_established_outbound_connection","handle_pending_inbound_connection","handle_pending_outbound_connection","identify","into","new","on_connection_handler_event","on_swarm_event","poll","publish_gossip","put_record","request_response","subscribe_gossip","try_from","try_into","type_id","unsubscribe_gossip","vzip","CancelledRequest","CancelledRequestSnafu","DHTError","DialError","DialSnafu","Disagreement","DisagreementSnafu","GetRecord","GetRecordError","GetRecordSnafu","GetRecordWrapperError","GossipsubBuild","GossipsubBuildSnafu","GossipsubConfig","GossipsubConfigSnafu","NetworkError","NoKnownPeers","NoKnownPeersSnafu","NotFound","NotFoundSnafu","PublishError","PublishSnafu","PutRecord","PutRecordSnafu","StreamClosed","StreamClosedSnafu","Transport","TransportLaunch","TransportLaunchSnafu","TransportSnafu","as_error_source","as_error_source","as_error_source","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","description","description","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","message","message","provide","provide","provide","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","source","source","source","source","message","message","source","source","source","source","NetworkSnafu","NodeConfigSnafu","RecvSnafu","SendSnafu","SerializationSnafu","TimeoutSnafu","ESTABLISHED_LIMIT","ESTABLISHED_LIMIT_UNWR","MeshParams","NetworkNode","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeReceiver","_DERIVE_core_fmt_Debug_FOR_NetworkNode","add_known_peers","borrow","borrow_mut","config","config","connected_pids","fmt","from","handle","handle_client_requests","handle_swarm_events","identity","into","network_node_handle_error","new","num_connected","peer_id","peer_id","spawn_listeners","start_listen","swarm","try_from","try_into","type_id","vzip","DEFAULT_REPLICATION_FACTOR","MeshParams","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","UninitializedField","ValidationError","_DERIVE_core_fmt_Debug_FOR_NetworkNodeConfig","as_error_source","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","bound_addr","build","clone","clone","clone","clone_into","clone_into","clone_into","create_empty","default","default","default","fmt","fmt","fmt","fmt","from","from","from","from","from","from","header","identity","identity","identity","in_current_span","into","into","into","into","mesh_n","mesh_n_high","mesh_n_low","mesh_outbound_min","mesh_params","mesh_params","mesh_params","node_type","node_type","node_type","provide","replication_factor","replication_factor","replication_factor","republication_interval","republication_interval","republication_interval","to_connect_addrs","to_connect_addrs","to_connect_addrs","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","ttl","ttl","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CantKillTwice","CantKillTwiceSnafu","ConnectTimeout","ConnectTimeoutSnafu","DHTError","DHTSnafu","DeserializationError","DeserializationSnafu","Killed","KilledSnafu","NetworkError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeReceiver","NetworkSnafu","NoSuchTopic","NoSuchTopicSnafu","NodeConfigError","NodeConfigSnafu","ReceiverEnded","ReceiverEndedSnafu","RecvError","RecvSnafu","SendError","SendSnafu","SerializationError","SerializationSnafu","TimeoutError","TimeoutSnafu","add_known_peers","as_error_source","backtrace","begin_bootstrap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","connected_pids","description","direct_request","direct_response","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_record","get_record_timeout","gossip","header","id","id","ignore_peers","in_current_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","is_killed","kill_switch","killed","listen_addr","listen_addr","lookup_pid","modify_state","network_config","network_node_handle_error","new","notify_webui","num_connected","peer_id","peer_id","print_routing_table","provide","prune_peer","put_record","put_record_timeout","receiver","receiver","receiver","receiver_spawned","recv","recv_kill","register_webui_listener","send_network","send_request","shutdown","source","spawn_handler","state","state","state_wait_timeout_until","state_wait_timeout_until_with_trigger","state_wait_until","subscribe","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsubscribe","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_to_connect","webui_listeners","source","source","source","source","source","source","source","source","NetworkSnafu","NodeConfigSnafu","RecvSnafu","SendSnafu","SerializationSnafu","TimeoutSnafu","Multiaddr","PeerId","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone","clone_into","clone_into","cmp","cmp","deserialize","deserialize","empty","encode_hex","encode_hex_upper","ends_with","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_iter","from_multihash","from_public_key","from_str","from_str","hash","hash","header","header","into","into","into_iter","is_empty","iter","len","multihash","partial_cmp","partial_cmp","pop","protocol_stack","push","random","replace","serialize","serialize","to_base58","to_bytes","to_owned","to_owned","to_string","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with","with_capacity"],"q":[[0,"libp2p_networking"],[3,"libp2p_networking::message"],[24,"libp2p_networking::network"],[176,"libp2p_networking::network::ClientRequest"],[185,"libp2p_networking::network::NetworkNodeHandleError"],[193,"libp2p_networking::network::behaviours"],[198,"libp2p_networking::network::behaviours::dht"],[354,"libp2p_networking::network::behaviours::direct_message"],[405,"libp2p_networking::network::behaviours::direct_message_codec"],[472,"libp2p_networking::network::behaviours::exponential_backoff"],[498,"libp2p_networking::network::behaviours::gossip"],[542,"libp2p_networking::network::def"],[574,"libp2p_networking::network::error"],[846,"libp2p_networking::network::error::DHTError"],[849,"libp2p_networking::network::error::GetRecordWrapperError"],[850,"libp2p_networking::network::error::NetworkError"],[856,"libp2p_networking::network::network_node_handle_error"],[862,"libp2p_networking::network::node"],[898,"libp2p_networking::network::node::config"],[991,"libp2p_networking::network::node::handle"],[1286,"libp2p_networking::network::node::handle::NetworkNodeHandleError"],[1294,"libp2p_networking::network::node::handle::network_node_handle_error"],[1300,"libp2p_networking::reexport"]],"d":["Example message used by the UI library","Network logic","symbols needed to implement a networking instance over …","example message that may be sent to the swarm. Used in the …","","","","","the content of the message","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","the peerid of the sender","","","the topic associated with the msg","","","","","add vec of known peers or addresses","Start the bootstrap process to kademlia","bootstrap node accepts all connections","The inner <code>NetworkNode</code> has already been killed","Actions to send from the client to the swarm","conductor node is never pruned","Could not connect to the network in time","Error in the kademlia DHT","a DHT event","a direct message event","Failure to deserialize a message","client request to send a direct serialized message","Recv-ed a direct message from a node","client request to send a direct reply to a message","Recv-ed a direct response from a node (that hopefully was …","Request the number of connected peers","Request the set of connected peers","Get(Key, Chan)","Print the routing  table to stderr, debugging only","a gossip  event","broadcast a serialized message","Recv-ed a broadcast","a identify event. Is boxed because this event is much …","Ignore peers. Only here for debugging purposes. Allows us …","Report that kademlia has successfully bootstrapped into …","The network node has been killed","Get address of peer","NOTE: …","Overarching network behaviour performing:","","Error generating network","events generated by the swarm that we wish to relay to the …","internal representation of the network events only used …","Network definition","describe the configuration of the network","Builder for <code>NetworkNodeConfig</code>.","Error type for NetworkNodeConfigBuilder","A handle containing:","Error wrapper type for interacting with swarm handle","this is mostly to estimate how many network connections a …","no known topic matches the hashset of keys","Error building Node config","prune a peer","Put(Key, Value) into DHT relay success back on channel","The receiver was unable to receive a new message","Error receiving message from network","regular node has a limit to the number of connections to …","Error sending request to network","Failure to serialize a message","kill the swarm","subscribe to a topic","Error waiting for connections","Uninitialized field","unsubscribe from a topic","Custom validation error","networking behaviours wrapping libp2p’s behaviours","","","","","","","","","address to bind to","address to bind to","","","the configuration parameters of the netework","","","","Deserialize an arbitrary message","purpose: peer routing purpose: storing pub key &lt;-&gt; peer id …","","","","Contains the <code>NetworkError</code> snafu types","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Bind all interfaces on port <code>port</code> NOTE we may want …","Generate authenticated transport","Given a slice of handles assumed to be larger than 0, …","purpose: broadcasting messages to many peers NOTE …","human readable id","purpose: identifying the addresses from an outside POV","optional identity","optional identity","pub/private key from with peer_id is derived","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","the local address we’re listening on","mesh_n from gossipsub","mesh_n_high from gossipsub","mesh_n_low from gossipsub","mesh_outbound_min from gossipsub","parameters for gossipsub mesh network","parameters for gossipsub mesh network","network configuration","Re-exports of the snafu errors that <code>NetworkNodeHandleError</code> …","","The type of node (bootstrap etc)","The type of node (bootstrap etc)","the peer id of the networkbehaviour","peer id of network node","","replication factor for entries in the DHT default is …","replication factor for entries in the DHT default is …","republication interval in DHT, must be much less than <code>ttl</code>","republication interval in DHT, must be much less than <code>ttl</code>","purpose: directly messaging peer","send an action to the networkbehaviour","","Serialize an arbitrary message","a single node, connects them to each other and waits for …","the state of the replica","the swarm of networkbehaviours","list of addresses to connect to at initialization","list of addresses to connect to at initialization","","","","","","","","","","expiratiry for records in DHT","expiratiry for records in DHT","","","","","","","","","A list of webui listeners that are listening for changes …","msg contents","Key to publish under","Key to search for","Channel to notify caller of result of publishing","Channel to notify caller of value (or failure to find …","peer id","number of retries","number of retries to make","Value to publish under","source of error","source of error","source of error","source of error","source of error","source of error","dummy source","source of error","Wrapper around Kademlia","Wrapper around <code>RequestResponse</code>","Implementation of a codec for sending messages for …","exponential backoff type","Wrapper around gossipsub","State of bootstrapping","Behaviour wrapping libp2p’s kademlia included:","DHT event enum","represents progress through DHT","Sucessfully completed","The query has been started","Only event tracked currently is when we successfully …","Metadata holder for get query","Metadata holder for get query","","","Not in progress","The query has not been started","State of the periodic random walk","In progress","State used for random walk and bootstrapping","Passthru to kademlia Associate address with kademlia peer","Save in case kademlia forgets about bootstrap nodes","Retry timeout","Retry timeout","Exponential retry backoff","Exponential retry backoff","Begin the bootstrap process","client approval to begin bootstrap","bootstrap nodes","State of bootstrapping","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of kademlia events","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Retrieve a value for a key from the DHT. Value …","","","update state based on recv-ed get query","","","Update state based on put query","","in progress queries for nearby peers","List of in-progress get requests","List of in-progress put requests","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Kademlia behaviour","the key to look up","the key to put","query a peer (e.g. obtain its address if it exists)","Create a new DHT behaviour","notify client of result","notify client of result","number of replicas required to replicate over","","","the peer id (useful only for debugging right now)","","print out the routing table to stderr","progress through DHT query","progress through DHT query","Publish a key/value to the kv store. Once replicated upon …","Start a query for the closest peers","List of previously failled get requests","List of previously failled put requests","State of last random walk","already received records","replication factor","the number of remaining retries before giving up","State of random walk","State of bootstrap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the value to put","","","","","","","","","Wrapper metadata around libp2p’s request response usage: …","Lilst of direct message output events","Request to direct message a peert","We received as Direct Request","We received a Direct Response","Add address to request response behaviour","Add a direct request for a given peer","Add a direct response for a channel","backoff since last attempted request","","","","","","","the data","Failed queries to be retried","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","In progress queries","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new behaviour based on request response","","","lsit of out events for parent behaviour","the recv-ers peer id","","Remove address from request response behaviour","The wrapped behaviour","the number of remaining retries before giving up","","","","","","","","","","","","","Codec for direct messages","Protocol for direct messages","Wrapper type describing a serialized direct message","wrapper type describing the response to direct message","Maximum size of a direct message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Track (with exponential backoff) sending of some sort of …","factor to back off by","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Whether or not the timeout is expired","Create new backoff","reset backoff","Value to reset to when reset is called","start next timeout result: whether or not we succeeded if …","when we started the timeout","the current timeout amount","","","","","","wrapper metadata around libp2p’s gossip protocol","Output event","We received a gossip","Timeout trackidng when to retry gossip","","","","","","","Attempt to drain the internal gossip list, publishing each …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","The gossip behaviour","","","","","The in progress gossip queries","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new gossip behavioru based on gossipsub","","","Output events to parent behavioru","","Publish a given gossip","Subscribe to a given topic","Set of topics we are subscribed to","","","","","","","","Unsubscribe from a given topic","","","","Overarching network behaviour performing:","","Add an address","Add a direct request for a given peer","Add a direct response for a channel","","","purpose: peer routing purpose: storing pub key &lt;-&gt; peer id …","","Returns the argument unchanged.","Retrieve a value for a key from the DHT. Value …","purpose: broadcasting messages to many peers NOTE …","","","","","purpose: identifying the addresses from an outside POV","Calls <code>U::from(self)</code>.","Create a new instance of a <code>NetworkDef</code>","","","","Publish a given gossip","Publish a key/value to the kv store. Once replicated upon …","purpose: directly messaging peer","Subscribe to a given topic","","","","Unsubscribe from a given topic","","request was ignored serverside","SNAFU context selector for the <code>DHTError::CancelledRequest</code> …","Error enum for querying store because for some reason, …","Error initiating dial of peer","SNAFU context selector for the <code>NetworkError::DialError</code> …","nodes disagreed on the value","SNAFU context selector for the <code>DHTError::Disagreement</code> …","Get Record Error","wrapper","SNAFU context selector for the <code>DHTError::GetRecord</code> variant","Wrapper Error enum for <code>libp2p::kad::GetRecordError</code>. …","Error building the gossipsub instance","SNAFU context selector for the <code>NetworkError::GossipsubBuild</code>…","Error building the gossipsub configuration","SNAFU context selector for the …","wrapper type for errors generated by the <code>Network</code>","Error when there are no known peers to bootstrap off","SNAFU context selector for the <code>NetworkError::NoKnownPeers</code> …","could not find 2 or more nodes that had the value","SNAFU context selector for the <code>DHTError::NotFound</code> variant","Error publishing a gossipsub message","SNAFU context selector for the <code>NetworkError::PublishError</code> …","Get Record Error","SNAFU context selector for the <code>DHTError::PutRecord</code> variant","Error if one of the channels to or from the swarm is closed","SNAFU context selector for the <code>NetworkError::StreamClosed</code> …","Error during dialing or listening","Error establishing backend connection","SNAFU context selector for the …","SNAFU context selector for the <code>NetworkError::Transport</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","source of error","source of error","source of error","source of error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","Wrapped num of connections","Number of connections to a single peer before logging an …","","Network definition","","","","","","","","initialize the DHT with known peers add the peers to …","","","","the configuration parameters of the netework","return hashset of PIDs this node is connected to","","Returns the argument unchanged.","","event handler for client events currectly supported …","event handler for events emited from the swarm","pub/private key from with peer_id is derived","Calls <code>U::from(self)</code>.","","Creates a new <code>Network</code> with the given settings.","Returns number of peers this node is connected to","Get a reference to the network node’s peer id.","peer id of network node","Spawn a task to listen for requests on the returned channel","starts the swarm listening on <code>listen_addr</code> and optionally …","the swarm of networkbehaviours","","","","","replication factor for kademlia","NOTE: …","describe the configuration of the network","Builder for <code>NetworkNodeConfig</code>.","Error type for NetworkNodeConfigBuilder","Uninitialized field","Custom validation error","","","","","","","","","","","address to bind to","address to bind to","address to bind to","Builds a new <code>NetworkNodeConfig</code>.","","","","","","","Create an empty builder, with all fields set to <code>None</code> or …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","optional identity","optional identity","optional identity","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","mesh_n from gossipsub","mesh_n_high from gossipsub","mesh_n_low from gossipsub","mesh_outbound_min from gossipsub","parameters for gossipsub mesh network","parameters for gossipsub mesh network","parameters for gossipsub mesh network","The type of node (bootstrap etc)","The type of node (bootstrap etc)","The type of node (bootstrap etc)","","replication factor for entries in the DHT default is …","replication factor for entries in the DHT default is …","replication factor for entries in the DHT default is …","republication interval in DHT, must be much less than <code>ttl</code>","republication interval in DHT, must be much less than <code>ttl</code>","republication interval in DHT, must be much less than <code>ttl</code>","list of addresses to connect to at initialization","list of addresses to connect to at initialization","list of addresses to connect to at initialization","","","","","","","","","","","","","expiratiry for records in DHT","expiratiry for records in DHT","expiratiry for records in DHT","","","","","","","","","The inner <code>NetworkNode</code> has already been killed","SNAFU context selector for the …","Could not connect to the network in time","SNAFU context selector for the …","Error in the kademlia DHT","SNAFU context selector for the …","Failure to deserialize a message","SNAFU context selector for the …","The network node has been killed","SNAFU context selector for the …","Error generating network","A handle containing:","Error wrapper type for interacting with swarm handle","internal network node receiver","SNAFU context selector for the …","no known topic matches the hashset of keys","SNAFU context selector for the …","Error building Node config","SNAFU context selector for the …","The receiver was unable to receive a new message","SNAFU context selector for the …","Error receiving message from network","SNAFU context selector for the …","Error sending request to network","SNAFU context selector for the …","Failure to serialize a message","SNAFU context selector for the …","Error waiting for connections","SNAFU context selector for the …","Tell libp2p about known network nodes","","","Notify the network to begin the bootstrap process","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a reference to the network config","return hashset of PIDs this node is connected to","","Make a direct request to <code>peer_id</code> containing <code>msg</code>","Reply with <code>msg</code> to a request over <code>chan</code>","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Receive a record from the kademlia DHT if it exists. Must …","Get a record from the kademlia DHT with a timeout","Gossip a message to peers","","Get a reference to the network node handle’s id.","human readable id","Ignore <code>peers</code> when pruning e.g. maintain their connection","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns <code>true</code> if the network state is killed","kill the event handler for events from the swarm","whether or not the handle has been killed","Get a reference to the network node handle’s listen addr.","the local address we’re listening on","Look up a peer’s addresses in kademlia NOTE: this should …","Modify the state. This will automatically call …","network configuration","Re-exports of the snafu errors that <code>NetworkNodeHandleError</code> …","constructs a new node listening on <code>known_addr</code>","Notify the webui that either the <code>state</code> or <code>connection_state</code> …","Returns number of peers this node is connected to","Get a reference to the network node handle’s peer id.","the peer id of the networkbehaviour","Print out the routing table used by kademlia NOTE: only …","","Forcefully disconnet from a peer","Insert a record into the kademlia DHT","Insert a record into the kademlia DHT with a timeout","Receives a reference of the internal <code>NetworkNodeReceiver</code>, …","","the receiver","whether or not the receiver is started","","kill switch","Register a webui listener","send an action to the networkbehaviour","Send a client request to the network","Cleanly shuts down a swarm node This is done by sending a …","","Spawn a handler <code>F</code> that will be notified every time a new …","Get a clone of the internal state","the state of the replica","Call <code>wait_timeout_until</code> on the state’s <code>SubscribableMutex</code>","Call <code>wait_timeout_until_with_trigger</code> on the state’s …","Call <code>wait_until</code> on the state’s <code>SubscribableMutex</code>","Subscribe to a topic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsubscribe from a topic","","","","","","","","","","","","","","","","","Wait until at least <code>num_peers</code> have connected, or until …","A list of webui listeners that are listening for changes …","source of error","source of error","source of error","source of error","source of error","source of error","dummy source","source of error","","","","","","","Representation of a Multiaddr.","Identifier of a peer of the network.","","","","","","","","","","","","","","","","Create a new, empty multiaddress.","","","Checks whether the given <code>Multiaddr</code> is a suffix of this …","","","","","","","Convert a Multiaddr to a string","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Parses a <code>PeerId</code> from bytes.","","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.","Builds a <code>PeerId</code> from a public key.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the length of this multiaddress is 0.","Returns the components of this multiaddress.","Return the length in bytes of this multiaddress.","","","","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …","Returns &amp;str identifiers for the protocol names themselves.","Adds an already-parsed address component to the end of …","Generates a random peer ID from a cryptographically secure …","Replace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.","","","Returns a base-58 encoded string of this <code>PeerId</code>.","Returns a raw bytes representation of this <code>PeerId</code>.","","","","","Return a copy of this <code>Multiaddr</code>’s byte representation.","","","","","","","","","","","","","","Like <code>Multiaddr::push</code> but consumes <code>self</code>.","Create a new, empty multiaddress with the given capacity."],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,9,38,0,9,38,38,17,17,38,15,16,15,16,15,15,15,15,17,15,16,17,15,16,38,15,0,0,0,38,0,0,0,0,0,0,0,0,0,38,38,15,15,38,38,9,38,38,15,15,38,124,15,124,0,9,15,16,17,9,15,16,17,34,123,9,9,116,0,9,9,0,90,9,9,9,0,9,15,16,17,9,15,16,17,17,17,17,17,9,0,0,0,90,28,90,34,123,116,9,15,16,17,28,125,125,125,125,34,123,28,0,0,34,123,28,116,28,34,123,34,123,90,28,9,0,0,28,116,34,123,9,9,15,16,17,9,15,16,17,34,123,9,15,16,17,9,15,16,17,28,163,164,165,164,165,163,163,165,164,166,167,168,169,170,171,172,173,0,0,0,0,0,0,0,0,0,44,45,20,0,0,0,0,44,45,0,44,0,39,39,174,43,47,48,39,39,39,39,39,174,43,44,20,47,48,45,39,174,43,44,20,47,48,45,43,44,20,45,43,44,20,45,39,44,20,45,44,44,20,20,45,45,39,43,44,20,47,48,45,39,174,43,44,20,47,48,45,39,39,39,39,39,39,39,45,39,39,39,39,174,43,44,20,47,48,45,39,47,48,39,39,47,48,47,39,39,39,39,39,47,48,39,39,39,39,39,47,39,47,174,43,43,44,20,45,39,174,43,44,20,47,48,45,39,174,43,44,20,47,48,45,39,174,43,44,20,47,48,45,48,39,174,43,44,20,47,48,45,0,0,0,21,21,70,70,70,71,71,70,21,71,70,21,71,70,21,71,70,21,70,70,70,70,70,70,71,70,21,70,70,70,70,71,70,70,70,71,71,70,21,71,70,21,71,70,21,71,70,21,0,0,0,0,0,78,78,76,74,72,78,76,74,72,78,76,74,72,78,76,74,72,76,76,74,72,74,74,72,72,78,76,74,72,78,76,74,72,78,76,74,72,76,76,76,78,76,74,72,78,76,74,72,78,76,74,72,78,76,74,72,78,76,74,72,76,76,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,18,86,86,18,86,18,18,18,86,18,18,18,18,86,18,86,86,86,86,86,86,86,86,18,86,86,86,86,86,86,86,86,18,86,18,86,18,86,18,86,86,18,0,0,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94,0,0,27,0,94,0,94,111,0,0,27,0,27,0,0,27,0,94,0,27,0,94,0,27,0,27,27,0,0,27,94,111,27,94,103,104,105,97,98,99,107,100,27,108,109,101,102,110,94,111,103,104,105,97,98,99,107,100,27,108,109,101,102,110,94,111,97,98,99,100,101,102,27,94,103,104,105,97,98,99,107,100,108,109,101,102,110,94,111,103,104,105,97,98,99,107,100,108,109,101,102,110,94,111,27,94,97,98,99,100,101,102,103,104,105,97,98,99,107,100,27,27,108,109,101,102,110,94,94,111,111,103,104,105,97,98,99,107,100,27,108,109,101,102,110,94,111,27,94,111,27,94,111,103,104,105,97,98,99,107,100,27,108,109,101,102,110,94,111,103,104,105,97,98,99,107,100,108,109,101,102,110,97,98,27,94,111,27,94,103,104,105,97,98,99,107,100,108,109,101,102,110,94,111,27,94,111,103,104,105,97,98,99,107,100,27,108,109,101,102,110,94,111,103,104,105,97,98,99,107,100,27,108,109,101,102,110,94,111,103,104,105,97,98,99,107,100,27,108,109,101,102,110,94,111,103,104,105,97,98,99,107,100,27,108,109,101,102,110,94,111,175,176,177,178,179,180,181,182,183,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,116,116,0,116,116,116,116,0,116,116,116,116,0,116,116,116,116,116,116,116,116,116,116,116,0,0,0,0,0,124,124,0,124,34,123,124,125,34,123,124,125,123,34,123,123,34,123,125,34,123,125,123,34,123,125,34,124,124,125,34,123,124,124,124,125,124,123,34,123,124,34,123,124,125,125,125,125,125,123,34,123,123,34,123,124,123,34,123,123,34,123,123,34,123,34,123,125,124,34,123,124,125,34,123,124,125,123,34,123,34,123,124,125,34,123,124,125,38,0,38,0,38,0,38,0,38,0,38,0,0,0,0,38,0,38,0,38,0,38,0,38,0,38,0,38,0,28,38,38,28,28,140,132,133,134,127,128,135,136,129,137,138,130,139,131,38,28,140,132,133,134,127,128,135,136,129,137,138,130,139,131,38,127,128,129,130,131,38,132,133,134,127,128,135,136,129,137,138,130,139,131,132,133,134,127,128,135,136,129,137,138,130,139,131,28,28,38,28,28,127,128,129,130,131,28,140,132,133,134,127,128,135,136,129,137,138,130,139,131,38,38,28,140,132,133,134,127,128,135,136,129,137,138,130,139,131,38,28,28,28,38,28,28,28,38,28,140,132,133,134,127,128,135,136,129,137,138,130,139,131,38,132,133,134,127,128,135,136,129,137,138,130,139,131,28,140,140,28,28,28,28,28,0,28,28,28,28,28,28,38,28,28,28,28,28,140,140,140,140,28,28,28,28,38,28,28,28,28,28,28,28,132,133,134,127,128,135,136,129,137,138,130,139,131,38,28,140,132,133,134,127,128,135,136,129,137,138,130,139,131,38,28,140,132,133,134,127,128,135,136,129,137,138,130,139,131,38,28,140,132,133,134,127,128,135,136,129,137,138,130,139,131,38,28,28,140,132,133,134,127,128,135,136,129,137,138,130,139,131,38,28,28,166,167,168,169,170,171,172,173,0,0,0,0,0,0,0,0,24,40,24,40,24,40,24,24,40,24,40,24,40,24,40,24,24,24,24,24,40,24,24,40,40,24,24,40,40,24,24,24,24,24,40,40,40,40,24,40,40,24,40,24,40,24,40,24,40,24,24,24,24,40,24,40,24,24,24,40,24,24,40,40,40,24,40,24,40,24,24,24,24,24,40,40,40,24,40,24,40,24,40,24,24],"f":[0,0,0,0,[[]],[[]],[1,1],[[]],0,[2,[[3,[1]]]],[[1,1],4],[[],4],[[],4],[[1,5],6],[[]],[[]],0,[[1,7],3],[[]],0,[[],3],[[],3],[[],8],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[9,9],[[]],0,0,[[],9],[2,[[3,[9]]]],[[[11,[10]]],[[3,[12,[14,[13]]]]]],0,[[9,9],4],[[],4],[[],4],0,[[9,5],6],[[15,5],6],[[16,5],6],[[17,5],6],[[]],[[]],[[]],[[]],[18,17],[19,17],[20,17],[21,17],[22,[[3,[9]]]],[23,24],[25,[[3,[26,27]]]],[[[11,[[29,[28]]]],30],[[29,[28]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,7],3],[31,[[3,[[32,[10]],[14,[13]]]]]],[[33,32,34,35,[29,[[28,[[0,[36,37]]]]]]],[[3,[38]]]],0,0,0,0,[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,0,[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[39,40,24]],[[39,[42,[40,[41,[24]]]]]],0,0,0,0,[39],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,43],[44,44],[20,20],[45,45],[[]],[[]],[[]],[[]],[[39,46]],[[44,44],4],[[20,20],4],[[45,45],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,[[43,5],6],[[44,5],6],[[20,5],6],[[47,5],6],[[48,5],6],[[45,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[39,[32,[10]],[49,[[32,[10]]]],50,51,10]],[[39,52,40,24,24],[[3,[[53,[39]],54]]]],[[39,52,40,24,55],[[3,[[53,[39]],54]]]],[[39,56,57,4]],[[39,52,24,24],[[3,[54]]]],[[39,52,[58,[40]],[11,[24]],55],[[3,[[32,[24]],54]]]],[[39,59,57]],[[45,60]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[39,40,49]],[[[62,[61]],40,50],39],0,0,0,[[39,40,52,[63,[39]]]],[[39,64]],0,[[39,65,66],[[69,[[68,[20,[67,[39]]]]]]]],[39],0,0,[[39,48]],[[39,40]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[70,40,24]],[[70,71]],[[70,[73,[72]],[32,[10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[21,5],6],[[]],[[]],[[]],[[70,[75,[74,72]]]],[[70,52,40,24,24],[[3,[[53,[70]],54]]]],[[70,52,40,24,55],[[3,[[53,[70]],54]]]],[[70,52,24,24],[[3,[54]]]],[[70,52,[58,[40]],[11,[24]],55],[[3,[[32,[24]],54]]]],0,[[]],[[]],[[]],[[[77,[76]]],70],[[70,40,52,[63,[70]]]],[[70,64]],0,0,[[70,65,66],[[69,[[68,[21,[67,[70]]]]]]]],[[70,40,24]],0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],8],[[],8],[[],8],[[]],[[]],[[]],0,0,0,0,0,[78,22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[78,78],[76,76],[74,74],[72,72],[[]],[[]],[[]],[[]],[[],76],[2,[[3,[76]]]],[[74,74],4],[[72,72],4],[[],4],[[],4],[[],4],[[],4],[[78,5],6],[[76,5],6],[[74,5],6],[[72,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[76,78,[0,[79,80,81]]],[[83,[[14,[82]]]]]],[[76,78,[0,[79,80,81]]],[[83,[[14,[82]]]]]],[[76,7],3],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[76,78,[0,[84,80,81]],74],[[83,[[14,[82]]]]]],[[76,78,[0,[84,80,81]],72],[[83,[[14,[82]]]]]],0,0,[[]],[[]],[51,51],[[]],[[],51],[[51,51],4],[[],4],[[],4],[[51,5],6],[[]],[[51,60]],[[]],[51,4],[[85,33],51],[51],0,[[51,4]],0,0,[[]],[[],3],[[],3],[[],8],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[18,18],[[]],[86,4],[[18,18],4],[[],4],[[],4],[[18,5],6],[[]],[[]],[[86,87]],0,[[86,52,40,24,24],[[3,[[53,[86]],54]]]],[[86,52,40,24,55],[[3,[[53,[86]],54]]]],[[86,52,24,24],[[3,[54]]]],[[86,52,[58,[40]],[11,[24]],55],[[3,[[32,[24]],54]]]],0,[[]],[[]],[88,86],[[86,40,52,[63,[86]]]],[[86,64]],0,[[86,65,66],[[69,[[68,[18,[67,[86]]]]]]]],[[86,89,[32,[10]]]],[[86,22]],0,[[]],[[],3],[[],3],[[],3],[[],3],[[],8],[[],8],[[86,22]],[[]],[[]],0,0,0,[[90,40,24]],[[90,40,[32,[10]],10]],[[90,[73,[72]],[32,[10]]]],[[]],[[]],0,[[90,5],6],[[]],[[90,[32,[10]],[49,[[32,[10]]]],50,10]],0,[[90,52,40,24,24],[[3,[[53,[90]],54]]]],[[90,52,40,24,55],[[3,[[53,[90]],54]]]],[[90,52,24,24],[[3,[54]]]],[[90,52,[58,[40]],[11,[24]],55],[[3,[[32,[24]],54]]]],0,[[]],[[86,39,91,70],90],[[90,40,52,[63,[90]]]],[[90,64]],[[90,65,66],[[69,[[68,[[67,[90]]]]]]]],[[90,89,[32,[10]]]],[[90,48]],0,[[90,22]],[[],3],[[],3],[[],8],[[90,22]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],92],[[],92],[[],92],[27,[[58,[93]]]],[94,[[58,[93]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[97,[[96,[95]]]]],27],[[[98,[[96,[95]]]]],27],[99,27],[100,27],[101,94],[102,94],[27,[[58,[92]]]],[94,[[58,[92]]]],[103,103],[104,104],[105,105],[[[97,[106]]],[[97,[106]]]],[[[98,[106]]],[[98,[106]]]],[99,99],[107,107],[100,100],[108,108],[109,109],[101,101],[102,102],[110,110],[94,94],[111,111],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,22],[94,22],[[[97,[[96,[95]]]]],[[3,[27]]]],[[[98,[[96,[95]]]]],[[3,[27]]]],[99,[[3,[27]]]],[100,[[3,[27]]]],[101,[[3,[94]]]],[102,[[3,[94]]]],[[103,5],6],[[104,5],6],[[105,5],6],[[[97,[36]],5],6],[[[98,[36]],5],6],[[99,5],6],[[107,5],6],[[100,5],6],[[27,5],6],[[27,5],6],[[108,5],6],[[109,5],6],[[101,5],6],[[102,5],6],[[110,5],6],[[94,5],6],[[94,5],6],[[111,5],6],[[111,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[112,81,113]]],[[114,[[0,[112,81,113]]]]]],[[[0,[112,81,113]]],[[114,[[0,[112,81,113]]]]]],[[[0,[112,81,113]]],[[114,[[0,[112,81,113]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[103,27],[104,27],[105,27],[[[97,[[96,[95]]]]],27],[[[98,[[96,[95]]]]],27],[99,27],[107,27],[100,27],[108,94],[109,94],[101,94],[102,94],[110,94],0,0,[115],[115],[115],[27,[[58,[92]]]],[94,[[58,[92]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],95],[[],95],[[],95],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[116,11]],[[]],[[]],0,0,[116,[[41,[40]]]],[[116,5],6],[[]],0,[[116,[3,[15,117]]],[[3,[4,27]]]],[[116,[121,[17,[120,[[120,[[120,[118,119]],119]],118]]]],[122,[16]]],[[3,[27]]]],0,[[]],0,[34,[[3,[116,27]]]],[116,35],[116,40],0,[116,[[3,[27]]]],[[116,24],[[3,[24,27]]]],0,[[],3],[[],3],[[],8],[[]],0,0,0,0,0,0,0,0,[[],92],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[123,[58,[24]]],123],0,0,[123,[[3,[34,124]]]],[34,34],[123,123],[125,125],[[]],[[]],[[]],[[],123],[[],34],[[],123],[[],125],[[34,5],6],[[124,5],6],[[124,5],6],[[125,5],6],[[]],[[]],[[]],[126,124],[95,124],[[]],[[[0,[112,81,113]]],[[114,[[0,[112,81,113]]]]]],[[123,[96,[25]]],123],0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[123,[58,[125]]],123],0,0,[[123,9],123],0,0,[115],[[123,[96,[50]]],123],0,0,[[123,[58,[33]]],123],0,0,[[123,41],123],0,0,[[]],[[]],[[]],[[],95],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[123,[58,[33]]],123],0,0,[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[28,32],[[3,[38]]]],[[],92],[38,[[58,[93]]]],[[[28,[[0,[37,36]]]]],[[3,[38]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[127,38],[128,38],[129,38],[130,38],[131,38],[38,[[58,[92]]]],[132,132],[133,133],[134,134],[127,127],[128,128],[135,135],[136,136],[129,129],[137,137],[138,138],[130,130],[139,139],[131,131],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,34],[28,[[3,[[41,[40]],38]]]],[38,22],[[28,40,31],[[3,[38]]]],[[28,[73,[72]],31],[[3,[38]]]],[127,[[3,[38]]]],[128,[[3,[38]]]],[129,[[3,[38]]]],[130,[[3,[38]]]],[131,[[3,[38]]]],[[[28,[36]],5],6],[[140,5],6],[[132,5],6],[[133,5],6],[[134,5],6],[[127,5],6],[[128,5],6],[[135,5],6],[[136,5],6],[[129,5],6],[[137,5],6],[[138,5],6],[[130,5],6],[[139,5],6],[[131,5],6],[[38,5],6],[[38,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[28,31,10],[[3,[12,38]]]],[[28,31,33],[[3,[12,38]]]],[[28,95,31],[[3,[38]]]],[[[0,[112,81,113]]],[[114,[[0,[112,81,113]]]]]],[28,35],0,[[28,[32,[40]]],[[3,[38]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[132,38],[133,38],[134,38],[127,38],[128,38],[135,38],[136,38],[129,38],[137,38],[138,38],[130,38],[139,38],[131,38],[28,4],0,0,[[[28,[[0,[37,36]]]]],24],0,[[28,40],[[3,[38]]]],[[28,141]],0,0,[[34,35],[[3,[[28,[[0,[37,36]]]],38]]]],[28],[28,[[3,[35,38]]]],[28,40],0,[28,[[3,[38]]]],[115],[[28,40],[[3,[38]]]],[[28,31,31],[[3,[38]]]],[[28,31,31,33],[[3,[38]]]],[[[28,[[0,[37,36]]]]],140],0,0,0,[140,[[3,[16,38]]]],0,[28,142],0,[[28,15],[[3,[38]]]],[[[28,[[0,[37,36]]]]],[[3,[38]]]],[38,[[58,[92]]]],[[[29,[[28,[81,[0,[37,36]]]]]],[0,[143,113,81]]],82],[[[28,[106]]],106],0,[[28,33,141],[[3,[38]]]],[[28,33,141],[[145,[[144,[82]]]]]],[[28,141],[[3,[38]]]],[[28,95],[[3,[38]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],95],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[28,95],[[3,[38]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[28,[[0,[37,36]],[0,[37,36]]]],35,35,33],[[3,[38]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[24,[[11,[10]]]],[40,146],[[]],[[]],[[]],[[]],0,[24,24],[40,40],[[]],[[]],[[24,24],147],[[40,40],147],[2,[[3,[24]]]],[2,[[3,[40]]]],[[],24],[[],[[149,[148]]]],[[],[[149,[148]]]],[[24,24],4],[[24,24],4],[[40,40],4],[[],4],[[],4],[[],4],[[],4],[[24,5],[[3,[150]]]],[[24,5],[[3,[150]]]],[[40,5],[[3,[150]]]],[[40,5],[[3,[150]]]],[151,24],[152,24],[153,24],[154,24],[[]],[155,40],[155,40],[[]],[[[11,[10]]],[[3,[40,156]]]],[157,24],[146,[[3,[40,146]]]],[155,40],[22,[[3,[24,158]]]],[22,[[3,[40]]]],[[24,60]],[[40,60]],[[[0,[112,81,113]]],[[114,[[0,[112,81,113]]]]]],[[[0,[112,81,113]]],[[114,[[0,[112,81,113]]]]]],[[]],[[]],[24,159],[24,4],[24,159],[24,35],0,[[24,24],[[58,[147]]]],[[40,40],[[58,[147]]]],[24,[[58,[151]]]],[24,160],[[24,151]],[[],40],[[24,35,161],[[58,[24]]]],[[24,7],3],[[40,7],3],[40,95],[40,[[32,[10,162]]]],[[]],[[]],[[],95],[[],95],[24,[[32,[10,162]]]],[95,[[3,[24,158]]]],[[],3],[[[32,[10,162]]],[[3,[24,158]]]],[22,[[3,[24,158]]]],[[[32,[10,162]]],[[3,[40]]]],[146,[[3,[40]]]],[[],3],[[],3],[[],3],[[],8],[[],8],[[]],[[]],[[24,151],24],[35,24]],"c":[],"p":[[3,"Message"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Serializer"],[3,"TypeId"],[4,"NetworkNodeType"],[15,"u8"],[15,"slice"],[8,"Deserialize"],[4,"ErrorKind"],[3,"Box"],[4,"ClientRequest"],[4,"NetworkEvent"],[4,"NetworkEventInternal"],[4,"GossipEvent"],[4,"Event"],[4,"DHTEvent"],[4,"DMEvent"],[15,"str"],[15,"u16"],[3,"Multiaddr"],[3,"Keypair"],[3,"Boxed"],[4,"NetworkError"],[3,"NetworkNodeHandle"],[3,"Arc"],[8,"RngCore"],[8,"Serialize"],[3,"Vec"],[3,"Duration"],[3,"NetworkNodeConfig"],[15,"usize"],[8,"Debug"],[8,"Default"],[4,"NetworkNodeHandleError"],[3,"DHTBehaviour"],[3,"PeerId"],[3,"HashSet"],[3,"HashMap"],[3,"Bootstrap"],[4,"State"],[4,"DHTProgress"],[4,"KademliaEvent"],[3,"KadGetQuery"],[3,"KadPutQuery"],[3,"Sender"],[3,"NonZeroUsize"],[3,"ExponentialBackoff"],[3,"ConnectionId"],[6,"THandler"],[3,"ConnectionDenied"],[4,"Endpoint"],[6,"GetRecordResult"],[3,"QueryId"],[4,"Option"],[6,"PutRecordResult"],[8,"Hasher"],[3,"MemoryStore"],[3,"Kademlia"],[6,"THandlerOutEvent"],[4,"FromSwarm"],[3,"Context"],[8,"PollParameters"],[6,"THandlerInEvent"],[4,"ToSwarm"],[4,"Poll"],[3,"DMBehaviour"],[3,"DMRequest"],[3,"DirectMessageResponse"],[3,"ResponseChannel"],[3,"DirectMessageRequest"],[4,"Event"],[3,"DirectMessageCodec"],[3,"Behaviour"],[3,"DirectMessageProtocol"],[8,"AsyncRead"],[8,"Unpin"],[8,"Send"],[8,"Future"],[3,"Pin"],[8,"AsyncWrite"],[15,"u32"],[3,"GossipBehaviour"],[4,"Event"],[3,"Behaviour"],[6,"IdentTopic"],[3,"NetworkDef"],[3,"Behaviour"],[8,"Error"],[3,"Backtrace"],[4,"DHTError"],[3,"String"],[8,"Into"],[3,"GossipsubConfigSnafu"],[3,"GossipsubBuildSnafu"],[3,"StreamClosedSnafu"],[3,"NoKnownPeersSnafu"],[3,"DisagreementSnafu"],[3,"NotFoundSnafu"],[3,"DialSnafu"],[3,"TransportSnafu"],[3,"TransportLaunchSnafu"],[8,"Clone"],[3,"PublishSnafu"],[3,"GetRecordSnafu"],[3,"PutRecordSnafu"],[3,"CancelledRequestSnafu"],[4,"GetRecordWrapperError"],[8,"Display"],[8,"Sync"],[3,"IndentedSection"],[3,"Demand"],[3,"NetworkNode"],[3,"RecvError"],[4,"Void"],[3,"Error"],[4,"Either"],[4,"SwarmEvent"],[3,"UnboundedSender"],[3,"NetworkNodeConfigBuilder"],[4,"NetworkNodeConfigBuilderError"],[3,"MeshParams"],[3,"UninitializedFieldError"],[3,"SendSnafu"],[3,"RecvSnafu"],[3,"ConnectTimeoutSnafu"],[3,"KilledSnafu"],[3,"NoSuchTopicSnafu"],[3,"NetworkSnafu"],[3,"SerializationSnafu"],[3,"DeserializationSnafu"],[3,"NodeConfigSnafu"],[3,"TimeoutSnafu"],[3,"DHTSnafu"],[3,"CantKillTwiceSnafu"],[3,"ReceiverEndedSnafu"],[3,"NetworkNodeReceiver"],[8,"FnMut"],[3,"Receiver"],[8,"Fn"],[3,"FuturesOrdered"],[3,"Timeout"],[3,"Multihash"],[4,"Ordering"],[15,"char"],[8,"FromIterator"],[3,"Error"],[4,"Protocol"],[3,"Ipv4Addr"],[4,"IpAddr"],[3,"Ipv6Addr"],[3,"PublicKey"],[4,"ParseError"],[8,"IntoIterator"],[4,"Error"],[3,"Iter"],[3,"ProtoStackIter"],[8,"FnOnce"],[3,"Global"],[13,"DirectRequest"],[13,"PutDHT"],[13,"GetDHT"],[13,"NetworkError"],[13,"SerializationError"],[13,"DeserializationError"],[13,"NodeConfigError"],[13,"TimeoutError"],[13,"DHTError"],[13,"CantKillTwice"],[13,"ReceiverEnded"],[3,"RandomWalk"],[13,"CancelledRequest"],[13,"GetRecord"],[13,"PutRecord"],[13,"GetRecordError"],[13,"GossipsubConfig"],[13,"GossipsubBuild"],[13,"DialError"],[13,"Transport"],[13,"TransportLaunch"],[13,"PublishError"]]},\
"multi_validator":{"doc":"","t":"DLLLLLLLLLLLLLLLLLLLMAALLLLLFMMMLLLLALLLDLLLLLLLLLLLMLLLLLLLLMLLLLLFFFFMLLLLLLLIGGGDLLLLMMLLLLKLKLKLKLLKLLLLLLFMLFLLLMLGDGGGGGGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["MultiValidatorArgs","__clone_box","as_any","as_any_mut","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","host","infra","infra_da","init","into","into_any","into_any_arc","into_any_rc","main","num_nodes","port","public_ip","to_owned","try_from","try_into","type_id","types","update_from_arg_matches","update_from_arg_matches_mut","vzip","OrchestratorArgs","__clone_box","as_any","as_any_mut","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","config_file","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","host","init","into","into_any","into_any_arc","into_any_rc","libp2p_generate_indexed_identity","load_config_from_file","parse_dns","parse_ip","port","to_owned","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","RunDA","StaticDAComm","StaticQuorumComm","StaticViewSyncComm","WebServerDARun","as_any","as_any_mut","borrow","borrow_mut","config","da_network","deref","deref_mut","drop","from","get_config","get_config","get_da_network","get_da_network","get_quorum_network","get_quorum_network","get_view_sync_network","get_view_sync_network","init","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into_any","into_any_arc","into_any_rc","main_entry_point","quorum_network","run_hotshot","run_orchestrator_da","try_from","try_into","type_id","view_sync_network","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisDAProposal","ThisDAVote","ThisLeaf","ThisMembership","ThisQuorumProposal","ThisQuorumVote","ThisRun","ThisViewSyncProposal","ThisViewSyncVote","ViewSyncNetwork","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","into_any","into_any_arc","into_any_rc","new_channel_maps","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"multi_validator"],[40,"multi_validator::infra"],[79,"multi_validator::infra_da"],[119,"multi_validator::types"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","The address the orchestrator runs on","","","","Calls <code>U::from(self)</code>.","","","","","Number of validators to run","The port the orchestrator runs on","This node’s public IP address, for libp2p If no IP …","","","","","","","","","Arguments passed to the orchestrator","","","","","","","","","","","","The configuration file to be used for this run","","","","","Returns the argument unchanged.","","","","The address the orchestrator runs on","","Calls <code>U::from(self)</code>.","","","","yeesh maybe we should just implement SignatureKey for this…","Reads a network configuration from a given filepath","libp2p helper function convert node string into multi addr …","libp2p helper function","The port the orchestrator runs on","","","","","","","","Defines the behavior of a “run” of the network with a …","Alias for the <code>WebCommChannel</code> for sequencing consensus.","Alias for the [‘WebCommChannel’] for validating …","Alias for the [‘WebCommChannel’] for view sync …","Represents a web server-based run","","","","","","","","","","Returns the argument unchanged.","Returns the config for this run","","Returns the da network for this run","","Returns the quorum network for this run","","Returns view sync network for this run","","","Initializes networking, returns self","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","","","","Main entry point for validators","","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,4,4,4,4,4,0,4,4,4,4,4,4,4,0,4,4,4,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,18,18,18,18,18,18,18,18,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,54,32,54,32,54,32,54,32,32,54,32,54,32,32,32,32,0,32,54,0,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46],"f":[0,[1],[[],2],[[],2],[3,3],[3,3],[[]],[[]],[4,4],[[]],[[],3],[[],3],[5],[5],[5],[[4,6],7],[[]],[8,[[10,[4,9]]]],[8,[[10,[4,9]]]],[[],[[12,[11]]]],0,0,0,[[],5],[[]],[[[14,[13]]],[[14,[2,13]]]],[15,[[15,[2]]]],[16,[[16,[2]]]],[[]],0,0,0,[[]],[[],10],[[],10],[[],17],0,[[4,8],[[10,[9]]]],[[4,8],[[10,[9]]]],[[]],0,[1],[[],2],[[],2],[3,3],[3,3],[[]],[[]],[18,18],[[]],[[],3],[[],3],0,[5],[5],[5],[[18,6],7],[[]],[8,[[10,[18,9]]]],[8,[[10,[18,9]]]],[[],[[12,[11]]]],0,[[],5],[[]],[[[14,[13]]],[[14,[2,13]]]],[15,[[15,[2]]]],[16,[[16,[2]]]],[[[20,[19]],21],22],[23,24],[25,[[10,[26,27]]]],[25,[[10,[26,27]]]],0,[[]],[[],10],[[],10],[[],17],[[18,8],[[10,[9]]]],[[18,8],[[10,[9]]]],[[]],0,0,0,0,0,[[],2],[[],2],[[]],[[]],0,0,[5],[5],[5],[[]],[[],24],[[[32,[28,[29,[28]],[0,[[30,[28]],31]]]]],24],[[]],[[[32,[28,[29,[28]],[0,[[30,[28]],31]]]]],[[35,[28,[29,[28]],[33,[28]],[34,[28]],[0,[[30,[28]],31]]]]]],[[]],[[[32,[28,[29,[28]],[0,[[30,[28]],31]]]]],[[35,[28,[29,[28]],[37,[28,[36,[28]]]],[38,[28,[36,[28]]]],[0,[[30,[28]],31]]]]]],[[]],[[[32,[28,[29,[28]],[0,[[30,[28]],31]]]]],[[35,[28,[29,[28]],[39,[28]],[40,[28]],[0,[[30,[28]],31]]]]]],[[],5],[24,[[42,[[14,[41]]]]]],[24,[[42,[[14,[41]]]]]],[43,[[42,[[14,[41]]]]]],[[]],[[[14,[13]]],[[14,[2,13]]]],[15,[[15,[2]]]],[16,[[16,[2]]]],[44],0,[[43,45],[[42,[[14,[41]]]]]],[18],[[],10],[[],10],[[],17],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],2],[[],2],[[]],[[]],[46,46],[[]],[5],[5],[47,[[10,[46]]]],[5],[[46,46],48],[[],48],[[],48],[[],48],[[],48],[[46,6],7],[[]],[[[0,[49,50]],51],21],[[46,52]],[[],5],[[]],[[[14,[13]]],[[14,[2,13]]]],[15,[[15,[2]]]],[16,[[16,[2]]]],[[]],[[46,53],10],[[]],[[],10],[[],10],[[],17],[[]]],"c":[],"p":[[3,"Private"],[8,"Any"],[3,"Command"],[3,"MultiValidatorArgs"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"TypeId"],[3,"OrchestratorArgs"],[15,"u8"],[15,"array"],[15,"u64"],[3,"Keypair"],[3,"String"],[3,"NetworkConfig"],[15,"str"],[3,"Multiaddr"],[4,"Error"],[8,"NodeType"],[8,"NodeImplementation"],[8,"Membership"],[8,"Debug"],[3,"WebServerDARun"],[3,"DAProposal"],[3,"DAVote"],[3,"WebCommChannel"],[3,"SequencingLeaf"],[3,"QuorumProposal"],[4,"QuorumVote"],[4,"ViewSyncCertificate"],[4,"ViewSyncVote"],[8,"Future"],[3,"Pin"],[8,"Sync"],[3,"ValidatorArgs"],[3,"SystemContextHandle"],[3,"NodeImpl"],[8,"Deserializer"],[15,"bool"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[8,"Serializer"],[8,"RunDA"]]},\
"multi_web_server":{"doc":"","t":"DLLLLLLMLLMLLLLLLLLLLLLLFLLLLLML","n":["MultiWebServerArgs","as_any","as_any_mut","augment_args","augment_args_for_update","borrow","borrow_mut","cdn_port","command","command_for_update","da_port","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","into_any","into_any_arc","into_any_rc","main","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","view_sync_port","vzip"],"q":[[0,"multi_web_server"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4],"f":[0,[[],1],[[],1],[2,2],[2,2],[[]],[[]],0,[[],2],[[],2],0,[3],[3],[3],[[4,5],6],[[]],[7,[[9,[4,8]]]],[7,[[9,[4,8]]]],[[],[[11,[10]]]],[[],3],[[]],[[[13,[12]]],[[13,[1,12]]]],[14,[[14,[1]]]],[15,[[15,[1]]]],[[]],[[],9],[[],9],[[],16],[[4,7],[[9,[8]]]],[[4,7],[[9,[8]]]],0,[[]]],"c":[],"p":[[8,"Any"],[3,"Command"],[15,"usize"],[3,"MultiWebServerArgs"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"TypeId"]]},\
"web_server":{"doc":"","t":"DLLLLLLLLLLLLLLLLLLLLLFMLLLLLL","n":["WebServerArgs","as_any","as_any_mut","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","into_any","into_any_arc","into_any_rc","main","port","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"web_server"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4],"f":[0,[[],1],[[],1],[2,2],[2,2],[[]],[[]],[[],2],[[],2],[3],[3],[3],[[4,5],6],[[]],[7,[[9,[4,8]]]],[7,[[9,[4,8]]]],[[],[[11,[10]]]],[[],3],[[]],[[[13,[12]]],[[13,[1,12]]]],[14,[[14,[1]]]],[15,[[15,[1]]]],[[]],0,[[],9],[[],9],[[],16],[[4,7],[[9,[8]]]],[[4,7],[[9,[8]]]],[[]]],"c":[],"p":[[8,"Any"],[3,"Command"],[15,"usize"],[3,"WebServerArgs"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"TypeId"]]},\
"web_server_da_orchestrator":{"doc":"","t":"AAFADLLLLLLLLLLLMLLLLLLLLMLLLLLFFFFMLLLLLLLIGGGDLLLLMMLLLLKLKLKLKLLKLLLLLLFMLFLLLMLGDGGGGGGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["infra","infra_da","main","types","OrchestratorArgs","__clone_box","as_any","as_any_mut","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","config_file","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","host","init","into","into_any","into_any_arc","into_any_rc","libp2p_generate_indexed_identity","load_config_from_file","parse_dns","parse_ip","port","to_owned","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","RunDA","StaticDAComm","StaticQuorumComm","StaticViewSyncComm","WebServerDARun","as_any","as_any_mut","borrow","borrow_mut","config","da_network","deref","deref_mut","drop","from","get_config","get_config","get_da_network","get_da_network","get_quorum_network","get_quorum_network","get_view_sync_network","get_view_sync_network","init","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into_any","into_any_arc","into_any_rc","main_entry_point","quorum_network","run_hotshot","run_orchestrator_da","try_from","try_into","type_id","view_sync_network","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisDAProposal","ThisDAVote","ThisLeaf","ThisMembership","ThisQuorumProposal","ThisQuorumVote","ThisRun","ThisViewSyncProposal","ThisViewSyncVote","ViewSyncNetwork","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","into_any","into_any_arc","into_any_rc","new_channel_maps","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"web_server_da_orchestrator"],[4,"web_server_da_orchestrator::infra"],[43,"web_server_da_orchestrator::infra_da"],[83,"web_server_da_orchestrator::types"]],"d":["","","","","Arguments passed to the orchestrator","","","","","","","","","","","","The configuration file to be used for this run","","","","","Returns the argument unchanged.","","","","The address the orchestrator runs on","","Calls <code>U::from(self)</code>.","","","","yeesh maybe we should just implement SignatureKey for this…","Reads a network configuration from a given filepath","libp2p helper function convert node string into multi addr …","libp2p helper function","The port the orchestrator runs on","","","","","","","","Defines the behavior of a “run” of the network with a …","Alias for the <code>WebCommChannel</code> for sequencing consensus.","Alias for the [‘WebCommChannel’] for validating …","Alias for the [‘WebCommChannel’] for view sync …","Represents a web server-based run","","","","","","","","","","Returns the argument unchanged.","Returns the config for this run","","Returns the da network for this run","","Returns the quorum network for this run","","Returns view sync network for this run","","","Initializes networking, returns self","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","","","","Main entry point for validators","","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,4,4,4,4,4,4,4,4,0,0,0,0,0,31,31,31,31,31,31,31,31,31,31,53,31,53,31,53,31,53,31,31,53,31,53,31,31,31,31,0,31,53,0,31,31,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45],"f":[0,0,[[]],0,0,[1],[[],2],[[],2],[3,3],[3,3],[[]],[[]],[4,4],[[]],[[],3],[[],3],0,[5],[5],[5],[[4,6],7],[[]],[8,[[10,[4,9]]]],[8,[[10,[4,9]]]],[[],[[12,[11]]]],0,[[],5],[[]],[[[14,[13]]],[[14,[2,13]]]],[15,[[15,[2]]]],[16,[[16,[2]]]],[[[18,[17]],19],20],[21,22],[23,[[10,[24,25]]]],[23,[[10,[24,25]]]],0,[[]],[[],10],[[],10],[[],26],[[4,8],[[10,[9]]]],[[4,8],[[10,[9]]]],[[]],0,0,0,0,0,[[],2],[[],2],[[]],[[]],0,0,[5],[5],[5],[[]],[[],22],[[[31,[27,[28,[27]],[0,[[29,[27]],30]]]]],22],[[]],[[[31,[27,[28,[27]],[0,[[29,[27]],30]]]]],[[34,[27,[28,[27]],[32,[27]],[33,[27]],[0,[[29,[27]],30]]]]]],[[]],[[[31,[27,[28,[27]],[0,[[29,[27]],30]]]]],[[34,[27,[28,[27]],[36,[27,[35,[27]]]],[37,[27,[35,[27]]]],[0,[[29,[27]],30]]]]]],[[]],[[[31,[27,[28,[27]],[0,[[29,[27]],30]]]]],[[34,[27,[28,[27]],[38,[27]],[39,[27]],[0,[[29,[27]],30]]]]]],[[],5],[22,[[41,[[14,[40]]]]]],[22,[[41,[[14,[40]]]]]],[42,[[41,[[14,[40]]]]]],[[]],[[[14,[13]]],[[14,[2,13]]]],[15,[[15,[2]]]],[16,[[16,[2]]]],[43],0,[[42,44],[[41,[[14,[40]]]]]],[4],[[],10],[[],10],[[],26],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],2],[[],2],[[]],[[]],[45,45],[[]],[5],[5],[46,[[10,[45]]]],[5],[[45,45],47],[[],47],[[],47],[[],47],[[],47],[[45,6],7],[[]],[[[0,[48,49]],50],19],[[45,51]],[[],5],[[]],[[[14,[13]]],[[14,[2,13]]]],[15,[[15,[2]]]],[16,[[16,[2]]]],[[]],[[45,52],10],[[]],[[],10],[[],10],[[],26],[[]]],"c":[],"p":[[3,"Private"],[8,"Any"],[3,"Command"],[3,"OrchestratorArgs"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[15,"u8"],[15,"array"],[15,"u64"],[3,"Keypair"],[3,"String"],[3,"NetworkConfig"],[15,"str"],[3,"Multiaddr"],[4,"Error"],[3,"TypeId"],[8,"NodeType"],[8,"NodeImplementation"],[8,"Membership"],[8,"Debug"],[3,"WebServerDARun"],[3,"DAProposal"],[3,"DAVote"],[3,"WebCommChannel"],[3,"SequencingLeaf"],[3,"QuorumProposal"],[4,"QuorumVote"],[4,"ViewSyncCertificate"],[4,"ViewSyncVote"],[8,"Future"],[3,"Pin"],[8,"Sync"],[3,"ValidatorArgs"],[3,"SystemContextHandle"],[3,"NodeImpl"],[8,"Deserializer"],[15,"bool"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[8,"Serializer"],[8,"RunDA"]]},\
"web_server_da_validator":{"doc":"","t":"AAFADLLLLLLLLLLLMLLLLLLLLMLLLLLFFFFMLLLLLLLIGGGDLLLLMMLLLLKLKLKLKLLKLLLLLLFMLFLLLMLGDGGGGGGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["infra","infra_da","main","types","OrchestratorArgs","__clone_box","as_any","as_any_mut","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","config_file","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","host","init","into","into_any","into_any_arc","into_any_rc","libp2p_generate_indexed_identity","load_config_from_file","parse_dns","parse_ip","port","to_owned","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","RunDA","StaticDAComm","StaticQuorumComm","StaticViewSyncComm","WebServerDARun","as_any","as_any_mut","borrow","borrow_mut","config","da_network","deref","deref_mut","drop","from","get_config","get_config","get_da_network","get_da_network","get_quorum_network","get_quorum_network","get_view_sync_network","get_view_sync_network","init","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into_any","into_any_arc","into_any_rc","main_entry_point","quorum_network","run_hotshot","run_orchestrator_da","try_from","try_into","type_id","view_sync_network","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisDAProposal","ThisDAVote","ThisLeaf","ThisMembership","ThisQuorumProposal","ThisQuorumVote","ThisRun","ThisViewSyncProposal","ThisViewSyncVote","ViewSyncNetwork","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","into_any","into_any_arc","into_any_rc","new_channel_maps","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"web_server_da_validator"],[4,"web_server_da_validator::infra"],[43,"web_server_da_validator::infra_da"],[83,"web_server_da_validator::types"]],"d":["","","","","Arguments passed to the orchestrator","","","","","","","","","","","","The configuration file to be used for this run","","","","","Returns the argument unchanged.","","","","The address the orchestrator runs on","","Calls <code>U::from(self)</code>.","","","","yeesh maybe we should just implement SignatureKey for this…","Reads a network configuration from a given filepath","libp2p helper function convert node string into multi addr …","libp2p helper function","The port the orchestrator runs on","","","","","","","","Defines the behavior of a “run” of the network with a …","Alias for the <code>WebCommChannel</code> for sequencing consensus.","Alias for the [‘WebCommChannel’] for validating …","Alias for the [‘WebCommChannel’] for view sync …","Represents a web server-based run","","","","","","","","","","Returns the argument unchanged.","Returns the config for this run","","Returns the da network for this run","","Returns the quorum network for this run","","Returns view sync network for this run","","","Initializes networking, returns self","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","","","","Main entry point for validators","","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,4,4,4,4,4,4,4,4,0,0,0,0,0,31,31,31,31,31,31,31,31,31,31,53,31,53,31,53,31,53,31,31,53,31,53,31,31,31,31,0,31,53,0,31,31,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45],"f":[0,0,[[]],0,0,[1],[[],2],[[],2],[3,3],[3,3],[[]],[[]],[4,4],[[]],[[],3],[[],3],0,[5],[5],[5],[[4,6],7],[[]],[8,[[10,[4,9]]]],[8,[[10,[4,9]]]],[[],[[12,[11]]]],0,[[],5],[[]],[[[14,[13]]],[[14,[2,13]]]],[15,[[15,[2]]]],[16,[[16,[2]]]],[[[18,[17]],19],20],[21,22],[23,[[10,[24,25]]]],[23,[[10,[24,25]]]],0,[[]],[[],10],[[],10],[[],26],[[4,8],[[10,[9]]]],[[4,8],[[10,[9]]]],[[]],0,0,0,0,0,[[],2],[[],2],[[]],[[]],0,0,[5],[5],[5],[[]],[[],22],[[[31,[27,[28,[27]],[0,[[29,[27]],30]]]]],22],[[]],[[[31,[27,[28,[27]],[0,[[29,[27]],30]]]]],[[34,[27,[28,[27]],[32,[27]],[33,[27]],[0,[[29,[27]],30]]]]]],[[]],[[[31,[27,[28,[27]],[0,[[29,[27]],30]]]]],[[34,[27,[28,[27]],[36,[27,[35,[27]]]],[37,[27,[35,[27]]]],[0,[[29,[27]],30]]]]]],[[]],[[[31,[27,[28,[27]],[0,[[29,[27]],30]]]]],[[34,[27,[28,[27]],[38,[27]],[39,[27]],[0,[[29,[27]],30]]]]]],[[],5],[22,[[41,[[14,[40]]]]]],[22,[[41,[[14,[40]]]]]],[42,[[41,[[14,[40]]]]]],[[]],[[[14,[13]]],[[14,[2,13]]]],[15,[[15,[2]]]],[16,[[16,[2]]]],[43],0,[[42,44],[[41,[[14,[40]]]]]],[4],[[],10],[[],10],[[],26],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],2],[[],2],[[]],[[]],[45,45],[[]],[5],[5],[46,[[10,[45]]]],[5],[[45,45],47],[[],47],[[],47],[[],47],[[],47],[[45,6],7],[[]],[[[0,[48,49]],50],19],[[45,51]],[[],5],[[]],[[[14,[13]]],[[14,[2,13]]]],[15,[[15,[2]]]],[16,[[16,[2]]]],[[]],[[45,52],10],[[]],[[],10],[[],10],[[],26],[[]]],"c":[],"p":[[3,"Private"],[8,"Any"],[3,"Command"],[3,"OrchestratorArgs"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[15,"u8"],[15,"array"],[15,"u64"],[3,"Keypair"],[3,"String"],[3,"NetworkConfig"],[15,"str"],[3,"Multiaddr"],[4,"Error"],[3,"TypeId"],[8,"NodeType"],[8,"NodeImplementation"],[8,"Membership"],[8,"Debug"],[3,"WebServerDARun"],[3,"DAProposal"],[3,"DAVote"],[3,"WebCommChannel"],[3,"SequencingLeaf"],[3,"QuorumProposal"],[4,"QuorumVote"],[4,"ViewSyncCertificate"],[4,"ViewSyncVote"],[8,"Future"],[3,"Pin"],[8,"Sync"],[3,"ValidatorArgs"],[3,"SystemContextHandle"],[3,"NodeImpl"],[8,"Deserializer"],[15,"bool"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[8,"Serializer"],[8,"RunDA"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

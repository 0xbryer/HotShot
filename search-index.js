var searchIndex = new Map(JSON.parse('[\
["all_combined",{"doc":"A example program using both the web server and libp2p","t":"CHCFFFFFKNNNNNNNNNNNNNNHNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNNNNNNNMNNNNNNNNNNNNNNHHNNNNNOOOHNHNNNNNNNNNNNNNNNNNNNONNNNNIFIIIINNNNNOOOOOOOOOONNNNNNNNNNNNNNNNNOOOOOOOONOOOOOOOOONNNNNN","n":["infra","main","types","CombinedDARun","ConfigArgs","Libp2pDARun","OrchestratorArgs","PushCdnDaRun","RunDA","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config_file","da_channel","da_channel","da_channel","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","get_config","get_config","get_config","get_config","get_da_channel","get_da_channel","get_da_channel","get_da_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","group_id","init","init","init","init","init","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","quorum_channel","quorum_channel","quorum_channel","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisRun","VIDNetwork","ViewSyncNetwork","__clone_box","borrow","borrow_mut","clone","clone_into","config","da_channel","delay_duration","delay_duration","delay_duration","delay_duration","delayed_tasks","delayed_tasks","delayed_tasks","delayed_tasks","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","layout_raw","message_cache","message_cache","message_cache","message_cache","networks","networks","networks","networks","pointer_metadata","primary_down","primary_down","primary_down","primary_down","primary_fail_counter","primary_fail_counter","primary_fail_counter","primary_fail_counter","quorum_channel","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"all_combined"],[3,"all_combined::infra"],[139,"all_combined::types"],[201,"dyn_clone::sealed"],[202,"clap_builder::builder::command"],[203,"core::clone"],[204,"hotshot_types::traits::node_implementation"],[205,"rkyv::with"],[206,"core::result"],[207,"core::fmt"],[208,"core::fmt"],[209,"clap_builder"],[210,"hotshot_orchestrator::config"],[211,"hotshot_example_types::block_types"],[212,"hotshot_example_types::block_types"],[213,"hotshot_types::message"],[214,"hotshot_types::traits::network"],[215,"hotshot::traits::networking::push_cdn_network"],[216,"hotshot::traits::networking::libp2p_network"],[217,"hotshot::traits::networking::combined_network"],[218,"clap_builder::util::id"],[219,"core::option"],[220,"core::net::socket_addr"],[221,"core::future::future"],[222,"alloc::boxed"],[223,"core::pin"],[224,"core::alloc::layout"],[225,"core::alloc::layout"],[226,"url"],[227,"hotshot::types::handle"],[228,"alloc::vec"],[229,"hotshot_example_types::storage_types"],[230,"hotshot_types::traits::node_implementation"],[231,"serde::de"],[232,"core::hash"],[233,"core::marker"],[234,"core::hash"]],"d":["general infra used for this example","","types used for this example","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","","","","","","","","","","","","","","","Helper function to calculate the nuymber of transactions …","","","","","","","The underlying configuration","the network configuration","the network configuration","The configuration file to be used for this run","The configuration file to be used for this run","The DA channel","data availability channel","data availability channel","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the config for this run","","","","Returns the da network for this run","","","","Returns the quorum network for this run","","","","","","","","","","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","","","","","","The quorum channel","quorum channel","quorum channel","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","convenience type alias","dummy struct so we can choose types","convenience type alias","convenience type alias","convenience type alias","convenience type alias","","","","","","the network configuration","data availability channel","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","quorum channel","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,6,9,9,9,19,28,29,6,9,19,28,29,6,9,0,6,9,6,9,9,9,19,28,29,6,9,19,28,29,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,6,9,19,28,29,6,9,9,9,17,19,28,29,17,19,28,29,17,19,28,29,9,19,28,29,6,9,17,19,28,29,17,19,28,29,6,9,19,28,29,6,9,0,0,19,28,29,6,9,19,28,29,0,17,0,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,9,9,6,19,28,29,6,9,0,0,0,0,0,0,55,55,55,55,55,63,63,64,65,66,67,64,65,66,67,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,64,65,66,67,64,65,66,67,55,64,65,66,67,64,65,66,67,63,55,55,55,55,55,55],"f":"`{{}b}```````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0````````{{}Ab}{jc{}}000000000{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Ah}Aj{AlA`}}{{AbAh}Aj}{cc{}}0000{An{{Af{AbB`}}}}0{BbBd}{{{Bf{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{Bbe{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}}{{{Bf{c}}}{{D`{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}{{Db{{Cl{c}}}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}{{Dd{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}3210{{}{{Dh{Df}}}}{{}j}0000{{Bd{Dh{Dj}}}{{E`{{Dn{Dl}}}}}}000{Bb{{E`{{Dn{Dl}}}}}}{ce{}{}}0000{{}{{Af{EbEd}}}}0000{EfBd}{Ehb}{{}}0000```{{}{{El{BdEj}}}}{{Bb{En{ci}}{F`{Bj}}hh}{{E`{{Dn{Dl}}}}}{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}{{Cn{{Cl{c}}}}}{{Fj{c}{{Fb{e}}{Fd{g}}{Ff{{Fh{c}}}}}}}}{{{l{c}}}bA`}77{c{{Af{e}}}{}{}}000000000{cFl{}}0000{{AbAn}{{Af{bB`}}}}0`:::::``````{{cd}b{}};;{FnFn}{{ce}b{}{}}``````````{jc{}}0{c{{Af{Fn}}}G`}{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}{jb}{{FnFn}Gb}{{ce}Gb{}{}}000{{FnAh}Aj}{cc{}}{{ce}h{GdGf}Gh}{{Fnc}bGj}{{}j}{ce{}{}}{{}{{Af{EbEd}}}}````````{{}}`````````{{Fnc}AfGl}3{c{{Af{e}}}{}{}}0{cFl{}}5","c":[],"p":[[1,"unit"],[5,"Private",201],[5,"Command",202],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",203],[10,"NodeType",204],[5,"ConfigArgs",3],[5,"With",205],[6,"Result",206],[5,"Formatter",207],[8,"Result",207],[10,"Debug",207],[5,"ArgMatches",208],[8,"Error",209],[10,"RunDA",3],[5,"NetworkConfig",210],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",211],[17,"BlockPayload"],[5,"TestBlockPayload",211],[17,"BlockHeader"],[5,"TestBlockHeader",211],[17,"InstanceState"],[5,"TestInstanceState",212],[5,"Libp2pDARun",3],[5,"CombinedDARun",3],[5,"Message",213],[10,"ConnectedNetwork",214],[5,"PushCdnNetwork",215],[5,"Libp2pNetwork",216],[5,"CombinedNetworks",217],[5,"Id",218],[6,"Option",219],[6,"SocketAddr",220],[10,"Future",221],[5,"Box",222],[5,"Pin",223],[5,"Layout",224],[5,"LayoutError",224],[1,"str"],[5,"ValidatorArgs",225],[5,"Url",226],[1,"tuple"],[5,"SystemContextHandle",227],[5,"Vec",228],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",229],[10,"NodeImplementation",204],[5,"TypeId",230],[5,"NodeImpl",139],[10,"Deserializer",231],[1,"bool"],[10,"Hash",232],[10,"Sized",233],[10,"BuildHasher",232],[10,"Hasher",232],[10,"Serializer",234],[8,"ThisRun",139],[8,"DANetwork",139],[8,"VIDNetwork",139],[8,"QuorumNetwork",139],[8,"ViewSyncNetwork",139]],"b":[]}],\
["all_libp2p",{"doc":"A example program using libp2p","t":"CHCFFFFFKNNNNNNNNNNNNNNHNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNNNNNNNMNNNNNNNNNNNNNNHHNNNNNOOOHNHNNNNNNNNNNNNNNNNNNNONNNNNIFIINNNNNOONNNNNNNNNNNNNNNOONNNONNNNNN","n":["infra","main","types","CombinedDARun","ConfigArgs","Libp2pDARun","OrchestratorArgs","PushCdnDaRun","RunDA","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config_file","da_channel","da_channel","da_channel","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","get_config","get_config","get_config","get_config","get_da_channel","get_da_channel","get_da_channel","get_da_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","group_id","init","init","init","init","init","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","quorum_channel","quorum_channel","quorum_channel","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisRun","__clone_box","borrow","borrow_mut","clone","clone_into","config","da_channel","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","inner","inner","into","layout_raw","pointer_metadata","quorum_channel","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"all_libp2p"],[3,"all_libp2p::infra"],[139,"all_libp2p::types"],[177,"dyn_clone::sealed"],[178,"clap_builder::builder::command"],[179,"core::clone"],[180,"hotshot_types::traits::node_implementation"],[181,"rkyv::with"],[182,"core::result"],[183,"core::fmt"],[184,"core::fmt"],[185,"clap_builder"],[186,"hotshot_orchestrator::config"],[187,"hotshot_example_types::block_types"],[188,"hotshot_example_types::block_types"],[189,"hotshot_types::message"],[190,"hotshot_types::traits::network"],[191,"hotshot::traits::networking::push_cdn_network"],[192,"hotshot::traits::networking::libp2p_network"],[193,"hotshot::traits::networking::combined_network"],[194,"clap_builder::util::id"],[195,"core::option"],[196,"core::net::socket_addr"],[197,"core::future::future"],[198,"alloc::boxed"],[199,"core::pin"],[200,"core::alloc::layout"],[201,"core::alloc::layout"],[202,"url"],[203,"hotshot::types::handle"],[204,"alloc::vec"],[205,"hotshot_example_types::storage_types"],[206,"hotshot_types::traits::node_implementation"],[207,"serde::de"],[208,"core::hash"],[209,"core::marker"],[210,"core::hash"]],"d":["general infra used for this example","","types used for this example","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","","","","","","","","","","","","","","","Helper function to calculate the nuymber of transactions …","","","","","","","The underlying configuration","the network configuration","the network configuration","The configuration file to be used for this run","The configuration file to be used for this run","The DA channel","data availability channel","data availability channel","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the config for this run","","","","Returns the da network for this run","","","","Returns the quorum network for this run","","","","","","","","","","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","","","","","","The quorum channel","quorum channel","quorum channel","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","convenience type alias","dummy struct so we can choose types","convenience type alias","convenience type alias","","","","","","the network configuration","data availability channel","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","quorum channel","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,6,9,9,9,19,28,29,6,9,19,28,29,6,9,0,6,9,6,9,9,9,19,28,29,6,9,19,28,29,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,6,9,19,28,29,6,9,9,9,17,19,28,29,17,19,28,29,17,19,28,29,9,19,28,29,6,9,17,19,28,29,17,19,28,29,6,9,19,28,29,6,9,0,0,19,28,29,6,9,19,28,29,0,17,0,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,9,9,6,19,28,29,6,9,0,0,0,0,55,55,55,55,55,63,63,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,64,65,55,55,55,63,55,55,55,55,55,55],"f":"`{{}b}```````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0````````{{}Ab}{jc{}}000000000{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Ah}Aj{AlA`}}{{AbAh}Aj}{cc{}}0000{An{{Af{AbB`}}}}0{BbBd}{{{Bf{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{Bbe{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}}{{{Bf{c}}}{{D`{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}{{Db{{Cl{c}}}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}{{Dd{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}3210{{}{{Dh{Df}}}}{{}j}0000{{Bd{Dh{Dj}}}{{E`{{Dn{Dl}}}}}}000{Bb{{E`{{Dn{Dl}}}}}}{ce{}{}}0000{{}{{Af{EbEd}}}}0000{EfBd}{Ehb}{{}}0000```{{}{{El{BdEj}}}}{{Bb{En{ci}}{F`{Bj}}hh}{{E`{{Dn{Dl}}}}}{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}{{Cn{{Cl{c}}}}}{{Fj{c}{{Fb{e}}{Fd{g}}{Ff{{Fh{c}}}}}}}}{{{l{c}}}bA`}77{c{{Af{e}}}{}{}}000000000{cFl{}}0000{{AbAn}{{Af{bB`}}}}0`:::::````{{cd}b{}};;{FnFn}{{ce}b{}{}}``{jc{}}0{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}{c{{Af{Fn}}}G`}{jb}{{FnFn}Gb}{{ce}Gb{}{}}000{{FnAh}Aj}{cc{}}{{ce}h{GdGf}Gh}{{Fnc}bGj}{{}j}``{ce{}{}}{{}{{Af{EbEd}}}}{{}}`{{Fnc}AfGl}3{c{{Af{e}}}{}{}}0{cFl{}}5","c":[],"p":[[1,"unit"],[5,"Private",177],[5,"Command",178],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",179],[10,"NodeType",180],[5,"ConfigArgs",3],[5,"With",181],[6,"Result",182],[5,"Formatter",183],[8,"Result",183],[10,"Debug",183],[5,"ArgMatches",184],[8,"Error",185],[10,"RunDA",3],[5,"NetworkConfig",186],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",187],[17,"BlockPayload"],[5,"TestBlockPayload",187],[17,"BlockHeader"],[5,"TestBlockHeader",187],[17,"InstanceState"],[5,"TestInstanceState",188],[5,"Libp2pDARun",3],[5,"CombinedDARun",3],[5,"Message",189],[10,"ConnectedNetwork",190],[5,"PushCdnNetwork",191],[5,"Libp2pNetwork",192],[5,"CombinedNetworks",193],[5,"Id",194],[6,"Option",195],[6,"SocketAddr",196],[10,"Future",197],[5,"Box",198],[5,"Pin",199],[5,"Layout",200],[5,"LayoutError",200],[1,"str"],[5,"ValidatorArgs",201],[5,"Url",202],[1,"tuple"],[5,"SystemContextHandle",203],[5,"Vec",204],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",205],[10,"NodeImplementation",180],[5,"TypeId",206],[5,"NodeImpl",139],[10,"Deserializer",207],[1,"bool"],[10,"Hash",208],[10,"Sized",209],[10,"BuildHasher",208],[10,"Hasher",208],[10,"Serializer",210],[8,"ThisRun",139],[8,"DANetwork",139],[8,"QuorumNetwork",139]],"b":[]}],\
["all_push_cdn",{"doc":"A example program using the Push CDN","t":"CHCFFFFFKNNNNNNNNNNNNNNHNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNNNNNNNMNNNNNNNNNNNNNNHHNNNNNOOOHNHNNNNNNNNNNNNNNNNNNNONNNNNIFIIIINNNOOOONNOONNNNNNNNNNNNNNNOOOONNONNNNNN","n":["infra","main","types","CombinedDARun","ConfigArgs","Libp2pDARun","OrchestratorArgs","PushCdnDaRun","RunDA","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config_file","da_channel","da_channel","da_channel","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","get_config","get_config","get_config","get_config","get_da_channel","get_da_channel","get_da_channel","get_da_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","group_id","init","init","init","init","init","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","quorum_channel","quorum_channel","quorum_channel","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisRun","VIDNetwork","ViewSyncNetwork","__clone_box","borrow","borrow_mut","client","client","client","client","clone","clone_into","config","da_channel","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","from","get_hash","hash","init","into","is_paused","is_paused","is_paused","is_paused","layout_raw","pointer_metadata","quorum_channel","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"all_push_cdn"],[3,"all_push_cdn::infra"],[139,"all_push_cdn::types"],[184,"dyn_clone::sealed"],[185,"clap_builder::builder::command"],[186,"core::clone"],[187,"hotshot_types::traits::node_implementation"],[188,"rkyv::with"],[189,"core::result"],[190,"core::fmt"],[191,"core::fmt"],[192,"clap_builder"],[193,"hotshot_orchestrator::config"],[194,"hotshot_example_types::block_types"],[195,"hotshot_example_types::block_types"],[196,"hotshot_types::message"],[197,"hotshot_types::traits::network"],[198,"hotshot::traits::networking::push_cdn_network"],[199,"hotshot::traits::networking::libp2p_network"],[200,"hotshot::traits::networking::combined_network"],[201,"clap_builder::util::id"],[202,"core::option"],[203,"core::net::socket_addr"],[204,"core::future::future"],[205,"alloc::boxed"],[206,"core::pin"],[207,"core::alloc::layout"],[208,"core::alloc::layout"],[209,"url"],[210,"hotshot::types::handle"],[211,"alloc::vec"],[212,"hotshot_example_types::storage_types"],[213,"hotshot_types::traits::node_implementation"],[214,"serde::de"],[215,"core::hash"],[216,"core::marker"],[217,"core::hash"]],"d":["The infra implementation","","The types we’re importing","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","","","","","","","","","","","","","","","Helper function to calculate the nuymber of transactions …","","","","","","","The underlying configuration","the network configuration","the network configuration","The configuration file to be used for this run","The configuration file to be used for this run","The DA channel","data availability channel","data availability channel","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the config for this run","","","","Returns the da network for this run","","","","Returns the quorum network for this run","","","","","","","","","","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","","","","","","The quorum channel","quorum channel","quorum channel","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","Convenience type alias","Convenience type alias","Convenience type alias","Convenience type alias","Convenience type alias","","","","","","","","","","The underlying configuration","The DA channel","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","The quorum channel","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,6,9,9,9,19,28,29,6,9,19,28,29,6,9,0,6,9,6,9,9,9,19,28,29,6,9,19,28,29,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,6,9,19,28,29,6,9,9,9,17,19,28,29,17,19,28,29,17,19,28,29,9,19,28,29,6,9,17,19,28,29,17,19,28,29,6,9,19,28,29,6,9,0,0,19,28,29,6,9,19,28,29,0,17,0,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,9,9,6,19,28,29,6,9,0,0,0,0,0,0,55,55,55,63,64,65,66,55,55,67,67,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,63,64,65,66,55,55,67,55,55,55,55,55,55],"f":"`{{}b}```````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0````````{{}Ab}{jc{}}000000000{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Ah}Aj{AlA`}}{{AbAh}Aj}{cc{}}0000{An{{Af{AbB`}}}}0{BbBd}{{{Bf{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{Bbe{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}}{{{Bf{c}}}{{D`{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}{{Db{{Cl{c}}}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}{{Dd{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}3210{{}{{Dh{Df}}}}{{}j}0000{{Bd{Dh{Dj}}}{{E`{{Dn{Dl}}}}}}000{Bb{{E`{{Dn{Dl}}}}}}{ce{}{}}0000{{}{{Af{EbEd}}}}0000{EfBd}{Ehb}{{}}0000```{{}{{El{BdEj}}}}{{Bb{En{ci}}{F`{Bj}}hh}{{E`{{Dn{Dl}}}}}{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}{{Cn{{Cl{c}}}}}{{Fj{c}{{Fb{e}}{Fd{g}}{Ff{{Fh{c}}}}}}}}{{{l{c}}}bA`}77{c{{Af{e}}}{}{}}000000000{cFl{}}0000{{AbAn}{{Af{bB`}}}}0`:::::``````{{cd}b{}};;````{FnFn}{{ce}b{}{}}``{jc{}}0{c{{Af{Fn}}}G`}{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}{jb}{{FnFn}Gb}{{ce}Gb{}{}}000{cc{}}{{ce}h{GdGf}Gh}{{Fnc}bGj}{{}j}{ce{}{}}````{{}{{Af{EbEd}}}}{{}}`{{Fnc}AfGl}3{c{{Af{e}}}{}{}}0{cFl{}}5","c":[],"p":[[1,"unit"],[5,"Private",184],[5,"Command",185],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",186],[10,"NodeType",187],[5,"ConfigArgs",3],[5,"With",188],[6,"Result",189],[5,"Formatter",190],[8,"Result",190],[10,"Debug",190],[5,"ArgMatches",191],[8,"Error",192],[10,"RunDA",3],[5,"NetworkConfig",193],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",194],[17,"BlockPayload"],[5,"TestBlockPayload",194],[17,"BlockHeader"],[5,"TestBlockHeader",194],[17,"InstanceState"],[5,"TestInstanceState",195],[5,"Libp2pDARun",3],[5,"CombinedDARun",3],[5,"Message",196],[10,"ConnectedNetwork",197],[5,"PushCdnNetwork",198],[5,"Libp2pNetwork",199],[5,"CombinedNetworks",200],[5,"Id",201],[6,"Option",202],[6,"SocketAddr",203],[10,"Future",204],[5,"Box",205],[5,"Pin",206],[5,"Layout",207],[5,"LayoutError",207],[1,"str"],[5,"ValidatorArgs",208],[5,"Url",209],[1,"tuple"],[5,"SystemContextHandle",210],[5,"Vec",211],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",212],[10,"NodeImplementation",187],[5,"TypeId",213],[5,"NodeImpl",139],[10,"Deserializer",214],[1,"bool"],[10,"Hash",215],[10,"Sized",216],[10,"BuildHasher",215],[10,"Hasher",215],[10,"Serializer",217],[8,"DANetwork",139],[8,"VIDNetwork",139],[8,"QuorumNetwork",139],[8,"ViewSyncNetwork",139],[8,"ThisRun",139]],"b":[]}],\
["cdn_broker",{"doc":"The following is the main <code>Broker</code> binary, which just …","t":"FNNNNOONNNNNONNNNNNNNONHONOOOONNNNNN","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","ca_cert_path","ca_key_path","command","command_for_update","deref","deref_mut","deserialize","discovery_endpoint","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","key_seed","layout_raw","main","metrics_bind_endpoint","pointer_metadata","private_advertise_endpoint","private_bind_endpoint","public_advertise_endpoint","public_bind_endpoint","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"cdn_broker"],[36,"clap_builder::builder::command"],[37,"rkyv::with"],[38,"core::result"],[39,"core::fmt"],[40,"core::fmt"],[41,"clap_builder"],[42,"clap_builder::util::id"],[43,"core::option"],[44,"core::alloc::layout"],[45,"core::alloc::layout"],[46,"core::any"]],"d":["The main component of the push CDN.","","","","","The path to the CA certificate If not provided, a local, …","The path to the CA key If not provided, a local, pinned CA …","","","","","","The discovery client endpoint (including scheme) to …","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","The seed for broker key generation","","","The endpoint to bind to for externalizing metrics (in …","","The broker-facing endpoint in <code>IP:port</code> form to advertise","The broker-facing endpoint in <code>IP:port</code> form to bind to for …","The user-facing endpoint in <code>IP:port</code> form to advertise","The user-facing endpoint in <code>IP:port</code> form to bind to for …","","","","","",""],"i":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6],"f":"`{bb}0{ce{}{}}0``{{}b}0{dc{}}0{{ce}{{h{{f{gi}}}}}{}{}{}{}}`{dj}{{ln}A`}{cc{}}{Ab{{h{lAd}}}}0{{}{{Ah{Af}}}}{{}d}9`{{}{{h{AjAl}}}}{{}{{An{j}}}}`{{}}````{c{{h{e}}}{}{}}0{cB`{}}{{lAb}{{h{jAd}}}}0?","c":[],"p":[[5,"Command",36],[1,"usize"],[5,"With",37],[6,"Result",38],[1,"unit"],[5,"Args",0],[5,"Formatter",39],[8,"Result",39],[5,"ArgMatches",40],[8,"Error",41],[5,"Id",42],[6,"Option",43],[5,"Layout",44],[5,"LayoutError",44],[8,"Result",45],[5,"TypeId",46]],"b":[]}],\
["cdn_marshal",{"doc":"The following is the main <code>Marshal</code> binary, which just …","t":"FNNONNOONNNNNONNNNNNNNNHONNNNNNN","n":["Args","augment_args","augment_args_for_update","bind_port","borrow","borrow_mut","ca_cert_path","ca_key_path","command","command_for_update","deref","deref_mut","deserialize","discovery_endpoint","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","layout_raw","main","metrics_bind_endpoint","pointer_metadata","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"cdn_marshal"],[32,"clap_builder::builder::command"],[33,"rkyv::with"],[34,"core::result"],[35,"core::fmt"],[36,"core::fmt"],[37,"clap_builder"],[38,"clap_builder::util::id"],[39,"core::option"],[40,"core::alloc::layout"],[41,"core::alloc::layout"],[42,"core::any"]],"d":["The main component of the push CDN.","","","The port to bind to for connections (from users)","","","The path to the CA certificate If not provided, a local, …","The path to the CA key If not provided, a local, pinned CA …","","","","","","The discovery client endpoint (including scheme) to …","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","The endpoint to bind to for externalizing metrics (in …","","","","","","",""],"i":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6],"f":"`{bb}0`{ce{}{}}0``{{}b}0{dc{}}0{{ce}{{h{{f{gi}}}}}{}{}{}{}}`{dj}{{ln}A`}{cc{}}{Ab{{h{lAd}}}}0{{}{{Ah{Af}}}}{{}d}9{{}{{h{AjAl}}}}{{}{{An{j}}}}`{{}}{c{{h{e}}}{}{}}0{cB`{}}{{lAb}{{h{jAd}}}}0?","c":[],"p":[[5,"Command",32],[1,"usize"],[5,"With",33],[6,"Result",34],[1,"unit"],[5,"Args",0],[5,"Formatter",35],[8,"Result",35],[5,"ArgMatches",36],[8,"Error",37],[5,"Id",38],[6,"Option",39],[5,"Layout",40],[5,"LayoutError",40],[8,"Result",41],[5,"TypeId",42]],"b":[]}],\
["hotshot",{"doc":"Provides a generic rust implementation of the <code>HotShot</code> BFT …","t":"PPPPSSGFPPPFPPFFPPNNOONNNNNNNNNNNNNNNNNNONOOONNNNNNNNNNNNNNNNCNNNNNONNNNNNNNNNNNNNNNOONNNNNNNOOOONNNNNNNNNNOOONONNNNNOONOOENNNNNOOOOCNNNCNNNNNNNNNNNNNNNNCOOOOOONNNNNNOOOOOOOOOOOPGPNHHHHHHHHHHHHHNNNNNNNNNNNNNNCNNNNNKMKPPRPRRRPPRRPPPRPGFKPPKPPRPRKRPRPPKPNNNNMNNNNNONMNNNNNNNNNNNNNNCMNNNNNMMMMMMMNNOCNNNNNNNMNOCCNONMNNNONONNNNNONMNONNNNNNNNOMNNMNNOOOOOOOOOOCFINOOOONNNNOOOONNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNFPPFFFFFIFFFGFFNONNONNOOONNHHNNNOONOONONOOOOOOONOOOOONNNNNPPPPPFFPPPPGKFFPPPPPPPPPSSSNNNNNNNNNNNNNNNNNNNNNNNCOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNONNNNCCONOONNNNOCNNNNNNNNNNNNNNNNNNNNNNNNNONNNNOOOOOOOOOOFIFNNONNNNNHNNNNNOONNNNNNNNNNNNNNNNNNNNOONNONNNOOONNNNNNNNNNNNNNNNNNNNNNIFFFISINOOONNNNNNNONNNONNNNNNHHNNNONNNNNNNNNNNONNNNNNONNNOOOOONNNOONONOOONNNOONONONONONNNNNONONNNNNNNNNNNNNNNFFFSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNONONNNNNNOOONNONNNNNONNNNNNNNNNNNNNNNFFPPFFFFGFFNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRKRRKMMMMMIIPPPFGFPRRRRPPRKRFPPPPNNNMNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNCONNNNNNMMMMNMMMMNCNONNNONNNONNNONNNNOONNNMOMNNNNNNNNNNNNMONNNOOOOOOOOOOOOOOOPPPFGPPPPPPPOOOOOOOOOOOOOOOOOFNNNNNNNNNNNNNNNNNNNNNNNONONNONNNONNONNNNNNNNN","n":["BlockError","Continue","FailedToBroadcast","FailedToMessageLeader","H_256","H_512","HotShotError","HotShotInitializer","InsufficientValidSignatures","InvalidState","LeafNotFound","Memberships","Misc","NetworkFault","Networks","SystemContext","TimeoutError","ViewTimeoutError","__clone_box","__clone_box","_pd","anchored_leaf","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone_into","clone_into","config","consensus","consensus","da_membership","da_network","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","documentation","drop","drop","drop","drop","drop","external_event_stream","fmt","fmt","from","from","from","from","from","from_genesis","from_reload","get_consensus","get_decided_leaf","get_decided_state","get_instance_state","get_next_view_timeout","get_state","header","high_qc","id","in_current_span","init","init","init","init","init","init","inner","instance_state","instance_state","internal_event_stream","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","memberships","metrics","networks","new","output_event_stream","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","private_key","public_key","publish_transaction_async","quorum_membership","quorum_network","rand","run_tasks","send_external_event","shut_down_networks","source","start_consensus","start_view","start_view","state_delta","storage","tasks","to_owned","to_owned","to_string","traits","try_from","try_from","try_from","try_from","try_from","try_get_decided_leaf","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","types","undecided_leafs","undecided_state","validated_state","version","vid_membership","view_sync_membership","vzip","vzip","vzip","vzip","vzip","wait_for_networks_ready","context","context","num_valid_signatures","source","source","source","source","source","state","threshold","view_number","Dummy","GlobalEvent","Shutdown","__clone_box","add_consensus_task","add_da_task","add_network_event_task","add_network_message_task","add_quorum_proposal_recv_task","add_quorum_proposal_task","add_quorum_vote_task","add_request_network_task","add_response_task","add_transaction_task","add_upgrade_task","add_vid_task","add_view_sync_task","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","from","init","into","layout_raw","pointer_metadata","task_state","to_owned","try_from","try_into","type_id","vzip","CreateTaskState","create_from","BlockPayload","CentralizedServer","ChannelSend","CommitteeNetwork","CouldNotDeliver","Delta","Error","Error","FailedToDeserialize","FailedToSerialize","Instance","Instance","Libp2p","Libp2pMulti","MemoryNetwork","Metadata","MultipleErrors","NetworkError","NetworkNodeConfigBuilder","NetworkReliability","NoBootstrapNodesSpecified","NoSuchNode","NodeImplementation","NotFound","PushCdnNetwork","QuorumNetwork","ShutDown","Storage","TestableNodeImplementation","Time","Timeout","Transaction","UnableToCancel","UnimplementedFeature","ValidatedState","WebServer","__clone_box","as_error","as_error_source","backtrace","block_genesis","borrow","borrow","borrow_mut","borrow_mut","bound_addr","bound_addr","build","builder_commitment","cause","chaos_send_msg","clone","clone_into","default","deref","deref","deref_mut","deref_mut","description","deserialize","deserialize","drop","drop","election","encode","fmt","fmt","from","from","from","from_bytes","from_header","from_transactions","gen_networks","genesis","genesis","get_transactions","header","identity","identity","implementations","in_current_span","init","init","into","into","layout_raw","layout_raw","leaf_create_random_transaction","mesh_params","mesh_params","networking","node_implementation","node_type","node_type","num_transactions","on_commit","pointer_metadata","pointer_metadata","replication_factor","replication_factor","republication_interval","republication_interval","sample_delay","sample_keep","sample_repeat","scramble","server_mode","server_mode","source","state_create_random_transaction","to_connect_addrs","to_connect_addrs","to_owned","to_string","transaction_commitments","try_from","try_from","try_into","try_into","ttl","ttl","txn_count","type_id","type_id","validate_and_apply_header","vzip","vzip","errors","source","source","source","source","source","source","source","source","sources","static_committee","GeneralStaticCommittee","StaticCommittee","__clone_box","_type_phantom","_type_phantom","all_nodes_with_stake","all_nodes_with_stake","borrow","borrow_mut","clone","clone_into","committee_nodes_with_stake","committee_nodes_with_stake","committee_nodes_without_stake","committee_nodes_without_stake","create_election","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","failure_threshold","fixed_leader_for_gpuvid","fixed_leader_for_gpuvid","fmt","from","get_committee_qc_stake_table","get_hash","get_leader","get_non_staked_committee","get_non_staked_nodes","get_stake","get_staked_committee","get_whole_committee","has_stake","hash","init","into","layout_raw","new","non_staked_nodes_count","pointer_metadata","success_threshold","to_owned","total_nodes","try_from","try_into","type_id","upgrade_threshold","vzip","CombinedNetworks","DA","Global","KeyPair","Libp2pNetwork","MasterMap","MemoryNetwork","NetworkingMetricsValue","PeerInfoVec","ProductionDef","PushCdnNetwork","TestingDef","Topic","UnderlyingCombinedNetworks","WrappedSignatureKey","__clone_box","alloc","borrow","borrow_mut","client","clone","clone_into","connected_peers","delay_duration","delayed_tasks","deref","deref_mut","derive_libp2p_keypair","derive_libp2p_peer_id","deserialize","drop","from","id","incoming_message_count","init","inner","inner","into","is_paused","layout_raw","map","message_cache","message_failed_to_send","networks","outgoing_broadcast_message_count","outgoing_direct_message_count","phantom","pointer_metadata","primary_down","primary_fail_counter","private_key","ptr","public_key","to_owned","try_from","try_into","type_id","vzip","CentralizedServer","ChannelSend","CouldNotDeliver","FailedToDeserialize","FailedToSerialize","FailedToSerializeSnafu","InnerNetworkingMetrics","Libp2p","Libp2pMulti","MemoryNetwork","MultipleErrors","NetworkError","NetworkReliability","NetworkingMetrics","NetworkingMetricsValue","NoBootstrapNodesSpecified","NoSuchNode","NotFound","PushCdnNetwork","ShutDown","Timeout","UnableToCancel","UnimplementedFeature","WebServer","_DERIVE_core_fmt_Debug_FOR_InnerNetworkingMetrics","_DERIVE_core_fmt_Debug_FOR_NetworkingMetrics","_DERIVE_core_fmt_Debug_FOR_NetworkingMetricsValue","__clone_box","__clone_box","__clone_box","__clone_box","add","add_point","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chaos_send_msg","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","combined_network","connected_peers","counters","create_counter","create_gauge","create_histogram","create_label","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","gauges","histograms","incoming_message_count","init","init","init","init","into","into","into","into","into_error","labels","layout_raw","layout_raw","layout_raw","layout_raw","libp2p_network","memory_network","message_failed_to_send","new","outgoing_broadcast_message_count","outgoing_direct_message_count","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prefix","push_cdn_network","sample_delay","sample_keep","sample_repeat","scramble","set","set","sub","subgroup","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","values","vzip","vzip","vzip","vzip","errors","source","source","source","source","source","source","source","source","sources","CombinedNetworks","DelayedTasksLockedMap","UnderlyingCombinedNetworks","__clone_box","__clone_box","alloc","borrow","borrow","borrow_mut","borrow_mut","broadcast_message","calculate_hash_of","clone","clone","clone_into","clone_into","da_broadcast_message","delay_duration","delayed_tasks","deref","deref","deref_mut","deref_mut","deserialize","deserialize","direct_message","drop","drop","from","from","generator","in_flight_message_count","init","init","into","into","is_primary_down","layout_raw","layout_raw","message_cache","networks","new","pause","phantom","pointer_metadata","pointer_metadata","primary","primary_down","primary_fail_counter","ptr","queue_node_lookup","recv_msgs","request_data","resume","secondary","send_both_networks","should_delay","shut_down","spawn_request_receiver_task","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_view","vid_broadcast_message","vzip","vzip","wait_for_ready","BootstrapAddrs","Empty","Libp2pNetwork","Libp2pNetworkInner","PeerInfoVec","QC_TOPIC","TakeReceiver","__clone_box","alloc","alloc","bootstrap_addrs","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","broadcast_message","byte","clone","clone_into","da_broadcast_message","data","deref","deref","deref","deref_mut","deref_mut","deref_mut","derive_libp2p_keypair","derive_libp2p_peer_id","deserialize","deserialize","deserialize","dht_timeout","direct_message","drop","drop","drop","fmt","fmt","from","from","from","from_config","generator","handle","handle_event_generator","handle_recvd_events_0_1","in_flight_message_count","init","init","init","inner","into","into","into","is_bootstrapped","is_da","is_ready","kill_switch","latest_seen_view","layout_raw","layout_raw","layout_raw","lock_ops","metrics","new","node_lookup_send","pause","phantom","phantom","pk","pointer_metadata","pointer_metadata","pointer_metadata","ptr","ptr","queue_node_lookup","receiver","recv_msgs","reliability_config","request_data","requests_rx","resume","sender","serialize","shut_down","spawn_connect","spawn_node_lookup","spawn_request_receiver_task","state","to_owned","topic_map","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_view","vzip","vzip","vzip","wait_for_ready","wait_for_ready","MasterMap","MemoryNetwork","MemoryNetworkInner","_DERIVE_core_fmt_Debug_FOR_MasterMap","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","broadcast_message","clone","clone_into","da_broadcast_message","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","direct_message","drop","drop","drop","fmt","fmt","fmt","from","from","from","generator","id","in_flight_message_count","in_flight_message_count","init","init","init","inner","input","input","into","into","into","layout_raw","layout_raw","layout_raw","map","master_map","metrics","new","new","output","pause","pointer_metadata","pointer_metadata","pointer_metadata","recv_msgs","reliability_config","resume","shut_down","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wait_for_ready","BrokerDef","ClientDef","DA","Global","KeyPair","ProductionDef","PushCdnNetwork","TestingDef","Topic","UserDef","WrappedSignatureKey","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","broadcast_message","client","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","da_broadcast_message","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","direct_message","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","from","from","from","from","from","from","from","from","generator","in_flight_message_count","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","is_paused","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new","pause","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","private_key","public_key","queue_node_lookup","recv_msgs","resume","serialize","shut_down","sign","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_ready","CommitteeNetwork","NodeImplementation","QuorumNetwork","Storage","TestableNodeImplementation","block_genesis","gen_networks","leaf_create_random_transaction","state_create_random_transaction","txn_count","BLSPrivKey","BLSPubKey","DAProposal","Decide","Error","Event","EventType","Message","NextLeaderViewTimeout","PrivateKey","PureAssembledSignatureType","QCParams","QCType","QuorumProposal","ReplicaViewTimeout","SignError","SignatureKey","StakeTableEntry","SystemContextHandle","Transactions","UpgradeProposal","ViewFinished","ViewTimeout","__clone_box","__clone_box","__clone_box","assemble","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","event","event","fmt","fmt","fmt","from","from","from","from_bytes","from_private","generated_from_seed_indexed","genesis_proposer_pk","get_hash","get_public_key","get_public_parameter","get_sig_proof","get_stake_table_entry","get_view_number","handle","hash","hotshot","init","init","init","internal_event_stream","into","into","into","kind","layout_raw","layout_raw","layout_raw","output_event_stream","pointer_metadata","pointer_metadata","pointer_metadata","purpose","registry","sender","serialize","serialize","serialize","sign","storage","to_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","view_number","vzip","vzip","vzip","block_size","error","leaf_chain","proposal","proposal","proposal","qc","sender","sender","sender","transactions","view_number","view_number","view_number","view_number","DAProposal","Decide","Error","Event","EventType","NextLeaderViewTimeout","QuorumProposal","ReplicaViewTimeout","Transactions","UpgradeProposal","ViewFinished","ViewTimeout","event","view_number","block_size","error","leaf_chain","proposal","proposal","proposal","qc","sender","sender","sender","transactions","view_number","view_number","view_number","view_number","SystemContextHandle","__clone_box","borrow","borrow_mut","builder_timeout","clone","clone_into","deref","deref_mut","deserialize","drop","from","get_consensus","get_cur_view","get_decided_leaf","get_decided_state","get_event_stream","get_event_stream_known_impl","get_internal_event_stream_known_impl","get_leader","get_next_view_timeout","get_public_key","get_state","get_storage","hotshot","init","internal_event_stream","into","layout_raw","output_event_stream","pointer_metadata","private_key","public_key","registry","send_event","shut_down","storage","submit_transaction","to_owned","total_nodes","try_from","try_get_decided_leaf","try_into","type_id","vzip","wait_for_networks_ready"],"q":[[0,"hotshot"],[166,"hotshot::HotShotError"],[177,"hotshot::tasks"],[214,"hotshot::tasks::task_state"],[216,"hotshot::traits"],[344,"hotshot::traits::NetworkError"],[354,"hotshot::traits::election"],[355,"hotshot::traits::election::static_committee"],[409,"hotshot::traits::implementations"],[467,"hotshot::traits::networking"],[609,"hotshot::traits::networking::NetworkError"],[619,"hotshot::traits::networking::combined_network"],[691,"hotshot::traits::networking::libp2p_network"],[800,"hotshot::traits::networking::memory_network"],[878,"hotshot::traits::networking::push_cdn_network"],[1058,"hotshot::traits::node_implementation"],[1068,"hotshot::types"],[1190,"hotshot::types::EventType"],[1205,"hotshot::types::event"],[1219,"hotshot::types::event::EventType"],[1234,"hotshot::types::handle"],[1280,"dyn_clone::sealed"],[1281,"core::error"],[1282,"std::backtrace"],[1283,"core::option"],[1284,"hotshot_types::traits::node_implementation"],[1285,"core::clone"],[1286,"hotshot_types::consensus"],[1287,"async_lock::rwlock"],[1288,"alloc::sync"],[1289,"rkyv::with"],[1290,"core::result"],[1291,"core::fmt"],[1292,"core::fmt"],[1293,"hotshot_types::simple_certificate"],[1294,"alloc::vec"],[1295,"hotshot_types::utils"],[1296,"alloc::collections::btree::map"],[1297,"color_eyre::section"],[1298,"core::fmt"],[1299,"core::marker"],[1300,"hotshot_types::consensus"],[1301,"async_broadcast"],[1302,"async_broadcast"],[1303,"core::alloc::layout"],[1304,"core::any"],[1305,"hotshot_task::task"],[1306,"hotshot_types::traits::network"],[1307,"hotshot_types::traits::storage"],[1308,"hotshot_task_impls::response"],[1309,"core::fmt"],[1310,"alloc::boxed"],[1311,"core::pin"],[1312,"multiaddr"],[1313,"libp2p_networking::network::node::config"],[1314,"libp2p_networking::network::node::config"],[1315,"serde::de"],[1316,"hotshot_types::traits::states"],[1317,"hotshot_types::traits::block_contents"],[1318,"core::cmp"],[1319,"core::hash"],[1320,"hotshot_types::traits::block_contents"],[1321,"libp2p_networking::network::node::handle"],[1322,"hotshot_types::traits::states"],[1323,"core::time"],[1324,"core::iter::traits::iterator"],[1325,"libp2p_identity::keypair"],[1326,"core::convert"],[1327,"rand_core"],[1328,"libp2p_networking::network::node::config"],[1329,"core::num::nonzero"],[1330,"libp2p_identity::peer_id"],[1331,"std::collections::hash::set"],[1332,"committable"],[1333,"hotshot_types"],[1334,"core::hash"],[1335,"anyhow"],[1336,"hotshot_types::traits::metrics"],[1337,"hotshot_types::traits::metrics"],[1338,"hotshot_types::traits::network"],[1339,"hotshot_types::traits::network"],[1340,"core::net::socket_addr"],[1341,"async_compatibility_layer::channel::unbounded::inner"],[1342,"libp2p_networking::network::behaviours::request_response"],[1343,"libp2p_request_response"],[1344,"futures_channel::mpsc"],[1345,"libp2p_networking::network::node::handle"],[1346,"num_enum"],[1347,"bitvec::slice"],[1348,"serde::de"],[1349,"serde::de"],[1350,"tagged_base64"],[1351,"core::convert"],[1352,"bitvec::vec"],[1353,"hotshot_types::message"],[1354,"futures_core::stream"],[1355,"core::num::nonzero"]],"d":["Failure in the block.","Internal value used to drive the state machine","Failed to broadcast a message on the network","Failed to Message the leader in the given stage","Length, in bytes, of a 256 bit hash","Length, in bytes, of a 512 bit hash","Reexport error type Error type for <code>HotShot</code>","initializer struct for creating starting block","Not enough valid signatures for a quorum","Error accessing storage Invalid state machine state","Item was not present in storage","Bundle of all the memberships a consensus instance uses","Miscellaneous error TODO fix this with #181 …","Failure in networking layer","Bundle of the networks used in consensus","Holds the state needed to participate in <code>HotShot</code> consensus","HotShot timed out waiting for msgs","HotShot timed out during round","","","Phantom for TYPES and I","Anchored leaf provided by the initializer.","","","","","","","","","","","","","","","","","","","Configuration items for this hotshot instance","Get access to <code>Consensus</code>","The hotstuff implementation","DA","Network for reaching the DA committee","","","","","","","","","","","","","","","","","","","","","","","External event stream for communication with the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","initialize from genesis","Reload previous state based on most recent leaf and the …","Returns a copy of the consensus struct","Returns a copy of the last decided leaf","Returns the last decided validated state.","Returns a copy of the instance state","return the timeout for a view for <code>self</code>","Get the validated state from a given <code>view</code>.","","Highest QC that was seen, for genesis it’s the genesis …","uid for instrumentation","","","Initializes a new <code>SystemContext</code> and does the work of …","","","","","the leaf specified initialization","Immutable instance state","Instance-level state.","access to the internal event stream, in case we need to, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Memberships used by consensus","the metrics that the implementor is using.","Networks used by the instance of hotshot","Creates a new <code>Arc&lt;SystemContext&gt;</code> with the given …","Access to the output event stream.","","","","","","The private key of this node","The public key of this node","Publishes a transaction asynchronously to the network.","Quorum Membership","Network for reaching all nodes","Reexport rand crate","Spawn all tasks that operate on <code>SystemContextHandle</code>.","Emit an external event","shut down all networks","","“Starts” consensus by sending a <code>QCFormed</code> event","The view to enter when first starting consensus","Starting view number that we are confident won’t lead to …","Optional state delta.","Reference to the internal storage for consensus datum.","Provides a number of tasks that run continuously","","","","Contains traits consumed by <code>SystemContext</code>","","","","","","[Non-blocking] instantly returns a copy of the last …","","","","","","","","","","","Contains types used by the crate","Undecided leafs that were seen, but not yet decided on.  …","Not yet decided state","Optional validated state.","The network version","VID","View Sync","","","","","","wait for all networks to be ready","source of error","Context","Number of valid signatures","source of error","The underlying network fault","The underlying network fault","The underlying block error.","Underlying network fault","The state that the round was in when it timed out","Threshold of signatures needed for a quorum","view number","dummy (TODO delete later)","event for global event stream","shut everything down","","add the consensus task","add the Data Availability task","Add the network task to handle events and send messages.","Add the network task to handle messages and publish events.","Add the quorum proposal recv task.","add the quorum proposal task","Add the quorum vote task.","Add tasks for network requests and responses","Add a task which responds to requests on the network.","add the Transaction Handling task","add the Upgrade task.","add the VID task","add the view sync task","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Provides trait to create task states from a …","","","","","","Trait for creating task states.","Function to create the task state from a given …","Abstraction over the full contents of a block","Centralized server specific errors","Error sending output to consumer of …","Network for those in the DA committee","Could not deliver a message to a specified recipient","The type of the state delta this state is associated with.","The error type for this type of block","The error type for this particular type of ledger state","Failed to deserealize a network message","Failed to serialize a network message","The type of the instance-level state this state is …","The type of the instance-level state this state is …","Libp2p specific errors","collection of libp2p specific errors","memory network specific errors","Data created during block building which feeds into the …","Multiple errors","Error type for networking","Builder for <code>NetworkNodeConfig</code>.","interface describing how reliable the network is","No bootstrap nodes were specified on network creation","Attempted to deliver a message to an unknown node","Node implementation aggregate trait","The requested data was not found","Push CDN network-specific errors","Network for all nodes","The underlying connection has been shut down","Storage for DA layer interactions","extra functions required on a node implementation to be …","Time compatibility needed for reward collection","A timeout occurred","The type of the transitions we are applying","unable to cancel a request, the request has already been …","unimplemented functionality","Abstraction over the state that blocks modify","Web server specific errors","","","","","generate a genesis block","","","","","address to bind to","","Builds a new <code>NetworkNodeConfig</code>.","Generate commitment that builders use to sign block …","","given a message and a way to send the message, decide …","","","","","","","","","","","","","Sortition trait elections used for consensus","Encode the payload","","","Returns the argument unchanged.","","Returns the argument unchanged.","Build a payload with the encoded transaction bytes, …","Construct the state with the given block header.","Build a payload and associated metadata with the …","Generate the communication channels for testing","Build the genesis payload and metadata.","Construct a genesis validated state.","Get the transactions in the payload.","","optional identity","","Module for publicly usable implementations of the traits","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates random transaction if possible otherwise panics …","parameters for gossipsub mesh network","","Network access compatibility","Composite trait for node behavior","The type of node (bootstrap etc)","","Number of transactions in the block.","Gets called to notify the persistence backend that this …","","","replication factor for entries in the DHT default is …","","republication interval in DHT, must be much less than <code>ttl</code>","","sample from uniform distribution to decide whether or not …","Sample from bernoulli distribution to decide whether or …","number of times to repeat the packet","scramble the packet","whether to start in libp2p::kad::Mode::Server mode","","","Creates random transaction if possible otherwise panics …","list of addresses to connect to at initialization","","","","List of transaction commitments.","","","","","expiratiry for records in DHT","","the number of transactions in a block","","","Check if the proposed block header is valid and apply it …","","","vec of errors","source of error","source of error","source of error","source of error","source of error","Originating bincode error","originating bincode error","Source of error","sources of errors","static (round robin) committee election","Dummy implementation of <code>Membership</code>","static committee using a vrf kp","","Node type phantom","Node type phantom","All the nodes participating and their stake","All the nodes participating and their stake","","","","","The nodes on the static committee and their stake","The nodes on the static committee and their stake","builder nodes","builder nodes","","","","","","","","","","","","the number of fixed leader for gpuvid","the number of fixed leader for gpuvid","","Returns the argument unchanged.","Clone the public key and corresponding stake table for …","","Index the vector of public keys with the current view …","","get all the non-staked nodes","","","","","","","Calls <code>U::from(self)</code>.","","Creates a new dummy elector","get the non-staked builder nodes","","","","","","","","","","A communication channel with 2 networks, where we can fall …","The DA topic","The global topic","We encapsulate keys here to help readability.","Networking implementation that uses libp2p generic over <code>M</code> …","Shared state for in-memory mock networking.","In memory only network simulator.","Contains several <code>NetworkingMetrics</code> that we’re interested …","Type alias for a shared collection of peerid, multiaddrs","The production run definition for the Push CDN. Uses the …","A communication channel to the Push CDN, which is a …","The testing run definition for the Push CDN. Uses the real …","The enum for the topics we can subscribe to in the Push CDN","Wrapper for the tuple of <code>PushCdnNetwork</code> and <code>Libp2pNetwork</code> …","A wrapped <code>SignatureKey</code>. We need to implement the Push CDN…","","","","","The underlying client","","","A <code>Gauge</code> which tracks how many peers are connected","how long to delay","delayed, cancelable tasks for secondary network","","","Derive a Libp2p keypair from a given private key","Derive a Libp2p Peer ID from a given private key","","","Returns the argument unchanged.","The id of this <code>MemoryNetwork</code> cluster","A <code>Counter</code> which tracks how many messages have been received","","holds the state of the libp2p network","The actual internal state","Calls <code>U::from(self)</code>.","Whether or not the underlying network is supposed to be …","","The list of <code>MemoryNetwork</code>s","Last n seen messages to prevent processing duplicates","A <code>Counter</code> which tracks how many messages failed to send","The two networks we’ll use for send/recv","A <code>Counter</code> which tracks how many messages have been send by …","A <code>Counter</code> which tracks how many messages have been send …","","","Whether primary is considered down","How many times primary failed to deliver","The underlying (private) signing key, used to sign …","","The underlying (public) verification key, used to …","","","","","","Centralized server specific errors","Error sending output to consumer of …","Could not deliver a message to a specified recipient","Failed to deserealize a network message","Failed to serialize a network message","SNAFU context selector for the …","the set of counters and gauges for the networking metrics","Libp2p specific errors","collection of libp2p specific errors","memory network specific errors","Multiple errors","Error type for networking","interface describing how reliable the network is","The wrapper with a string name for the networking metrics","Contains several <code>NetworkingMetrics</code> that we’re interested …","No bootstrap nodes were specified on network creation","Attempted to deliver a message to an unknown node","The requested data was not found","Push CDN network-specific errors","The underlying connection has been shut down","A timeout occurred","unable to cancel a request, the request has already been …","unimplemented functionality","Web server specific errors","","","","","","","","","","","","","","","","","","given a message and a way to send the message, decide …","","","","","","","","","Networking Implementation that has a primary and a …","A <code>Gauge</code> which tracks how many peers are connected","All the counters of the networking metrics","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","All the gauges of the networking metrics","All the histograms of the networking metrics","A <code>Counter</code> which tracks how many messages have been received","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","All the labels of the networking metrics","","","","","Libp2p based/production networking implementation This …","In memory network simulator","A <code>Counter</code> which tracks how many messages failed to send","Create a new instance of this <code>NetworkingMetricsValue</code> …","A <code>Counter</code> which tracks how many messages have been send by …","A <code>Counter</code> which tracks how many messages have been send …","","","","","a prefix which tracks the name of the metric","The Push CDN network","sample from uniform distribution to decide whether or not …","Sample from bernoulli distribution to decide whether or …","number of times to repeat the packet","scramble the packet","","","For the creation and naming of gauge, counter, histogram …","","","","","","","","","","","","","","","","","","","a map of values","","","","","vec of errors","source of error","source of error","source of error","source of error","source of error","Originating bincode error","originating bincode error","Source of error","sources of errors","A communication channel with 2 networks, where we can fall …","thread-safe ref counted lock to a map of delayed tasks","Wrapper for the tuple of <code>PushCdnNetwork</code> and <code>Libp2pNetwork</code> …","","","","","","","","","Helper function to calculate a hash of a type that …","","","","","","how long to delay","delayed, cancelable tasks for secondary network","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Get the number of messages in-flight.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Last n seen messages to prevent processing duplicates","The two networks we’ll use for send/recv","Constructor","","","","","Get a ref to the primary network","Whether primary is considered down","How many times primary failed to deliver","","","Receive one or many messages from the underlying network.","","","Get a ref to the backup network","a helper function to send messages through both networks …","a helper function returning a bool whether a given message …","","","","","","","","","","","","","","","","convenience alias for the type for bootstrap addresses …","Stubbed out Ack","Networking implementation that uses libp2p generic over <code>M</code> …","The underlying state of the libp2p network","Type alias for a shared collection of peerid, multiaddrs","hardcoded topic of QC used","Locked Option of a receiver for moving the value out of …","","","","this is really cheating to enable local tests hashset of …","","","","","","","","This should not be required, but it is. Version …","","","","","","","","","","","Derive a Libp2p keypair from a given private key","Derive a Libp2p Peer ID from a given private key","","","","max time before dropping message due to DHT error","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create and return a Libp2p network from a network config …","Returns a boxed function …","handle to control the network","task to propagate messages to handlers terminates on shut …","Handle events for Version 0.1 of the protocol.","","","","","holds the state of the libp2p network","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","whether or not we’ve bootstrapped into the DHT yet","if we’re a member of the DA committee or not","whether or not the network is ready to send","Killswitch sender","the latest view number (for node lookup purposes) NOTE: …","","","","","The networking metrics we’re keeping track of","Constructs new network for a node. Note that this network …","Sender for node lookup (relevant view number, key of node) …","","","","this node’s public key","","","","","","","Message Receiver","Receive one or many messages from the underlying network.","reliability_config","","Receiver for Requests for Data, includes the request and …","","Sender for broadcast messages","","","Initiates connection to the outside world","Spawns task for looking up nodes pre-emptively","","","","topic map hash(hashset) -&gt; topic btreemap ordered so is …","","","","","","","","","","handles view update","","","","","Returns when network is ready","Shared state for in-memory mock networking.","In memory only network simulator.","Internal state for a <code>MemoryNetwork</code> instance","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","The id of this <code>MemoryNetwork</code> cluster","","Count of messages that are in-flight (send but not …","","","","The actual internal state","Send a <code>Vec&lt;u8&gt;</code> message to the inner <code>input</code>","Input for messages","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The list of <code>MemoryNetwork</code>s","The master map","The networking metrics we’re keeping track of","Create a new, empty, <code>MasterMap</code>","Creates a new <code>MemoryNetwork</code> and hooks it up to the group …","Output for messages","","","","","Receive one or many messages from the underlying network.","config to introduce unreliability to the network","","","","","","","","","","","","","","","","","The broker definition for the Push CDN. Uses the TCP …","The client definition for the Push CDN. Uses the Quic …","The DA topic","The global topic","We encapsulate keys here to help readability.","The production run definition for the Push CDN. Uses the …","A communication channel to the Push CDN, which is a …","The testing run definition for the Push CDN. Uses the real …","The enum for the topics we can subscribe to in the Push CDN","The user definition for the Push CDN. Uses the Quic …","A wrapped <code>SignatureKey</code>. We need to implement the Push CDN…","","","","","","","","","","","","","","","","","","","","","Broadcast a message to all members of the quorum.","Broadcast a message to members of the particular topic. …","The underlying client","","","","","","","","","Broadcast a message to all members of the DA committee.","","","","","","","","","","","","","","","","","","","","","","","","","","Send a direct message to a node with a particular key. …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate n Push CDN clients, a marshal, and two brokers …","The PushCDN does not support in-flight message counts","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether or not the underlying network is supposed to be …","","","","","","","","","Create a new <code>PushCdnNetwork</code> (really a client) from a …","Pause sending and receiving on the PushCDN network.","","","","","","","","","The underlying (private) signing key, used to sign …","The underlying (public) verification key, used to …","Do nothing here, as we don’t need to look up nodes.","Receive a message. Is agnostic over <code>transmit_type</code>, which …","Resume sending and receiving on the PushCDN network.","","TODO: shut down the networks. Unneeded for testing.","Sign a message of arbitrary data and return the serialized …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a message of arbitrary data and return the result","","","","","","","","","Wait for the client to initialize the connection","Network for those in the DA committee","Node implementation aggregate trait","Network for all nodes","Storage for DA layer interactions","extra functions required on a node implementation to be …","generate a genesis block","Generate the communication channels for testing","Creates random transaction if possible otherwise panics …","Creates random transaction if possible otherwise panics …","the number of transactions in a block","BLS private key used to sign a message","BLS public key used to verify a signature","DA proposal was received from the network or submitted to …","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","Incoming message","A next leader task was canceled by a timeout interrupt","The private key type for this signature algorithm","The type of the assembled signature, without <code>BitVec</code>","The type of the quorum certificate parameters used for …","The type of the assembled qc: assembled signature + <code>BitVec</code>","Quorum proposal was received from the network or submitted …","A replica task was canceled by a timeout interrupt","Type of error that can occur when signing data","Trait for abstracting public key signatures Self is the …","The type of the entry that contain both public key and …","Event streaming handle for a <code>SystemContext</code> instance …","New transactions were received from the network or …","Upgrade proposal was received from the network or …","The view has finished.  If values were decided on, a <code>Decide</code>…","The view timed out","","","","assemble the signature from the partial signature and the …","","","","","","","check the quorum certificate for the assembled signature","","","","","","","","","","","","","","","","","","","","","","","","","","","Events that a <code>SystemContext</code> instance can emit","The underlying event","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a public key from bytes","Produce a public key from a private key","Generate a new key pair","generates the genesis public key. Meant to be dummy/filler","","only get the public key from the stake table entry","get the public parameter for the assembled signature …","get the assembled signature and the <code>BitVec</code> separately from …","get the stake table entry from the public key and stake …","get the view number out of a message","Provides an event-streaming handle for a <code>SystemContext</code> …","","Internal reference to the underlying <code>SystemContext</code>","","","","access to the internal event stream, in case we need to, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The message kind","","","","The sender and receiver, to allow the application to …","","","","","registry for controlling tasks","The sender of this message","","","","Produce a signature","Reference to the internal storage for consensus datum.","Serialize a public key to bytes","","","","","","","","","","","","","Validate a signature","The view number that this event originates from","","","","Optional information of the number of transactions in the …","The underlying error","The chain of Leafs that were committed by this decision","Contents of the proposal","Contents of the proposal","Contents of the proposal","The QC signing the most recent leaf in <code>leaf_chain</code>.","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","The list of transactions","The view that timed out","The view that timed out","The view number that has just finished","The view that timed out","DA proposal was received from the network or submitted to …","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","A next leader task was canceled by a timeout interrupt","Quorum proposal was received from the network or submitted …","A replica task was canceled by a timeout interrupt","New transactions were received from the network or …","Upgrade proposal was received from the network or …","The view has finished.  If values were decided on, a <code>Decide</code>…","The view timed out","The underlying event","The view number that this event originates from","Optional information of the number of transactions in the …","The underlying error","The chain of Leafs that were committed by this decision","Contents of the proposal","Contents of the proposal","Contents of the proposal","The QC signing the most recent leaf in <code>leaf_chain</code>.","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","The list of transactions","The view that timed out","The view that timed out","The view number that has just finished","The view that timed out","Event streaming handle for a <code>SystemContext</code> instance …","","","","","","","","","","","Returns the argument unchanged.","Get the underlying consensus state for this <code>SystemContext</code>","Wrapper to get the view number this node is on.","Get the last decided leaf of the <code>SystemContext</code> instance.","Get the last decided validated state of the <code>SystemContext</code> …","obtains a stream to expose to the user","HACK so we can know the types when running tests… there …","HACK so we can know the types when running tests… there …","Wrapper for <code>HotShotConsensusApi</code>’s <code>get_leader</code> function","return the timeout for a view of the underlying …","Wrapper to get this node’s public key","Get the validated state from a given <code>view</code>.","Provides a reference to the underlying storage for this …","Internal reference to the underlying <code>SystemContext</code>","","access to the internal event stream, in case we need to, …","Calls <code>U::from(self)</code>.","","The sender and receiver, to allow the application to …","","","","registry for controlling tasks","","Shut down the the inner hotshot and wait until all …","Reference to the internal storage for consensus datum.","Submits a transaction to the backing <code>SystemContext</code> …","","","","Tries to get the most recent decided leaf, returning …","","","","Block the underlying quorum (and committee) networking …"],"i":[4,4,4,4,0,0,0,0,4,4,4,0,4,4,0,0,4,4,8,10,34,8,4,4,4,34,8,22,10,4,34,8,22,10,4,4,8,10,8,10,8,8,8,10,34,34,8,22,10,4,34,8,22,10,4,4,34,8,22,10,4,0,34,8,22,10,4,8,4,4,34,8,22,10,4,22,22,8,8,8,8,8,8,4,22,8,4,34,8,8,22,10,4,22,8,22,8,34,8,22,10,4,34,8,22,10,4,8,8,8,8,8,34,8,22,10,4,8,8,8,10,34,0,8,8,34,4,8,8,22,22,8,0,8,10,4,0,34,8,22,10,4,8,34,8,22,10,4,34,8,22,10,4,0,22,22,22,8,10,10,34,8,22,10,4,34,174,175,176,177,178,179,180,181,182,176,182,54,0,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,54,54,54,54,54,0,183,0,59,59,9,59,84,68,84,59,59,68,84,59,59,59,68,59,0,0,0,59,59,0,59,59,9,59,9,0,84,59,68,59,59,0,59,60,59,59,59,184,60,59,60,59,60,60,60,68,59,77,60,60,60,60,59,60,59,59,60,59,60,59,0,68,59,59,60,59,59,68,84,68,184,68,84,68,59,60,60,0,59,60,59,60,59,60,59,184,60,60,0,0,60,60,68,84,60,59,60,60,60,60,77,77,77,77,60,60,59,184,60,60,60,59,68,60,59,60,59,60,60,184,60,59,84,60,59,185,186,187,188,189,190,191,192,193,194,0,0,0,100,195,100,195,100,100,100,100,100,195,100,195,100,100,100,100,100,100,100,100,100,100,100,100,195,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,150,150,0,0,0,0,0,0,0,0,0,0,0,0,110,196,110,110,128,110,110,115,124,124,110,110,0,0,110,110,110,147,115,110,129,146,110,128,110,147,124,115,124,115,115,196,110,124,124,110,196,110,110,110,110,110,110,59,59,59,59,59,0,0,59,59,59,59,0,0,0,0,59,59,59,59,59,59,59,59,59,0,0,0,115,113,116,117,113,113,115,113,116,117,115,113,116,117,77,115,113,116,117,115,113,116,117,0,115,116,113,113,113,113,115,116,115,113,116,117,115,113,116,117,115,113,116,117,115,113,116,117,115,113,116,117,115,113,116,117,116,116,115,115,113,116,117,115,113,116,117,117,116,115,113,116,117,0,0,115,115,115,115,115,113,116,117,113,0,77,77,77,77,113,113,113,113,115,113,116,117,115,113,116,117,115,113,116,117,115,113,116,117,113,113,115,113,116,117,185,186,187,188,189,190,191,192,193,194,0,0,0,124,126,197,124,126,124,126,124,0,124,126,124,126,124,124,124,124,126,124,126,124,126,124,124,126,124,126,124,124,124,126,124,126,124,124,126,124,124,124,124,197,124,126,124,124,124,197,124,124,124,124,124,124,124,124,124,124,126,124,126,124,126,124,126,124,124,124,126,124,0,0,0,0,0,0,0,129,198,196,134,143,134,129,143,134,129,129,143,129,129,129,199,143,134,129,143,134,129,0,0,143,134,129,134,129,143,134,129,134,129,143,134,129,129,129,134,129,129,129,143,134,129,129,143,134,129,134,134,134,134,134,143,134,129,199,134,129,134,129,198,196,134,143,134,129,198,196,129,134,129,134,129,134,129,134,143,129,129,129,129,199,129,134,143,134,129,143,134,129,143,134,129,129,143,134,129,129,129,0,0,0,0,146,147,148,146,147,148,146,146,146,146,146,147,148,146,147,148,146,147,148,146,146,147,148,146,147,148,146,147,148,146,146,147,146,148,147,148,146,146,146,148,147,148,146,147,148,146,147,148,148,147,146,148,146,147,148,146,146,148,146,146,146,147,148,146,147,148,146,147,148,146,147,148,146,146,0,0,150,150,0,0,0,0,0,0,0,151,152,128,150,200,201,202,203,151,152,128,150,200,201,202,203,151,152,128,150,128,128,128,151,152,128,150,151,152,128,150,128,200,201,202,203,151,152,128,150,200,201,202,203,151,152,128,150,200,201,202,203,151,151,152,128,150,128,200,201,202,203,151,152,128,150,151,150,151,151,151,151,150,150,150,150,200,201,202,203,151,152,128,150,128,128,200,201,202,203,151,152,128,150,200,201,202,203,151,152,128,150,128,200,201,202,203,151,152,128,150,128,128,200,201,202,203,151,152,128,150,110,110,128,128,128,151,128,151,151,152,128,150,200,201,202,203,151,152,128,150,150,150,200,201,202,203,151,152,128,150,200,201,202,203,151,152,128,150,151,200,201,202,203,151,152,128,150,128,9,0,9,9,0,184,184,184,184,184,0,0,155,155,155,0,0,0,155,101,101,101,101,155,155,101,0,101,0,155,155,155,155,43,155,50,101,43,155,50,43,155,50,101,43,155,50,43,155,50,43,155,50,43,155,50,43,43,155,155,50,50,43,155,50,50,50,50,50,50,0,43,43,155,50,43,155,50,101,101,101,101,50,101,101,101,101,50,0,50,36,43,155,50,36,43,155,50,50,43,155,50,36,43,155,50,50,36,50,43,155,50,101,36,101,43,155,50,43,155,50,43,155,50,43,155,50,101,43,43,155,50,204,205,204,206,207,208,204,206,207,208,209,210,211,212,213,155,155,155,0,0,155,155,155,155,155,155,155,43,43,204,205,204,206,207,208,204,206,207,208,209,210,211,212,213,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36],"f":"``````````````````{{cb}d{}}0``{cf{}}0{{{h{c}}}{{l{j}}}n}{ce{}{}}000000000{{{h{c}}}{{l{f}}}n}{{{A`{ce}}}{{A`{ce}}}n{{Ab{c}}}}{{{Ad{c}}}{{Ad{c}}}{Afn}}{{ce}d{}{}}0`{{{A`{ce}}}{{Al{{Aj{{Ah{c}}}}}}}n{{Ab{c}}}}```{Anc{}}000000000{{{h{c}}}B`n}{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}0000`{And}0000`{{{h{c}}Bf}{{Bd{dBh}}}{Bjn}}{{{h{c}}Bf}{{Bd{dBh}}}n}{cc{}}0000{{}{{Bd{{Bl{c}}{h{c}}}}}n}{{{Bn{c}}{l{Al}}{C`{c}}{Cb{{Bn{c}}}}{Cf{{Cd{c}}}}}{{Bl{c}}}n}9{{{A`{ce}}}{{Bn{c}}}n{{Ab{c}}}}{{{A`{ce}}}Aln{{Ab{c}}}}0{{{A`{ce}}}Chn{{Ab{c}}}}{{{A`{ce}}}{{l{Al}}}n{{Ab{c}}}}{{ce}{{Cj{eg}}}{}{ClCnD`}{}}``{c{}{}}{{}An}{{ChDb{Ad{c}}{Dd{ce}}{Bl{c}}Df}{{Bd{{E`{{Dh{ce}}{Dl{{Al{{Dj{c}}}}}}{Dn{{Al{{Dj{c}}}}}}}}{h{c}}}}}n{{Ab{c}}}}1111````{ce{}{}}0000{{}{{Bd{EbEd}}}}0000```{{ChDb{Ad{c}}{Dd{ce}}{Bl{c}}Df}{{Bd{{Al{{A`{ce}}}}{h{c}}}}}n{{Ab{c}}}}`{{}}0000``{{{A`{ce}}}{{Bd{d{h{c}}}}}n{{Ab{c}}}}```{{{A`{ce}}}{{Dh{ce}}}n{{Ab{c}}}}{{{A`{ce}}{Ef{c}}}dn{{Ab{c}}}}{{{Dd{ce}}}dn{{Ab{c}}}}{{{h{c}}}{{l{f}}}n}{{{A`{ce}}}dn{{Ab{c}}}}`````99{cEh{}}`{c{{Bd{e}}}{}{}}0000{{{A`{ce}}}{{l{{Bn{c}}}}}n{{Ab{c}}}}11111{cEj{}}0000```````=====6``````````````{{cb}d{}}{{{Al{El}}{Dl{{Al{{Dj{c}}}}}}{Dn{{Al{{Dj{c}}}}}}{Dh{ce}}}dn{{Ab{c}}}}0{{{Al{El}}{Dl{{Al{{Dj{c}}}}}}{Dn{{Al{{Dj{c}}}}}}{Al{e}}{Fb{{Al{{Dj{c}}}}}{{En{F`}}}}{Al{{Aj{g}}}}}dn{{Ff{{Fd{c}}}}}{{Fh{c}}}}{{{Al{El}}{Dl{{Al{{Dj{c}}}}}}{Al{e}}}dn{{Ff{{Fd{c}}}}}}2222{{{Al{El}}{Dn{{Al{{Dj{c}}}}}}{Fj{c}}{Dh{ce}}}dn{{Ab{c}}}}3333{ce{}{}}0{FlFl}{{ce}d{}{}}{Anc{}}0{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}{And}{{FlBf}Fn}{cc{}}{{}An}8{{}{{Bd{EbEd}}}}{{}}`:{c{{Bd{e}}}{}{}}0{cEj{}}<`{{{Dh{ce}}}{{Gd{{Gb{G`}}}}}n{{Ab{c}}}}````````````````````````````````````{{cb}d{}}{cf{}}0{Gf{{l{j}}}}6{ce{}{}}000{{Gh{l{Gj}}}Gh}`{Gh{{Bd{GlGn}}}}{{{Hh{}{{H`{c}}{Hb{e}}{Hd{g}}{Hf{i}}}}i}Hj{fBjCnD`HlHn}I`Ib{AfBjHnIdIfCnD`HlIh}}{Gf{{l{f}}}}{{Ij{Cb{Il}}{Al{In}}}{{Gd{{Gb{G`}}}}}}{GhGh}{{ce}d{}{}}{{}Gh}{Anc{}}000{GfB`}{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}0{And}0`{{{Hh{}{{H`{c}}{Hb{e}}{Hd{g}}{Hf{i}}}}}{{Bd{{Al{{J`{Il}}}}c}}}{fBjCnD`HlHn}I`Ib{AfBjHnIdIfCnD`HlIh}}{{GfBf}{{Bd{dBh}}}}0{cc{}}{JbGf}1{{{J`{Il}}c}{{Hh{}{{H`{e}}{Hb{g}}{Hd{i}}{Hf{c}}}}}{AfBjHnIdIfCnD`HlIh}{fBjCnD`HlHn}I`Ib}{{}{{Jh{}{{H`{c}}{Hb{e}}{Jd{g}}{Jf{i}}}}}{fBjCnD`}I`JjJl}{{eg}{{Bd{{E`{{Hh{}{{H`{i}}{Hb{g}}{Hd{c}}{Hf{k}}}}k}}i}}}Ib{{K`{}{{Jn{c}}}}}I`{fBjCnD`HlHn}{AfBjHnIdIfCnD`HlIh}}{{AnAnAn{l{{Gb{Ij}}}}Kb}{{Gd{{Gb{In}}}}}}{{}{{E`{{Hh{}{{H`{c}}{Hb{e}}{Hd{g}}{Hf{i}}}}i}}}{fBjCnD`HlHn}I`Ib{AfBjHnIdIfCnD`HlIh}}{c{{E`{{Jh{}{{H`{e}}{Hb{c}}{Jd{g}}{Jf{i}}}}g}}}I`{fBjCnD`}JjJl}{{{Hh{}{{H`{c}}{Hb{e}}{Hd{g}}{Hf{i}}}}i}{{`{{Kd{}{{Jn{g}}}}}}}{fBjCnD`HlHn}I`Ib{AfBjHnIdIfCnD`HlIh}}{{ce}{{Cj{eg}}}{}{ClCnD`}{}}{{Ghc}Gh{{Kh{Kf}}}}``{c{}{}}{{}An}0{ce{}{}}0{{}{{Bd{EbEd}}}}0{{{Bn{c}}KjCh}{}n}{{Gh{l{Kl}}}Gh}```{{GhKn}Gh}`{{{Hh{}{{H`{c}}{Hb{e}}{Hd{g}}{Hf{i}}}}i}An{fBjCnD`HlHn}I`Ib{AfBjHnIdIfCnD`HlIh}}{{{Jh{}{{H`{c}}{Hb{e}}{Jd{g}}{Jf{i}}}}}d{fBjCnD`}I`JjJl}{{}}0{{Ghc}Gh{{Kh{{L`{An}}}}}}`{{Gh{l{Kb}}}Gh}`{IjKb}{IjF`}{IjAn}{{Ij{Cb{Il}}}{{Cb{Il}}}}{{GhF`}Gh}`{Gf{{l{f}}}}{{lKjCh}}{{Gh{Ld{{E`{LbGj}}}}}Gh}`{ce{}{}}{cEh{}}{{{Hh{}{{H`{c}}{Hb{e}}{Hd{g}}{Hf{i}}}}i}{{Cb{{Lf{g}}}}}{fBjCnD`HlHn}I`Ib{AfBjHnIdIfCnD`HlIh}}{c{{Bd{e}}}{}{}}000<`{{}Ch}{cEj{}}0{{{Jh{}{{H`{c}}{Hb{e}}{Jd{g}}{Jf{i}}}}e{Bn{k}}}{{`{{G`{}{{En{{Bd{{E`{{Jh{}{{H`{c}}{Hb{e}}{Jd{g}}{Jf{i}}}}g}}c}}}}}}Cn}}}{fBjCnD`}I`JjJln}66`````````````{{cb}d{}}````77{{{Lh{ce}}}{{Lh{ce}}}Af{AfLj}}{{ce}d{}{}}````{{{Cb{{Ll{c}}}}{Cb{{Ll{c}}}}An}{{Lh{ec}}}Lj{{n{}{{Ln{c}}}}}}{Anc{}}0{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}{And}{{{Lh{ce}}{Lh{ce}}}F`M`{M`Lj}}{{ce}F`{}{}}000{{{Lh{ec}}}MbLj{{n{}{{Ln{c}}}}}}``{{{Lh{ce}}Bf}FnBj{BjLj}}{cc{}}{{{Lh{ec}}}CbLj{{n{}{{Ln{c}}}}}}{{ce}Ch{IfMd}Mf}{{{Lh{ec}}}cLj{{n{}{{Ln{c}}}}}}{{{Lh{ec}}}MhLj{{n{}{{Ln{c}}}}}}{{{Lh{ec}}}{{Cb{c}}}Lj{{n{}{{Ln{c}}}}}}{{{Lh{ec}}}lLj{{n{}{{Ln{c}}}}}}22{{{Lh{ec}}c}F`Lj{{n{}{{Ln{c}}}}}}{{{Lh{ce}}g}dIf{IfLj}Mj}{{}An}{ce{}{}}{{}{{Bd{EbEd}}}}{{{J`{c}}Cb{Cb{c}}An}{{Lh{ec}}}Lj{}}{{{Lh{ec}}}AnLj{{n{}{{Ln{c}}}}}}{{}}{{{Lh{ec}}}MbLj{{n{}{{Ln{c}}}}}}52{c{{Bd{e}}}{}{}}0{cEj{}}27```````````````{{cb}d{}}`88`{{{Ml{c}}}{{Ml{c}}}{AfMn}}{{ce}d{}{}}```{Anc{}}0{{}{{N`{Kf}}}}{{}{{N`{Lb}}}}{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}{And}{cc{}}``{{}An}``{ce{}{}}`{{}{{Bd{EbEd}}}}```````?`````1==<1```````````````````````````;;;;{{NbAn}d}{{NbNd}d}33333333{{Ij{Cb{Il}}{Al{In}}}{{Gd{{Gb{G`}}}}}}{NfNf}{NbNb}{NhNh}{NjNj}{{ce}d{}{}}000```{{NbEh{l{Eh}}}{{Gb{Nl}}}}{{NbEh{l{Eh}}}{{Gb{Nn}}}}{{NbEh{l{Eh}}}{{Gb{O`}}}}{{NbEh}{{Gb{Ob}}}}{{}Nf}{{}Nh}{Anc{}}0000000{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}000{And}000{{NfBf}Fn}{{NbBf}Fn}{{NhBf}Fn}{{NjBf}{{Bd{dBh}}}}{cc{}}000```{{}An}000{ce{}{}}000{NjGf}`{{}{{Bd{EbEd}}}}000```{OdNf}``{{}}000``{IjKb}{IjF`}{IjAn}{{Ij{Cb{Il}}}{{Cb{Il}}}}{{NbEh}d}{{NbAn}d}{{NbEh}Nb}{{NbEh}{{Gb{Od}}}}<<<<{c{{Bd{e}}}{}{}}0000000{cEj{}}000{{NbOf}d}`????`````````````{{cb}d{}}0`{ce{}{}}000{{{Oh{c}}{Fd{c}}Mhe}{{Gd{{Gb{G`}}}}}nOj}{cChIf}{{{Oh{c}}}{{Oh{c}}}{Afn}}{{{Ol{c}}}{{Ol{c}}}{Afn}}{{ce}d{}{}}04``{Anc{}}000{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}0{{{Oh{c}}{Fd{c}}e}{{Gd{{Gb{G`}}}}}nOj}{And}0{cc{}}0{{AnAnAnAnF`{l{{Gb{Ij}}}}Kb}{{On{{E`{{Al{{Oh{c}}}}{Al{{Oh{c}}}}}}}}}n}{{{Oh{c}}}{{l{An}}}n}{{}An}0=={{{Oh{c}}}F`n}{{}{{Bd{EbEd}}}}0``{{{A`{c}}{Ab{{Fd{c}}}}Kb}{{Oh{c}}}n}{{{Oh{c}}}dn}`{{}}0{{{Oh{c}}}{{A`{c}}}n}```{{{Oh{c}}Ad}{{Gd{{Gb{G`}}}}}n}{{{Oh{c}}}{{Gd{{Gb{G`}}}}}n}=4{{{Oh{c}}}{{Ab{{Fd{c}}}}}n}{{{Oh{c}}{Fd{c}}eg}{{Bd{dGf}}}n{{G`{}{{En{{Bd{dGf}}}}}}Cn}{{G`{}{{En{{Bd{dGf}}}}}}Cn}}{{{Fd{c}}}F`n}{{{Oh{c}}}{{Af{d}}}n}{{{Oh{c}}e}{{Gd{{Gb{G`}}}}}nOj}{ce{}{}}0{c{{Bd{e}}}{}{}}000{cEj{}}0{{{Oh{c}}Ch}{{Gd{{Gb{G`}}}}}n}{{{Oh{c}}{Ah{{Fd{c}}}}e}{{Gd{{Gb{G`}}}}}nOj}44:```````{{cb}d{}}```555555{{{Ab{ce}}c{Mh{e}}g}{{Gd{{Gb{G`}}}}}AjLjOj}`{{{Ab{ce}}}{{Ab{ce}}}{AfAj}{AfLj}}{{ce}d{}{}}2`{Anc{}}00000{{}{{N`{Kf}}}}{{}{{N`{Lb}}}}{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}00`{{{Ab{ce}}ceg}{{Gd{{Gb{G`}}}}}AjLjOj}{And}00{{{Al{ce}}Bf}Fn{BjAj}{BjLj}}{{{Ab{ce}}Bf}FnAjLj}{cc{}}00{{{An{c}}AA`c}{{N`{{Ab{ec}}}}}LjAj}{{AnAnAnAnF`{l{{Gb{Ij}}}}Kb}{{On{{E`{{Al{{Ab{{Fd{c}}}}}}{Al{{Ab{{Fd{c}}}}}}}}}}}n}`{{{Ab{ce}}{AAb{c}}{AAh{{E`{c{AAf{AAd}}}}}}AAj}dAjLj}{{{Ab{ce}}AAl{AAb{c}}{AAh{{E`{c{AAf{AAd}}}}}}}{{Bd{dGf}}}AjLj}{{{Ab{{Fd{c}}}}}{{l{An}}}n}{{}An}00`{ce{}{}}00`````{{}{{Bd{EbEd}}}}00``{{NfGlc{Al{{Aj{{Cb{{E`{LbGj}}}}}}}}An{Mh{c}}{l{{Gb{Ij}}}}{Mh{c}}F`}{{Bd{{Ab{ec}}Gf}}}LjAj}`{{{Ab{ce}}}dAjLj}```{{}}00``{{{Ab{ce}}Ade}{{Gd{{Gb{G`}}}}}AjLj}`{{{Ab{ce}}}{{Gd{{Gb{G`}}}}}AjLj}`{{{Ab{ce}}ceg}{{Gd{{Gb{G`}}}}}AjLjOj}`4`{{AAnc}BdAB`}{{{Ab{ce}}}{{Af{d}}}AjLj}{{{Ab{ce}}Ang}dAjLjOj}{{{Ab{ce}}{ABb{{l{{E`{Ade}}}}}}g}dAjLjOj}{{{Ab{ce}}g}{{Gd{{Gb{G`}}}}}AjLjOj}`<`{c{{Bd{e}}}{}{}}00000{cEj{}}00{{{Ab{ce}}Ch}{{Gd{{Gb{G`}}}}}AjLj}???9<````{{cb}d{}}{ce{}{}}00000{{{ABd{ce}}c{Mh{e}}g}{{Gd{{Gb{G`}}}}}AjLjOj}{{{ABd{ce}}}{{ABd{ce}}}{AfAj}{AfLj}}{{ce}d{}{}}2{Anc{}}00000{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}00{{{ABd{ce}}ceg}{{Gd{{Gb{G`}}}}}AjLjOj}{And}00{{{ABf{ce}}Bf}FnAjLj}{{{ABh{ce}}Bf}Fn{BjAj}{BjLj}}{{{ABd{ce}}Bf}FnAjLj}{cc{}}00{{AnAnAnAnF`{l{{Gb{Ij}}}}Kb}{{On{{E`{{Al{{ABd{{Fd{c}}}}}}{Al{{ABd{{Fd{c}}}}}}}}}}}n}`{{{ABd{{Fd{c}}}}}{{l{An}}}n}`{{}An}00`{{{ABd{ce}}{Cb{Il}}}{{Bd{d{ABj{{Cb{Il}}}}}}}AjLj}`???{{}{{Bd{EbEd}}}}00```{{}{{Al{{ABf{ce}}}}}AjLj}{{cNf{Al{{ABf{ec}}}}{l{{Gb{Ij}}}}}{{ABd{ec}}}LjAj}`{{{ABd{ce}}}dAjLj}{{}}00{{{ABd{ce}}}{{Gd{{Gb{G`}}}}}AjLj}`2{{{ABd{ce}}}{{Af{d}}}AjLj}{ce{}{}}{c{{Bd{e}}}{}{}}00000{cEj{}}002224```````````{{cb}d{}}0003333333333333333{{{A`{c}}{Fd{c}}Mhe}{{Gd{{Gb{G`}}}}}nOj}{{{A`{c}}{Fd{c}}ABle}{{Bd{dGf}}}nOj}`{{{ABn{c}}}{{ABn{c}}}{AfLj}}{{{AC`{c}}}{{AC`{c}}}{Afn}}{{{A`{c}}}{{A`{c}}}{Afn}}{ABlABl}{{ce}d{}{}}0006{Anc{}}000000000000000{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}000{{{J`{Il}}}{{N`{{ABn{c}}}}}Lj}1111{{{A`{c}}{Fd{c}}e}{{Gd{{Gb{G`}}}}}nOj}{And}0000000{{{ABn{c}}{ABn{c}}}F`{M`Lj}}{{ABlABl}F`}{{ce}F`{}{}}0000000{cc{}}0000000{{AnAnAnAnF`{l{{Gb{Ij}}}}Kb}{{On{{E`{{Al{{A`{c}}}}{Al{{A`{c}}}}}}}}}n}{{{A`{c}}}{{l{An}}}n}{{}An}0000000{ce{}{}}0000000`{{}{{Bd{EbEd}}}}0000000{{Eh{Cb{ABl}}{Ml{ABn}}}{{N`{{A`{c}}}}}n}{{{A`{c}}}dn}{{}}0000000``{{{A`{c}}Ad}{{Gd{{Gb{G`}}}}}n}{{{A`{c}}}{{Gd{{Gb{G`}}}}}n}3{{{ABn{c}}}{{N`{{Cb{Il}}}}}Lj}{{{A`{c}}}{{Af{d}}}n}{{c{J`{Il}}}{{N`{{Cb{Il}}}}}{}}9999{c{{Bd{e}}}{}{}}000000{Il{{Bd{ABl{ACb{ABl}}}}}}1{c{{Bd{ABl{ACb{ABl}}}}}{}}22222222{cEj{}}0000000{{c{J`{Il}}{J`{Il}}}F`{}}>>>>>>>>8`````:{{AnAnAn{l{{Gb{Ij}}}}Kb}{{Gd{{Gb{In}}}}}}{{{Bn{c}}KjCh}{}n}{{lKjCh}}{{}Ch}```````````````````````{{cb}d{}}00{{cACd{J`{e}}}g{}{}{}}{ce{}{}}00000{{c{J`{Il}}e}F`{}{}}{{{Ef{c}}}{{Ef{c}}}{Afn}}{{{ACf{c}}}{{ACf{c}}}{Afn}}{{{Fd{c}}}{{Fd{c}}}{Afn}}{{ce}d{}{}}00{Anc{}}00000{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}{c{{Bd{{Ef{e}}}}}ACh{nn}}1{c{{Bd{{ACf{e}}}}}ACh{nn}}2{c{{Bd{{Fd{e}}}}}AChn}{And}00{{{Fd{c}}{Fd{c}}}F`{M`n}}{{ce}F`{}{}}000``{{{Ef{c}}Bf}{{Bd{dBh}}}{Bjn}}{{{ACf{c}}Bf}{{Bd{dBh}}}{Bjn}}{{{Fd{c}}Bf}{{Bd{dBh}}}n}{cc{}}00{{{J`{Il}}}{{Bd{{Lj{}{{ACj{c}}{ACl{e}}{ACn{g}}{AD`{i}}{ADb{k}}{ADd{m}}}}ADf}}}{CnD`AfBjIdHlADhIf}{ADjCnD`AfBjIfIdHlADh}{CnD`AfBjIf}{CnD`AfBjIfM`IdHlADh{Kh{ADl}}{ADn{ADl}}}{CnD`AfBjIfM`IdHlADh}{fCnD`}}{c{{Lj{}{{ACj{c}}{ACl{e}}{ACn{g}}{AD`{i}}{ADb{k}}{ADd{m}}}}}{CnD`AfBjIdHlADhIf}{ADjCnD`AfBjIfIdHlADh}{CnD`AfBjIf}{CnD`AfBjIfM`IdHlADh{Kh{ADl}}{ADn{ADl}}}{CnD`AfBjIfM`IdHlADh}{fCnD`}}{{{AE`{Il}}Ch}{{E`{{Lj{}{{ACj{c}}{ACl{e}}{ACn{g}}{AD`{i}}{ADb{k}}{ADd{m}}}}c}}}{CnD`AfBjIdHlADhIf}{ADjCnD`AfBjIfIdHlADh}{CnD`AfBjIf}{CnD`AfBjIfM`IdHlADh{Kh{ADl}}{ADn{ADl}}}{CnD`AfBjIfM`IdHlADh}{fCnD`}}{{}{{Lj{}{{ACj{c}}{ACl{e}}{ACn{g}}{AD`{i}}{ADb{k}}{ADd{m}}}}}{CnD`AfBjIdHlADhIf}{ADjCnD`AfBjIfIdHlADh}{CnD`AfBjIf}{CnD`AfBjIfM`IdHlADh{Kh{ADl}}{ADn{ADl}}}{CnD`AfBjIfM`IdHlADh}{fCnD`}}{{ce}Ch{IfMd}Mf}{c{{Lj{}{{ACj{e}}{ACl{c}}{ACn{g}}{AD`{i}}{ADb{k}}{ADd{m}}}}}{ADjCnD`AfBjIfIdHlADh}{CnD`AfBjIdHlADhIf}{CnD`AfBjIf}{CnD`AfBjIfM`IdHlADh{Kh{ADl}}{ADn{ADl}}}{CnD`AfBjIfM`IdHlADh}{fCnD`}}{{{Cb{c}}AEb}e{}{}}{c{{E`{eAEd}}}{}{}}{{{Lj{}{{ACj{c}}{ACl{e}}{ACn{g}}{AD`{i}}{ADb{k}}{ADd{m}}}}Ch}e{CnD`AfBjIdHlADhIf}{ADjCnD`AfBjIfIdHlADh}{CnD`AfBjIf}{CnD`AfBjIfM`IdHlADh{Kh{ADl}}{ADn{ADl}}}{CnD`AfBjIfM`IdHlADh}{fCnD`}}{{{Fd{c}}}{}n}`{{{Fd{c}}e}d{Ifn}Mj}`{{}An}00`{ce{}{}}00`{{}{{Bd{EbEd}}}}00`{{}}00{{{Fd{c}}}AEfn}``{{{Ef{c}}e}Bd{nHl}AB`}{{{ACf{c}}e}Bd{nHl}AB`}{{{Fd{c}}e}BdnAB`}{{c{J`{Il}}}{{Bd{eg}}}{}{}{}}`{{{Lj{}{{ACj{c}}{ACl{e}}{ACn{g}}{AD`{i}}{ADb{k}}{ADd{m}}}}}{{Cb{Il}}}{CnD`AfBjIdHlADhIf}{ADjCnD`AfBjIfIdHlADh}{CnD`AfBjIf}{CnD`AfBjIfM`IdHlADh{Kh{ADl}}{ADn{ADl}}}{CnD`AfBjIfM`IdHlADh}{fCnD`}}888{c{{Bd{e}}}{}{}}00000{cEj{}}00{{{Lj{}{{ACj{c}}{ACl{e}}{ACn{g}}{AD`{i}}{ADb{k}}{ADd{m}}}}i{J`{Il}}}F`{CnD`AfBjIdHlADhIf}{ADjCnD`AfBjIfIdHlADh}{CnD`AfBjIf}{CnD`AfBjIfM`IdHlADh{Kh{ADl}}{ADn{ADl}}}{CnD`AfBjIfM`IdHlADh}{fCnD`}}`;;;`````````````````````````````````````````````{{cb}d{}}<<{{{Dh{ce}}}Kbn{{Ab{c}}}}{{{Dh{ce}}}{{Dh{ce}}}{Afn}{Af{Ab{c}}}}{{ce}d{}{}}{Anc{}}0{{ce}{{Bd{{Bb{gi}}}}}{}{}{}{}}{And}{cc{}}{{{Dh{ce}}}{{Al{{Aj{{Ah{c}}}}}}}n{{Ab{c}}}}{{{Dh{ce}}}{}n{{Ab{c}}}}{{{Dh{ce}}}{{Bn{c}}}n{{Ab{c}}}}{{{Dh{ce}}}Aln{{Ab{c}}}}{{{Dh{ce}}}{{`{{AEh{}{{Jn{{Ef{c}}}}}}}}}n{{Ab{c}}}}{{{Dh{ce}}}{{Dn{{Ef{c}}}}}n{{Ab{c}}}}{{{Dh{ce}}}{{Dn{{Al{{Dj{c}}}}}}}n{{Ab{c}}}}5{{{Dh{ce}}}Chn{{Ab{c}}}}6{{{Dh{ce}}}{{l{Al}}}n{{Ab{c}}}}{{{Dh{ce}}}{{Al{Aj}}}n{{Ab{c}}}}`{{}An}`{ce{}{}}{{}{{Bd{EbEd}}}}`{{}}<<`{{{Dh{ce}}{Ef{c}}}{{Gd{{Gb{G`}}}}}n{{Ab{c}}}}{{{Dh{ce}}}{{Af{d}}}n{{Ab{c}}}}`{{{Dh{ce}}}{{Bd{d{h{c}}}}}n{{Ab{c}}}}5{{{Dh{ce}}}AEjn{{Ab{c}}}}{c{{Bd{e}}}{}{}}{{{Dh{ce}}}{{l{{Bn{c}}}}}n{{Ab{c}}}}1{cEj{}}9{{{Dh{ce}}}dn{{Ab{c}}}}","c":[111],"p":[[5,"Private",1280],[1,"unit"],[10,"Error",1281],[6,"HotShotError",0],[5,"Backtrace",1282],[6,"Option",1283],[10,"NodeType",1284],[5,"SystemContext",0],[10,"NodeImplementation",216],[5,"Memberships",0],[10,"Clone",1285],[5,"Consensus",1286],[5,"RwLock",1287],[5,"Arc",1288],[1,"usize"],[1,"str"],[5,"With",1289],[6,"Result",1290],[5,"Formatter",1291],[5,"Error",1291],[10,"Debug",1291],[5,"HotShotInitializer",0],[5,"Leaf",1292],[8,"QuorumCertificate",1293],[5,"Vec",1294],[5,"View",1295],[5,"BTreeMap",1296],[1,"u64"],[5,"IndentedSection",1297],[10,"Display",1291],[10,"Send",1298],[10,"Sync",1298],[5,"HotShotConfig",1299],[5,"Networks",0],[5,"ConsensusMetricsValue",1286],[5,"SystemContextHandle",1234],[6,"HotShotEvent",1300],[5,"Sender",1301],[5,"Receiver",1301],[1,"tuple"],[5,"Layout",1302],[5,"LayoutError",1302],[5,"Event",1068],[5,"String",1303],[5,"TypeId",1304],[5,"TaskRegistry",1305],[17,"Output"],[1,"bool"],[1,"fn"],[5,"Message",1068],[10,"ConnectedNetwork",1306],[10,"Storage",1307],[8,"RequestReceiver",1308],[6,"GlobalEvent",177],[8,"Result",1291],[10,"Future",1309],[5,"Box",1310],[5,"Pin",1311],[6,"NetworkError",216],[5,"NetworkNodeConfigBuilder",216],[5,"Multiaddr",1312],[5,"NetworkNodeConfig",1313],[6,"NetworkNodeConfigBuilderError",1313],[17,"Error"],[17,"Instance"],[17,"Transaction"],[17,"Metadata"],[10,"BlockPayload",216],[5,"BuilderCommitment",1295],[10,"Serialize",1314],[10,"DeserializeOwned",1315],[10,"InstanceState",1316],[10,"Transaction",1317],[10,"Eq",1318],[10,"Hash",1319],[10,"EncodeBytes",1317],[10,"NetworkReliability",216],[1,"u8"],[10,"Fn",1320],[1,"slice"],[6,"NetworkNodeHandleError",1321],[17,"Delta"],[17,"Time"],[10,"ValidatedState",216],[10,"StateDelta",1316],[10,"ConsensusTime",1284],[17,"Item"],[10,"IntoIterator",1322],[5,"Duration",1323],[10,"Iterator",1324],[5,"Keypair",1325],[10,"Into",1326],[10,"RngCore",1327],[5,"MeshParams",1313],[6,"NetworkNodeType",1328],[5,"NonZero",1329],[5,"PeerId",1330],[5,"HashSet",1331],[5,"Commitment",1332],[5,"GeneralStaticCommittee",355],[10,"SignatureKey",1068],[5,"PeerConfig",1299],[17,"SignatureKey"],[10,"PartialEq",1318],[8,"NonZeroU64",1329],[10,"Sized",1298],[10,"BuildHasher",1319],[5,"BTreeSet",1333],[10,"Hasher",1319],[5,"KeyPair",409],[10,"SignatureScheme",1334],[8,"Result",1335],[5,"NetworkingMetrics",467],[1,"f64"],[5,"NetworkingMetricsValue",467],[5,"InnerNetworkingMetrics",467],[5,"FailedToSerializeSnafu",467],[10,"Counter",1336],[10,"Gauge",1336],[10,"Histogram",1336],[10,"Label",1336],[10,"Metrics",1336],[1,"i64"],[5,"CombinedNetworks",619],[10,"StaticVersionType",1337],[5,"UnderlyingCombinedNetworks",619],[8,"AsyncGenerator",1306],[5,"PushCdnNetwork",878],[5,"Libp2pNetwork",691],[5,"ViewNumber",1292],[8,"BoxSyncFuture",1299],[5,"HashMap",1338],[10,"NetworkMsg",1306],[5,"Libp2pNetworkInner",691],[5,"NetworkConfig",1339],[6,"SocketAddr",1340],[5,"UnboundedSender",1341],[5,"Response",1342],[5,"ResponseChannel",1343],[5,"Sender",1344],[5,"NetworkNodeReceiver",1321],[6,"NetworkEvent",1328],[5,"Empty",691],[10,"Serializer",1314],[5,"UnboundedReceiver",1341],[5,"MemoryNetwork",800],[5,"MasterMap",800],[5,"MemoryNetworkInner",800],[5,"SendError",1345],[6,"Topic",878],[5,"WrappedSignatureKey",878],[5,"ClientDef",878],[5,"TryFromPrimitiveError",1346],[5,"BitSlice",1347],[6,"EventType",1068],[10,"Deserializer",1315],[17,"PrivateKey"],[17,"StakeTableEntry"],[17,"QCParams"],[17,"PureAssembledSignatureType"],[17,"QCType"],[17,"SignError"],[6,"SerializationError",1348],[10,"Deserialize",1315],[10,"StakeTableEntryType",1349],[5,"TaggedBase64",1350],[10,"TryFrom",1326],[1,"array"],[5,"U256",1351],[5,"BitVec",1352],[6,"MessagePurpose",1353],[10,"Stream",1354],[8,"NonZeroUsize",1329],[15,"Misc",166],[15,"InvalidState",166],[15,"InsufficientValidSignatures",166],[15,"TimeoutError",166],[15,"FailedToMessageLeader",166],[15,"FailedToBroadcast",166],[15,"BlockError",166],[15,"NetworkFault",166],[15,"ViewTimeoutError",166],[10,"CreateTaskState",214],[10,"TestableNodeImplementation",216],[15,"MultipleErrors",609],[15,"Libp2p",609],[15,"MemoryNetwork",609],[15,"PushCdnNetwork",609],[15,"CentralizedServer",609],[15,"WebServer",609],[15,"FailedToSerialize",609],[15,"FailedToDeserialize",609],[15,"Timeout",609],[15,"Libp2pMulti",609],[8,"StaticCommittee",355],[8,"PeerInfoVec",691],[8,"DelayedTasksLockedMap",619],[8,"BootstrapAddrs",691],[8,"TakeReceiver",691],[5,"ProductionDef",878],[5,"UserDef",878],[5,"BrokerDef",878],[5,"TestingDef",878],[15,"Decide",1219],[15,"Error",1219],[15,"DAProposal",1219],[15,"QuorumProposal",1219],[15,"UpgradeProposal",1219],[15,"Transactions",1219],[15,"ReplicaViewTimeout",1219],[15,"NextLeaderViewTimeout",1219],[15,"ViewFinished",1219],[15,"ViewTimeout",1219]],"b":[[68,"impl-Debug-for-HotShotError%3CTYPES%3E"],[69,"impl-Display-for-HotShotError%3CTYPES%3E"],[281,"impl-Debug-for-NetworkError"],[282,"impl-Display-for-NetworkError"],[583,"impl-Label-for-NetworkingMetrics"],[584,"impl-Gauge-for-NetworkingMetrics"],[798,"impl-ConnectedNetwork%3CM,+K%3E-for-Libp2pNetwork%3CM,+K%3E"],[799,"impl-Libp2pNetwork%3CM,+K%3E"],[909,"impl-ConnectedNetwork%3CMessage%3CTYPES%3E,+%3CTYPES+as+NodeType%3E::SignatureKey%3E-for-PushCdnNetwork%3CTYPES%3E"],[910,"impl-PushCdnNetwork%3CTYPES%3E"]]}],\
["hotshot_builder_api",{"doc":"","t":"CCCCCHHHFFFNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNOOONNNOOONNNOONNNNNNNNNNNNOONNNPFPFGPFPFGPPFPFFPFFPFPFNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNOONNNNNOHNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOKKMMMMMFNONNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["api","block_info","builder","data_source","query_data","load_api","load_toml","merge_toml","AvailableBlockData","AvailableBlockHeaderInput","AvailableBlockInfo","__clone_box","__clone_box","__clone_box","_phantom","block_hash","block_payload","block_size","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fee_signature","fmt","fmt","fmt","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","message_signature","metadata","offered_fee","pointer_metadata","pointer_metadata","pointer_metadata","sender","sender","sender","serialize","serialize","serialize","signature","signature","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vid_commitment","vid_precompute_data","vzip","vzip","vzip","BlockAvailable","BlockAvailableSnafu","BlockClaim","BlockClaimSnafu","BuildError","BuilderAddress","BuilderAddressSnafu","Custom","CustomSnafu","Error","Error","Missing","MissingSnafu","NotFound","NotFoundSnafu","Options","Request","RequestSnafu","Snafu","TxnSubmit","TxnSubmitSnafu","TxnUnpack","TxnUnpackSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","api_path","as_error","as_error","as_error_source","as_error_source","augment_args","augment_args_for_update","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","catch_all","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","define_api","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","extensions","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","group_id","header","header","in_current_span","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","message","message","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","resource","resource","serialize","serialize","source","source","status","status","submit_api","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_extract_param","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","message","message","resource","resource","source","source","source","source","source","source","status","AcceptsTxnSubmits","BuilderDataSource","claim_block","claim_block_header_input","get_available_blocks","get_builder_address","submit_txns","AvailableBlocksQueryData","__clone_box","blocks","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"hotshot_builder_api"],[5,"hotshot_builder_api::api"],[8,"hotshot_builder_api::block_info"],[113,"hotshot_builder_api::builder"],[455,"hotshot_builder_api::builder::BuildError"],[456,"hotshot_builder_api::builder::Error"],[466,"hotshot_builder_api::data_source"],[473,"hotshot_builder_api::query_data"],[505,"core::option"],[506,"tide_disco::api"],[507,"tide_disco::api"],[508,"std::path"],[509,"core::convert"],[510,"toml::value"],[511,"core::iter::traits::collect"],[512,"vbs::version"],[513,"dyn_clone::sealed"],[514,"core::clone"],[515,"hotshot_types::traits::node_implementation"],[516,"serde::de"],[517,"rkyv::with"],[518,"core::cmp"],[519,"core::fmt"],[520,"core::fmt"],[521,"core::marker"],[522,"core::hash"],[523,"core::alloc::layout"],[524,"core::any"],[525,"core::error"],[526,"clap_builder::builder::command"],[527,"std::backtrace"],[528,"alloc::string"],[529,"core::convert"],[530,"core::marker"],[531,"tide_disco::request"],[532,"clap_builder::parser::matches::arg_matches"],[533,"clap_builder"],[534,"clap_builder::util::id"],[535,"color_eyre::section"],[536,"core::fmt"],[537,"core::convert"],[538,"core::future::future"],[539,"alloc::boxed"],[540,"core::pin"],[541,"hotshot_types::vid"],[542,"alloc::vec"],[543,"core::default"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SNAFU context selector for the <code>Error::BlockAvailable</code> …","","SNAFU context selector for the <code>Error::BlockClaim</code> variant","","","SNAFU context selector for the <code>Error::BuilderAddress</code> …","","SNAFU context selector for the <code>Error::Custom</code> variant","","There was an error while trying to fetch the requested …","The requested resource exists but is not currently …","SNAFU context selector for the <code>BuildError::Missing</code> variant","The requested resource does not exist or is not known to …","SNAFU context selector for the <code>BuildError::NotFound</code> variant","","","SNAFU context selector for the <code>Error::Request</code> variant","SNAFU context selector for the <code>BuildError::Error</code> variant","","SNAFU context selector for the <code>Error::TxnSubmit</code> variant","","SNAFU context selector for the <code>Error::TxnUnpack</code> variant","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Additional API specification files to merge with …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","to claim a block from the list of provided available blocks","To claim a block header input","To get the list of available blocks","To get the builder address","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,14,17,18,14,14,17,14,14,17,18,14,17,18,14,17,18,14,17,18,14,17,18,14,17,18,14,14,17,17,18,18,14,17,18,14,17,18,14,14,14,14,17,17,17,17,18,18,18,18,18,14,17,18,14,17,18,14,17,18,14,17,18,14,17,18,14,17,18,14,17,18,18,17,14,14,17,18,14,17,18,14,17,18,14,17,14,17,18,14,17,18,14,17,18,14,17,18,18,18,14,17,18,40,0,40,0,0,40,0,40,0,0,38,38,0,38,0,0,40,0,0,40,0,40,0,41,42,43,38,48,49,50,51,52,53,46,40,54,38,40,38,40,54,54,38,40,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,38,48,49,50,51,52,53,46,40,41,42,43,46,40,38,40,41,42,43,38,48,49,50,51,52,53,46,40,41,42,43,38,48,49,50,51,52,53,46,40,54,0,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,38,48,49,50,51,52,53,46,40,38,40,54,41,42,43,38,38,48,49,50,51,52,53,46,40,40,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,46,41,42,43,38,38,48,49,50,51,52,53,46,40,40,54,41,42,43,38,48,49,50,51,52,53,46,40,40,40,54,54,54,38,40,38,40,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,38,48,49,50,51,52,53,46,40,41,42,43,48,49,50,51,52,53,46,54,41,42,43,38,48,49,50,51,52,53,46,40,43,46,54,41,42,43,38,48,49,50,51,52,53,46,40,49,50,38,40,38,40,40,46,0,41,42,43,38,48,49,50,51,52,53,46,40,38,40,0,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,38,48,49,50,51,52,53,46,40,54,54,54,41,42,43,38,48,49,50,51,52,53,46,40,78,79,80,81,82,80,81,83,84,85,79,0,0,69,69,69,69,65,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76],"f":"`````{{{b{c}}de}{{j{{f{gik}}h}}}{{n{l}}}{{Ad{}{{A`{Ab}}}}}{}{}Af}{l{{j{Abh}}}}{{AbAb}Ah}```{{cAj}Ah{}}00````{ce{}{}}00000{{{Al{c}}}{{Al{c}}}{AnB`}}{{{Bb{c}}}{{Bb{c}}}{AnB`}}{{{Bd{c}}}{{Bd{c}}}{AnB`}}{{ce}Ah{}{}}00{Bfc{}}00000{c{{j{{Al{e}}}}}BhB`}{{ce}{{j{{Bj{gi}}}}}{}{}{}{}}{c{{j{{Bb{e}}}}}BhB`}11{c{{j{{Bd{e}}}}}BhB`}{BfAh}00{{{Al{c}}{Al{c}}}Bl{BnB`}}{{{Bb{c}}{Bb{c}}}Bl{BnB`}}{{{Bd{c}}{Bd{c}}}Bl{BnB`}}{{ce}Bl{}{}}00000000000`{{{Al{c}}C`}Cb{CdB`}}{{{Bb{c}}C`}Cb{CdB`}}{{{Bd{c}}C`}Cb{CdB`}}{cc{}}00{{ce}Cf{ChCj}Cl}00{{{Al{c}}e}Ah{ChB`}Cn}{{{Bb{c}}e}Ah{ChB`}Cn}{{{Bd{c}}e}Ah{ChB`}Cn}{{}Bf}00{ce{}{}}00{{}{{j{D`Db}}}}00```{{}}00```{{{Al{c}}e}jB`Dd}{{{Bb{c}}e}jB`Dd}{{{Bd{c}}e}jB`Dd}``555{c{{j{e}}}{}{}}00000{cDf{}}00``777```````````````````````{{cAj}Ah{}}00000000000`{cDh{}}000{DjDj}0{Dl{{b{Dn}}}}{E`{{b{Dn}}}}<<<<<<<<<<<<<<<<<<<<<<<<<<{EbDl}{EdDl}{{{Ef{c}}}Dl{{Ej{Eh}}}}{{{El{ce}}}E`{{Ej{Eh}}}{{Ej{En}}}}{{EnEh}E`}{Dl{{b{Dh}}}}{E`{{b{Dh}}}}{EbEb}{EdEd}{{{Ef{c}}}{{Ef{c}}}An}{DlDl}{F`F`}{{{Fb{c}}}{{Fb{c}}}An}{{{Fd{c}}}{{Fd{c}}}An}{FfFf}{FhFh}{FjFj}{{{El{ce}}}{{El{ce}}}AnAn}{E`E`}{{ce}Ah{}{}}00000000000{{}Fl}{Fl{{j{{f{cE`e}}h}}}{FnG`Gb}Af}{Bfc{}}0000000000000000000000000{Dld}{E`d}{{ce}{{j{{Bj{gi}}}}}{}{}{}{}}000{c{{j{Dl}}}Bh}11111111{c{{j{E`}}}Bh}2{BfAh}000000000000`{Eb{{j{cDl}}}{}}{Ed{{j{cDl}}}{}}{{{Ef{c}}}{{j{eDl}}}{{Ej{Eh}}}{}}{{{El{ce}}}{{j{gE`}}}{{Ej{Eh}}}{{Ej{En}}}{}}{{EbC`}Cb}{{EdC`}Cb}{{{Ef{c}}C`}CbCd}{{DlC`}Cb}0{{F`C`}Cb}{{{Fb{c}}C`}CbCd}{{{Fd{c}}C`}CbCd}{{FfC`}Cb}{{FhC`}Cb}{{FjC`}Cb}{{{El{ce}}C`}CbCdCd}{{E`C`}Cb}0{cc{}}000000000000{{{Gd{EhEn}}}E`}{GfE`}{Gh{{j{FlGj}}}}0{{}{{b{Gl}}}}{{ce}{{Gn{eg}}}{}{H`FnG`}{}}0{c{}{}}0{{}Bf}000000000000{ce{}{}}000000000000{{Ebc}Dl{}}{{Edc}Dl{}}{{{Ef{c}}e}Dl{{Ej{Eh}}}{}}{{F`c}E`{}}{{{Fb{c}}e}E`{{Ej{Eh}}}{}}{{{Fd{c}}e}E`{{Ej{Eh}}}{}}{{Ffc}E`{}}{{Fhc}E`{}}{{Fjc}E`{}}{{{El{ce}}g}E`{{Ej{Eh}}}{{Ej{En}}}{}}{{}{{j{D`Db}}}}000000000000``{{}}000000000000``{{Dlc}jDd}{{E`c}jDd}{Dl{{b{Dh}}}}{E`{{b{Dh}}}}{E`En}`{Fl{{j{{f{eE`g}}h}}}B`{FnG`{Hb{c}}}Af}{ce{}{}}00000000000{cEh{}}0{{Hdd}{{j{cE`}}}{{Hh{Hf}}}}{c{{j{e}}}{}{}}0000000000000000000000000{cDf{}}000000000000{{FlGh}{{j{AhGj}}}}05555555555555`````````````{{HjHlCf}{{Ib{{I`{Hn}}}}}}0{{HjIdCf}{{Ib{{I`{Hn}}}}}}{Hj{{Ib{{I`{Hn}}}}}}{{HbIf}{{Ib{{I`{Hn}}}}}}`{{cAj}Ah{}}`::{{{Ih{c}}}{{Ih{c}}}{AnB`}}{{ce}Ah{}{}}{{}{{Ih{c}}}{IjB`}}{Bfc{}}0{c{{j{{Ih{e}}}}}BhB`}{{ce}{{j{{Bj{gi}}}}}{}{}{}{}}{BfAh}{{{Ih{c}}{Ih{c}}}Bl{BnB`}}{{ce}Bl{}{}}000{{{Ih{c}}C`}Cb{CdB`}}{cc{}}{{ce}Cf{ChCj}Cl}{{{Ih{c}}e}Ah{ChB`}Cn}{{}Bf}{ce{}{}}{{}{{j{D`Db}}}}{{}}{{{Ih{c}}e}jB`Dd}3{c{{j{e}}}{}{}}0{cDf{}}5","c":[],"p":[[6,"Option",505],[1,"str"],[5,"Api",506],[6,"ApiError",506],[6,"Result",507],[5,"Path",508],[10,"AsRef",509],[17,"Item"],[6,"Value",510],[10,"IntoIterator",511],[10,"StaticVersionType",512],[1,"unit"],[5,"Private",513],[5,"AvailableBlockInfo",8],[10,"Clone",514],[10,"NodeType",515],[5,"AvailableBlockData",8],[5,"AvailableBlockHeaderInput",8],[1,"usize"],[10,"Deserializer",516],[5,"With",517],[1,"bool"],[10,"PartialEq",518],[5,"Formatter",519],[8,"Result",519],[10,"Debug",519],[1,"u64"],[10,"Hash",520],[10,"Sized",521],[10,"BuildHasher",520],[10,"Hasher",520],[5,"Layout",522],[5,"LayoutError",522],[10,"Serializer",523],[5,"TypeId",524],[10,"Error",525],[5,"Command",526],[6,"BuildError",113],[5,"Backtrace",527],[6,"Error",113],[5,"NotFoundSnafu",113],[5,"MissingSnafu",113],[5,"Snafu",113],[5,"String",528],[10,"Into",509],[5,"CustomSnafu",113],[6,"StatusCode",529],[5,"RequestSnafu",113],[5,"BlockAvailableSnafu",113],[5,"BlockClaimSnafu",113],[5,"TxnUnpackSnafu",113],[5,"TxnSubmitSnafu",113],[5,"BuilderAddressSnafu",113],[5,"Options",113],[10,"Send",521],[10,"Sync",521],[10,"ReadState",530],[1,"tuple"],[6,"RequestError",531],[5,"ArgMatches",532],[8,"Error",533],[5,"Id",534],[5,"IndentedSection",535],[10,"Display",519],[10,"AcceptsTxnSubmits",466],[5,"RequestParams",531],[5,"TaggedBase64",536],[10,"TryFrom",509],[10,"BuilderDataSource",466],[5,"BuilderCommitment",537],[10,"Future",538],[5,"Box",539],[5,"Pin",540],[8,"VidCommitment",541],[5,"Vec",542],[5,"AvailableBlocksQueryData",473],[10,"Default",543],[15,"Error",455],[15,"Custom",456],[15,"BlockAvailable",456],[15,"BlockClaim",456],[15,"Request",456],[15,"TxnUnpack",456],[15,"TxnSubmit",456],[15,"BuilderAddress",456]],"b":[[280,"impl-Display-for-BuildError"],[281,"impl-Debug-for-BuildError"],[289,"impl-Display-for-Error"],[290,"impl-Debug-for-Error"],[304,"impl-From%3C(String,+StatusCode)%3E-for-Error"],[305,"impl-From%3CRequestError%3E-for-Error"]]}],\
["hotshot_example_types",{"doc":"","t":"CCCCFFFFNNNNNONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNFFFFIFFNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFEFNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNFFINNNNONNNNNNNNONNNNNNNNNNNNNNNNONNNNNNNONNNNNNNNNNONN","n":["block_types","node_types","state_types","storage_types","TestBlockHeader","TestBlockPayload","TestMetadata","TestTransaction","__clone_box","__clone_box","__clone_box","__clone_box","block_number","block_number","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder_commitment","builder_commitment","builder_commitment","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","commit","commit","compare","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","encode","encode","encode","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bytes","from_transactions","genesis","genesis","genesis","genesis","get_hash","get_hash","get_hash","get_hash","get_transactions","hash","hash","hash","hash","header","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","metadata","new","partial_cmp","payload_commitment","payload_commitment","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","tag","tag","timestamp","to_owned","to_owned","to_owned","to_owned","to_string","transactions","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","txn_count","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CombinedImpl","Libp2pImpl","MemoryImpl","PushCdnImpl","StaticMembership","TestTypes","WebImpl","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_type_phantom","all_nodes_with_stake","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","committee_nodes_with_stake","committee_nodes_without_stake","compare","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fixed_leader_for_gpuvid","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","init","init","init","init","init","init","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","TestInstanceState","TestStateDelta","TestTypes","TestValidatedState","__clone_box","__clone_box","__clone_box","block_height","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","commit","create_random_transaction","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_header","genesis","get_hash","hash","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","on_commit","pointer_metadata","pointer_metadata","pointer_metadata","prev_state_commitment","serialize","serialize","tag","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate_and_apply_header","vzip","vzip","vzip","TestStorage","TestStorageState","VidShares","__clone_box","__clone_box","append_da","append_vid","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","das","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","inner","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","record_action","should_return_err","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_high_qc","update_undecided_state","vids","vzip","vzip"],"q":[[0,"hotshot_example_types"],[4,"hotshot_example_types::block_types"],[157,"hotshot_example_types::node_types"],[347,"hotshot_example_types::state_types"],[434,"hotshot_example_types::storage_types"],[489,"dyn_clone::sealed"],[490,"hotshot_types::utils"],[491,"core::cmp"],[492,"committable"],[493,"core::result"],[494,"serde::de"],[495,"rkyv::with"],[496,"alloc::vec"],[497,"hotshot_types::data"],[498,"alloc::sync"],[499,"core::fmt"],[500,"core::fmt"],[501,"hotshot_types::vid"],[502,"core::hash"],[503,"core::marker"],[504,"core::hash"],[505,"core::hash"],[506,"core::fmt"],[507,"core::alloc::layout"],[508,"hotshot_types::vid"],[509,"core::option"],[510,"serde::ser"],[511,"alloc::string"],[512,"core::any"],[513,"rand_core"],[514,"hotshot_types::data"],[515,"core::future::future"],[516,"alloc::boxed"],[517,"core::pin"],[518,"hotshot_types::data"],[519,"core::fmt"],[520,"hotshot_types::simple_certificate"],[521,"hotshot_types::consensus"],[522,"hotshot_types::utils"]],"d":["block types","node types","Implementations for testing/examples Implementations for …","storage types for hotshot storage","A <code>BlockHeader</code> that commits to <code>TestBlockPayload</code>.","A <code>BlockPayload</code> that contains a list of <code>TestTransaction</code>.","","The transaction in a <code>TestBlockPayload</code>.","","","","","","Block number.","","","","","","","","","","","Fast commitment for builder verification","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encode a list of transactions into bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Create a genesis block payload with bytes <code>vec![0]</code>, to be …","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","VID commitment to the payload.","","","","","","","","","","","Timestamp when this header was created.","","","","","","List of transactions.","","","","","","","","","","","","","","","","","","Combined Network implementation (libp2p + web sever)","Libp2p network implementation","Memory network implementation","The Push CDN implementation","static committee type alias","filler struct to implement node type and allow us to …","Web server network implementation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instance-level state implementation for testing purposes.","Application-specific state delta implementation for …","","Validated state implementation for testing purposes.","","","","the block height","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","the previous state commitment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","<code>should_return_err</code> is a testing utility to validate …","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,7,5,8,3,3,3,7,5,8,3,7,5,8,3,5,3,3,7,5,8,3,7,5,8,3,8,7,3,8,7,7,5,8,3,7,5,8,3,7,7,5,5,8,8,3,3,7,5,8,3,7,5,8,7,5,8,3,7,7,7,7,5,5,5,5,8,8,8,8,3,3,3,3,7,5,5,8,3,7,5,8,3,5,5,5,5,5,3,7,5,8,3,5,7,5,8,3,5,7,5,8,3,7,5,8,3,7,5,8,3,3,3,8,3,3,7,5,8,3,7,5,8,3,7,3,3,7,5,8,3,5,5,7,5,8,3,7,5,8,3,5,7,5,8,3,7,5,8,3,0,0,0,0,0,0,0,48,49,50,51,52,53,73,73,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,73,73,48,48,48,49,50,51,52,53,48,49,50,51,52,53,48,48,49,49,50,50,51,51,52,52,53,53,48,49,50,51,52,53,48,49,50,51,52,53,48,48,48,48,49,49,49,49,50,50,50,50,51,51,51,51,52,52,52,52,53,53,53,53,73,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,0,0,0,0,54,55,56,56,54,55,56,54,55,56,54,55,56,54,55,56,56,56,54,55,56,54,55,56,54,55,56,54,55,55,56,56,54,55,56,56,56,56,56,56,54,55,56,54,55,56,56,56,56,56,54,55,56,54,55,56,54,55,56,56,54,55,56,56,55,56,56,54,55,56,54,55,56,54,55,56,54,55,56,56,54,55,56,0,0,0,65,58,58,58,74,65,58,65,58,65,58,65,58,65,65,58,65,58,65,58,65,58,65,58,65,58,65,58,65,58,58,65,58,65,58,65,58,58,58,65,58,65,58,65,58,65,58,58,58,65,65,58],"f":"````````{{cb}d{}}000{fh}`{ce{}{}}0000000{{jc}l{}}{fl}`{nn}{jj}{A`A`}{ff}{{ce}d{}{}}000{{A`A`}Ab}{n{{Ad{n}}}}{f{{Ad{f}}}}{{ce}Ab{}{}}{{}n}{Afc{}}0000000{c{{Ah{n}}}Aj}{{ce}{{Ah{{Al{gi}}}}}{}{}{}{}}0{c{{Ah{j}}}Aj}{c{{Ah{A`}}}Aj}2{c{{Ah{f}}}Aj}3{Afd}000{{{An{n}}}{{Ah{{Bb{B`}}Bd}}}}{j{{Ah{{Bf{{An{B`}}}}c}}}{}}{A`{{Bf{{An{B`}}}}}}{{nn}Bh}{{jj}Bh}{{A`A`}Bh}{{ff}Bh}{{ce}Bh{}{}}000000000000000{{nBj}Bl}{{jBj}Bl}0{{A`Bj}Bl}{{fBj}Bl}{cc{}}000{{{An{B`}}c}j{}}{{eg}{{Ah{{Bn{ji}}k}}}{}{{Cb{}{{C`{c}}}}}{}{}{}}{{}j}0{{}{{Bn{jc}}}{}}{{Cdl}f}{{ce}h{CfCh}Cj}000{{jc}{{`{{Cl{}{{C`{e}}}}}}}{}{}}{{nc}dCn}{{jc}dCn}{{A`c}dCn}{{fc}dCn}{{ce}{{D`{eg}}}{}{DbDdDf}{}}{{}Af}000{ce{}{}}000{{}{{Ah{DhDj}}}}000{f}{{{Dl{c}}Cdl{Dn{c}}E`}{{Ah{fe}}}{{Ef{}{{Eb{f}}{Ed{j}}}}}{}}{{A`A`}{{Eh{Ab}}}}{fCd}`{{}}000{{nc}AhEj}{{jc}AhEj}{{A`c}AhEj}{{fc}AhEj}{{}El}0`;;;;{cEl{}}`{c{{Ah{e}}}{}{}}0000000{jh}{cEn{}}000????```````{{cb}d{}}00000``{ce{}{}}00000000000{F`F`}{FbFb}{FdFd}{FfFf}{FhFh}{FjFj}{{ce}d{}{}}00000{{F`F`}Ab}``{{ce}Ab{}{}}{{}F`}{Afc{}}00000000000{{ce}{{Ah{{Al{gi}}}}}{}{}{}{}}{c{{Ah{F`}}}Aj}{c{{Ah{Fb}}}Aj}22{c{{Ah{Fd}}}Aj}3{c{{Ah{Ff}}}Aj}4{c{{Ah{Fh}}}Aj}5{c{{Ah{Fj}}}Aj}{Afd}00000{{F`F`}Bh}{{FbFb}Bh}{{FdFd}Bh}{{FfFf}Bh}{{FhFh}Bh}{{FjFj}Bh}{{ce}Bh{}{}}00000000000000000000000`{{F`Bj}Bl}{{FbBj}Bl}{{FdBj}Bl}{{FfBj}Bl}{{FhBj}Bl}{{FjBj}Bl}{cc{}}00000{{ce}h{CfCh}Cj}00000{{F`c}dCn}{{Fbc}dCn}{{Fdc}dCn}{{Ffc}dCn}{{Fhc}dCn}{{Fjc}dCn}{{}Af}00000{ce{}{}}00000{{}{{Ah{DhDj}}}}00000{{F`F`}{{Eh{Ab}}}}{{}}00000{{F`c}AhEj}{{Fbc}AhEj}{{Fdc}AhEj}{{Ffc}AhEj}{{Fhc}AhEj}{{Fjc}AhEj}999999{c{{Ah{e}}}{}{}}00000000000{cEn{}}00000;;;;;;````{{cb}d{}}00`<<<<<<{FlFl}{FnFn}{G`G`}{{ce}d{}{}}00{G`{{Ad{G`}}}}{{{Eh{G`}}Gbh}}{{}Fl}{{}Fn}{{}G`}{Afc{}}00000{{ce}{{Ah{{Al{gi}}}}}{}{}{}{}}{c{{Ah{Fn}}}Aj}11{c{{Ah{G`}}}Aj}{Afd}00{{G`G`}Bh}{{ce}Bh{}{}}000{{FlBj}Bl}{{FnBj}Bl}{{G`Bj}Bl}{cc{}}00;{c{{Bn{G`e}}}{}{}}{{ce}h{CfCh}Cj}{{G`c}dCn}{{}Af}00{ce{}{}}00{{}{{Ah{DhDj}}}}00{G`d}{{}}00`{{Fnc}AhEj}{{G`c}AhEj}{{}El}666{c{{Ah{e}}}{}{}}00000{cEn{}}00{{G`c{Dl{e}}E`}{{Ah{{Bn{G`g}}i}}}{}Ef{}{}}999```{{cb}d{}}0{{{Gd{c}}{Gh{c{Gf{c}}}}}{{Gn{{Gl{Gj}}}}}Ef}{{{Gd{c}}{Gh{c{H`{c}}}}}{{Gn{{Gl{Gj}}}}}Ef}`<<<<{{{Hb{c}}}{{Hb{c}}}{HdEf}}{{{Gd{c}}}{{Gd{c}}}{HdEf}}{{ce}d{}{}}0`{{}{{Hb{c}}}Ef}{{}{{Gd{c}}}Ef}{Afc{}}000{{ce}{{Ah{{Al{gi}}}}}{}{}{}{}}0{Afd}0{{{Hb{c}}Bj}Bl{HfEf}}{{{Gd{c}}Bj}Bl{HfEf}}{cc{}}0{{}Af}0`{ce{}{}}0{{}{{Ah{DhDj}}}}0{{}}0{{{Gd{c}}Hh}{{Gn{{Gl{Gj}}}}}Ef}`33{c{{Ah{e}}}{}{}}000{cEn{}}0{{{Gd{c}}{Hj{c}}}{{Gn{{Gl{Gj}}}}}Ef}{{{Gd{c}}{Hl{{Dl{c}}}}{I`{{Hn{c}}}}}{{Gn{{Gl{Gj}}}}}Ef}`77","c":[],"p":[[5,"Private",489],[1,"unit"],[5,"TestBlockHeader",4],[1,"u64"],[5,"TestBlockPayload",4],[5,"BuilderCommitment",490],[5,"TestTransaction",4],[5,"TestMetadata",4],[6,"Ordering",491],[5,"Commitment",492],[1,"usize"],[6,"Result",493],[10,"Deserializer",494],[5,"With",495],[1,"slice"],[1,"u8"],[5,"Vec",496],[6,"BlockError",497],[5,"Arc",498],[1,"bool"],[5,"Formatter",499],[8,"Result",499],[1,"tuple"],[17,"Item"],[10,"IntoIterator",500],[8,"VidCommitment",501],[10,"Hash",502],[10,"Sized",503],[10,"BuildHasher",502],[10,"Iterator",504],[10,"Hasher",502],[5,"IndentedSection",505],[10,"Display",499],[10,"Send",503],[10,"Sync",503],[5,"Layout",506],[5,"LayoutError",506],[5,"Leaf",497],[5,"BuilderFee",507],[8,"VidCommon",501],[17,"BlockHeader"],[17,"BlockPayload"],[10,"NodeType",508],[6,"Option",509],[10,"Serializer",510],[5,"String",511],[5,"TypeId",512],[5,"TestTypes",157],[5,"PushCdnImpl",157],[5,"MemoryImpl",157],[5,"Libp2pImpl",157],[5,"WebImpl",157],[5,"CombinedImpl",157],[5,"TestInstanceState",347],[5,"TestStateDelta",347],[5,"TestValidatedState",347],[10,"RngCore",513],[5,"TestStorage",434],[5,"DAProposal",497],[5,"Proposal",514],[10,"Future",515],[5,"Box",516],[5,"Pin",517],[5,"VidDisperseShare",497],[5,"TestStorageState",434],[10,"Clone",518],[10,"Debug",499],[6,"HotShotAction",519],[8,"QuorumCertificate",520],[8,"CommitmentMap",521],[5,"View",490],[5,"BTreeMap",522],[8,"StaticMembership",157],[8,"VidShares",434]],"b":[[82,"impl-Debug-for-TestBlockPayload"],[83,"impl-Display-for-TestBlockPayload"],[92,"impl-TestBlockPayload"],[93,"impl-TestableBlock-for-TestBlockPayload"],[94,"impl-BlockPayload-for-TestBlockPayload"]]}],\
["hotshot_macros",{"doc":"Macros for use in testing.","t":"FFGFFGKPPPPNNNNNNNNNNNNNNNNNNNNNNNNQHNNNNNNNNNNNNNNNNNNNNNOOOONOONOONNNNNNNCNNOOOONNNOOOOQMNNNNNNNNNNNNNNNNNNNOONNNNNNNOOFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNN","n":["CrossTestData","CrossTestDataBuilder","CrossTestDataBuilderError","TestData","TestDataBuilder","TestDataBuilderError","ToLowerSnakeStr","UninitializedField","UninitializedField","ValidationError","ValidationError","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","create_empty","create_empty","cross_tests","cross_tests_internal","default","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","generate_test","ignore","ignore","ignore","ignore","ignore","ignore","impls","impls","impls","imply","imply","imply","into","into","into","into","into","into","is_ready","keywords","metadata","metadata","metadata","metadata","metadata","metadata","parse","test_name","test_name","test_name","test_name","test_name","test_name","test_scripts","to_lower_snake_str","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","types","types","types","Ignore","Impls","Metadata","TestName","Types","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","display","display","display","display","display","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","parse","parse","parse","parse","parse","peek","peek","peek","peek","peek","span","span","span","span","span","span","span","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"hotshot_macros"],[121,"hotshot_macros::keywords"],[226,"core::result"],[227,"proc_macro"],[228,"core::fmt"],[229,"core::fmt"],[230,"alloc::string"],[231,"proc_macro2"],[232,"syn::lit"],[233,"syn::expr"],[234,"syn::expr"],[235,"syn::error"],[236,"proc_macro2"],[237,"syn::__private"],[238,"syn::__private"],[239,"syn::buffer"],[240,"proc_macro2"]],"d":["description of a crosstest","Builder for <code>CrossTestData</code>.","Error type for CrossTestDataBuilder","requisite data to generate a single test","Builder for <code>TestData</code>.","Error type for TestDataBuilder","trait make a string lower and snake case","Uninitialized field","Uninitialized field","Custom validation error","Custom validation error","","","","","","","","","","","","","Builds a new <code>CrossTestData</code>.","Builds a new <code>TestData</code>.","","","","","","","","","Create an empty builder, with all fields set to <code>None</code> or …","Create an empty builder, with all fields set to <code>None</code> or …","Generate a cartesian product of tests across all types …","Helper function to do the actual code gen allow panic …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","generate the code for a single test","whether or not to ignore","whether or not to ignore the test","whether or not to ignore","whether or not to ignore","whether or not to ignore the test","whether or not to ignore the test","imlementations","imlementations","imlementations","impl","impl","impl","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","if we’ve extracted all the metadata","macro specific custom keywords","test description/spec","test description","test description/spec","test description/spec","test description","test description","allow panic because this is a compiler error","name of the test","name of test","name of the test","name of the test","name of test","name of test","Macro to test multiple <code>TaskState</code> scripts at once.","make a lower and snake case string","","","","","","","","","","","","","","","","","","","type","type","type","","","","","","","types","types","types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,7,3,7,2,1,3,6,5,7,2,1,3,6,5,7,1,5,2,1,6,5,2,1,6,5,1,5,0,0,1,5,2,3,3,6,7,7,2,1,3,3,3,6,5,7,7,7,6,1,5,2,1,6,5,1,2,1,5,6,5,2,1,3,6,5,7,1,0,1,5,2,1,6,5,2,1,5,2,1,6,5,0,23,2,1,6,5,3,7,2,1,3,6,5,7,2,1,3,6,5,7,5,6,5,2,1,3,6,5,7,1,2,1,0,0,0,0,0,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29],"f":"```````````{ce{}{}}00000000000{b{{h{df}}}}{j{{h{ln}}}}{dd}{bb}{ll}{jj}{{ce}A`{}{}}000{{}b}{{}j}`{dAb}21{{dAd}Af}{{fAd}Af}0{{lAd}Af}{{nAd}Af}0{cc{}}0{Ahf}{Ajf}222{Ahn}{Ajn}4{lAl}{{bAn}b}{{jAn}j}````{{bB`}b}``{{jBb}j}``{ce{}{}}00000{bBd}`{{bBf}b}{{jBf}j}````{Bh{{Bj{d}}}}{{bBl}b}{{jBl}j}`````{BnAj}7777{cAj{}}0{c{{h{e}}}{}{}}00000000000:``{cC`{}}00000<```````::::::::::{CbCb}{CdCd}{CfCf}{ChCh}{CjCj}{{ce}A`{}{}}0000{{}Cb}{{}Cd}{{}Cf}{{}Ch}{{}Cj}{{}Cl}0000{{CbCb}Cn}{{CdCd}Cn}{{CfCf}Cn}{{ChCh}Cn}{{CjCj}Cn}{{CbD`}Db}{{CdD`}Db}{{CfD`}Db}{{ChD`}Db}{{CjD`}Db}{cc{}}0000{{Cbc}A`Dd}{{Cdc}A`Dd}{{Cfc}A`Dd}{{Chc}A`Dd}{{Cjc}A`Dd}{ce{}{}}0000{Bh{{Bj{Cb}}}}{Bh{{Bj{Cd}}}}{Bh{{Bj{Cf}}}}{Bh{{Bj{Ch}}}}{Bh{{Bj{Cj}}}}{DfBd}0000{cDh{}}0000`````77777{{CbDj}A`}{{CdDj}A`}{{CfDj}A`}{{ChDj}A`}{{CjDj}A`}{c{{h{e}}}{}{}}000000000{cC`{}}0000","c":[],"p":[[5,"CrossTestDataBuilder",0],[5,"CrossTestData",0],[6,"CrossTestDataBuilderError",0],[6,"Result",226],[5,"TestDataBuilder",0],[5,"TestData",0],[6,"TestDataBuilderError",0],[1,"unit"],[5,"TokenStream",227],[5,"Formatter",228],[8,"Result",228],[5,"UninitializedFieldError",229],[5,"String",230],[5,"TokenStream",231],[5,"LitBool",232],[5,"ExprArray",233],[5,"ExprPath",233],[1,"bool"],[6,"Expr",233],[8,"ParseStream",234],[8,"Result",235],[5,"Ident",231],[10,"ToLowerSnakeStr",0],[5,"TypeId",236],[5,"Metadata",121],[5,"Ignore",121],[5,"TestName",121],[5,"Types",121],[5,"Impls",121],[1,"str"],[8,"bool",237],[8,"Formatter",237],[8,"FmtResult",237],[10,"Hasher",238],[5,"Cursor",239],[5,"Span",231],[8,"TokenStream2",237]],"b":[[40,"impl-Debug-for-CrossTestDataBuilderError"],[41,"impl-Display-for-CrossTestDataBuilderError"],[43,"impl-Display-for-TestDataBuilderError"],[44,"impl-Debug-for-TestDataBuilderError"],[47,"impl-From%3CUninitializedFieldError%3E-for-CrossTestDataBuilderError"],[48,"impl-From%3CString%3E-for-CrossTestDataBuilderError"],[52,"impl-From%3CUninitializedFieldError%3E-for-TestDataBuilderError"],[53,"impl-From%3CString%3E-for-TestDataBuilderError"]]}],\
["hotshot_orchestrator",{"doc":"Orchestrator for manipulating nodes and recording results …","t":"SSSKFINOONNCNNCONHNNNNNNMNMNNNONHONOONMNONMNMNMNMNMNMNOMNHOONNNNNFFFFFNNNNOONNNNOONNNNNNNNNNONNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOONOONNNNNNNNONNOONNNNOOOOOOOOOONNNNNNNNNNNNNNNNNNNOONNNNNNNGFPPPPFFFFGFGSSSSPPFPPPFFPNNNNNNNNNNNNOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNOOOOOOOOONNNNNHONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNOOOOOOOONNNNNNNNNNOOOOOOOONNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNONOONNNNNNNNNNNNOOO","n":["ORCHESTRATOR_MAJOR_VERSION","ORCHESTRATOR_MINOR_VERSION","ORCHESTRATOR_VERSION","OrchestratorApi","OrchestratorState","OrchestratorVersion","__clone_box","accepting_new_keys","bench_results","borrow","borrow_mut","client","clone","clone_into","config","config","default","define_api","deref","deref_mut","deserialize","drop","from","get_election_type","get_start","get_start","get_tmp_node_index","get_tmp_node_index","init","into","latest_index","layout_raw","libp2p_generate_indexed_identity","manual_start_allowed","new","nodes_connected","nodes_post_results","output_to_csv","peer_pub_ready","peer_pub_ready","peer_pub_ready","pointer_metadata","post_config_after_peer_collected","post_config_after_peer_collected","post_getconfig","post_getconfig","post_identity","post_identity","post_manual_start","post_manual_start","post_ready","post_ready","post_run_results","post_run_results","pub_posted","register_public_key","register_public_key","run_orchestrator","start","tmp_latest_index","to_owned","try_from","try_into","type_id","vzip","BenchResults","BenchResultsDownloadConfig","MultiValidatorArgs","OrchestratorClient","ValidatorArgs","__clone_box","__clone_box","__clone_box","__clone_box","advertise_address","advertise_address","augment_args","augment_args","augment_args_for_update","augment_args_for_update","avg_latency_in_sec","avg_latency_in_sec","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","command","command","command_for_update","command_for_update","commit_sha","da_committee_size","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","failed_num_views","failed_num_views","fmt","fmt","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_multi_args","get_config_after_collection","get_config_without_peer","get_node_index_for_init_validator_config","group_id","group_id","init","init","init","init","init","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leader_election_type","maximum_latency_in_sec","maximum_latency_in_sec","minimum_latency_in_sec","minimum_latency_in_sec","network_config_file","network_config_file","new","num_latency","num_nodes","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","post_and_wait_all_public_keys","post_bench_results","printout","rounds","serialize","serialize","throughput_bytes_per_sec","throughput_bytes_per_sec","to_owned","to_owned","to_owned","to_owned","total_nodes","total_num_views","total_num_views","total_time_elapsed_in_sec","total_time_elapsed_in_sec","total_transactions_committed","total_transactions_committed","transaction_size","transaction_size_in_bytes","transactions_per_round","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","url","url","vzip","vzip","vzip","vzip","vzip","wait_for_all_nodes_ready","wait_for_fn_from_orchestrator","BuilderType","CombinedNetworkConfig","DeserializeError","External","FailedToCreatePath","File","HotShotConfigFile","Libp2pConfig","Libp2pConfigFile","NetworkConfig","NetworkConfigError","NetworkConfigFile","NetworkConfigSource","ORCHESTRATOR_DEFAULT_NUM_ROUNDS","ORCHESTRATOR_DEFAULT_START_DELAY_SECONDS","ORCHESTRATOR_DEFAULT_TRANSACTIONS_PER_ROUND","ORCHESTRATOR_DEFAULT_TRANSACTION_SIZE","Orchestrator","Random","RandomBuilderConfig","ReadFromFileError","SerializeError","Simple","ValidatorConfigFile","WebServerConfig","WriteToFileError","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error_source","blocks_per_second","bootstrap_mesh_n","bootstrap_mesh_n","bootstrap_mesh_n_high","bootstrap_mesh_n_high","bootstrap_mesh_n_low","bootstrap_mesh_n_low","bootstrap_mesh_outbound_min","bootstrap_mesh_outbound_min","bootstrap_nodes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","builder","builder_timeout","builder_timeout","builder_timeout","builder_url","cdn_marshal_address","cdn_marshal_address","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combined_network_config","combined_network_config","commit_sha","config","config","da_web_server_config","da_web_server_config","data_request_delay","data_request_delay","default","default","default","default","default","default_builder_url","delay_duration","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fixed_leader_for_gpuvid","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_file","from_file","from_file_or_orchestrator","generate_init_validator_config","get_complete_config","header","in_current_span","indexed_da","indexed_da","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","is_da","key_type_name","known_da_nodes","known_nodes_with_stake","known_nodes_without_stake","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","libp2p_config","libp2p_config","manual_start_password","manual_start_password","mesh_n","mesh_n","mesh_n_high","mesh_n_high","mesh_n_low","mesh_n_low","mesh_outbound_min","mesh_outbound_min","my_own_validator_config","next_view_timeout","next_view_timeout","next_view_timeout","node_id","node_index","node_index","node_index","non_staked_committee_nodes","num_bootrap","num_bootstrap","num_nodes_with_stake","num_nodes_without_stake","num_txn_per_round","online_time","online_time","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","random_builder","random_builder","round_start_delay","rounds","rounds","seed","seed","seed","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","server_mode","server_mode","staked_committee_nodes","start_delay","start_delay_seconds","start_delay_seconds","start_threshold","timeout_ratio","to_file","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_possible_value","to_string","transaction_size","transaction_size","transactions_per_round","transactions_per_round","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txn_in_block","txn_size","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","url","value_variants","view_sync_timeout","view_sync_timeout","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_between_polls","web_server_config","web_server_config"],"q":[[0,"hotshot_orchestrator"],[65,"hotshot_orchestrator::client"],[234,"hotshot_orchestrator::config"],[624,"dyn_clone::sealed"],[625,"core::clone"],[626,"hotshot_types::traits::signature_key"],[627,"core::default"],[628,"tide_disco::error"],[629,"tide_disco::api"],[630,"tide_disco::api"],[631,"core::marker"],[632,"core::marker"],[633,"tide_disco::method"],[634,"rkyv::with"],[635,"alloc::string"],[636,"serde::ser"],[637,"core::alloc::layout"],[638,"core::alloc::layout"],[639,"multiaddr"],[640,"core::option"],[641,"libp2p_identity::peer_id"],[642,"alloc::vec"],[643,"url"],[644,"std::io::error"],[645,"core::any"],[646,"clap_builder::builder::command"],[647,"serde::de"],[648,"core::fmt"],[649,"core::fmt"],[650,"clap_builder"],[651,"core::net::socket_addr"],[652,"anyhow"],[653,"clap_builder::util::id"],[654,"hotshot_types"],[655,"serde::ser"],[656,"surf_disco::client"],[657,"core::ops::function"],[658,"core::error"],[659,"core::fmt"],[660,"core::fmt"]],"d":["Orchestrator is not, strictly speaking, bound to the …","Orchestrator Version (minor)","Orchestrator Version as a type-binding instance","An api exposed by the orchestrator","The state of the orchestrator","Orchestrator Version as a type","","Whether we are still accepting new keys for registration","The results of the benchmarks","","","The orchestrator’s clients","","","Configuration for the orchestrator","The network configuration","","Sets up all API routes","","","","","Returns the argument unchanged.","get election type in use","get endpoint for whether or not the run has started","","get endpoint for the next available temporary node index","","","Calls <code>U::from(self)</code>.","Tracks the latest node index we have generated a …","","Generate an keypair based on a <code>seed</code> and an <code>index</code>","Whether the orchestrator can be started manually","create a new <code>OrchestratorState</code>","The total nodes that have posted they are ready to start","The number of nodes that have posted their results","Output the results to a csv file according to orchestrator …","post endpoint for whether or not all peers public keys are …","","Whether the network configuration has been updated with …","","get endpoint for the network config after all peers public …","","post endpoint for each node’s config","","Post an identity to the orchestrator. Takes in optional …","Post an identity to the orchestrator. Takes in optional …","post endpoint for manually starting the orchestrator","Manually start the network","post endpoint for whether or not all nodes are ready","","post endpoint for the results of the run","","A map from public keys to <code>(node_index, is_da)</code>.","post endpoint for each node’s public key","","Runs the orchestrator","Whether nodes should start their HotShot instances Will be …","Tracks the latest temporary index we have generated for …","","","","","","Struct describing a benchmark result","Struct describing a benchmark result needed for download, …","arguments to run multiple validators","Holds the client connection to the orchestrator","Arguments passed to the validator","","","","","The optional advertise address to use for Libp2p","The optional advertise address to use for Libp2p","","","","","The average latency of the transactions","The average latency of the transactions","","","","","","","","","","","the client","","","","","","","","","","","","","The commit this benchmark was run on","The size of the da committee","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of failed views during benchmarking","The number of failed views during benchmarking","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Constructs <code>ValidatorArgs</code> from <code>MultiValidatorArgs</code> and a …","Requests the configuration from the orchestrator with the …","Get the config from the orchestrator. If the identity is …","Post to the orchestrator and get the latest <code>node_index</code> …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The type of leader election: static, fixed, random","The maximum latency of the transactions","The maximum latency of the transactions","The minimum latency of the transactions","The minimum latency of the transactions","An optional network config file to save to/load from …","An optional network config file to save to/load from …","Creates the client that will connect to the orchestrator","The number of transactions that were latency measured","Number of validators to run","","","","","","Sends my public key to the orchestrator so that it can …","Sends the benchmark metrics to the orchestrator","printout the results of one example run","The number of rounds","","","The throughput of the consensus protocol = number of …","The throughput of the consensus protocol = number of …","","","","","Total number of nodes","The total number of views during benchmarking","The total number of views during benchmarking","The total time elapsed for benchmarking","The total time elapsed for benchmarking","The number of transactions committed during benchmarking","The number of transactions committed during benchmarking","The size of each transaction in bytes","The size of each transaction in bytes","Number of transactions submitted per round","","","","","","","","","","","","","","","","","","","","The address the orchestrator runs on","The address the orchestrator runs on","","","","","","Tells the orchestrator this validator is ready to start …","Generic function that waits for the orchestrator to return …","configuration for builder type to use","configuration for combined network","Failed to deserialize loaded NetworkConfig","Use external builder, [config.builder_url] must be set to …","Failed to recursively create path to NetworkConfig","we source the network configuration from a config file on …","Holds configuration for a <code>HotShot</code>","Configuration describing a libp2p node","configuration serialized into a file","a network configuration","a network configuration error","a network config stored in a file","the source of the network config","default number of rounds to run","default delay before beginning consensus","default number of transactions per round","default size of transactions","we source the network configuration from the orchestrator","Random integrated builder will be started and used by each …","Options controlling how the random builder generates blocks","Failed to read NetworkConfig from file","Failed to serialize NetworkConfig","Simple integrated builder will be started and used by each …","Holds configuration for a validator node","configuration for a web server","Failed to write NetworkConfig to file","","","","","","","","","","","","","How many blocks to generate per second","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","bootstrap nodes (multiaddress, serialized public key)","","","","","","","","","","","","","","","","","","","","","","","","","builder to use","builder to use","The maximum amount of time a leader can wait to get a …","The maximum amount of time a leader can wait to get a …","The maximum amount of time a leader can wait to get a …","Builder API base URL","The address for the Push CDN’s “marshal”, A.K.A. …","The address of the Push CDN’s “marshal”, A.K.A. load …","","","","","","","","","","","","","","","","","","","","","combined network config","combined network config","the commit this run is based on","the hotshot config","the hotshot config file","the data availability web server config","the data availability web server config","time to wait until we request data associated with a …","Time to wait until we request data associated with a …","","","","","","Default builder URL, used as placeholder","delay duration before sending a message through the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of fixed leaders for GPU VID","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads a <code>NetworkConfig</code> from a file.","read the validator config from a file","Asynchronously retrieves a <code>NetworkConfig</code> either from a …","Get a temporary node index for generating a validator …","Asynchronously retrieves a <code>NetworkConfig</code> from an …","","","whether DA membership is determined by index. if true, the …","number of views to run","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether or not we are DA","name of the key type (for debugging)","The known DA nodes’ public key and stake values","The known nodes’ public key and stake value","The known non-staking nodes’","","","","","","","","","","","","","the libp2p config","the libp2p config","password to have the orchestrator start the network, …","password to have the orchestrator start the network, …","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","My own public key, secret key, stake value","timeout before starting the next view","timeout before starting the next view","Base duration for next-view timeout, in milliseconds","The validator’s index, which can be treated as another …","global index of node (for testing purposes a uid)","global index of node (for testing purposes a uid)","global index of node (for testing purposes a uid)","Number of non-staking committee nodes","number of bootstrap nodes","Number of network bootstrap nodes","Total number of staked nodes in the network","Total number of non-staked nodes in the network","number of transactions per view","time node has been running","time node has been running","","","","","","","","","","","","","random builder config","random builder configuration","The delay a leader inserts before starting pre-commit, in …","number of views to run","number of views to run","unique seed (for randomness? TODO)","unique seed (for randomness? TODO)","The validator’s seed","","","","","","","","","","","whether to start in libp2p::kad::Mode::Server mode","whether to start in libp2p::kad::Mode::Server mode","Number of staking committee nodes","Delay after init before starting consensus, in milliseconds","delay before beginning consensus","delay before beginning consensus","The proportion of nodes required before the orchestrator …","The exponential backoff ration for the next-view timeout","Serializes the <code>NetworkConfig</code> and writes it to a file.","","","","","","","","","","","","","size of transactions","size of transactions","number of transactions per view","number of transactions per view","","","","","","","","","","","","","","","","","","","","","","","","","How many transactions to include in a block","Range of how big a transaction can be (in bytes)","","","","","","","","","","","","","the url to run on","","timeout before starting next view sync round","Duration for view sync round timeout","","","","","","","","","","","","","the time to wait between polls","the webserver config","the webserver config"],"i":[0,0,0,0,0,0,3,3,3,3,3,0,3,3,0,3,3,0,3,3,3,3,3,3,19,3,19,3,3,3,3,3,0,3,3,3,3,3,19,3,3,3,19,3,19,3,19,3,19,3,19,3,19,3,3,19,3,0,3,3,3,3,3,3,3,0,0,0,0,0,34,40,41,42,41,42,41,42,41,42,34,40,48,34,40,41,42,48,34,40,41,42,48,34,40,41,42,34,40,41,42,41,42,41,42,40,40,34,40,48,34,40,41,42,48,34,40,41,42,48,34,34,40,40,41,42,48,34,40,41,42,34,40,34,40,34,40,41,42,48,34,40,41,42,41,42,41,42,41,48,48,48,41,42,48,34,40,41,42,48,34,40,41,42,48,34,40,41,42,40,34,40,34,40,41,42,48,34,42,48,34,40,41,42,48,48,34,40,34,40,34,40,34,40,41,42,40,34,40,34,40,34,40,40,34,40,48,34,40,41,42,48,34,40,41,42,48,34,40,41,42,41,42,41,42,41,42,48,34,40,41,42,48,48,0,0,69,64,69,72,0,0,0,0,0,0,0,0,0,0,0,72,64,0,69,69,64,0,0,69,60,61,62,63,64,65,29,66,67,68,69,69,65,60,61,60,61,60,61,60,61,60,72,60,61,62,63,69,64,65,29,66,67,68,72,60,61,62,63,69,64,65,29,66,67,68,29,66,60,29,67,67,29,66,60,61,62,63,64,65,29,66,67,68,60,61,62,63,64,65,29,66,67,68,29,66,29,29,66,29,66,29,67,64,65,29,67,68,0,63,72,60,61,62,63,69,64,65,29,66,67,68,72,60,61,62,63,69,64,65,29,66,67,68,72,60,60,61,61,62,62,63,63,69,64,64,65,65,29,29,66,66,67,67,68,68,72,60,61,62,63,69,64,65,29,66,67,68,67,60,61,62,63,69,69,64,65,29,66,67,68,72,60,61,62,63,69,64,65,29,29,66,67,68,29,68,29,29,29,69,69,29,66,72,60,61,62,63,69,64,65,29,66,67,68,72,60,61,62,63,69,64,65,29,66,67,68,68,29,67,67,67,72,60,61,62,63,69,64,65,29,66,67,68,29,66,29,66,60,61,60,61,60,61,60,61,67,60,29,67,68,60,29,66,67,29,67,67,67,60,60,61,72,60,61,62,63,69,64,65,29,66,67,68,29,66,67,29,66,29,66,68,60,61,62,63,64,65,29,66,67,68,60,61,67,67,29,66,67,67,29,60,61,62,63,64,65,29,66,67,68,64,69,29,66,29,66,72,60,61,62,63,69,64,65,29,66,67,68,72,60,61,62,63,69,64,65,29,66,67,68,65,65,72,60,61,62,63,69,64,65,29,66,67,68,62,64,29,67,72,60,61,62,63,69,64,65,29,66,67,68,62,29,66],"f":"``````{{cb}d{}}``{ce{}{}}0`{{{f{c}}}{{f{c}}}{hj}}{{ce}d{}{}}``{{}{{f{c}}}{lj}}{{}{{Ad{{A`{cne}}Ab}}}{AfAhAjAl}An}{B`c{}}0{{ce}{{Ad{{Bb{gi}}}}}{}{}{}{}}{B`d}{cc{}}{{}Bd}{Bf{{Ad{Bhn}}}}{{{f{c}}}{{Ad{Bhn}}}{Bjhj}}{Bf{{Ad{Bln}}}}{{{f{c}}}{{Ad{Bln}}}{Bjhj}}{{}B`}>`{{}{{Ad{BnC`}}}}{{{Cd{Cb}}Cf}Ch}`{{{Cj{c}}}{{f{c}}}j}``{{{f{c}}}dj}87`{{}}{Bf{{Ad{{Cj{c}}n}}}j}{{{f{c}}}{{Ad{{Cj{c}}n}}}{Bjhj}}{{BfBl}{{Ad{{Cj{c}}n}}}j}{{{f{c}}Bl}{{Ad{{Cj{c}}n}}}{Bjhj}}{{Bf{Cn{Cl}}{Cn{D`}}}{{Ad{Bln}}}}{{{f{c}}{Cn{Cl}}{Cn{D`}}}{{Ad{Bln}}}{Bjhj}}{{Bf{Db{Cb}}}{{Ad{dn}}}}{{{f{c}}{Db{Cb}}}{{Ad{dn}}}{Bjhj}}{Bf{{Ad{dn}}}}{{{f{c}}}{{Ad{dn}}}{Bjhj}}{{BfDd}{{Ad{dn}}}}{{{f{c}}Dd}{{Ad{dn}}}{Bjhj}}`{{Bf{Db{Cb}}Bh{Cn{Cl}}{Cn{D`}}}{{Ad{{Df{CfBh}}n}}}}{{{f{c}}{Db{Cb}}Bh{Cn{Cl}}{Cn{D`}}}{{Ad{{Df{CfBh}}n}}}{Bjhj}}{{{Cj{c}}Dh}{{Dj{d}}}{jBj}}``{ce{}{}}{c{{Ad{e}}}{}{}}0{cDl{}}2`````{{cb}d{}}000``{DnDn}000``4444444444`{DdDd}{E`E`}{EbEb}{EdEd}{{ce}d{}{}}000{{}Dn}000``{{}Dd}{{}E`}{B`c{}}000000000{{ce}{{Ad{{Bb{gi}}}}}{}{}{}{}}{c{{Ad{Dd}}}Ef}1{c{{Ad{E`}}}Ef}222{B`d}0000{{DdDd}Bh}{{E`E`}Bh}``{{DdEh}Ej}{{E`Eh}Ej}{{EbEh}Ej}{{EdEh}Ej}{cc{}}0000{El{{Ad{EbEn}}}}{El{{Ad{EdEn}}}}10{{EdBl}Eb}{F`{{Cj{c}}}j}{{F`{Cn{Fb}}{Cn{D`}}}{{Fd{{Cj{c}}}}}j}{F`Bl}{{}{{Cn{Ff}}}}0{{}B`}0000{ce{}{}}0000{{}{{Ad{BnC`}}}}0000```````{EbF`}``{{}}0000{{F`{Fh{c}}{Cn{Fb}}{Cn{D`}}}{{Cj{c}}}j}{{F`Dd}d}{Ddd}`{{Ddc}AdFj}{{E`c}AdFj}``8888``````````{c{{Ad{e}}}{}{}}000000000{cDl{}}0000{{EbEl}{{Ad{dEn}}}}{{EdEl}{{Ad{dEn}}}}10``<<<<<{{F`Cf}Bh}{{F`g}c{}{{Fn{}{{Fl{{Ad{cn}}}}}}}{{Gd{{Gb{nG`}}}{{Fl{e}}}}}}``````````````````````````{{cb}d{}}000000000{cGf{}}0``````````{ce{}{}}00000000000000000000000````````{GhGh}{GjGj}{GlGl}{GnGn}{H`H`}{HbHb}{{{Cj{c}}}{{Cj{c}}}{hj}}{{{Hd{c}}}{{Hd{c}}}{hj}}{{{Hf{c}}}{{Hf{c}}}{hj}}{HhHh}{{ce}d{}{}}000000000`````````{{}H`}{{}Hb}{{}{{Cj{c}}}j}{{}{{Hf{c}}}j}{{}Hh}{{}Dh}`{B`c{}}00000000000000000000000{{ce}{{Ad{{Bb{gi}}}}}{}{}{}{}}0{c{{Ad{Gh}}}Ef}{c{{Ad{Gj}}}Ef}2{c{{Ad{Gl}}}Ef}3{c{{Ad{Gn}}}Ef}44{c{{Ad{H`}}}Ef}55{c{{Ad{Hb}}}Ef}{c{{Ad{{Cj{e}}}}}Efj}7{c{{Ad{{Hd{e}}}}}Efj}8{c{{Ad{{Hf{e}}}}}Efj}99{c{{Ad{Hh}}}Ef}{B`d}00000000000`{{GhEh}Ej}{{GjEh}Ej}{{GlEh}Ej}{{GnEh}Ej}{{HjEh}Ej}0{{H`Eh}Ej}{{HbEh}Ej}{{{Cj{c}}Eh}Ej{Hlj}}{{{Hd{c}}Eh}Ej{Hlj}}{{{Hf{c}}Eh}Ej{Hlj}}{{HhEh}Ej}{cc{}}0000000{{{Hd{c}}}{{Cj{c}}}j}1111{Bd{{Ad{{Cj{c}}Hj}}}j}{HnHh}{{F`{Cn{Bd}}{Cn{Fb}}{Cn{D`}}}{{Fd{{Df{{Cj{c}}I`}}}}}j}{{F`Bh}{{Fh{c}}}j}{{F`{Fh{c}}{Cn{Fb}}{Cn{D`}}}{{Fd{{Df{{Cj{c}}I`}}}}}j}{{ce}{{Ib{eg}}}{}{IdAfAh}{}}{c{}{}}``{{}B`}00000000000{ce{}{}}00000000000`````{{}{{Ad{BnC`}}}}00000000000````````````````````````````{{}}00000000000````````{{Ghc}AdFj}{{Gjc}AdFj}{{Glc}AdFj}{{Gnc}AdFj}{{H`c}AdFj}{{Hbc}AdFj}{{{Cj{c}}e}Ad{Bjj}Fj}{{{Hd{c}}e}Ad{Bjj}Fj}{{{Hf{c}}e}AdjFj}{{Hhc}AdFj}````````{{{Cj{c}}Bd}{{Ad{dHj}}}j}=========={H`{{Cn{If}}}}{cBd{}}````{c{{Ad{e}}}{}{}}00000000000000000000000``{cDl{}}00000000000`{{}{{Ih{H`}}}}``{ce{}{}}00000000000```","c":[],"p":[[5,"Private",624],[1,"unit"],[5,"OrchestratorState",0],[10,"Clone",625],[10,"SignatureKey",626],[10,"Default",627],[5,"ServerError",628],[5,"Api",629],[6,"ApiError",629],[6,"Result",630],[10,"Send",631],[10,"Sync",631],[10,"ReadState",632],[10,"WriteState",632],[10,"StaticVersionType",633],[1,"usize"],[5,"With",634],[5,"String",635],[10,"OrchestratorApi",0],[1,"bool"],[10,"Serialize",636],[1,"u16"],[5,"Layout",637],[5,"LayoutError",637],[1,"u8"],[1,"array"],[1,"u64"],[5,"Keypair",638],[5,"NetworkConfig",234],[5,"Multiaddr",639],[6,"Option",640],[5,"PeerId",641],[5,"Vec",642],[5,"BenchResults",65],[1,"tuple"],[5,"Url",643],[8,"Result",644],[5,"TypeId",645],[5,"Command",646],[5,"BenchResultsDownloadConfig",65],[5,"ValidatorArgs",65],[5,"MultiValidatorArgs",65],[10,"Deserializer",647],[5,"Formatter",648],[8,"Result",648],[5,"ArgMatches",649],[8,"Error",650],[5,"OrchestratorClient",65],[6,"SocketAddr",651],[8,"Result",652],[5,"Id",653],[5,"ValidatorConfig",654],[10,"Serializer",636],[17,"Output"],[10,"Future",655],[8,"OrchestratorVersion",0],[5,"Client",656],[10,"Fn",657],[10,"Error",658],[5,"Libp2pConfig",234],[5,"Libp2pConfigFile",234],[5,"WebServerConfig",234],[5,"CombinedNetworkConfig",234],[6,"BuilderType",234],[5,"RandomBuilderConfig",234],[5,"NetworkConfigFile",234],[5,"HotShotConfigFile",234],[5,"ValidatorConfigFile",234],[6,"NetworkConfigError",234],[10,"Debug",648],[1,"str"],[6,"NetworkConfigSource",234],[5,"IndentedSection",659],[10,"Display",648],[5,"PossibleValue",660],[1,"slice"]],"b":[[413,"impl-Display-for-NetworkConfigError"],[414,"impl-Debug-for-NetworkConfigError"]]}],\
["hotshot_stake_table",{"doc":"This crate contains some stake table implementations for …","t":"CCCCSFNNNNNNNCNNNNNNNONNNNNNNNOONCNONNNNNONNNNNNNNNNNNNNIISPPPFKPPFIGFGNNNNNNNNNNNNNNNONNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNONNNNNNNONNNNNNNNNNNNNNNONHNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNOOOOOOOOOOOTKMHFFNNNOONNNNONNNNNNCNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNOONNNNOOONNNNNNNNNNNNONNNONNNNNNNNNNNNNIFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["config","mt_based","utils","vec_based","STAKE_TABLE_CAPACITY","StakeTable","__clone_box","advance","borrow","borrow_mut","clone","clone_into","commitment","config","contains_key","deref","deref_mut","deregister","deserialize","deserialize","drop","epoch_start","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_root","head","height","init","internal","into","last_epoch_start","layout_raw","len","lookup","lookup_with_aux_and_proof","lookup_with_proof","mapping","new","pointer_metadata","register","sample","serialize","set_value","to_owned","total_stake","try_from","try_into","try_iter","type_id","update","vzip","Digest","FieldType","TREE_BRANCH","Branch","Branch","Empty","IntoIter","Key","Leaf","Leaf","MerkleCommitment","MerklePath","MerklePathEntry","MerkleProof","PersistentMerkleNode","__clone_box","__clone_box","__clone_box","__clone_box","batch_check","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","check","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comm","commitment","compute_root","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","digest","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_merkle_path","from_str","get_hash","get_hash","get_hash","get_hash","get_key","get_key_by_stake","get_key_value","get_value","hash","hash","hash","hash","header","height","index","index","init","init","init","init","init","into","into","into","into","into","into_iter","into_iter","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","len","lookup","multiunzip","multiunzip","new","new","next","num_keys","path","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","register","serialize","serialize","serialize","serialize","serialize_with_mode","serialized_size","set_value","simple_lookup","size","size","tag","to_merkle_path","to_owned","to_owned","to_owned","to_owned","to_string","total_stakes","tree_height","tree_height","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unvisited","update","verify","vzip","vzip","vzip","vzip","vzip","key","pos","siblings","value","children","comm","comm","key","num_keys","total_stakes","value","SIZE","ToFields","to_fields","u256_to_field","StakeTable","StakeTableSnapshot","__clone_box","__clone_box","advance","bls_keys","bls_mapping","borrow","borrow","borrow_mut","borrow_mut","capacity","clone","clone","clone_into","clone_into","commitment","compute_head_comm","config","contains_key","default","default","deref","deref","deref_mut","deref_mut","deregister","deserialize","deserialize","deserialize","deserialize","drop","drop","epoch_start","epoch_start_comm","epoch_start_total_stake","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","get_version","head","head_total_stake","init","init","into","into","last_epoch_start","last_epoch_start_comm","last_epoch_start_total_stake","layout_raw","layout_raw","len","lookup","lookup_pos","lookup_with_aux_and_proof","lookup_with_proof","new","pointer_metadata","pointer_metadata","register","sample","schnorr_keys","serialize","serialize","set_value","stake_amount","to_owned","to_owned","total_stake","try_from","try_from","try_into","try_into","try_iter","type_id","type_id","update","vzip","vzip","FieldType","QCVerKey","StateVerKey","__clone_box","assemble","batch_check","borrow","borrow_mut","check","check","clone","clone_into","cmp","compare","deref","deref_mut","deserialize","deserialize","deserialize","deserialize_with_mode","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_bytes","from_private","from_str","generated_from_seed_indexed","generated_from_seed_indexed","genesis_proposer_pk","get_hash","get_public_key","get_public_parameter","get_sig_proof","get_stake_table_entry","hash","header","init","internal","into","layout_raw","partial_cmp","pointer_metadata","serialize","serialize","serialize_with_mode","serialized_size","sign","sign_builder_message","tag","to_affine","to_bytes","to_fields","to_fields","to_fields","to_owned","to_string","try_from","try_from","try_from","try_into","type_id","validate","validate_builder_signature","verify","vzip","zeroize"],"q":[[0,"hotshot_stake_table"],[4,"hotshot_stake_table::config"],[5,"hotshot_stake_table::mt_based"],[56,"hotshot_stake_table::mt_based::config"],[59,"hotshot_stake_table::mt_based::internal"],[250,"hotshot_stake_table::mt_based::internal::MerklePathEntry"],[254,"hotshot_stake_table::mt_based::internal::PersistentMerkleNode"],[261,"hotshot_stake_table::utils"],[265,"hotshot_stake_table::vec_based"],[355,"hotshot_stake_table::vec_based::config"],[428,"dyn_clone::sealed"],[429,"core::clone"],[430,"hotshot_types::traits::stake_table"],[431,"hotshot_types::traits::stake_table"],[432,"rkyv::with"],[433,"serde::de"],[434,"core::cmp"],[435,"core::fmt"],[436,"core::fmt"],[437,"core::alloc::layout"],[438,"core::alloc::layout"],[439,"rand_core"],[440,"rand_core"],[441,"primitive_types"],[442,"core::any"],[443,"ark_serialize::error"],[444,"core::iter::traits::iterator"],[445,"core::marker"],[446,"ark_bn254::fields::fq"],[447,"serde::de"],[448,"ark_serialize"],[449,"core::hash"],[450,"core::marker"],[451,"core::fmt"],[452,"alloc::vec"],[453,"tagged_base64"],[454,"ark_ff::fields"],[455,"ark_ff::fields::prime"],[456,"jf_rescue"],[457,"core::cmp"],[458,"bitvec::slice"],[459,"core::cmp"],[460,"core::fmt"],[461,"bitvec::vec"],[462,"ark_ec::models::short_weierstrass::group"],[463,"ark_ec::models::short_weierstrass::affine"],[464,"jf_signature::bls_over_bn254"],[465,"core::convert"]],"d":["Configuration file for stake table","A stake table implementation that’s based on Append-only …","Utilities to help building a stake table.","A vector based stake table implementation. The commitment …","Capacity of a stake table","Locally maintained stake table, generic over public key …","","Update the stake table when the epoch number advances, …","","","","","","Config file for stake table","","","","","","","","The snapshot of stake table at the beginning of the …","","","","","","","Returns the argument unchanged.","returns the root of stake table at <code>version</code>","The most up-to-date stake table, where the incoming …","Height of the underlying merkle tree, determines the …","","Utilities and internals for maintaining a local stake table","Calls <code>U::from(self)</code>.","The stake table used for leader election.","","","","","","The mapping from public keys to their location in the …","Initiating an empty stake table. Overall capacity is …","","","Almost uniformly samples a key weighted by its stake from …","","Set the stake withheld by <code>key</code> to be <code>value</code>. Return the …","","","","","","","","","Hash algorithm used in Merkle tree, using a RATE-3 rescue","Internal type of Merkle node value(commitment)","Branch of merkle tree. Set to 3 because we are currently …","A branch","A branch","Empty","An owning iterator over the (key, value) entries of a …","Common trait bounds for generic key type <code>K</code> for …","A leaf","A leaf","A succinct commitment for Merkle tree","Path from a Merkle root to a leaf","A compressed Merkle node for Merkle path","An existential proof","A persistent merkle tree tailored for the stake table. …","","","","","","","","","","","","","","","","","","","","","","","","","","Merkle tree digest","Returns the succinct commitment of this subtree","Compute the root of this Merkle proof.","","","","","","","","","","","","","","","","","","","","","Returns the digest of the tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a list of Merkle path branches back to an index","","","","","","Returns the public key of the associated stake table …","Imagine that the keys in this subtree is sorted, returns …","Returns the associated stake table entry, if there’s any.","Returns the stake amount of the associated stake table …","","","","","","Height of a tree","Returns the index of the given key","Index for the given key","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns a Merkle proof to the given location","","","create a new merkle tree iterator from a <code>root</code>. This …","Creates a new merkle commitment","","Returns the total number of keys in this subtree","A Merkle path for the given leaf","","","","","","Insert a new <code>key</code> into the Merkle tree","","","","","","","Set the stake of <code>key</code> to be <code>value</code>. Return the previous stake","Returns the stakes withhelded by a public key, None if the …","Returns the number of leaves","Number of leaves","","Convert an index to a list of Merkle path branches","","","","","","Returns the total stakes in this subtree","Returns the height of the tree","Returns the height of the tree","","","","","","","","","","","","","","","","","","The unvisited key values","Update the stake of the <code>key</code> with …","Verify the Merkle proof against the provided Merkle …","","","","","","the key","Position in tree","Siblings","the value","children","field type","field type","the key","number of keys","total stake","the value","The number of field elements needed to represent the given …","A trait that converts into a field element.","Convert the given struct into a list of field elements.","convert a U256 to a field element.","Locally maintained stake table, generic over public key …","a snapshot of the stake table","","","Update the stake table when the epoch number advances, …","bls keys","The mapping from public keys to their location in the …","","","","","upper bound on table size","","","","","","Helper function to recompute the stake table commitment …","Config file for stake table","","","","","","","","","","","","","","","The snapshot of stake table at the beginning of the …","Commitment of the stake table snapshot version <code>EpochStart</code> …","Total stakes in the snapshot version <code>EpochStart</code>","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","returns the snapshot version","The most up-to-date stake table, where the incoming …","Total stakes in the most update-to-date stake table","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The stake table used for leader election.","Commitment of the stake table snapshot version …","Total stakes in the snapshot version <code>LastEpochStart</code>","","","","","Return the index of a given key. Err if the key doesn’t …","","","Initiating an empty stake table.","","","","","schnorr","","","Set the stake withheld by <code>key</code> to be <code>value</code>. Return the …","amount of stake","","","","","","","","","","","","","","Type for commitment","BLS verification key as indexing key Signature public …","Schnorr verification key as auxiliary information …","","","","","","","","","","","","","","","Deserialize <code>Self</code> using <code>ark-serialize</code> (uncompressed)","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Get the internal of verifying key, namely a curve Point","Calls <code>U::from(self)</code>.","","","","Serialize <code>Self</code> using <code>ark-serialize</code> (uncompressed)","","","","","","","Convert the verification key into the affine form.","","","","","","","","","","","","","","Signature verification function","",""],"i":[0,0,0,0,0,0,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,17,33,17,0,0,17,33,0,0,0,0,0,17,33,34,30,30,50,17,33,34,30,50,17,33,34,30,80,30,17,33,34,30,17,33,34,30,30,17,34,50,17,33,34,30,50,17,33,34,30,50,17,17,33,33,34,34,30,30,30,30,50,17,33,34,30,17,33,34,30,17,17,17,17,33,33,33,33,34,34,34,34,30,30,30,30,17,33,34,30,30,50,17,33,34,30,0,30,17,33,34,30,34,17,34,34,17,33,34,30,30,30,34,34,50,17,33,34,30,50,17,33,34,30,50,17,50,17,33,34,30,80,17,50,50,50,30,50,17,34,50,17,33,34,30,17,17,33,34,30,30,30,17,17,30,30,30,0,17,33,34,30,30,17,34,30,50,17,33,34,30,30,30,50,17,33,34,30,50,17,33,34,30,50,17,34,50,17,33,34,30,81,82,82,81,83,83,84,84,83,83,84,56,0,56,0,0,0,63,59,59,63,59,63,59,63,59,59,63,59,63,59,59,59,0,59,63,59,63,59,63,59,59,63,63,59,59,63,59,59,59,59,63,59,63,63,63,63,59,59,59,59,63,59,63,59,59,59,59,63,59,63,59,59,59,59,63,59,59,59,59,59,59,59,63,59,59,59,63,63,59,59,63,63,59,59,63,59,63,59,59,63,59,59,63,59,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,75,65,65,65,65,65,65,65,65,65,65,65,65,65,65],"f":"``````{{cb}d{}}{{{f{c}}}dh}{ce{}{}}0{{{f{c}}}{{f{c}}}{jh}}{{ce}d{}{}}{{{f{c}}l}{{A`{en}}}h{}}`{{{f{c}}e}Abh{}}{Adc{}}0{{{f{c}}e}{{A`{dn}}}h{}}{{ce}{{A`{{Af{gi}}}}}{}{}{}{}}{c{{A`{{f{e}}}}}Ahh}{Add}`{{{f{c}}{f{c}}}Ab{Ajh}}{{ce}Ab{}{}}000{{{f{c}}Al}An{B`h}}{cc{}}{{{f{c}}l}{{A`{{Bd{{Bb{c}}}}n}}}h}``{{}Ad}`?`{{}{{A`{BfBh}}}}{{{f{c}}l}{{A`{Adn}}}h}{{{f{c}}lc}{{A`{en}}}h{}}{{{f{c}}le}{{A`{{Bj{gik}}n}}}h{}{}{}{}}{{{f{c}}le}{{A`{{Bj{gi}}n}}}h{}{}{}}`{Ad{{f{c}}}h}{{}}{{{f{c}}egi}{{A`{dn}}}h{}{}{}}{{{f{c}}e}{{Bl{{Bj{gi}}}}}h{BnC`}{}{}}{{{f{c}}e}A`hCb}{{{f{c}}cCd}{{A`{Cdn}}}h}{ce{}{}}{{{f{c}}l}{{A`{en}}}h{}}{c{{A`{e}}}{}{}}01{cCf{}}{{{f{c}}egAb}{{A`{gn}}}h{}{}}4```````````````{{cb}d{}}000{c{{A`{dCh}}}{{Cn{}{{Cj{Cl}}}}D`}}6666666666`{Cl{{A`{dCh}}}}{{{Bb{c}}}{{Bb{c}}}{jh}}{{{Db{c}}}{{Db{c}}}j}{{{Dd{c}}}{{Dd{c}}}j}{ClCl}{{ce}d{}{}}000`{{{Bb{c}}}Dfh}{{{Dd{c}}}{{A`{Dfn}}}h}{Adc{}}000000000{{ce}{{A`{{Af{gi}}}}}{}{}{}{}}{c{{A`{{Bb{e}}}}}Ahh}11{c{{A`{{Db{e}}}}}AhDh}{c{{A`{{Dd{e}}}}}AhDh}33{c{{A`{Cl}}}Ah}{{cDjDl}{{A`{ClCh}}}Dn}{ClDf}{Add}0000{{{Bb{c}}{Bb{c}}}Ab{Ajh}}{{{Db{c}}{Db{c}}}AbAj}{{{Dd{c}}{Dd{c}}}AbAj}{{ClCl}Ab}{{ce}Ab{}{}}000000000000000{{{Bb{c}}Al}An{B`h}}{{{Db{c}}Al}AnB`}{{{Dd{c}}Al}AnB`}{{ClAl}An}0{cc{}}0000{{{E`{Ad}}}Ad}{Eb{{A`{Clc}}}{}}{{ce}Ed{EfEh}Ej}000{{{Dd{c}}}{{Bl{c}}}h}{{{Bb{c}}Cd}{{Bl{{Bj{cCd}}}}}h}{{{Dd{c}}}{{Bl{{Bj{cCd}}}}}h}{{{Dd{c}}}{{Bl{Cd}}}h}{{{Bb{c}}e}d{Efh}El}{{{Db{c}}e}dEfEl}{{{Dd{c}}e}dEfEl}{{Clc}dEl}{{ce}{{En{eg}}}{}{F`D`Fb}{}}`{{{Dd{c}}}Adh}`{{}Ad}0000{ce{}{}}00000{{{Bb{c}}}eh{}}{{}{{A`{BfBh}}}}0000`{{{Bb{c}}Ad{E`{Ad}}}{{A`{{Dd{c}}n}}}h}{c{{Bj{egi}}}{}{}{}{}}0{{{Bd{{Bb{c}}}}}{{Fd{c}}}h}{{DfAdAd}Cl}{{{Fd{c}}}{{Bl{e}}}h{}}{{{Bb{c}}}Adh}`{{}}0000{{{Bb{c}}Ad{E`{Ad}}cCd}{{A`{{Bd{{Bb{c}}}}n}}}h}{{{Bb{c}}e}A`hCb}{{{Db{c}}e}A`FfCb}{{{Dd{c}}e}A`FfCb}{{Clc}A`Cb}{{ClcDj}{{A`{dCh}}}Fh}{{ClDj}Ad}{{{Bb{c}}Ad{E`{Ad}}cCd}{{A`{{Bj{{Bd{{Bb{c}}}}Cd}}n}}}h}{{{Bb{c}}Ad{E`{Ad}}}{{A`{Cdn}}}h}{ClAd}`{{}Fj}{{AdAd}{{Fl{Ad}}}}{ce{}{}}000{cFj{}}{{{Bb{c}}}Cdh}{{{Dd{c}}}Adh}6{c{{A`{e}}}{}{}}000{Fn{{A`{Clc}}}{}}1011111{cCf{}}0000`{{{Bb{c}}Ad{E`{Ad}}cCdAb}{{A`{{Bj{{Bd{{Bb{c}}}}Cd}}n}}}h}{{{Dd{c}}Cl}{{A`{dn}}}h}88888`````````````{G`{{Fl{c}}}Gb}{CdcGd}``{{cb}d{}}0{{{Gf{egc}}}dGh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}``<<<<`{{{Gn{ce}}}{{Gn{ce}}}jj}{{{Gf{egc}}}{{Gf{egc}}}{Ghj}{GjEfj{G`{c}}j}{GjEfjGl{G`{c}}j}}{{ce}d{}{}}0{{{Gf{egc}}l}{{A`{in}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}}{{{Gf{egc}}}{{Bj{ccc}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}`{{{Gf{egc}}i}AbGh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}}{{}{{Gn{ce}}}{}{}}{{}{{Gf{egc}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}{Adc{}}000{{{Gf{egc}}i}{{A`{dn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}}{c{{A`{{Gn{eg}}}}}AhDhDh}{{ce}{{A`{{Af{gi}}}}}{}{}{}{}}0{c{{A`{{Gf{gie}}}}}Ah{GhDh}{GjEfj{G`{e}}DhGl}{GjEfjGl{G`{e}}Dh}}{Add}0```{{{Gn{ce}}{Gn{ce}}}AbAjAj}{{{Gf{egc}}{Gf{egc}}}Ab{GhAj}{GjEfj{G`{c}}Aj}{GjEfjGl{G`{c}}Aj}}{{ce}Ab{}{}}0000000{{{Gn{ce}}Al}AnB`B`}{{{Gf{egc}}Al}An{GhB`}{GjEfj{G`{c}}B`}{GjEfjGl{G`{c}}B`}}{cc{}}0{{{Gf{egc}}l}{{A`{{Gn{eg}}n}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}``{{}Ad}0{ce{}{}}0```{{}{{A`{BfBh}}}}0{{{Gf{egc}}l}{{A`{Adn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}{{{Gf{egc}}li}{{A`{kn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}{}}{{{Gf{egc}}e}{{A`{Adn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}{{{Gf{egc}}li}{{A`{{Bj{kmo}}n}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}{}{}{}}{{{Gf{egc}}li}{{A`{{Bj{km}}n}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}{}{}}{Ad{{Gf{egc}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}{{}}0{{{Gf{egc}}ikm}{{A`{dn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}{}{}}{{{Gf{egc}}i}{{Bl{{Bj{km}}}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{BnC`}{}{}}`{{{Gn{ce}}g}A`FfFfCb}{{{Gf{egc}}i}A`{GhFf}{GjEfj{G`{c}}Ff}{GjEfjGl{G`{c}}Ff}Cb}{{{Gf{egc}}eCd}{{A`{Cdn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}`=={{{Gf{egc}}l}{{A`{in}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}}{c{{A`{e}}}{}{}}0001{cCf{}}0{{{Gf{egc}}ikAb}{{A`{kn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}{}}{ce{}{}}0```{{cb}d{}}{{H`E`}}{c{{A`{dCh}}}{{Cn{}{{Cj{Hb}}}}D`}}33{{{E`{Hd}}}Ab}{Hb{{A`{dCh}}}}{HbHb}{{ce}d{}{}}{{HbHb}Hf}{{ce}Hf{}{}}{Adc{}}0{{ce}{{A`{{Af{gi}}}}}{}{}{}{}}{{{E`{Hd}}}{{A`{HbHh}}}}{c{{A`{Hb}}}Ah}{{cDjDl}{{A`{HbCh}}}Dn}{Add}{{HbHb}Ab}{{ce}Ab{}{}}000{{HbAl}{{A`{dHj}}}}0{HlHb}{cc{}}{{{E`{Hd}}}{{A`{HbCh}}}}{{}Hb}{Eb{{A`{Hb}}}}{{{Hn{Hd}}Ed}{{Bj{Hb}}}}02{{ce}Ed{EfEh}Ej}3{{FlCd}}{{}{{Bj{I`}}}}{{HbEd}}{{Hbc}dEl}{{ce}{{En{eg}}}{}{F`D`Fb}{}}{{}Ad}{HbIb}{ce{}{}}{{}{{A`{BfBh}}}}{{HbHb}{{Bl{Hf}}}}{{}}{Hb{{A`{{Fl{Hd}}Hh}}}}{{Hbc}A`Cb}{{HbcDj}{{A`{dCh}}}Fh}{{HbDj}Ad}{{{E`{Hd}}}A`}0{{}Fj}{HbId}{Hb{{Fl{Hd}}}}{If{{Fl{Ih}}}}{Hb{{Fl{Df}}}}{Hb{{Fl{Ih}}}}>{cFj{}}{c{{A`{e}}}{}{}}{Fn{{A`{Hb}}}}01{cCf{}}{{Hb{E`{Hd}}}Ab}0{{Hb{E`{Hd}}Ijc}{{A`{dIl}}}{{In{{E`{Hd}}}}}}{ce{}{}}{Hbd}","c":[],"p":[[5,"Private",428],[1,"unit"],[5,"StakeTable",5],[10,"Key",59],[10,"Clone",429],[6,"SnapshotVersion",430],[6,"StakeTableError",430],[6,"Result",431],[1,"bool"],[1,"usize"],[5,"With",432],[10,"Deserializer",433],[10,"PartialEq",434],[5,"Formatter",435],[8,"Result",435],[10,"Debug",435],[6,"PersistentMerkleNode",59],[5,"Arc",436],[5,"Layout",437],[5,"LayoutError",437],[1,"tuple"],[6,"Option",438],[10,"SeedableRng",439],[10,"CryptoRngCore",439],[10,"Serializer",440],[5,"U256",441],[5,"TypeId",442],[6,"SerializationError",443],[17,"Item"],[5,"MerkleCommitment",59],[10,"Iterator",444],[10,"Send",445],[6,"MerklePathEntry",59],[5,"MerkleProof",59],[8,"Fq",446],[10,"Deserialize",433],[6,"Compress",447],[6,"Validate",447],[10,"Read",448],[1,"slice"],[1,"str"],[1,"u64"],[10,"Hash",449],[10,"Sized",445],[10,"BuildHasher",449],[10,"Hasher",449],[5,"IndentedSection",450],[10,"Display",435],[10,"Sync",445],[5,"IntoIter",59],[10,"Serialize",440],[10,"Write",448],[5,"String",451],[5,"Vec",452],[5,"TaggedBase64",453],[10,"ToFields",261],[10,"Field",454],[10,"PrimeField",455],[5,"StakeTable",265],[10,"RescueParameter",456],[10,"Eq",434],[10,"Default",457],[5,"StakeTableSnapshot",265],[5,"BitSlice",458],[5,"QCVerKey",355],[1,"u8"],[6,"Ordering",434],[5,"Error",459],[5,"Error",435],[5,"SignKey",460],[1,"array"],[5,"BitVec",461],[5,"Projective",462],[5,"Affine",463],[8,"StateVerKey",355],[8,"FieldType",355],[5,"Signature",460],[6,"SignatureError",464],[10,"AsRef",465],[8,"MerklePath",59],[15,"Leaf",250],[15,"Branch",250],[15,"Branch",254],[15,"Leaf",254]],"b":[[148,"impl-Display-for-MerkleCommitment"],[149,"impl-Debug-for-MerkleCommitment"],[229,"impl-TryFrom%3C%26TaggedBase64%3E-for-MerkleCommitment"],[231,"impl-TryFrom%3CTaggedBase64%3E-for-MerkleCommitment"],[363,"impl-SignatureKey-for-VerKey"],[364,"impl-Valid-for-VerKey"],[372,"impl-Serializable-for-VerKey"],[373,"impl-Deserialize%3C\'de%3E-for-VerKey"],[381,"impl-Display-for-VerKey"],[382,"impl-Debug-for-VerKey"],[388,"impl-SignatureKey-for-VerKey"],[389,"impl-BuilderSignatureKey-for-VerKey"],[404,"impl-Serializable-for-VerKey"],[405,"impl-Serialize-for-VerKey"],[414,"impl-ToFields%3CFp%3CMontBackend%3CFqConfig,+4%3E,+4%3E%3E-for-VerKey"],[415,"impl-ToFields%3CFp%3CMontBackend%3CFrConfig,+4%3E,+4%3E%3E-for-VerKey"],[419,"impl-TryFrom%3C%26TaggedBase64%3E-for-VerKey"],[420,"impl-TryFrom%3CTaggedBase64%3E-for-VerKey"]]}],\
["hotshot_task",{"doc":"Task primitives for <code>HotShot</code>","t":"CCCFKFFNNNNNNNNNNMNNNOOOONNNNNNNNNONNNNNNNNNNNFKRNNONOMNNNNNNRRRRRFFKFKNNNNNNNNOONNNNMNMNNNNNONNNONNNNNNNMNNNNNONNNOONNNNNNNNN","n":["dependency","dependency_task","task","AndDependency","Dependency","EventDependency","OrDependency","add_dep","add_dep","add_deps","and","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","completed","completed","completed","completed","completed_dependency","deps","deps","event_rx","from","from","from","from_deps","from_deps","into","into","into","mark_as_completed","match_fn","new","or","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","DependencyTask","HandleDepOutput","Output","borrow","borrow_mut","dep","from","handle","handle_dep_result","into","new","run","try_from","try_into","type_id","Event","Message","Output","Output","State","Task","TaskRegistry","TaskState","TestTask","TestTaskState","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone_sender","default","event_receiver","event_sender","filter","from","from","from","handle_event","handle_event","handle_message","handle_result","into","into","into","join_all","message_receivers","new","new","register","registry","run","run","run_sub_task","run_task","send","send_event","sender","should_shutdown","shutdown","shutdown","spawn_dependency_task","state","state","state","state_mut","state_mut","subscribe","task","task_handles","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"hotshot_task"],[3,"hotshot_task::dependency"],[46,"hotshot_task::dependency_task"],[61,"hotshot_task::task"],[126,"core::clone"],[127,"core::marker"],[128,"core::marker"],[129,"core::future::future"],[130,"alloc::vec"],[131,"async_broadcast"],[132,"core::ops::function"],[133,"alloc::boxed"],[134,"core::result"],[135,"core::any"],[136,"async_std::task::join_handle"],[137,"async_broadcast"],[138,"async_broadcast"]],"d":["Simple Dependency types","Task which can uses dependencies","Basic task types","Defines a dependency that completes when all of its deps …","Type which describes the idea of waiting for a dependency …","A dependency that listens on a channel for an event that …","Defines a dependency that completes when one of it’s …","Add another dependency","Add another dependency","Add multiple dependencies","Create an and dependency from this dependency and another","","","","","","","Complete will wait until it gets some value <code>T</code> then return …","Returns a vector of all of the results from it’s …","Returns the value of the first completed dependency","","The potentially externally completed dependency. If the …","Dependencies being combined","Dependencies being combined","Channel of incoming events","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create from a vec of deps","Creat an <code>OrDependency</code> from a vec of dependencies","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mark a dependency as completed.","Closure which returns true if the incoming <code>T</code> is the thing …","Create a new <code>EventDependency</code>","Create an or dependency from this dependency and another","","","","","","","","","","A task that runs until it’s dependency completes and it …","Defines a type that can handle the result of a dependency","Type we expect from completed dependency","","","Dependency this taks waits for","Returns the argument unchanged.","Handles the results returned from …","Called once when the Dependency completes handles the …","Calls <code>U::from(self)</code>.","Create a new <code>DependencyTask</code>","Spawn the dependency task","","","","Type of event sent and received by the task","Message type handled by the task","The result returned when this task completes","Result returned by the test task on completion","The state type","A basic task which loops waiting for events to come from …","A collection of tasks which can handle shutdown","Type for mutable task state that can be used as the state …","Similar to <code>Task</code> but adds functionality for testing.  …","Task state for a test.  Similar to <code>TaskState</code> but it handles","","","","","","","Clone the sender handle","","Receives events that are broadcast from any task, …","Sends events all tasks including itself","Return true if the event should be filtered","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handle event and update state.  Return true if the task is …","The Task analog of <code>TaskState::handle_event</code>.","Handle and incoming message and return <code>Some</code> if the task is …","Do something with the result of the task before it shuts …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Wait for the results of all the tasks registered","Receivers for outside events","Create a new task","Create a test task","Add a task to the registry","Contains this task, used to register any spawned tasks","Spawn the task loop, consuming self.  Will continue until …","Runs the task, taking events from the the test events and …","Spawn a new task and register it.  It will get all events …","Take a task, run it, and register it","Broadcast a message to all listening tasks","Send an event to other listening test tasks","Get a new sender handle for events","Return true if the event should shut the task down","Handle anything before the task is completely shutdown","Try to cancel/abort the task this registry has","Create a new <code>DependencyTask</code> run it, and register it","Get an immutable reference to this tasks state","Get a ref to state","The state of the task.  It is fed events from <code>event_sender</code> …","Get a mutable reference to this tasks state","Get a mutable ref to state","Create a new event <code>Receiver</code> from this Task’s receiver. …","Task which handles test events","Tasks this registry controls","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,7,1,6,1,7,12,1,7,12,6,1,7,12,12,1,7,12,1,7,12,1,7,1,7,12,12,12,12,6,1,7,12,1,7,12,1,7,12,0,0,18,19,19,19,19,19,18,19,19,19,19,19,19,23,30,23,30,30,0,0,0,0,0,21,31,24,21,31,24,21,24,21,21,23,21,31,24,23,21,30,23,21,31,24,24,31,21,31,24,21,21,31,21,24,21,31,21,23,23,24,24,21,31,21,21,31,21,31,24,21,31,24,21,31,24,21,31,24],"f":"```````{{{b{c}}e}d{fhj}{{l{c}}h}}{{{n{c}}e}d{fhj}{{l{c}}h}}{{{b{c}}{b{c}}}d{fhj}}{{le}{{b{c}}}{hjf}{{l{c}}h}}{ce{}{}}00000{l{{`{{Ad{}{{A`{{Ab{c}}}}}}h}}}{}}{{{b{c}}}{{Ab{{Af{c}}}}}{fhj}}{{{n{c}}}{{Ab{c}}}{fhj}}{{{Ah{c}}}{{Ab{c}}}{fhj}}````{cc{}}00{{{Af{e}}}{{b{c}}}{fhj}{{l{c}}h}}{{{Af{e}}}{{n{c}}}{fhj}{{l{c}}h}}777{{{Ah{c}}c}d{fhj}}`{{{Aj{c}}{An{Al}}}{{Ah{c}}}{fhj}}{{le}{{n{c}}}{hjf}{{l{c}}h}}{c{{B`{e}}}{}{}}00000{cBb{}}00```<<`7`{{{Bd{}{{A`{c}}}}c}{{`{{Ad{}{{A`{d}}}}h}}}{hj}}={{ce}{{Bf{ce}}}{lh}{Bdh}}{{{Bf{ce}}}{{Bh{d}}}{lh}Bd}443``````````??????{{{Bj{c}}}Bl{Bnh}}{{}C`}``{{{Bn{}{{Cb{c}}{A`{e}}}}c}Cd{fhj}h}==={{c{Bj{{Bn{}{{Cb{c}}{A`{e}}}}}}}{{`{{Ad{}{{A`{{Ab{e}}}}}}h}}}{fhj}h}{{{Bj{c}}}{{`{{Ad{}{{A`{Ab}}}}h}}}{Bnh}}{{cCf{Cn{e{Cl{}{{Ch{c}}{A`{g}}{Cj{e}}}}}}}{{`{{Ad{}{{A`{{Ab{g}}}}}}h}}}{fhj}Bnh}{{{Bn{}{{Cb{c}}{A`{e}}}}e}{{`{{Ad{}{{A`{d}}}}h}}}{fhj}h}{ce{}{}}00{C`{{Af{d}}}}`{{BlAj{D`{C`}}c}{{Bj{c}}}{Bnh}}{{{Bj{c}}{Af{Aj}}}{{Cn{ce}}}{Bnh}{{Cl{}{{Cj{c}}{A`{}}}}hj}}{{C`{Bh{d}}}d}`{{{Bj{c}}}{{Bh{d}}}{Bnh}}{{{Cn{ce}}}Bh{Bnh}{{Cl{}{{Cj{c}}{A`{}}}}hj}}{{{Bj{c}}c}d{Bnh}}{{C`{Bj{c}}}d{Bnh}}{{{Bj{c}}}{{B`{AbDb}}}{Bnh}}{{{Cn{ce}}}d{Bnh}{{Cl{}{{Cj{c}}{A`{}}}}hj}}{{{Bj{c}}}Bl{Bnh}}{cCd{}}{{{Bn{}{{Cb{c}}{A`{e}}}}}{{`{{Ad{}{{A`{d}}}}h}}}{fhj}h}{C`d}{{C`eg}d{}{{l{c}}h}{{Bd{}{{A`{c}}}}}}{{{Bj{c}}}c{Bnh}}{{{Cn{ce}}}c{Bnh}{{Cl{}{{Cj{c}}{A`{}}}}hj}}`10{{{Bj{c}}}Aj{Bnh}}``{c{{B`{e}}}{}{}}00000{cBb{}}00","c":[],"p":[[5,"AndDependency",3],[1,"unit"],[10,"Clone",126],[10,"Send",127],[10,"Sync",127],[10,"Dependency",3],[5,"OrDependency",3],[17,"Output"],[6,"Option",128],[10,"Future",129],[5,"Vec",130],[5,"EventDependency",3],[5,"Receiver",131],[10,"Fn",132],[5,"Box",133],[6,"Result",134],[5,"TypeId",135],[10,"HandleDepOutput",46],[5,"DependencyTask",46],[5,"JoinHandle",136],[5,"Task",61],[5,"Sender",131],[10,"TaskState",61],[5,"TaskRegistry",61],[17,"Event"],[1,"bool"],[1,"usize"],[17,"Message"],[17,"State"],[10,"TestTaskState",61],[5,"TestTask",61],[5,"Arc",137],[5,"SendError",131]],"b":[]}],\
["hotshot_task_impls",{"doc":"The consensus layer for hotshot. This currently implements …","t":"CCCCCCCCCCCCCCCCCPFFGPFNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNOFPPINNNOOOOOONNNNNONNNCONONNOONOOONOOONNOOOOOONNNNOCONIIIOOOOOOHOOOOOOOOHHHOOOOOOOOOOOOOOHHHOOOOOOOOOOOOOOOOOOHHHOOOOSSHFPPIONNOOOONNNNNNNNONNNNOOONONNNONPPPPPPPPPPGFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFONNNNNNONHNNNNNHNNNNNKHHHMFFNNNNNONNHNNNNNNNNONNONNNNNNNNNNNNNNONNHNNONNNNNNNHOHOHNNPPGFPPFPPNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNOONNNOONNNOONNNOONNNOOOOOOOOOOONOOOOOONNNNNNNNNNONNNFNNNOOONNNNNONNNONONNONOOOOOONOOOOONNNNPPFPGFPNNNNNNOOONNONNNNNNNNNNNNNNNNNNNNNONNNOONNNONNNONNNOOOOOOOONOONNNNNNNNNNOONNNFFSIFONNNNNNNNOOONNNNNNNNNNNNNNNNNNNONNNNNNNNNHOONNNOOOONNONNNOONOONNNNNNNNNONNNIFIONNONNNNNNNNNONNNNONOOOOONHNNNNHNFFOOOONNNNOOONNNNNNNNNNNNNNONNONNNNNOONNOONNNNNNNNNNPPFIONNONNNNNNNNONNNNOOOONONNNONFONNOONNNNNNNNONNNOONOONNNNONPPPPIGFFNOOONNNNNNNNOOONNNNNNNNNNNNNNNNNNNOONNNNNNNNNNOONNNNNNONNNOOOOOOONNNNOOOOOOONONNONNNNNNNNNNOONNNFKIKIIIIIIFNOOOOOOOONNNNHNNNNNNNNMNNNNNNNNNMMNNNNNNNNOOOOOOOOONNNNNNMOOOOOOOOONNOOOOOOOOONNNNNNNOOOOOOOOONN","n":["builder","consensus","da","events","harness","helpers","network","quorum_proposal","quorum_proposal_recv","quorum_vote","request","response","transactions","upgrade","vid","view_sync","vote_collection","Api","ApiSnafu","BuilderClient","BuilderClientError","NotFound","NotFoundSnafu","__clone_box","__clone_box","_marker","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","cause","claim_block","claim_block_header_input","clone","clone","clone_into","clone_into","connect","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fail","fail","fmt","fmt","fmt","fmt","from","from","from","from","from","get_available_blocks","header","in_current_span","init","init","init","init","inner","into","into","into","into","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","message","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","message","ConsensusTaskState","None","Some","VoteCollectorOption","borrow","borrow_mut","cancel_tasks","committee_membership","committee_network","consensus","cur_view","current_proposal","decided_upgrade_cert","deref","deref_mut","deserialize","drop","filter","formed_upgrade_certificate","from","handle","handle_event","helpers","id","init","instance_state","into","layout_raw","output_event_stream","payload_commitment_and_metadata","pointer_metadata","private_key","proposal_cert","public_key","publish_proposal","quorum_membership","quorum_network","round_start_delay","should_shutdown","spawn_vote_task","spawned_tasks","storage","timeout","timeout_membership","timeout_task","timeout_vote_collector","try_from","try_into","type_id","validate_disperse","version","view_change","vote_collector","vzip","TemporaryProposalRecvCombinedType","TemporaryProposalValidatedCombinedType","TemporaryVoteInfo","committee_membership","committee_membership","committee_network","committee_network","consensus","consensus","create_and_send_proposal","cur_view","cur_view","current_proposal","current_proposal","decided_upgrade_cert","decided_upgrade_cert","formed_upgrade_certificate","formed_upgrade_certificate","get_parent_leaf_and_state","handle_quorum_proposal_recv","handle_quorum_proposal_validated","id","id","instance_state","instance_state","output_event_stream","output_event_stream","payload_commitment_and_metadata","payload_commitment_and_metadata","private_key","private_key","proposal_cert","proposal_cert","public_key","public_key","publish_proposal_from_commitment_and_metadata","publish_proposal_from_upgrade_cert","publish_proposal_if_able","quorum_membership","quorum_membership","quorum_network","quorum_network","round_start_delay","round_start_delay","spawned_tasks","spawned_tasks","storage","storage","timeout","timeout","timeout_membership","timeout_membership","timeout_task","timeout_task","timeout_vote_collector","timeout_vote_collector","update_state_and_vote_if_able","validate_proposal_safety_and_liveness","validate_proposal_view_and_certs","version","version","vote_collector","vote_collector","DONT_SEND_VIEW_CHANGE_EVENT","SEND_VIEW_CHANGE_EVENT","update_view","DATaskState","None","Some","VoteCollectorOption","api","borrow","borrow_mut","consensus","cur_view","da_membership","da_network","deref","deref_mut","deserialize","drop","filter","from","handle","handle_event","id","init","into","layout_raw","pointer_metadata","private_key","public_key","quorum_membership","should_shutdown","storage","try_from","try_into","type_id","vote_collector","vzip","BlockReady","BlockRecv","DACSend","DACertificateRecv","DACertificateValidated","DAProposalRecv","DAProposalSend","DAProposalValidated","DAVoteRecv","DAVoteSend","HotShotEvent","HotShotTaskCompleted","LeafDecided","ProposeNow","QCFormed","QuorumProposalRecv","QuorumProposalSend","QuorumProposalValidated","QuorumVoteDependenciesValidated","QuorumVoteRecv","QuorumVoteSend","SendPayloadCommitmentAndMetadata","Shutdown","Timeout","TimeoutVoteRecv","TimeoutVoteSend","TransactionSend","TransactionsRecv","UpgradeCertificateFormed","UpgradeProposalRecv","UpgradeProposalSend","UpgradeVoteRecv","UpgradeVoteSend","VIDShareRecv","VIDShareValidated","VersionUpgrade","VidDisperseSend","ViewChange","ViewSyncCommitCertificate2Recv","ViewSyncCommitCertificate2Send","ViewSyncCommitVoteRecv","ViewSyncCommitVoteSend","ViewSyncFinalizeCertificate2Recv","ViewSyncFinalizeCertificate2Send","ViewSyncFinalizeVoteRecv","ViewSyncFinalizeVoteSend","ViewSyncPreCommitCertificate2Recv","ViewSyncPreCommitCertificate2Send","ViewSyncPreCommitVoteRecv","ViewSyncPreCommitVoteSend","ViewSyncTimeout","ViewSyncTrigger","VoteNow","__clone_box","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","get_hash","get_hash","hash","hash","init","init","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","TestHarnessState","allow_extra_output","borrow","borrow_mut","deref","deref_mut","deserialize","drop","expected_output","from","handle_event","handle_event","init","into","layout_raw","pointer_metadata","run_harness","should_shutdown","try_from","try_into","type_id","vzip","AnyhowTracing","broadcast_event","calculate_vid_disperse","cancel_task","err_as_debug","NetworkEventTaskState","NetworkMessageTaskState","__clone_box","borrow","borrow","borrow_mut","borrow_mut","channel","clone","clone_into","committee_filter","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","event_stream","filter","filter","filter","from","from","handle_event","handle_event","handle_event","handle_messages","handle_vid_disperse_proposal","init","init","into","into","layout_raw","layout_raw","maybe_record_action","membership","pointer_metadata","pointer_metadata","quorum_filter","should_shutdown","should_shutdown","storage","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upgrade_filter","version","vid_filter","view","view_sync_filter","vzip","vzip","PayloadAndMetadata","Proposal","ProposalDependency","ProposalDependencyHandle","ProposeNow","QC","QuorumProposalTaskState","TimeoutCert","ViewSyncCert","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","committee_network","consensus","consensus","create_and_complete_dependencies","create_dependency_task_if_new","create_event_dependency","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","filter","fmt","from","from","from","handle","handle_dep_result","handle_event","id","id","init","init","init","instance_state","instance_state","into","into","into","latest_proposed_view","latest_proposed_view","layout_raw","layout_raw","layout_raw","output_event_stream","output_event_stream","pointer_metadata","pointer_metadata","pointer_metadata","private_key","private_key","propose_dependencies","public_key","public_key","quorum_membership","quorum_membership","quorum_network","round_start_delay","round_start_delay","sender","should_shutdown","storage","timeout","timeout","timeout_membership","timeout_membership","timeout_task","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_latest_proposed_view","view_number","vzip","vzip","vzip","QuorumProposalRecvTaskState","borrow","borrow_mut","cancel_tasks","consensus","cur_view","decided_upgrade_cert","deref","deref_mut","deserialize","drop","filter","formed_upgrade_certificate","from","handle","handle_event","id","init","instance_state","into","layout_raw","output_event_stream","pointer_metadata","private_key","proposal_cert","public_key","quorum_membership","quorum_network","round_start_delay","should_shutdown","spawned_tasks","storage","timeout","timeout_membership","timeout_task","try_from","try_into","type_id","vzip","Dac","QuorumProposal","QuorumVoteTaskState","Vid","VoteDependency","VoteDependencyHandle","VoteNow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","committee_network","consensus","consensus","create_dependency_task_if_new","create_event_dependency","da_membership","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","filter","fmt","from","from","from","handle","handle_dep_result","handle_event","id","init","init","init","instance_state","instance_state","into","into","into","latest_voted_view","layout_raw","layout_raw","layout_raw","output_event_stream","pointer_metadata","pointer_metadata","pointer_metadata","private_key","private_key","public_key","public_key","quorum_membership","quorum_membership","quorum_network","sender","should_shutdown","storage","storage","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_latest_voted_view","view_number","vote_dependencies","vzip","vzip","vzip","DelayedRequester","NetworkRequestState","REQUEST_TIMEOUT","Signature","VidRequest","_phantom","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_requests","cancel_vid","da_membership","delay","delay","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","do_vid","drop","drop","drop","filter","from","from","from","handle_event","handle_response_message","id","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","make_vid","network","network","pointer_metadata","pointer_metadata","pointer_metadata","private_key","public_key","quorum_membership","recipients","run","run_delay","sender","set_shutdown_flag","should_shutdown","shutdown","shutdown_flag","shutdown_flag","spawn_requests","state","state","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","view","vzip","vzip","vzip","LockedConsensusState","NetworkResponseState","RequestReceiver","alloc","borrow","borrow_mut","consensus","deref","deref_mut","deserialize","drop","from","get_or_calc_vid_share","handle_message","handle_request","init","inner","into","layout_raw","make_msg","new","phantom","pointer_metadata","private_key","ptr","pub_key","quorum","receiver","run_loop","run_response_task","try_from","try_into","type_id","valid_sender","valid_signature","vzip","BuilderResponses","TransactionTaskState","api","block_data","block_header","blocks_initial_info","borrow","borrow","borrow_mut","borrow_mut","builder_client","consensus","cur_view","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","filter","from","from","get_block_from_builder","handle","handle_event","id","init","init","instance_state","into","into","latest_known_vid_commitment","layout_raw","layout_raw","membership","network","pointer_metadata","pointer_metadata","private_key","public_key","should_shutdown","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wait_for_block","None","Some","UpgradeTaskState","VoteCollectorOption","api","borrow","borrow_mut","cur_view","deref","deref_mut","deserialize","drop","filter","from","handle","handle_event","id","init","into","layout_raw","pointer_metadata","private_key","public_key","quorum_membership","quorum_network","should_shutdown","should_vote","try_from","try_into","type_id","vote_collector","vzip","VIDTaskState","api","borrow","borrow_mut","consensus","cur_view","deref","deref_mut","deserialize","drop","filter","from","handle","handle_event","id","init","into","layout_raw","membership","network","pointer_metadata","private_key","public_key","should_shutdown","try_from","try_into","type_id","vote_collector","vzip","Commit","Finalize","None","PreCommit","RelayMap","ViewSyncPhase","ViewSyncReplicaTaskState","ViewSyncTaskState","__clone_box","api","api","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commit_relay_map","current_view","current_view","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","filter","filter","finalize_relay_map","finalized","fmt","from","from","from","get_hash","handle","handle","handle_event","handle_event","hash","id","id","init","init","init","into","into","into","last_garbage_collected_view","layout_raw","layout_raw","layout_raw","membership","membership","network","network","next_view","next_view","num_timeouts_tracked","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pre_commit_relay_map","private_key","private_key","public_key","public_key","relay","replica_task_map","send_to_or_create_replica","sent_view_change_event","should_shutdown","should_shutdown","timeout_task","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","view_sync_timeout","view_sync_timeout","vzip","vzip","vzip","AccumulatorInfo","AggregatableVote","DAVoteState","HandleVoteEvent","QuorumVoteState","TimeoutVoteState","UpgradeVoteState","ViewSyncCommitVoteState","ViewSyncFinalizeVoteState","ViewSyncPreCommitState","VoteCollectionTaskState","accumulate_vote","accumulator","accumulator","accumulator","accumulator","accumulator","accumulator","accumulator","accumulator","borrow","borrow","borrow_mut","borrow_mut","create_vote_accumulator","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","filter","filter","filter","filter","filter","filter","filter","filter","from","from","get_leader","handle_event","handle_event","handle_event","handle_event","handle_event","handle_event","handle_event","handle_event","handle_event","id","id","id","id","id","id","id","id","id","init","init","into","into","layout_raw","layout_raw","make_cert_event","membership","membership","membership","membership","membership","membership","membership","membership","membership","pointer_metadata","pointer_metadata","public_key","public_key","public_key","public_key","public_key","public_key","public_key","public_key","public_key","should_shutdown","try_from","try_from","try_into","try_into","type_id","type_id","view","view","view","view","view","view","view","view","view","vzip","vzip"],"q":[[0,"hotshot_task_impls"],[17,"hotshot_task_impls::builder"],[121,"hotshot_task_impls::builder::BuilderClientError"],[122,"hotshot_task_impls::consensus"],[176,"hotshot_task_impls::consensus::helpers"],[239,"hotshot_task_impls::consensus::view_change"],[242,"hotshot_task_impls::da"],[276,"hotshot_task_impls::events"],[383,"hotshot_task_impls::harness"],[405,"hotshot_task_impls::helpers"],[410,"hotshot_task_impls::network"],[468,"hotshot_task_impls::quorum_proposal"],[562,"hotshot_task_impls::quorum_proposal_recv"],[601,"hotshot_task_impls::quorum_vote"],[684,"hotshot_task_impls::request"],[764,"hotshot_task_impls::response"],[800,"hotshot_task_impls::transactions"],[852,"hotshot_task_impls::upgrade"],[884,"hotshot_task_impls::vid"],[913,"hotshot_task_impls::view_sync"],[1017,"hotshot_task_impls::vote_collection"],[1124,"dyn_clone::sealed"],[1125,"core::error"],[1126,"std::backtrace"],[1127,"core::option"],[1128,"alloc::string"],[1129,"core::convert"],[1130,"hotshot_types::utils"],[1131,"hotshot_builder_api::block_info"],[1132,"core::result"],[1133,"hotshot_types::traits::node_implementation"],[1134,"vbs::version"],[1135,"hotshot_builder_api::block_info"],[1136,"core::time"],[1137,"rkyv::with"],[1138,"serde::de"],[1139,"core::fmt"],[1140,"core::fmt"],[1141,"hotshot_types::vid"],[1142,"hotshot_builder_api::block_info"],[1143,"color_eyre::section"],[1144,"core::fmt"],[1145,"core::marker"],[1146,"core::alloc::layout"],[1147,"serde::ser"],[1148,"core::any"],[1149,"hotshot_types::traits::node_implementation"],[1150,"async_broadcast"],[1151,"hotshot_task::task"],[1152,"anyhow"],[1153,"hotshot_types::data"],[1154,"hotshot_types::message"],[1155,"hotshot_types::consensus"],[1156,"async_lock::rwlock"],[1157,"hotshot_types::consensus"],[1158,"hotshot_types::data"],[1159,"hotshot_types::event"],[1160,"hotshot_types::traits::consensus_api"],[1161,"core::cmp"],[1162,"core::hash"],[1163,"core::marker"],[1164,"hotshot_task::task"],[1165,"hotshot_types::traits::storage"],[1166,"hotshot_types::event"],[1167,"hotshot_task::dependency"],[1168,"hotshot_types::vote"],[1169,"alloc::boxed"],[1170,"core::pin"],[1171,"hotshot_types::simple_vote"],[1172,"hotshot_types::simple_certificate"]],"d":["Implementations for builder client Should contain builder …","the task which implements the main parts of consensus","The task which implements the main parts of data …","Defines the events passed between tasks","Defines the types to run unit tests for a task.","Helper functions used by any task","The task which implements the network.","Task for handling logic for quorum proposals","Task for handling QuorumProposalRecv events","The task which handles the logic for the quorum vote.","Task for requesting the network for things","Task which responsds to requests from the network","The task which implements all transaction handling","Task for handling upgrades","The task which implements verifiable information dispersal","The task which implements view synchronization","Generic task for collecting votes","Generic error while accessing the API, i.e. when API isn’…","SNAFU context selector for the <code>BuilderClientError::Api</code> …","Client for builder API","Represents errors than builder client may return","Block not found","SNAFU context selector for the <code>BuilderClientError::NotFound</code>…","","","Marker for <code>NodeType</code> used here","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","","Claim block","Claim block header input","","","","","Wait for server to become available Returns <code>false</code> if …","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Query builder for available blocks","","","","","","","Underlying surf_disco::Client","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Construct a new client from base url","","","","","","","","","","","","","","","","","","","","","","","","","","Underlying error","The state for the consensus task.  Contains all of the …","No value.","Some value of type <code>T</code>.","Alias for Optional type for Vote Collectors","","","Cancel all tasks the consensus tasks has spawned before …","Membership for DA committee Votes/certs","Network for DA committee","Reference to consensus. The replica will require a write …","View number this view is executing in.","The most recent proposal we have, will correspond to the …","most recent decided upgrade certificate","","","","","","The most recent upgrade certificate this node formed. …","Returns the argument unchanged.","Handles a consensus event received on the event stream","","Helper functions to handle proposal-related functionality.","The node’s id","","Immutable instance state","Calls <code>U::from(self)</code>.","","Output events to application","The commitment to the current block payload and its …","","Our Private Key","last View Sync Certificate or Timeout Certificate this …","Our public key","Publishes a proposal","Membership for Quorum Certs/votes","Network for all nodes","Round start delay from config, in milliseconds.","","Spawn a vote task for the given view.  Will try to vote …","Spawned tasks related to a specific view, so we can cancel …","This node’s storage ref","View timeout from config.","Membership for Timeout votes/certs","timeout task handle","Current timeout vote collection task with its view","","","","Validate the VID disperse is correctly signed and has the …","Globally shared reference to the current network version.","Handles view-change related functionality.","Current Vote collection task, with it’s view.","","TEMPORARY TYPE: Consensus task state when not using …","TEMPORARY TYPE: Consensus task state when not using …","TEMPORARY TYPE: Private key, latest decided upgrade …","Membership for DA committee Votes/certs","Membership for DA committee Votes/certs","Network for DA committee","Network for DA committee","Reference to consensus. The replica will require a write …","Reference to consensus. The replica will require a write …","Create the header for a proposal, build the proposal, and …","View number this view is executing in.","View number this view is executing in.","The most recent proposal we have, will correspond to the …","The most recent proposal we have, will correspond to the …","most recent decided upgrade certificate","most recent decided upgrade certificate","The most recent upgrade certificate this node formed. …","The most recent upgrade certificate this node formed. …","Gets the parent leaf and state from the parent of a …","Handle the received quorum proposal.","Handle <code>QuorumProposalValidated</code> event content and submit a …","The node’s id","The node’s id","Immutable instance state","Immutable instance state","Output events to application","Output events to application","The commitment to the current block payload and its …","The commitment to the current block payload and its …","Our Private Key","Our Private Key","last View Sync Certificate or Timeout Certificate this …","last View Sync Certificate or Timeout Certificate this …","Our public key","Our public key","Send a proposal for the view <code>view</code> from the latest high_qc …","Send a proposal for the view <code>view</code> from the latest high_qc …","Publishes a proposal if there exists a value which we can …","Membership for Quorum Certs/votes","Membership for Quorum Certs/votes","Network for all nodes","Network for all nodes","Round start delay from config, in milliseconds.","Round start delay from config, in milliseconds.","Spawned tasks related to a specific view, so we can cancel …","Spawned tasks related to a specific view, so we can cancel …","This node’s storage ref","This node’s storage ref","View timeout from config.","View timeout from config.","Membership for Timeout votes/certs","Membership for Timeout votes/certs","timeout task handle","timeout task handle","Current timeout vote collection task with its view","Current timeout vote collection task with its view","Check if we are able to vote, like whether the proposal is …","Validate the state and safety and liveness of a proposal …","Validates, from a given <code>proposal</code> that the view that it is …","Globally shared reference to the current network version.","Globally shared reference to the current network version.","Current Vote collection task, with it’s view.","Current Vote collection task, with it’s view.","Constant which tells <code>update_view</code> to not send a view change …","Constant which tells <code>update_view</code> to send a view change …","Update the view if it actually changed, takes a mutable …","Tracks state of a DA task","No value.","Some value of type <code>T</code>.","Alias for Optional type for Vote Collectors","The state’s api","","","Reference to consensus. Leader will require a read lock on …","View number this view is executing in.","Membership for the DA committee","Network for DA","","","","","","Returns the argument unchanged.","main task event handler","","This state’s ID","","Calls <code>U::from(self)</code>.","","","This Nodes private key","This Nodes public key","Membership for the quorum committee We need this only for …","","This node’s storage ref","","","","The current vote collection task, if there is one.","","Event when the transactions task has a block formed","Event when the transactions task has sequenced …","The DA leader has collected enough votes to form a DAC; …","A Data Availability Certificate (DAC) has been recieved by …","A DAC is validated.","A DA proposal has been received from the network; handled …","Send a DA proposal to the DA committee; emitted by the DA …","A DA proposal has been validated; handled by the DA task …","A DA vote has been received by the network; handled by the …","Send a DA vote to the DA leader; emitted by DA committee …","All of the possible events that can be passed between …","Marker that the task completed","Event when consensus decided on a leaf","Initiate a proposal right now for a provided view.","The next leader has collected enough votes to form a QC; …","A quorum proposal has been received from the network; …","Send a quorum proposal to the network; emitted by the …","A quorum proposal with the given parent leaf is validated.","All dependencies for the quorum vote are validated.","A quorum vote has been received from the network; handled …","Send a quorum vote to the next leader; emitted by a …","Event to send block payload commitment and metadata from …","Shutdown the task","A consensus view has timed out; emitted by a replica in …","A timeout vote recevied from the network; handled by …","Send a timeout vote to the network; emitted by consensus …","Send transactions to the network","Receive transactions from the network","Upgrade certificate has been sent to the network","Upgrade proposal has been received from the network","Upgrade proposal has been sent to the network","Upgrade vote has been received from the network","Upgrade vote has been sent to the network","Vid disperse share has been received from the network; …","VID share data is validated.","HotShot was upgraded, with a new network version.","Send VID shares to VID storage nodes; emitted by the DA …","The current view has changed; emitted by the replica in …","Receive a <code>ViewSyncCommitCertificate2</code> from the network; …","Send a <code>ViewSyncCommitCertificate2</code> from the network; …","Receive a <code>ViewSyncCommitVote</code> from the network; received by …","Send a <code>ViewSyncCommitVote</code> from the network; emitted by a …","Receive a <code>ViewSyncFinalizeCertificate2</code> from the network; …","Send a <code>ViewSyncFinalizeCertificate2</code> from the network; …","Receive a <code>ViewSyncFinalizeVote</code> from the network; received …","Send a <code>ViewSyncFinalizeVote</code> from the network; emitted by a …","Receive a <code>ViewSyncPreCommitCertificate2</code> from the network; …","Send a <code>ViewSyncPreCommitCertificate2</code> from the network; …","Receive a <code>ViewSyncPreCommitVote</code> from the network; received …","Send a <code>ViewSyncPreCommitVote</code> from the network; emitted by …","Timeout for the view sync protocol; emitted by a replica …","Trigger the start of the view sync protocol; emitted by …","Initiate a vote right now for the designated view.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","The state for the test harness task. Keeps track of which …","If true we won’t fail the test if extra events come in","","","","","","","The expected events we get from the test.  Maps an event …","Returns the argument unchanged.","Handles an event for the Test Harness Task.  If the event …","","","Calls <code>U::from(self)</code>.","","","Runs a test by building the task using <code>build_fn</code> and then …","","","","","","Utilities to print anyhow logs.","Helper function to send events and log errors","Calculate the vid disperse information from the payload …","Cancel a task","Print logs as debug","network event task state","the network message task state","","","","","","comm channel","","","committee filter","","","","","","","","","Sender to send internal events this task generates to …","","","Filter which returns false for the events that this …","Returns the argument unchanged.","Returns the argument unchanged.","","Handle the given event.","","Handle the message.","handle <code>VidDisperseSend</code>","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Record <code>HotShotAction</code> if available","membership for the channel","","","quorum filter","","","Storage to store actionable events","","","","","","","","upgrade filter","version","vid filter","view number","view sync filter","","","For the <code>SendPayloadCommitmentAndMetadata</code> event.","For the <code>QuroumProposalValidated</code> event after validating …","Proposal dependency types. These types represent events …","Handler for the proposal dependency","For the <code>ProposeNow</code> event.","For the <code>QCFormed</code> event.","The state for the quorum proposal task.","For the <code>QCFormed</code> event timeout branch.","For the <code>ViewSyncFinalizeCertificate2Recv</code> event.","","","","","","","Network for DA committee","Reference to consensus. The replica will require a write …","Reference to consensus. The replica will require a write …","Creates the requisite dependencies for the Quorum Proposal …","Create and store an <code>AndDependency</code> combining <code>EventDependency</code>…","Create an event dependency","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handles a consensus event received on the event stream","","","The node’s id","The node’s id","","","","Immutable instance state","Immutable instance state","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Latest view number that has been proposed for.","Latest view number that has been proposed for.","","","","Output events to application","Output events to application","","","","Our Private Key","Our Private Key","Table for the in-progress proposal depdencey tasks.","Our public key","Our public key","Membership for Quorum Certs/votes","Membership for Quorum Certs/votes","Network for all nodes","Round start delay from config, in milliseconds.","Round start delay from config, in milliseconds.","The event sender.","","This node’s storage ref","View timeout from config.","View timeout from config.","Membership for Timeout votes/certs","Membership for Timeout votes/certs","timeout task handle","","","","","","","","","","Update the latest proposed view number.","The view number to propose for.","","","","The state for the quorum proposal task. Contains all of …","","","Cancel all tasks the consensus tasks has spawned before …","Reference to consensus. The replica will require a write …","View number this view is executing in.","most recent decided upgrade certificate","","","","","","The most recent upgrade certificate this node formed. …","Returns the argument unchanged.","Handles all consensus events relating to propose and …","","The node’s id","","Immutable instance state","Calls <code>U::from(self)</code>.","","Output events to application","","Our Private Key","last View Sync Certificate or Timeout Certificate this …","Our public key","Membership for Quorum Certs/votes","Network for all nodes","Round start delay from config, in milliseconds.","","Spawned tasks related to a specific view, so we can cancel …","This node’s storage ref","View timeout from config.","Membership for Timeout votes/certs","timeout task handle","","","","","For the <code>DACertificateRecv</code> event.","For the <code>QuroumProposalValidated</code> event after validating …","The state for the quorum vote task.","For the <code>VIDShareRecv</code> event.","Vote dependency types.","Handler for the vote dependency.","For the <code>VoteNow</code> event.","","","","","","","Network for DA committee","Reference to consensus. The replica will require a write …","Reference to consensus. The replica will require a write …","Create and store an <code>AndDependency</code> combining <code>EventDependency</code>…","Create an event dependency.","Membership for DA committee certs/votes.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handle a vote dependent event received on the event stream","","","The node’s id","","","","Immutable instance state","Immutable instance state","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Latest view number that has been voted for.","","","","Output events to application","","","","Private Key.","Private Key.","Public key.","Public key.","Membership for Quorum certs/votes.","Membership for Quorum certs/votes.","Network for all nodes","Event sender.","","Reference to the storage.","Reference to the storage.","","","","","","","","","","Update the latest voted view number.","View number to vote on.","Table for the in-progress dependency tasks.","","","","A short lived task that waits a delay and starts trying …","Long running task which will request information after a …","Amount of time to try for a request before timing out.","Alias for a signature","Wrapper for the info in a VID request","Version discrimination","","","","","","","Creates the srequest structures for all types that are …","Returns true if we got the data we wanted, or the view has …","Committee","Delay before requesting peers","Duration to delay sending the first request","","","","","","","","","","Handle sending a VID Share request, runs the loop until …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Transform a response into a <code>HotShotEvent</code>","The node’s id","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Make a VID Request Message to send","Network to send requests over","Network to send requests","","","","This nodes private/signign key, used to sign requests.","This nodes public key","Quorum","The peers we will request in a random order","Wait the delay, then try to complete the request.  …","run a delayed request task for a request.  The first …","Channel to send the event when we receive a response","Signals delayed requesters to finish","","","A flag indicating that <code>HotShotEvent::Shutdown</code> has been …","A flag indicating that <code>HotShotEvent::Shutdown</code> has been …","Spawns tasks for a given view to retrieve any data needed.","Consensus shared state so we can check if we’ve gotten …","Shared state to check if the data go populated","","","","","","","","","","Last seen view, we won’t request for proposals before …","","","","Type alias for consensus state wrapped in a lock.","Task state for the Network Request Task. The task is …","Type alias for the channel that we receive requests from …","","","","Locked consensus state","","","","","Returns the argument unchanged.","Get the VID share from conensus storage, or calculate it …","Handle an incoming message.  First validates the sender, …","Handle the request contained in the message. Returns the …","","","Calls <code>U::from(self)</code>.","","Helper to turn a <code>ResponseMessage</code> into a <code>Message</code> by filling …","Create the network request state with the info it needs","","","This replicas private key","","This replicas public key","Quorum membership for checking if requesters have state","Receiver for requests","Run the request response loop until a …","Spawn the network response task to handle incoming request …","","","","Makes sure the sender is allowed to send a request.","Check the signature","","Builder Provided Responses","Tracks state of a Transaction task","The state’s api","Second API response It contains information about the …","Third API response It contains the final block information","Initial API response It contains information about the …","","","","","Builder API client","Reference to consensus. Leader will require a read lock on …","View number this view is executing in.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","main task event handler","","This state’s ID","","","InstanceState","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get last known builder commitment from consensus.","","","Membership for the quorum","Network for all nodes","","","Our Private Key","This Nodes Public Key","","","","","","","","","","","No value.","Some value of type <code>T</code>.","Tracks state of a DA task","Alias for Optional type for Vote Collectors","The state’s api","","","View number this view is executing in.","","","","","","Returns the argument unchanged.","main task event handler","","This state’s ID","","Calls <code>U::from(self)</code>.","","","This Nodes private key","This Nodes public key","Membership for Quorum Certs/votes","Network for all nodes","","Whether we should vote affirmatively on a given upgrade …","","","","The current vote collection task, if there is one.","","Tracks state of a VID task","The state’s api","","","Reference to consensus. Leader will require a read lock on …","View number this view is executing in.","","","","","","Returns the argument unchanged.","main task event handler","","This state’s ID","","Calls <code>U::from(self)</code>.","","Membership for the quorum","Network for all nodes","","Our Private Key","This Nodes Public Key","","","","","The view and ID of the current vote collection task, if …","","Commit phase","Finalize phase","No phase; before the protocol has begun","PreCommit phase","Type alias for a map from View Number to Relay to Vote Task","Phases of view sync","State of a view sync replica task","Main view sync task state","","HotShot consensus API","HotShot consensus API","","","","","","","","","","Map of commit vote accumulates for the relay","View HotShot is currently in","Current round HotShot is in","","","","","","","","","","","","","","","","","","","","Map of finalize vote accumulates for the relay","Whether we have seen a finalized certificate","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Handles incoming events for the main view sync task","Handle incoming events for the view sync replica task","","","","Our node id; for logging","Our node id; for logging","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Last view we garbage collected old tasks","","","","Membership for the quorum","Membership for the quorum","Network for all nodes","Network for all nodes","View HotShot wishes to be in","Round HotShot wishes to be in","How many timeouts we’ve seen in a row; is reset upon a …","","","","","Map of pre-commit vote accumulates for the relay","Our Private Key","Our Private Key","This Nodes Public Key","This Nodes Public Key","The relay index we are currently on","Map of running replica tasks","Handles incoming events for the main view sync task","Whether we have already sent a view change event for …","","","Timeout task handle, when it expires we try the next relay","","","","","","","","","","","Timeout duration for view sync rounds","Timeout for view sync rounds","","","","Info needed to create a vote accumulator task","Describes the functions a vote must implement for it to be …","Alias for DA vote accumulator","Trait for types which will handle a vote event.","Alias for Quorum vote accumulator","Alias for Timeout vote accumulator","Alias for upgrade vote accumulator","Alias for View Sync Commit vote accumulator","Alias for View Sync Finalize vote accumulator","Alias for View Sync Pre Commit vote accumulator","Task state for collecting votes of one type and emitting a …","Take one vote and accumultate it. Returns either the cert …","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","","","","","Generic function for spawnnig a vote task.  Returns the …","","","","","","","","","Event filter to use for this event","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","return the leader for this votes","Handle a vote event","","","","","","","","","Node id","This nodes id","Node id","Node id","Node id","Node id","Node id","Node id","Node id","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","return the Hotshot event for the completion of this CERT","Membership for voting","Membership we are accumulation votes for","Membership for voting","Membership for voting","Membership for voting","Membership for voting","Membership for voting","Membership for voting","Membership for voting","","","Public key for this node.","This nodes Pub Key","Public key for this node.","Public key for this node.","Public key for this node.","Public key for this node.","Public key for this node.","Public key for this node.","Public key for this node.","","","","","","","","The view which we are collecting votes for","View of the votes we are collecting","The view which we are collecting votes for","The view which we are collecting votes for","The view which we are collecting votes for","The view which we are collecting votes for","The view which we are collecting votes for","The view which we are collecting votes for","The view which we are collecting votes for","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,7,8,11,4,4,4,11,4,7,8,11,4,7,8,7,8,4,11,11,7,8,7,8,11,11,4,7,8,11,4,7,8,4,11,4,4,7,8,11,4,7,8,7,8,4,4,7,8,11,4,4,7,8,11,4,4,11,4,7,8,11,11,4,7,8,7,8,11,4,7,8,8,11,11,4,7,8,4,4,7,8,4,11,4,7,8,11,4,7,8,11,4,7,8,11,4,7,8,135,0,136,136,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,42,42,0,0,0,137,138,137,138,137,138,0,137,138,137,138,137,138,137,138,0,0,0,137,138,137,138,137,138,137,138,137,138,137,138,137,138,0,0,0,137,138,137,138,137,138,137,138,137,138,137,138,137,138,137,138,137,138,0,0,0,137,138,137,138,0,0,0,0,139,139,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,44,44,44,44,44,44,44,44,44,44,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,63,63,63,63,44,44,44,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,63,44,0,69,69,69,69,69,69,69,69,69,0,69,69,69,69,69,0,69,69,69,69,69,0,0,0,0,77,0,0,78,79,78,79,78,79,78,78,0,79,78,79,78,79,78,79,78,78,79,78,79,79,78,79,79,78,78,79,79,78,79,78,79,78,79,79,79,78,0,79,78,79,78,79,78,79,78,79,78,0,79,0,79,0,79,78,87,87,0,0,87,87,0,87,87,89,84,87,89,84,87,84,89,84,84,84,84,89,84,87,89,84,87,89,84,87,89,84,87,87,84,87,89,84,87,84,89,84,89,84,89,84,87,89,84,89,84,87,89,84,89,84,87,89,84,89,84,87,89,84,84,89,84,89,84,84,89,84,89,84,84,89,84,89,84,84,89,84,87,89,84,87,89,84,87,84,89,89,84,87,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,92,92,0,92,0,0,92,93,91,92,93,91,92,91,93,91,91,91,91,93,91,92,93,91,92,93,91,92,93,91,92,92,91,92,93,91,92,91,93,91,91,93,91,92,93,91,93,91,92,91,93,91,92,91,93,91,92,93,91,93,91,93,91,91,93,91,93,91,93,91,92,93,91,92,93,91,92,91,93,91,93,91,92,0,0,0,0,0,94,94,96,97,94,96,97,94,96,94,94,96,94,96,97,94,96,97,94,96,97,96,94,96,97,94,94,96,97,94,96,94,94,96,97,94,96,97,94,96,97,0,94,96,94,96,97,94,94,94,96,96,94,96,94,94,94,94,96,94,94,96,94,96,97,94,96,97,94,96,97,94,94,96,97,0,0,0,140,99,99,99,99,99,99,99,99,99,99,99,99,103,99,99,99,99,140,99,99,140,99,99,99,99,0,99,99,99,99,0,99,0,0,104,105,105,105,105,104,105,104,104,104,104,105,104,105,104,105,104,105,104,104,105,104,104,104,104,104,105,104,104,105,104,104,105,104,104,104,105,104,104,104,104,105,104,105,104,105,104,105,104,104,141,141,0,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,0,0,0,0,108,109,110,142,109,110,108,109,110,108,108,108,109,109,110,109,110,108,109,110,108,109,110,108,109,110,108,108,108,108,108,108,109,110,109,110,108,109,110,108,108,109,110,109,110,108,109,110,109,110,108,109,110,108,109,109,110,108,109,110,109,110,109,110,109,108,109,110,108,109,109,110,109,110,110,109,109,110,109,110,110,108,109,110,108,109,110,108,109,110,108,109,110,109,110,108,0,0,0,0,0,0,0,0,0,0,0,112,112,143,144,145,146,147,148,149,112,113,112,113,0,112,113,112,113,112,113,112,113,118,112,112,112,112,112,112,112,112,113,115,118,112,112,112,112,112,112,112,112,112,113,143,144,145,146,147,148,149,112,113,112,113,112,113,115,112,113,143,144,145,146,147,148,149,112,113,112,113,143,144,145,146,147,148,149,112,112,113,112,113,112,113,112,113,143,144,145,146,147,148,149,112,113],"f":"```````````````````````{{cb}d{}}0`{cf{}}0{h{{l{j}}}}{ce{}{}}0000000{nh}{{{A`{c}}}h{{Ad{Ab}}}}{h{{l{f}}}}{{{Af{ce}}AhAj}{{An{{Al{c}}h}}}B`Bb}{{{Af{ce}}AhAj}{{An{{Bd{c}}h}}}B`Bb}{nn}{{{A`{c}}}{{A`{c}}}Bf}{{ce}d{}{}}0{{{Af{ce}}Bh}BjB`Bb}{Blc{}}0000000{hBn}{{ce}{{An{{C`{gi}}}}}{}{}{}{}}{c{{An{h}}}Cb}111{Bld}000{n{{An{ch}}}{}}{{{A`{c}}}{{An{eh}}}{{Ad{Ab}}}{}}{{hCd}Cf}0{{nCd}Cf}{{{A`{c}}Cd}CfCh}{cc{}}{Cjh}111{{{Af{ce}}ClAj}{{An{{D`{{Cn{c}}}}h}}}B`Bb}{{ce}{{Db{eg}}}{}{DdDfDh}{}}{c{}{}}{{}Bl}000`{ce{}{}}000{{nc}h{}}{{{A`{c}}e}h{{Ad{Ab}}}{}}{{}{{An{DjDl}}}}000`{c{{Af{eg}}}{{Ad{Dn}}}B`Bb}{{}}000{{hc}AnE`}{h{{l{f}}}}77{cAb{}}{c{{An{e}}}{}{}}0000000{cEb{}}000::::`````::{{{Ed{ce}}}dB`{{Ef{c}}}}``````{Blc{}}0{{ce}{{An{{C`{gi}}}}}{}{}{}{}}{Bld}{{{Ed{ce}}{Ej{{Eh{c}}}}}BjB`{{Ef{c}}}}`{cc{}}{{{Ed{ce}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}dB`{{Ef{c}}}}{{c{En{{Ed{eg}}}}}{{l{d}}}{}B`{{Ef{e}}}}``{{}Bl}`{ce{}{}}{{}{{An{DjDl}}}}``{{}}```{{{Ed{ce}}{El{{Ej{{Eh{c}}}}}}}{{F`{d}}}B`{{Ef{c}}}}```{cBj{}}{{{Ed{ce}}{El{{Ej{{Eh{c}}}}}}}dB`{{Ef{c}}}}``````{c{{An{e}}}{}{}}0{cEb{}}{{{Ed{ce}}{Fd{c{Fb{c}}}}}BjB`{{Ef{c}}}}```8`````````{{{Ej{{Fh{{Ff{c}}}}}}{El{{Ej{{Eh{c}}}}}}{Fj{c}}{Fl{c}}Ej{l{{Fn{c}}}}{l{{G`{c}}}}AjEj}dB`}````````{{Ej{Ej{{Fh{{Ff{c}}}}}}}{{F`{{Gb{{Fl{c}}Ej}}}}}B`}{{{Fd{c{Gd{c}}}}{El{{Ej{{Eh{c}}}}}}{Ed{ce}}}{{F`{{l{{Gd{c}}}}}}}B`{{Ef{c}}}}{{{Gd{c}}{El{{Ej{{Eh{c}}}}}}{Ed{ce}}}{{F`{d}}}B`{{Ef{c}}}}``````````````{{{El{{Ej{{Eh{c}}}}}}Ej{Ej{{Fh{{Ff{c}}}}}}Aj{l{{Fn{c}}}}{l{{Fn{c}}}}{l{{Fj{c}}}}{l{{G`{c}}}}Ej}{{F`{{Gf{d}}}}}B`}{{{El{{Ej{{Eh{c}}}}}}Ej{Ej{{Fh{{Ff{c}}}}}}{Fn{c}}AjEj}{{F`{{Gf{d}}}}}B`}1``````````````````{{{Gd{c}}{Ej{{Fh{{Ff{c}}}}}}{Ej{Fh}}EjEj{Gb{{l{{Fn{c}}}}Ej{El{{Ej{{Eh{c}}}}}}}}}BjB`}{{{Fd{c{Gd{c}}}}{Fl{c}}{Ej{{Fh{{Ff{c}}}}}}{l{{Fn{c}}}}Ej{El{{Ej{{Eh{c}}}}}}{El{{Gh{c}}}}}{{F`{d}}}B`}{{{Fd{c{Gd{c}}}}EjEj}{{F`{d}}}B`}``````{{{El{{Ej{{Eh{c}}}}}}Aj{Ej{{Fh{{Ff{c}}}}}}{l{{Gf{d}}}}Bj}{{F`{d}}}B`}`````{ce{}{}}0````{Blc{}}0{{ce}{{An{{C`{gi}}}}}{}{}{}{}}{Bld}{{{Gj{ceg}}{Ej{{Eh{c}}}}}BjB`{{Ef{c}}}{{Gl{ce}}}}{cc{}}{{{Gj{ceg}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{l{Gn}}}B`{{Ef{c}}}{{Gl{ce}}}}{{c{En{{Gj{egi}}}}}{{l{Gn}}}{}B`{{Ef{e}}}{{Gl{eg}}}}`{{}Bl}8{{}{{An{DjDl}}}}{{}}```{cBj{}}`{c{{An{e}}}{}{}}0{cEb{}}`=`````````````````````````````````````````````````````{{cb}d{}}0>>>>{GnGn}{{{Eh{c}}}{{Eh{c}}}{BfB`}}{{ce}d{}{}}0{Blc{}}000{{ce}{{An{{C`{gi}}}}}{}{}{}{}}0{Bld}0{{GnGn}Bj}{{{Eh{c}}{Eh{c}}}Bj{H`B`}}{{ce}Bj{}{}}0000000{{GnCd}Cf}{{{Eh{c}}Cd}Cf{ChB`}}{cc{}}0{{ce}Aj{HbHd}Hf}0{{Gnc}dHh}{{{Eh{c}}e}d{HbB`}Hh}{{}Bl}0{ce{}{}}0{{}{{An{DjDl}}}}0{{}}022{c{{An{e}}}{}{}}000{cEb{}}044``44{Blc{}}0{{ce}{{An{{C`{gi}}}}}{}{}{}{}}{Bld}`<{{{Ej{{Eh{c}}}}{En{{Hj{c}}}}Bj}{{l{Gn}}}B`}{{c{En{{Hj{e}}}}}{{l{Gn}}}{}B`}:987{{{D`{{Eh{c}}}}{Hl{{Eh{c}}Bl}}eBj}dB`{{I`{}{{Hn{{Ej{{Eh{c}}}}}}}}Df}}{cBj{}}887;`{{c{El{c}}}d{BfCh}}{{{Ej{{Id{Ib}}}}Ej{l{If}}}{{Ih{c}}}B`}{{{Gf{c}}}d{}}{Ijd}``{{cb}d{}}{ce{}{}}000`{{{Il{c}}}{{Il{c}}}{BfB`}}{{ce}d{}{}}{{{Ej{{Eh{c}}}}}BjB`}????>>==`{{{In{ceg}}i}BjB`{{Jb{{J`{c}}}}}{{Jd{c}}}{}}{{{Il{c}}e}BjB`{}}`{cc{}}0{{c{En{{In{egi}}}}}{{l{Gn}}}{}B`{{Jb{{J`{e}}}}}{{Jd{e}}}}{{{In{ceg}}{Ej{{Eh{c}}}}}{{l{Gn}}}B`{{Jb{{J`{c}}}}}{{Jd{c}}}}{{c{En{{Il{e}}}}}{{l{d}}}{}B`}{{{Il{c}}{D`{{J`{c}}}}}dB`}{{{In{ceg}}{Fd{c{Ih{c}}}}}{{l{Gn}}}B`{{Jb{{J`{c}}}}}{{Jd{c}}}}{{}Bl}0<<{{}{{An{DjDl}}}}0{{{l{Jf}}{Ej{{Fh{e}}}}}{{An{dd}}}B`{{Jd{c}}}}`{{}}0<{cBj{}}0`{ce{}{}}{c{{An{e}}}{}{}}000{cEb{}}0{{{Ej{{Eh{c}}}}}BjB`}`0`033`````````333333```{{{Jh{ce}}{Jj{{Ej{{Eh{c}}}}}}{Ej{{Eh{c}}}}}{{Jl{{D`{{D`{{Ej{{Eh{c}}}}}}}}}}}B`{{Ef{c}}}}{{{Jh{ce}}{Jj{{Ej{{Eh{c}}}}}}{El{{Ej{{Eh{c}}}}}}{Ej{{Eh{c}}}}}dB`{{Ef{c}}}}{{{Jh{ce}}Jn{Jj{{Ej{{Eh{c}}}}}}}{{K`{{Ej{{Eh{c}}}}}}}B`{{Ef{c}}}}{Blc{}}00000{{ce}{{An{{C`{gi}}}}}{}{}{}{}}00{Bld}00{{JnJn}Bj}{{{Jh{ce}}{Ej{{Eh{c}}}}}BjB`{{Ef{c}}}}{{JnCd}Cf}{cc{}}00{{{Jh{ce}}{Ej{{Eh{c}}}}{Jj{{Ej{{Eh{c}}}}}}{El{{Ej{{Eh{c}}}}}}}dB`{{Ef{c}}}}{{{Kb{c}}e}dB`{}}{{c{En{{Jh{eg}}}}}{{l{d}}}{}B`{{Ef{e}}}}``{{}Bl}00``{ce{}{}}00``{{}{{An{DjDl}}}}00``{{}}00```````````{cBj{}}``````{c{{An{e}}}{}{}}00000{cEb{}}00{{{Jh{ce}}}BjB`{{Ef{c}}}}`666`66{{{Kd{ce}}}dB`{{Ef{c}}}}```{Blc{}}0{{ce}{{An{{C`{gi}}}}}{}{}{}{}}{Bld}{{{Kd{ce}}{Ej{{Eh{c}}}}}BjB`{{Ef{c}}}}`{cc{}}{{{Kd{ce}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}dB`{{Ef{c}}}}{{c{En{{Kd{eg}}}}}{{l{d}}}{}B`{{Ef{e}}}}`?`>=`<``````;`````::9>```````>>>>>>```{{{Kf{ce}}{Jj{{Ej{{Eh{c}}}}}}{El{{Ej{{Eh{c}}}}}}{l{{Ej{{Eh{c}}}}}}}dB`{{Ef{c}}}}{{{Kf{ce}}Kh{Jj{{Ej{{Eh{c}}}}}}}{{K`{{Ej{{Eh{c}}}}}}}B`{{Ef{c}}}}`888888777666{{KhKh}Bj}{{{Kf{ce}}{Ej{{Eh{c}}}}}BjB`{{Ef{c}}}}{{KhCd}Cf}777{{{Kf{ce}}{Ej{{Eh{c}}}}{Jj{{Ej{{Eh{c}}}}}}{El{{Ej{{Eh{c}}}}}}}dB`{{Ef{c}}}}{{{Kj{ce}}g}dB`{{Ef{c}}}{}}{{c{En{{Kf{eg}}}}}{{l{d}}}{}B`{{Ef{e}}}}`{{}Bl}00``{ce{}{}}00`{{}{{An{DjDl}}}}00`{{}}00````````{cBj{}}``{c{{An{e}}}{}{}}00000{cEb{}}00{{{Kf{ce}}}BjB`{{Ef{c}}}}``666``````666666{{{Kl{ceg}}g}{{D`{{Kn{c}}}}}B`{{Ef{c}}}Bb}{{{L`{ce}}{Lb{c}}}BjB`{{Ef{c}}}}```{Blc{}}00000{{ce}{{An{{C`{gi}}}}}{}{}{}{}}00{{{L`{ce}}{Lb{c}}}dB`{{Ef{c}}}}{Bld}00{{{Kl{ceg}}i}BjB`{{Ef{c}}}Bb{}}{cc{}}00{{c{En{{Kl{egi}}}}}{{l{k}}}{}B`{{Ef{e}}}Bb{}}{{{L`{ce}}{Ld{c}}}dB`{{Ef{c}}}}`{{}Bl}00{ce{}{}}00{{}{{An{DjDl}}}}00{{{Lb{c}}}{{J`{c}}}B`}``{{}}00````{{{L`{ce}}{Kn{c}}}dB`{{Ef{c}}}}{{{Kl{ceg}}{Kn{c}}{El{{Ej{{Eh{c}}}}}}g}dB`{{Ef{c}}}Bb}`{{{Kl{ceg}}}dB`{{Ef{c}}}Bb}{cBj{}}1``{{{Kl{ceg}}{El{{Ej{{Eh{c}}}}}}g}dB`{{Ef{c}}}Bb}``{c{{An{e}}}{}{}}00000{cEb{}}00`:::````::`{Blc{}}0{{ce}{{An{{C`{gi}}}}}{}{}{}{}}{Bld}{cc{}}{{{Lf{c}}}{{l{{Fd{c{Fb{c}}}}}}}B`}{{{Lf{c}}{J`{c}}{Lh{{J`{c}}}}}dB`}{{{Lf{c}}{Lj{c}}}{{J`{c}}}B`}{{}Bl}`{ce{}{}}{{}{{An{DjDl}}}}{{{Lf{c}}{Ll{c}}}{{J`{c}}}B`}{{{Ej{{Fh{{Ff{c}}}}}}{Ln{c}}Ej}{{Lf{c}}}B`}`{{}}`````{{{Lf{c}}{K`{{Ej{{Eh{c}}}}}}}dB`}{{{Lf{c}}{Jj{{Ej{{Eh{c}}}}}}}{{Gf{d}}}B`}{c{{An{e}}}{}{}}0{cEb{}}{{{Lf{c}}}BjB`}{{{Lj{c}}}BjB`}:``````::::```{Blc{}}000{{ce}{{An{{C`{gi}}}}}{}{}{}{}}0{Bld}0{{{M`{cegi}}{Ej{{Eh{c}}}}}BjB`{{Ef{c}}}{{Gl{ce}}}Bb}{cc{}}0{{{M`{cegi}}Cl}{{F`{{Mb{c}}}}}B`{{Ef{c}}}{{Gl{ce}}}Bb}{{{M`{cegi}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{l{Gn}}}B`{{Ef{c}}}{{Gl{ce}}}Bb}{{c{En{{M`{egik}}}}}{{l{Gn}}}{}B`{{Ef{e}}}{{Gl{eg}}}Bb}`{{}Bl}0`{ce{}{}}0{{{M`{cegi}}}{{Gb{Cl}}}B`{{Ef{c}}}{{Gl{ce}}}Bb}{{}{{An{DjDl}}}}0``{{}}0``{cBj{}}{c{{An{e}}}{}{}}000{cEb{}}066{{{M`{cegi}}}{{l{{Mb{c}}}}}B`{{Ef{c}}}{{Gl{ce}}}Bb}`````77`{Blc{}}0{{ce}{{An{{C`{gi}}}}}{}{}{}{}}{Bld}{{{Md{ceg}}i}BjB`{{Ef{c}}}{{Gl{ce}}}{}}{cc{}}{{{Md{ceg}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{l{Gn}}}B`{{Ef{c}}}{{Gl{ce}}}}{{c{En{{Md{egi}}}}}{{l{k}}}{}B`{{Ef{e}}}{{Gl{eg}}}{}}`?><;````:`998`>``>>``6654{{{Mf{ceg}}i}BjB`{{Ef{c}}}{{Gl{ce}}}{}}3{{{Mf{ceg}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{l{Gn}}}B`{{Ef{c}}}{{Gl{ce}}}}{{c{En{{Mf{egi}}}}}{{l{Gn}}}{}B`{{Ef{e}}}{{Gl{eg}}}}`{{}Bl}{ce{}{}}{{}{{An{DjDl}}}}``{{}}``{cBj{}}{c{{An{e}}}{}{}}0{cEb{}}`5````````{{cb}d{}}```666666{MhMh}{{ce}d{}{}}```{Blc{}}00000{{ce}{{An{{C`{gi}}}}}{}{}{}{}}00{Bld}00{{MhMh}Bj}{{ce}Bj{}{}}000{{{Mj{ceg}}i}BjB`{{Ef{c}}}{{Gl{ce}}Bf}{}}{{{Ml{ceg}}i}BjB`{{Ef{c}}}{{Gl{ce}}}{}}``{{MhCd}Cf}{cc{}}00{{ce}Aj{HbHd}Hf}{{{Mj{ceg}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}dB`{{Ef{c}}}{{Gl{ce}}Bf}}{{{Ml{ceg}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{l{Gn}}}B`{{Ef{c}}}{{Gl{ce}}}}{{c{En{{Mj{egi}}}}}{{l{d}}}{}B`{{Ef{e}}}{{Gl{eg}}Bf}}{{c{En{{Ml{egi}}}}}{{l{d}}}{}B`{{Ef{e}}}{{Gl{eg}}}}{{Mhc}dHh}``{{}Bl}00{ce{}{}}00`{{}{{An{DjDl}}}}00```````{{MhMh}{{l{Mn}}}}{{}}00```````9`{cBj{}}0`4{c{{An{e}}}{}{}}00000{cEb{}}00``666```````````{{{N`{ceg}}e{El{{Ej{{Eh{c}}}}}}}{{l{Gn}}}B`{}{}}````````7777{{{Nb{c}}e{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{l{{N`{ceg}}}}}B`{NdNfDfDh}{{Nj{}{{Nh{}}}}ChDfDh}}{Blc{}}000{{ce}{{An{{C`{gi}}}}}{}{}{}{}}0{Bld}0{{{Ej{{Eh{c}}}}}BjB`}0000000{cc{}}0{Nf}{{Nl{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{Ob{{O`{Nn}}}}}B`}{{{N`{c{Od{c}}{Of{c}}}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{Ob{{O`{Nn}}}}}B`}{{{N`{c{Oh{c}}{Oj{c}}}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{Ob{{O`{Nn}}}}}B`}{{{N`{c{Ol{c}}{On{c}}}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{Ob{{O`{Nn}}}}}B`}{{c{En{{N`{egi}}}}}{{l{k}}}{}B`{NdNfDfDh}{{Nj{}{{Nh{}}}}ChDfDh}{}}{{{N`{c{A`{c}}{Ab{c}}}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{Ob{{O`{Nn}}}}}B`}{{{N`{c{Ad{c}}{Fn{c}}}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{Ob{{O`{Nn}}}}}B`}{{{N`{c{Af{c}}{Ah{c}}}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{Ob{{O`{Nn}}}}}B`}{{{N`{c{Aj{c}}{Al{c}}}}{Ej{{Eh{c}}}}{El{{Ej{{Eh{c}}}}}}}{{Ob{{O`{Nn}}}}}B`}`````````{{}Bl}0{ce{}{}}0{{}{{An{DjDl}}}}0{e{{Eh{c}}}B`{{Nj{c}{{Nh{}}}}}}`````````{{}}0`````````{cBj{}}{c{{An{e}}}{}{}}000{cEb{}}0`````````66","c":[],"p":[[5,"Private",1124],[1,"unit"],[10,"Error",1125],[6,"BuilderClientError",17],[5,"Backtrace",1126],[6,"Option",1127],[5,"NotFoundSnafu",17],[5,"ApiSnafu",17],[5,"String",1128],[10,"Into",1129],[5,"BuilderClient",17],[5,"BuilderCommitment",1130],[1,"u64"],[5,"AvailableBlockData",1131],[6,"Result",1132],[10,"NodeType",1133],[10,"StaticVersionType",1134],[5,"AvailableBlockHeaderInput",1131],[10,"Clone",1135],[5,"Duration",1136],[1,"bool"],[1,"usize"],[1,"str"],[5,"With",1137],[10,"Deserializer",1138],[5,"Formatter",1139],[8,"Result",1139],[10,"Debug",1139],[6,"Error",1140],[8,"VidCommitment",1141],[5,"AvailableBlockInfo",1131],[5,"Vec",1142],[5,"IndentedSection",1143],[10,"Display",1139],[10,"Send",1144],[10,"Sync",1144],[5,"Layout",1145],[5,"LayoutError",1145],[5,"Url",1146],[10,"Serializer",1147],[5,"TypeId",1148],[5,"ConsensusTaskState",122],[10,"NodeImplementation",1133],[6,"HotShotEvent",276],[5,"Arc",1149],[5,"Sender",1150],[5,"Task",1151],[8,"Result",1152],[5,"VidDisperseShare",1153],[5,"Proposal",1154],[5,"Consensus",1155],[5,"RwLock",1156],[5,"CommitmentAndMetadata",1155],[5,"Leaf",1153],[8,"UpgradeCertificate",1157],[6,"ViewChangeEvidence",1153],[1,"tuple"],[5,"QuorumProposal",1153],[5,"JoinHandle",1158],[5,"Event",1159],[5,"DATaskState",242],[10,"ConsensusApi",1160],[5,"HotShotTaskCompleted",276],[10,"PartialEq",1161],[10,"Hash",1162],[10,"Sized",1144],[10,"BuildHasher",1162],[10,"Hasher",1162],[5,"TestHarnessState",383],[5,"HashMap",1163],[17,"Event"],[10,"TaskState",1151],[1,"u8"],[1,"slice"],[8,"VidPrecomputeData",1141],[5,"VidDisperse",1153],[10,"AnyhowTracing",405],[5,"NetworkMessageTaskState",410],[5,"NetworkEventTaskState",410],[5,"Message",1154],[10,"ConnectedNetwork",1164],[10,"Storage",1165],[6,"HotShotAction",1159],[5,"QuorumProposalTaskState",468],[5,"Receiver",1150],[5,"AndDependency",1166],[6,"ProposalDependency",468],[5,"EventDependency",1166],[5,"ProposalDependencyHandle",468],[5,"QuorumProposalRecvTaskState",562],[5,"QuorumVoteTaskState",601],[6,"VoteDependency",601],[5,"VoteDependencyHandle",601],[5,"NetworkRequestState",684],[6,"RequestKind",1164],[5,"DelayedRequester",684],[5,"VidRequest",684],[6,"SequencingMessage",1154],[5,"NetworkResponseState",764],[5,"ResponseChannel",1164],[5,"DataRequest",1164],[6,"ResponseMessage",1164],[8,"RequestReceiver",764],[5,"TransactionTaskState",800],[5,"BuilderResponses",800],[5,"UpgradeTaskState",852],[5,"VIDTaskState",884],[6,"ViewSyncPhase",913],[5,"ViewSyncTaskState",913],[5,"ViewSyncReplicaTaskState",913],[6,"Ordering",1161],[5,"VoteCollectionTaskState",1017],[5,"AccumulatorInfo",1017],[10,"Vote",1167],[10,"AggregatableVote",1017],[17,"Voteable"],[10,"Certificate",1167],[10,"HandleVoteEvent",1017],[10,"Future",1168],[5,"Box",1169],[5,"Pin",1170],[8,"ViewSyncFinalizeVote",1171],[8,"ViewSyncFinalizeCertificate2",1157],[8,"TimeoutVote",1171],[8,"TimeoutCertificate",1157],[8,"DAVote",1171],[8,"DACertificate",1157],[8,"ViewSyncPreCommitVote",1171],[8,"ViewSyncPreCommitCertificate2",1157],[8,"UpgradeVote",1171],[8,"ViewSyncCommitVote",1171],[8,"ViewSyncCommitCertificate2",1157],[8,"QuorumVote",1171],[8,"QuorumCertificate",1157],[15,"Api",121],[8,"VoteCollectorOption",122],[8,"TemporaryProposalRecvCombinedType",176],[8,"TemporaryProposalValidatedCombinedType",176],[8,"VoteCollectorOption",242],[8,"LockedConsensusState",764],[8,"VoteCollectorOption",852],[8,"RelayMap",913],[8,"QuorumVoteState",1017],[8,"DAVoteState",1017],[8,"TimeoutVoteState",1017],[8,"UpgradeVoteState",1017],[8,"ViewSyncPreCommitState",1017],[8,"ViewSyncCommitVoteState",1017],[8,"ViewSyncFinalizeVoteState",1017]],"b":[[67,"impl-Debug-for-BuilderClientError"],[68,"impl-Display-for-BuilderClientError"],[435,"impl-TaskState-for-NetworkEventTaskState%3CTYPES,+COMMCHANNEL,+S%3E"],[436,"impl-NetworkEventTaskState%3CTYPES,+COMMCHANNEL,+S%3E"],[1051,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+QuorumData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+QuorumData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+QuorumData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+QuorumData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1052,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E,+OneHonestThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E,+OneHonestThreshold%3E%3E"],[1053,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncCommitData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncCommitData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1054,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+UpgradeProposalData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+UpgradeProposalData%3CTYPES%3E,+UpgradeThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+UpgradeProposalData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+UpgradeProposalData%3CTYPES%3E,+UpgradeThreshold%3E%3E"],[1055,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1056,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+DAData%3E,+SimpleCertificate%3CTYPES,+DAData,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+DAData%3E,+SimpleCertificate%3CTYPES,+DAData,+SuccessThreshold%3E%3E"],[1057,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+TimeoutData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+TimeoutData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+TimeoutData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+TimeoutData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1062,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1063,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+TimeoutData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+TimeoutData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+TimeoutData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+TimeoutData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1064,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+DAData%3E,+SimpleCertificate%3CTYPES,+DAData,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+DAData%3E,+SimpleCertificate%3CTYPES,+DAData,+SuccessThreshold%3E%3E"],[1065,"impl-TaskState-for-VoteCollectionTaskState%3CTYPES,+VOTE,+CERT%3E"],[1066,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E,+OneHonestThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E,+OneHonestThreshold%3E%3E"],[1067,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+UpgradeProposalData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+UpgradeProposalData%3CTYPES%3E,+UpgradeThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+UpgradeProposalData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+UpgradeProposalData%3CTYPES%3E,+UpgradeThreshold%3E%3E"],[1068,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncCommitData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncCommitData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1069,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+QuorumData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+QuorumData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+QuorumData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+QuorumData%3CTYPES%3E,+SuccessThreshold%3E%3E"]]}],\
["hotshot_testing",{"doc":"Testing infrastructure for <code>HotShot</code>","t":"GPNCNNNNCNNNNNNNNNCNCCCCCCCCNNNCNCCNFKRFFFFFFKNNNOOONNNNNNNNNNNNNNHNNNNONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNHONOONNNNNNNOOOONNNNHMMNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNFGFFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNONNNNNNNNNNNPPPPFPFPFPFPFPFFGFFIPFGNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNOONNOOOONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOPPPKGNNNNNNNNNNNNNNMCNNNMNNNNNNNNCNIFFHHONNNNONNNNNNNNNNHNNNNONNOONNNNNNHONNOHHHHHHNNNNNNHHNNIIFONNOOOOOOHONNNNNNONONONONNHOOONOOOOOOOOOOOOONNNOONFSFIFONNNNNNONNNNNNNNNNNNONNNNNNONNNNNNOOOHHHHNNNHOONNNNNNNNNHHHHNNNFPPPFFFFIPGNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNNNNNNNNNNNNNOOONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNHHHHHHHHHHHFFNNNNNNONNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNOOOOONNOOOOOOOONNNNNNONNOOONNHIIFFNNNNOONNNNNNNNNNNNNNNNNONNNOONNNNNNNNPGIFPPPPFPPPKFNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNONNNNNNNNOONNNNOOOOONNNNNNNNNNNNNNNNNNNNNNPPFGFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNONNNNNNNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNOOOOONNNNNNNNONNNNNNNNNNNOONNNNNNNOOOONONNNNNNOOOONNPPGPFGFFPNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["GlobalTestEvent","ShutDown","__clone_box","block_builder","borrow","borrow_mut","clone","clone_into","completion_task","deref","deref_mut","deserialize","drop","fmt","from","init","into","layout_raw","overall_safety_task","pointer_metadata","predicates","script","spinning_task","task_helpers","test_builder","test_helpers","test_launcher","test_runner","to_owned","try_from","try_into","txn_task","type_id","view_generator","view_sync_task","vzip","BlockEntry","BuilderTask","Config","RandomBuilderImplementation","RandomBuilderSource","SimpleBuilderImplementation","SimpleBuilderSource","SimpleBuilderTask","SubmittedTransaction","TestBuilderImplementation","__clone_box","__clone_box","__clone_box","blocks","blocks","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_block","claim_block","claim_block","claim_block_header_input","claim_block_header_input","claimed","clone","clone","clone","clone_into","clone_into","clone_into","decided_transactions","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from","from","get_available_blocks","get_available_blocks","get_builder_address","get_builder_address","header_input","init","init","init","init","init","init","init","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","make_simple_builder","metadata","new","num_storage_nodes","payload","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","priv_key","priv_key","pub_key","pub_key","read","read","run","run","run_random_builder","start","start","start","start","start","to_owned","to_owned","to_owned","transaction","transactions","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CompletionTask","CompletionTaskDescription","CompletionTaskErr","CompletionTaskErrSnafu","TimeBasedCompletionTaskBuilder","TimeBasedCompletionTaskDescription","__clone_box","__clone_box","__clone_box","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","duration","duration","fail","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","handles","header","in_current_span","init","init","init","init","init","into","into","into","into","into","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","run","rx","source","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tx","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","wait_for_shutdown","Err","Failed","InProgress","InconsistentBlocks","InconsistentBlocksSnafu","InconsistentStates","InconsistentStatesSnafu","InconsistentTxnsNum","InconsistentTxnsNumSnafu","MismatchedLeaf","MismatchedLeafSnafu","NotEnoughDecides","NotEnoughDecidesSnafu","Ok","OverallSafetyPropertiesDescription","OverallSafetyTask","OverallSafetyTaskErr","RoundCtx","RoundResult","StateAndBlock","TooManyFailures","TooManyFailuresSnafu","ViewStatus","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error_source","backtrace","block_map","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","cause","check_block","check_if_failed","check_leaf","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","ctx","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","expected","fail","fail","fail","fail","fail","fail","failed_nodes","failed_views","failed_views","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","gen_leaves","got","handle_event","handle_message","handles","header","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","insert_error_to_context","insert_into_result","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaf_map","map","num_failed_views","num_successful_views","num_txns_map","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","properties","round_results","should_shutdown","source","status","success_nodes","successful_views","threshold_calculator","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transaction_threshold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_status","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","expected","failed_views","got","map","Fail","Incomplete","Pass","Predicate","PredicateResult","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","evaluate","event","fmt","from","from","info","init","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upgrade","vzip","EventCallback","EventPredicate","TestPredicate","all","all_predicates","alloc","borrow","borrow","borrow_mut","borrow_mut","check","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","evaluate","evaluate","exact","fmt","fmt","from","from","function","info","info","info","info","init","init","into","into","layout_raw","layout_raw","leaf_decided","phantom","pointer_metadata","pointer_metadata","ptr","quorum_proposal_send","quorum_proposal_send_with_null_block","quorum_proposal_send_with_upgrade_certificate","quorum_proposal_validated","quorum_vote_send","timeout_vote_send","try_from","try_from","try_into","try_into","type_id","type_id","upgrade_certificate_formed","view_change","vzip","vzip","ConsensusTaskTestState","UpgradeCertCallback","UpgradeCertPredicate","alloc","borrow","borrow_mut","check","committee_membership","committee_network","consensus","cur_view","current_proposal","decided_upgrade_cert","decided_upgrade_cert","deref","deref_mut","deserialize","drop","evaluate","fmt","formed_upgrade_certificate","from","id","info","info","init","instance_state","into","layout_raw","no_decided_upgrade_cert","output_event_stream","payload_commitment_and_metadata","phantom","pointer_metadata","private_key","proposal_cert","ptr","public_key","quorum_membership","quorum_network","round_start_delay","spawned_tasks","storage","timeout","timeout_membership","timeout_task","timeout_vote_collector","try_from","try_into","type_id","version","vote_collector","vzip","Expectations","RECV_TIMEOUT","TaskScript","TestScript","TestScriptStage","asserts","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buf","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","expectations","from","from","from","init","init","init","inputs","into","into","into","layout_raw","layout_raw","layout_raw","len","output_asserts","outputs","panic_extra_output","panic_extra_output_in_script","panic_missing_output","panic_missing_output_in_script","pointer_metadata","pointer_metadata","pointer_metadata","run_test_script","state","task_state_asserts","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate_output_or_panic","validate_output_or_panic_in_script","validate_task_state_or_panic","validate_task_state_or_panic_in_script","vzip","vzip","vzip","ChangeNode","Down","NetworkDown","NetworkUp","SpinningTask","SpinningTaskDescription","SpinningTaskErr","SpinningTaskErrSnafu","StateAndBlock","Up","UpDown","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","changes","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","fail","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","handle_event","handle_message","handles","header","high_qc","idx","in_current_span","init","init","init","init","init","init","into","into","into","into","into","into","into_error","last_decided_leaf","late_start","latest_view","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","node_changes","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","should_shutdown","source","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","updown","vzip","vzip","vzip","vzip","vzip","vzip","build_assembled_sig","build_cert","build_da_certificate","build_system_handle","build_vid_proposal","build_vote","da_payload_commitment","get_vid_share","key_pair_for_id","vid_payload_commitment","vid_scheme_from_view_number","TestDescription","TimingData","__clone_box","__clone_box","borrow","borrow","borrow_mut","borrow_mut","builder_timeout","clone","clone","clone_into","clone_into","completion_task_description","da_non_staked_committee_size","da_staked_committee_size","data_request_delay","default","default","default_more_nodes","default_multiple_rounds","default_stress","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","gen_launcher","init","init","into","into","layout_raw","layout_raw","next_view_timeout","num_bootstrap_nodes","num_nodes_with_stake","num_nodes_without_stake","overall_safety_properties","pointer_metadata","pointer_metadata","round_start_delay","secondary_network_delay","skip_late","spinning_properties","start_delay","start_nodes","timeout_ratio","timing_data","to_owned","to_owned","try_from","try_from","try_into","try_into","txn_description","type_id","type_id","unreliable_network","view_sync_properties","view_sync_timeout","vzip","vzip","permute_input_with_index_order","Generator","Networks","ResourceGenerators","TestLauncher","borrow","borrow","borrow_mut","borrow_mut","channel_generator","config","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","launch","layout_raw","layout_raw","metadata","modify_default_config","pointer_metadata","pointer_metadata","resource_generator","storage","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Error","HotShotTaskCompleted","LateNodeContext","LateStartNode","Left","LostReturnValue","LostState","MissingHandler","Node","Right","ShutDown","StreamsDied","TaskErr","TestRunner","__clone_box","_pd","add_node_with_config","add_nodes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","context","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","handle","init","init","init","init","into","into","into","into","late_start","launcher","layout_raw","layout_raw","layout_raw","layout_raw","networks","networks","next_node_id","node_id","nodes","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","run_test","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","DistributionBased","RoundRobinTimeBased","TxnTask","TxnTaskDescription","TxnTaskErr","TxnTaskErrSnafu","__clone_box","__clone_box","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","duration","fail","fmt","fmt","fmt","fmt","from","from","from","from","handles","header","in_current_span","init","init","init","init","into","into","into","into","into_error","layout_raw","layout_raw","layout_raw","layout_raw","next_node_idx","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","run","shutdown_chan","source","submit_tx","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","TestView","TestViewGenerator","__clone_box","add_timeout","add_transactions","add_upgrade","add_view_sync_finalize","advance_view_number_by","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_da_vote","create_quorum_vote","create_upgrade_vote","current_view","da_certificate","da_membership","da_membership","da_proposal","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","formed_upgrade_certificate","from","from","generate","genesis","init","init","into","into","into_iter","layout_raw","layout_raw","leader_public_key","leaf","next","next_from_anscestor_view","next_view","next_view_from_ancestor","par_bridge","pointer_metadata","pointer_metadata","quorum_membership","quorum_membership","quorum_proposal","timeout_cert_data","to_owned","transactions","try_from","try_from","try_into","try_into","type_id","type_id","upgrade_data","vid_proposal","view_number","view_sync_finalize_data","vzip","vzip","Ignore","No","ShouldHitViewSync","Threshold","ViewSyncTask","ViewSyncTaskDescription","ViewSyncTaskErr","ViewSyncTaskErrSnafu","Yes","__clone_box","__clone_box","__clone_box","__clone_box","_pd","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fail","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","handle_event","handle_message","header","hit_view_sync","hit_view_sync","hit_view_sync","in_current_span","init","init","init","init","init","into","into","into","into","into","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","should_shutdown","source","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"hotshot_testing"],[36,"hotshot_testing::block_builder"],[202,"hotshot_testing::completion_task"],[319,"hotshot_testing::overall_safety_task"],[630,"hotshot_testing::overall_safety_task::OverallSafetyTaskErr"],[634,"hotshot_testing::predicates"],[669,"hotshot_testing::predicates::event"],[727,"hotshot_testing::predicates::upgrade"],[780,"hotshot_testing::script"],[848,"hotshot_testing::spinning_task"],[995,"hotshot_testing::task_helpers"],[1006,"hotshot_testing::test_builder"],[1076,"hotshot_testing::test_helpers"],[1077,"hotshot_testing::test_launcher"],[1118,"hotshot_testing::test_runner"],[1209,"hotshot_testing::txn_task"],[1305,"hotshot_testing::view_generator"],[1374,"hotshot_testing::view_sync_task"],[1499,"dyn_clone::sealed"],[1500,"rkyv::with"],[1501,"core::result"],[1502,"core::fmt"],[1503,"core::fmt"],[1504,"core::alloc::layout"],[1505,"alloc::vec"],[1506,"hotshot_builder_api::block_info"],[1507,"hotshot_builder_api::block_info"],[1508,"hotshot_types::utils"],[1509,"core::future::future"],[1510,"alloc::boxed"],[1511,"core::pin"],[1512,"core::clone"],[1513,"core::fmt"],[1514,"hotshot_example_types::block_types"],[1515,"core::marker"],[1516,"futures_core::future"],[1517,"core::ops::function"],[1518,"url"],[1519,"hotshot_orchestrator::config"],[1520,"futures_core::stream"],[1521,"core::error"],[1522,"std::backtrace"],[1523,"core::option"],[1524,"color_eyre::section"],[1525,"core::fmt"],[1526,"hotshot_types::traits::node_implementation"],[1527,"std::collections::hash::map"],[1528,"core::convert"],[1529,"std::collections::hash::set"],[1530,"hotshot_types::data"],[1531,"hotshot_task::task"],[1532,"hotshot_task::task"],[1533,"alloc::sync"],[1534,"hotshot_types::event"],[1535,"hotshot_types::simple_certificate"],[1536,"hotshot_task_impls::events"],[1537,"hotshot_example_types::node_types"],[1538,"hotshot_example_types::node_types"],[1539,"hotshot_task::task"],[1540,"hotshot_types::message"],[1541,"hotshot_types::traits::network"],[1542,"hotshot_example_types::storage_types"],[1543,"hotshot_types::traits::node_implementation"],[1544,"core::cmp"],[1545,"core::hash"],[1546,"serde::ser"],[1547,"hotshot_types::signature_key"],[1548,"hotshot_types::vote"],[1549,"hotshot_types::data"],[1550,"async_broadcast"],[1551,"async_broadcast"],[1552,"core::ops::function"],[1553,"hotshot"],[1554,"hotshot_types::simple_vote"]],"d":["global event at the test level","the test is shutting down","","Test implementation of block builder","","","","","task that decides when things are complete","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","task that’s consuming events and asserting safety","","predicates to use in tests","scripting harness for tests","task to spin nodes up and down","Helpers for initializing system context handle and …","builder","helper functions for test scripts","launcher","runner","","","","task that’s submitting transactions to the stream","","view generator for tests","task for checking if view sync got activated","","Entry for a built block","","","","A mock implementation of the builder data source. Builds …","","","","","","","","","","Built blocks","","","","","","","","","","","","","","","","Helper function to construct all builder data structures …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Create new <code>RandomBuilderSource</code>","","","","","","","","","","","","","","","","","Spawn a task building blocks, configured with given options","Construct a tide disco app that mocks the builder API.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Completion task state","Description for a completion task.","the idea here is to run as long as we want Completion Task …","SNAFU context selector for the <code>CompletionTaskErr</code> error","Time-based completion task.","Description for a time-based completion task.","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Duration of the task.","Duration of the task.","Consume the selector and return a <code>Result</code> with the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","handles to the nodes in the test","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","safety violation","failure","in progress","mismatched blocks for a view","SNAFU context selector for the …","mismatched states for a view","SNAFU context selector for the …","inconsistent txn nums","SNAFU context selector for the …","mismatched leaves for a view","SNAFU context selector for the …","not enough decides","SNAFU context selector for the …","success","cross node safety properties","Data availability task state","possible errors","context for a round TODO eventually we want these to just …","Result of running a round of consensus","convenience type alias for state and block","too many failed  views","SNAFU context selector for the …","the status of a view","","","","","","","","","","","","","block -&gt; # entries decided on that block","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","whether or not to check the block","check if the test failed due to not enough nodes getting …","whether or not to check the leaf","","","","","","","","","","","","","","","","","","","ctx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Nodes that failed to commit this round","","during the run view refactor","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generate leaves","","","","handles","","","","","","","","","","","","","","","inserts an error into the context","insert into round result","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","NOTE: technically a map is not needed left one anyway for …","","num of total rounds allowed to fail","required number of successful views","node idx -&gt; number transactions","","","","","","","","","","","","","configure properties","results from previous rounds view number -&gt; round result","","","whether or not the round succeeded (for a custom defn of …","Transactions that were submitted Nodes that committed this …","successful views","threshold calculator. Given number of live and total …","","","","","","","","","","","whether or not to check that we have threshold amounts of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","determines whether or not the round passes also do a …","","","","","","","","","","","","","expected number of decides","vec of failed views","actual number of decides","node idx -&gt; number transactions","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Membership for DA committee Votes/certs","Network for DA committee","Reference to consensus. The replica will require a write …","View number this view is executing in.","The most recent proposal we have, will correspond to the …","","most recent decided upgrade certificate","","","","","","","The most recent upgrade certificate this node formed. …","Returns the argument unchanged.","The node’s id","","","","Immutable instance state","Calls <code>U::from(self)</code>.","","","Output events to application","The commitment to the current block payload and its …","","","Our Private Key","last View Sync Certificate or Timeout Certificate this …","","Our public key","Membership for Quorum Certs/votes","Network for all nodes","Round start delay from config, in milliseconds.","Spawned tasks related to a specific view, so we can cancel …","This node’s storage ref","View timeout from config.","Membership for Timeout votes/certs","timeout task handle","Current timeout vote collection task with its view","","","","Globally shared reference to the current network version.","Current Vote collection task, with it’s view.","","","","","A <code>TestScript</code> is a sequence of triples (input sequence, …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","<code>run_test_script</code> reads a triple (inputs, outputs, asserts) …","","","","","","","","","","","","","","","","","","","denotes a change in node state","spin the node down","spin the node’s network down","spin the node’s network up","Spinning task state","description of the spinning task (used to build a spinning …","error for the spinning task","SNAFU context selector for the <code>SpinningTaskErr</code> error","convience type for state and block","spin the node up","Spin the node up or down","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","","time based changes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","handle to the nodes","","Highest qc seen in the test for restarting nodes","the index of the node","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Last decided leaf that can be used as the anchor leaf to …","late start nodes","most recent view seen by spinning task","","","","","","","the changes in node status, time -&gt; changes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin the node or node’s network up or down","","","","","","","create signature","create certificate","","create the <code>SystemContextHandle</code> from a node id","TODO: …","","","","get the keypair for a node id","","initialize VID","metadata describing a test","data describing how a round should be timed.","","","","","","","The maximum amount of time a leader can wait to get a …","","","","","completion task","Size of the non-staked DA committee for the test","Size of the staked DA committee for the test","time to wait until we request data associated with a …","","by default, just a single round","Default setting with 20 nodes and 8 views of successful …","the default metadata for multiple rounds","the default metadata for a stress test","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","turn a description of a test (e.g. a <code>TestDescription</code>) into …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Base duration for next-view timeout, in milliseconds","number of bootstrap nodes (libp2p usage only)","Total number of staked nodes in the test","Total number of non-staked nodes in the test","overall safety property description","","","The delay a leader inserts before starting pre-commit, in …","Delay before sending through the secondary network in …","Whether to skip initializing nodes that will start late, …","spinning properties","Delay after init before starting consensus, in milliseconds","nodes available at start","The exponential backoff ration for the next-view timeout","timing data","","","","","","","txns timing","","","unrelabile networking metadata","view sync check task","view sync timeout","","","This function permutes the provided input vector <code>inputs</code>, …","Wrapper for a function that takes a <code>node_id</code> and returns an …","convience type alias for the networks available","generators for resources used by each node","test launcher","","","","","generate channels","configuration used to generate each hotshot node","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","launch the test","","","metadasta used for tasks","Modifies the config used when generating nodes with <code>f</code>","","","generator for resources","generate new storage for each node","","","","","","","","","the task encountered an error","enum describing how the tasks completed","Either the node context or the parameters to construct the …","A yet-to-be-started node that participates in tests","A value of type <code>L</code>.","lost the return value somehow","we somehow lost the state this is definitely a bug.","Stream exists but missing handler","a node participating in a test","A value of type <code>R</code>.","the task shut down successfully","the streams the task was listening for died","","The runner of a test network spin up and down nodes, …","","Phantom for N","add a specific node with a config","Add nodes.","","","","","","","","","","","Either the context to which we will use to launch HotShot …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The handle to the node’s internals","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","nodes with a late start","test launcher, contains a bunch of useful metadata and …","","","","","The underlying networks belonging to the node","The underlying networks belonging to the node","the next node unique identifier","The node’s unique identifier","nodes in the test","","","","","execute test","","","","","","","","","","","","","","","","","","TODO","submit transactions in a round robin style using every …","state of task that decides when things are completed","build the transaction task","Data Availability task error","SNAFU context selector for the <code>TxnTaskErr</code> error","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","time to wait between txns","Consume the selector and return a <code>Result</code> with the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handles for all nodes.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Optional index of the next node.","","","","","","Receiver for the shutdown signal from the testing harness","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Advances to the next view by skipping the current view and …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Moves the generator to the next view by referencing an …","","","","","","","","","","","","","","","","","","","","","","don’t care if the node should hit view sync","the node should not hit view sync","enum desecribing whether a node should hit view sync","(min, max) number nodes that may hit view sync, inclusive","<code>ViewSync</code> task state","Description for a view sync task.","<code>ViewSync</code> Task error","SNAFU context selector for the <code>ViewSyncTaskErr</code> error","the node should hit view sync","","","","","Phantom data for TYPES and I","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","properties of task","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","nodes that hit view sync","set of node ids that hit view sync","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,3,3,0,3,3,3,3,0,3,3,3,3,3,3,3,3,3,0,3,0,0,0,0,0,0,0,0,3,3,3,0,3,0,0,3,0,0,156,0,0,0,0,0,0,0,24,26,27,18,24,27,157,158,159,18,24,26,27,157,158,159,18,24,26,27,0,18,24,18,24,26,24,26,27,24,26,27,27,157,158,159,18,24,26,27,157,158,159,18,24,26,27,157,158,159,18,24,26,27,157,158,159,18,24,26,27,24,26,157,158,159,18,24,26,27,18,24,18,24,159,157,158,159,18,24,26,27,157,158,159,18,24,26,27,157,158,159,18,24,26,27,0,159,24,18,159,157,158,159,18,24,26,27,18,24,18,24,18,24,18,24,0,38,156,157,158,27,24,26,27,26,18,27,157,158,159,18,24,26,27,157,158,159,18,24,26,27,157,158,159,18,24,26,27,157,158,159,18,24,26,27,0,0,0,0,46,0,44,45,46,41,41,41,51,41,44,45,46,51,41,44,45,46,44,41,44,45,46,44,45,46,51,41,44,45,46,51,41,44,45,46,41,51,41,44,45,46,51,41,44,45,46,51,45,44,41,41,44,45,46,51,41,44,45,46,51,41,41,51,41,44,45,46,51,41,44,45,46,44,51,41,44,45,46,51,41,44,45,46,51,51,41,44,45,46,41,51,41,44,45,46,51,41,44,45,46,51,51,41,44,45,46,51,41,44,45,46,51,68,68,68,56,0,56,0,56,0,56,0,56,0,68,0,0,0,0,0,0,56,0,0,68,56,57,60,62,63,64,65,69,56,56,56,66,72,68,56,57,60,62,63,64,65,66,70,69,72,68,56,57,60,62,63,64,65,66,70,69,57,60,62,63,64,65,56,69,66,69,68,56,57,60,62,63,64,65,69,68,56,57,60,62,63,64,65,69,72,66,70,69,72,68,56,57,60,62,63,64,65,66,70,69,72,68,56,57,60,62,63,64,65,66,70,69,56,72,68,56,57,60,62,63,64,65,66,70,69,72,68,56,57,60,62,63,64,65,66,70,69,62,57,60,62,63,64,65,66,60,70,68,56,56,57,60,62,63,64,65,66,70,69,72,68,56,57,60,62,63,64,65,66,70,69,66,62,72,72,72,56,56,72,68,56,57,60,62,63,64,65,66,70,69,70,66,72,68,56,57,60,62,63,64,65,66,70,69,57,60,62,63,64,65,72,68,56,57,60,62,63,64,65,66,70,69,66,57,69,69,66,72,68,56,57,60,62,63,64,65,66,70,69,72,70,72,56,66,66,70,69,68,56,57,60,62,63,64,65,69,56,69,72,68,56,57,60,62,63,64,65,66,70,69,72,68,56,57,60,62,63,64,65,66,70,69,72,68,56,57,60,62,63,64,65,66,70,69,66,72,68,56,57,60,62,63,64,65,66,70,69,160,161,160,162,79,79,79,0,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,80,0,79,79,79,80,79,79,79,79,79,79,79,79,0,79,0,0,0,0,0,163,83,82,83,82,83,83,82,83,82,83,82,83,82,83,82,0,83,82,83,82,82,83,82,83,82,83,82,83,82,83,82,0,163,83,82,163,0,0,0,0,0,0,83,82,83,82,83,82,0,0,83,82,0,0,0,164,84,84,84,165,165,165,165,165,0,165,84,84,84,84,84,84,165,84,165,84,84,84,165,84,84,0,165,165,164,84,165,165,164,165,165,165,165,165,165,165,165,165,165,84,84,84,165,165,84,0,0,0,0,0,88,88,166,167,88,166,167,168,88,166,167,88,166,167,88,166,167,88,166,167,166,88,166,167,88,166,167,88,88,166,167,88,166,167,168,167,88,0,0,0,0,88,166,167,0,166,167,88,166,167,88,166,167,88,166,167,0,0,0,0,88,166,167,0,93,93,93,0,0,0,0,0,93,0,92,93,94,95,91,91,91,96,91,92,93,94,95,96,91,92,93,94,95,92,91,96,92,93,94,95,92,93,94,95,96,91,92,93,94,95,96,91,92,93,94,95,91,96,91,92,93,94,95,96,91,92,93,94,95,92,91,91,92,93,94,95,96,91,92,93,94,95,96,96,96,91,96,94,91,96,91,92,93,94,95,96,91,92,93,94,95,92,96,96,96,96,91,92,93,94,95,95,96,91,92,93,94,95,96,91,92,93,94,95,91,96,91,92,93,94,95,96,91,92,93,94,95,96,91,92,93,94,95,94,96,91,92,93,94,95,0,0,0,0,0,0,0,0,0,0,0,0,0,125,126,125,126,125,126,125,125,126,125,126,126,126,126,125,125,126,126,126,126,125,126,125,126,125,126,125,126,125,126,125,126,126,125,126,125,126,125,126,125,126,126,126,126,125,126,125,125,126,126,125,126,125,126,125,126,125,126,125,126,126,125,126,126,126,125,125,126,0,0,0,0,0,169,127,169,127,169,169,169,127,169,127,169,127,169,127,169,127,169,127,169,127,127,169,127,127,127,169,127,127,169,169,127,169,127,169,127,169,127,52,0,0,0,170,52,52,52,0,170,52,52,0,0,136,128,128,128,171,128,52,136,171,128,52,136,136,136,171,171,128,52,136,171,128,52,136,171,128,52,136,171,128,52,136,171,128,52,136,136,171,128,52,136,171,128,52,136,128,128,171,128,52,136,171,136,128,136,128,171,128,52,136,128,136,171,128,52,136,171,128,52,136,171,128,52,136,171,128,52,136,139,139,0,0,0,0,138,139,137,137,137,140,137,138,139,140,137,138,139,138,137,138,139,138,139,140,137,138,139,140,137,138,139,137,140,137,138,139,140,137,138,139,140,138,137,137,138,139,140,137,138,139,140,137,137,140,137,138,139,140,137,138,139,138,140,137,138,139,140,140,137,138,139,140,140,137,140,138,139,137,140,137,138,139,140,137,138,139,140,137,138,139,140,137,138,139,0,0,145,141,141,141,141,141,141,145,141,145,145,145,145,145,145,141,145,141,145,145,141,145,141,145,141,145,141,145,145,141,145,141,145,141,145,141,145,141,141,145,145,145,141,141,145,145,141,141,145,141,145,145,145,145,145,141,145,141,145,141,145,145,145,145,145,141,145,153,153,0,154,0,0,0,0,153,151,152,153,154,155,151,151,151,155,151,152,153,154,155,151,152,153,154,152,151,151,152,153,154,151,152,153,154,155,151,152,153,154,155,151,152,153,154,151,155,155,151,152,153,154,155,151,152,153,154,152,151,151,152,153,154,155,151,152,153,154,155,155,151,155,151,152,151,155,151,152,153,154,155,151,152,153,154,152,155,151,152,153,154,155,151,152,153,154,155,151,151,152,153,154,151,155,151,152,153,154,155,151,152,153,154,155,151,152,153,154,155,151,152,153,154],"f":"``{{cb}d{}}`{ce{}{}}0{ff}{{ce}d{}{}}`{hc{}}0{{ce}{{l{{j{gi}}}}}{}{}{}{}}{hd}{{fn}A`}{cc{}}{{}h}8{{}{{l{AbAd}}}}`{{}}````````:{c{{l{e}}}{}{}}0`{cAf{}}``<``````````===```<<<<<<<<<<<<<<{{Ahh}{{B`{{Aj{c}}{Al{c}}{An{c}}}}}Bb}{{{Bd{c}}BfBh}{{Bn{{Bl{Bj}}}}}Bb}{{{C`{c}}BfBh}{{Bn{{Bl{Bj}}}}}Bb}10`{{{C`{c}}}{{C`{c}}}{CbBb}}{{{Cd{c}}}{{Cd{c}}}{CbBb}}{{{Cf{c}}}{{Cf{c}}}{CbBb}}{{ce}d{}{}}00`{hc{}}0000000000000{{ce}{{l{{j{gi}}}}}{}{}{}{}}000000{hd}000000{{{C`{c}}n}A`{ChBb}}{{{Cd{c}}n}A`{ChBb}}{cc{}}000000{{{Bd{c}}CjBh}{{Bn{{Bl{Bj}}}}}Bb}{{{C`{c}}CjBh}{{Bn{{Bl{Bj}}}}}Bb}{{{Bd{c}}}{{Bn{{Bl{Bj}}}}}Bb}{{{C`{c}}}{{Bn{{Bl{Bj}}}}}Bb}`{{}h}000000{ce{}{}}000000{{}{{l{AbAd}}}}000000{h{{B`{{Bd{c}}{Cf{c}}}}}Bb}`{{}{{C`{c}}}{{Bb{}{{Cl{Cn}}}}}}``{{}}000000````{{{Bd{c}}i}{{Bn{{Bl{Bj}}}}}Bb{}{}{D`{Df{e}{{Db{{Dd{g}}}}}}}}{{{C`{c}}i}{{Bn{{Bl{Bj}}}}}Bb{}{}{D`{Df{e}{{Db{{Dd{g}}}}}}}}{{{Bd{c}}Dh}dBb}{{{C`{c}}hDj}d{{Bb{}{{Cl{Cn}}}}}}{{DhhDj}d}{{{Bl{Dl}}{Bl{Dn}}}d}{{hc}{{Bn{{Bl{Bj}}}}}{}}{{hDj}{{Bn{{Bl{Bj}}}}}}1{{{Bl{{Cf{c}}}}{Bl{Dn}}}dBb}===```{c{{l{e}}}{}{}}0000000000000{cAf{}}000000???????``````{{cb}d{}}00{cE`{}}0{Eb{{Ef{Ed}}}}{ce{}{}}000000000{EhEb}{Eb{{Ef{E`}}}}{EhEh}{EjEj}{ElEl}{{ce}d{}{}}00{hc{}}000000000{EbEn}{{ce}{{l{{j{gi}}}}}{}{}{}{}}0000{hd}0000``{Eh{{l{cEb}}}{}}{{Ebn}A`}0{{Ehn}A`}{{Ejn}A`}{{Eln}A`}{cc{}}0000`{{ce}{{F`{eg}}}{}{FbD`Fd}{}}{c{}{}}{{}h}0000{ce{}{}}0000{{Ehc}Eb{}}{{}{{l{AbAd}}}}0000{{}}0000{{{Ff{ce}}}{{Fj{Fh}}}Bb{{Fl{c}}}}`{Eb{{Ef{E`}}}}555{cFn{}}{c{{l{e}}}{}{}}000000000`{cAf{}}000088888{{{Ff{ce}}}dBb{{Fl{c}}}}```````````````````````{{cb}d{}}00000000{cE`{}}0{{{G`{c}}}{{Ef{Ed}}}Bb}`<<<<<<<<<<<<<<<<<<<<<<<<{{{Gb{c}}}{{G`{e}}}{{Gf{{Gd{Bhh}}}}}Bb}{{{Gh{c}}}{{G`{e}}}{{Gf{Gj}}}Bb}{{{Gl{ce}}}{{G`{g}}}{{Gf{h}}}{{Gf{h}}}Bb}{Gn{{G`{c}}}Bb}{H`{{G`{c}}}Bb}{Hb{{G`{c}}}Bb}{{{G`{c}}}{{Ef{E`}}}Bb}`{{{Hd{c}}hh}HfBb}`{{{Hh{c}}}{{Hh{c}}}{CbBb}}{{{G`{c}}}{{G`{c}}}{CbBb}}{{{Gb{c}}}{{Gb{c}}}Cb}{{{Gh{c}}}{{Gh{c}}}Cb}{{{Gl{ce}}}{{Gl{ce}}}CbCb}{GnGn}{H`H`}{HbHb}{HjHj}{{ce}d{}{}}00000000`{{}{{Hd{c}}}Bb}{{}{{Hl{c}}}Bb}{{}Hj}{hc{}}00000000000000000000000{{{G`{c}}}EnBb}{{ce}{{l{{j{gi}}}}}{}{}{}{}}00000000000{hd}00000000000`{{{Gb{c}}}{{l{e{G`{g}}}}}{{Gf{{Gd{Bhh}}}}}{}Bb}{{{Gh{c}}}{{l{e{G`{g}}}}}{{Gf{Gj}}}{}Bb}{{{Gl{ce}}}{{l{g{G`{i}}}}}{{Gf{h}}}{{Gf{h}}}{}Bb}{Gn{{l{c{G`{e}}}}}{}Bb}{H`{{l{c{G`{e}}}}}{}Bb}{Hb{{l{c{G`{e}}}}}{}Bb}```{{{Hh{c}}n}A`{ChBb}}{{{G`{c}}n}A`{ChBb}}{{{G`{c}}n}A`Bb}{{{Gb{c}}n}A`Ch}{{{Gh{c}}n}A`Ch}{{{Gl{ce}}n}A`ChCh}{{Gnn}A`}{{H`n}A`}{{Hbn}A`}{{{Hd{c}}n}A`{ChBb}}{{{Hl{c}}n}A`{ChBb}}{{Hjn}A`}{cc{}}00000000000{{{Hd{c}}}{{Gd{{Hn{c}}h}}}Bb}`{{c{Ib{{I`{eg}}}}}{{Ef{i}}}{}Bb{{Fl{e}}}{}}{{ch{Id{e{I`{gi}}}}}{{Ef{k}}}{}{}Bb{{Fl{g}}}{}}`{{ce}{{F`{eg}}}{}{FbD`Fd}{}}{c{}{}}{{}h}00000000000{{{Hl{c}}h{Ih{{If{c}}}}}dBb}{{{Hd{c}}h{B`{{Ij{c}}{Il{c}}}}{Ef{Bh}}}{{Ef{{Hn{c}}}}}Bb}{ce{}{}}00000000000{{{Gb{c}}e}{{G`{g}}}{{Gf{{Gd{Bhh}}}}}{}Bb}{{{Gh{c}}e}{{G`{g}}}{{Gf{Gj}}}{}Bb}{{{Gl{ce}}g}{{G`{i}}}{{Gf{h}}}{{Gf{h}}}{}Bb}{{Gnc}{{G`{e}}}{}Bb}{{H`c}{{G`{e}}}{}Bb}{{Hbc}{{G`{e}}}{}Bb}{{}{{l{AbAd}}}}00000000000`````{{}}00000000000``{cHf{}}{{{G`{c}}}{{Ef{E`}}}Bb}````:::::::::{cFn{}}`{c{{l{e}}}{}{}}00000000000000000000000{cAf{}}00000000000{{{Hd{c}}hh{Hn{c}}HfHfBh}dBb}>>>>>>>>>>>>`````````{{cb}d{}}??{InIn}{{ce}d{}{}}{hc{}}0{{ce}{{l{{j{gi}}}}}{}{}{}{}}{hd}{{InIn}Hf}{{ce}Hf{}{}}000{{J`c}{{Bn{{Bl{Bj}}}}}{}}`{{Inn}A`}{cc{}}{HfIn}{J`{{Bn{{Bl{Bj}}}}}}{{}h}{ce{}{}}{{}{{l{AbAd}}}}{{}}2{c{{l{e}}}{}{}}0{cAf{}}`4```{{{Ah{{Jb{c}}}}}{{Bl{{Jd{{Ih{{Jb{c}}}}}}}}}Bb}{{{Ah{{Bl{{Jf{c}}}}}}}{{Bl{{Jd{{Ih{{Jb{c}}}}}}}}}Bb}`6666`{hc{}}000{{ce}{{l{{j{gi}}}}}{}{}{}{}}0{hd}0{{{Jf{c}}{Ih{{Jb{c}}}}}{{Bn{{Bl{Bj}}}}}{BbD`Fd}}{{{Jd{c}}c}{{Bn{{Bl{Bj}}}}}{D`Fd}}{{{Jb{c}}}{{Bl{{Jf{c}}}}}Bb}{{{Jf{c}}n}A`Bb}{{{Jd{c}}n}A`{}}{cc{}}0`{{{Jf{c}}}{{Bn{{Bl{Bj}}}}}{BbD`Fd}}{{{Jd{c}}}{{Bn{{Bl{Bj}}}}}{D`Fd}}``{{}h}0{ce{}{}}0{{}{{l{AbAd}}}}0{{}{{Bl{{Jf{c}}}}}Bb}`{{}}0`1{h{{Bl{{Jf{c}}}}}Bb}2222{c{{l{e}}}{}{}}000{cAf{}}04466````66``````{{}{{Bl{Jh}}}}`{hc{}}0{{ce}{{l{{j{gi}}}}}{}{}{}{}}{hd}{{Jh{Jn{JjJl}}}{{Bn{{Bl{Bj}}}}}}{{Jhn}A`}`{cc{}}`{Jh{{Bn{{Bl{Bj}}}}}}`?`>=7```;`````````````998``>``````>>>>>>`666666555444`111???`>>>===```{{hc}dCh}{{hFnc}dCh}10==={{{Ah{{K`{ce}}}}e}dBb{{Kd{}{{Kb{{Ih{{Jb{c}}}}}}}}D`}}``<<<<<<;;;{{hcJ`}InCh}{{hFncJ`}dCh}{{hcJ`}d{}}{{hFncJ`}d{}}{ce{}{}}00```````````{{cb}d{}}000{cE`{}}0{Kf{{Ef{Ed}}}}333333333333{KhKf}{Kf{{Ef{E`}}}}`{KhKh}{KjKj}{KlKl}{KnKn}{{ce}d{}{}}000{hc{}}00000000000{KfEn}{{ce}{{l{{j{gi}}}}}{}{}{}{}}00000{hd}00000{Kh{{l{cKf}}}{}}{{Kfn}A`}0{{Khn}A`}{{Kjn}A`}{{Kln}A`}{{Knn}A`}{cc{}}00000{{c{Ib{{L`{eg}}}}}{{Ef{i}}}{}Bb{{Fl{e}}}{}}{{ch{Id{e{L`{gk}}}}}{{Ef{m}}}{}{}{{Bb{}{{Lb{Ld}}}}}{{Lh{{Lf{g}}}}}{{Fl{g}}{Mb{g}{{Lj{i}}{Ll{i}}{Ln{{M`{g}}}}}}}{}}`{{ce}{{F`{eg}}}{}{FbD`Fd}{}}``{c{}{}}{{}h}00000{ce{}{}}00000{{Khc}Kf{}}```{{}{{l{AbAd}}}}00000`{{}}00000{cHf{}}{Kf{{Ef{E`}}}}5555{cFn{}}{c{{l{e}}}{}{}}00000000000{cAf{}}00000`888888{c{}{MdCbMfMhMjCh}}{cg{MdCbMfMhMjCh}{{Bb{}{{Ml{Mn}}}}}{{Nb{e}{{N`{}}}}}}{{Nd{Ah{Cn}}}{{Nf{Jj}}}}{Bh{{B`{{Nh{JjJl}}{Nj{{Ih{{Jb{Jj}}}}}}{Nl{{Ih{{Jb{Jj}}}}}}}}}}{{Nd{Ah{Cn}}}{{Ah{{O`{Jj{Nn{Jj}}}}}}}}{{{Nh{JjJl}}{Ob{Jj}}}{{Od{Jj}}}}{{{Ah{Cn}}}Cj}{{{Of{{O`{c{Nn{c}}}}}}}{{O`{c{Nn{c}}}}}Bb}{Bh{{B`{Mn}}}}{{Nd{Ah{Cn}}}Cj}{{}Oh}``{{cb}d{}}0{ce{}{}}000`{OjOj}{OlOl}{{ce}d{}{}}0````{{}Oj}{{}Ol}000{hc{}}000{{ce}{{l{{j{gi}}}}}{}{}{}{}}0{hd}0{{Ojn}A`}{{Oln}A`}{cc{}}0{{OlBh}{{On{ce}}}{{Bb{}{{Lb{Ld}}}}}{{Fl{c}}}}{{}h}0=={{}{{l{AbAd}}}}0`````{{}}0````````??{c{{l{e}}}{}{}}000`{cAf{}}0```{ce{}{}}0{{{Ah{c}}{Ah{h}}}{{Ah{c}}}Cb}````1111``====<<;;886611{{{On{ce}}}{{A`{ceg}}}Bb{{Fl{c}}}{{Lh{{Lf{c}}}}}}66`{{{On{ce}}g}{{On{ce}}}Bb{{Fl{c}}}{{Ad{Ab}}}}66``55554433``````````````{{cb}d{}}`{{Bh{Af{cg}}{Ah{c}}{Aj{c}}AbAl}{{Ih{{An{cg}}}}}{{Bb{}{{Lb{Ld}}}}}{{Lh{{Lf{c}}}}}{{Fl{c}}{Mb{c}{{Lj{e}}{Ll{e}}{Ln{{M`{c}}}}}}}}{{{A`{cge}}h{Gj{Bh}}}{{Ah{Bh}}}{{Bb{}{{Lb{Ld}}}}}{{Lh{{Lf{c}}}}}{{Fl{c}}{Mb{c}{{Lj{e}}{Ll{e}}{Ln{{M`{c}}}}}}}}66666666{{{AA`{ce}}}{{AA`{ce}}}{CbBb}{Cb{Fl{c}}}}{{ce}d{}{}}`{hc{}}0000000{{ce}{{l{{j{gi}}}}}{}{}{}{}}000{hd}000{cc{}}000`{{}h}000====``{{}{{l{AbAd}}}}000`````{{}}000{{{A`{cge}}}d{{Bb{}{{Lb{Ld}}}}}{{Lh{{Lf{c}}}}}{{Fl{c}}{Mb{c}{{Lj{e}}{Ll{e}}{Ln{{M`{c}}}}}}}}{ce{}{}}{c{{l{e}}}{}{}}0000000{cAf{}}0002222``````??{cE`{}}0{AAb{{Ef{Ed}}}}44444444{AAdAAb}{AAb{{Ef{E`}}}}{AAdAAd}{AAfAAf}{{ce}d{}{}}0{hc{}}0000000{AAbEn}{{ce}{{l{{j{gi}}}}}{}{}{}{}}000{hd}000`{AAd{{l{cAAb}}}{}}{{AAbn}A`}0{{AAdn}A`}{{AAfn}A`}{cc{}}000`{{ce}{{F`{eg}}}{}{FbD`Fd}{}}{c{}{}}{{}h}000{ce{}{}}000{{AAdc}AAb{}}{{}{{l{AbAd}}}}000`{{}}000{{{AAh{ce}}}{{Fj{Fh}}}Bb{{Fl{c}}}}`{AAb{{Ef{E`}}}}{{{AAh{ce}}}dBb{{Fl{c}}}}66{cFn{}}{c{{l{e}}}{}{}}0000000{cAf{}}0009999``{{cb}d{}}{{AAj{AAl{Jj}}}d}{{AAj{Ah{Cn}}}d}{{AAj{AAn{Jj}}}d}{{AAj{AB`{Jj}}}d}{{AAjBh}d}????{ABbABb}{{ce}d{}{}}{{ABbABd{Nh{JjJl}}}{{ABf{Jj}}}}{{ABb{Nh{JjJl}}}{{ABh{Jj}}}}{{ABb{AAn{Jj}}{Nh{JjJl}}}{{ABj{Jj}}}}`````{hc{}}000{{ce}{{l{{j{gi}}}}}{}{}{}{}}0{hd}0`{cc{}}0{{}AAj}{{}ABb}{{}h}0{ce{}{}}00{{}{{l{AbAd}}}}0``{AAj{{Ef{c}}}{}}{{AAjABb}d}?{{ABbABb}ABb}{c{{ABl{e}}}{}{}}{{}}0````6`{c{{l{e}}}{}{}}000{cAf{}}0````88`````````{{cb}d{}}000`{cE`{}}0{ABn{{Ef{Ed}}}};;;;;;;;;;{{{AC`{c}}}ABn{{Gf{{Gj{h}}}}}}{ABn{{Ef{E`}}}}{ABnABn}{{{AC`{c}}}{{AC`{c}}}Cb}{ACbACb}{ACdACd}{{ce}d{}{}}000{hc{}}000000000{ABnEn}`{{ce}{{l{{j{gi}}}}}{}{}{}{}}0000{hd}0000{{{AC`{c}}}{{l{eABn}}}{{Gf{{Gj{h}}}}}{}}{{ABnn}A`}0{{{AC`{c}}n}A`Ch}{{ACbn}A`}{{ACdn}A`}{cc{}}0000{{c{Ib{{ACf{eg}}}}}{{Ef{i}}}{}Bb{{Fl{e}}}{}}{{ch{Id{e{ACf{gi}}}}}{{Ef{Fh}}}{}{}Bb{{Fl{g}}}}{{ce}{{F`{eg}}}{}{FbD`Fd}{}}```{c{}{}}{{}h}0000{ce{}{}}0000{{{AC`{c}}e}ABn{{Gf{{Gj{h}}}}}{}}{{}{{l{AbAd}}}}0000{{}}0000{cHf{}}{ABn{{Ef{E`}}}}5555{cFn{}}{c{{l{e}}}{}{}}000000000{cAf{}}000088888","c":[],"p":[[5,"Private",1499],[1,"unit"],[6,"GlobalTestEvent",0],[1,"usize"],[5,"With",1500],[6,"Result",1501],[5,"Formatter",1502],[8,"Result",1502],[5,"Layout",1503],[5,"LayoutError",1503],[5,"TypeId",1504],[5,"Vec",1505],[5,"AvailableBlockInfo",1506],[5,"AvailableBlockData",1506],[5,"AvailableBlockHeaderInput",1506],[1,"tuple"],[10,"NodeType",1507],[5,"SimpleBuilderSource",36],[5,"BuilderCommitment",1508],[1,"u64"],[10,"Future",1509],[5,"Box",1510],[5,"Pin",1511],[5,"RandomBuilderSource",36],[10,"Clone",1512],[5,"SubmittedTransaction",36],[5,"SimpleBuilderTask",36],[10,"Debug",1502],[8,"VidCommitment",1513],[17,"Transaction"],[5,"TestTransaction",1514],[10,"Send",1515],[17,"Output"],[8,"BoxFuture",1516],[10,"FnOnce",1517],[5,"Url",1518],[5,"RandomBuilderConfig",1519],[10,"BuilderTask",36],[10,"Stream",1520],[10,"Error",1521],[5,"CompletionTaskErr",202],[5,"Backtrace",1522],[6,"Option",1523],[5,"CompletionTaskErrSnafu",202],[5,"TimeBasedCompletionTaskDescription",202],[6,"CompletionTaskDescription",202],[1,"str"],[5,"IndentedSection",1524],[10,"Display",1502],[10,"Sync",1515],[5,"CompletionTask",202],[6,"HotShotTaskCompleted",1118],[5,"JoinHandle",1525],[10,"TestableNodeImplementation",1507],[5,"String",1526],[6,"OverallSafetyTaskErr",319],[5,"InconsistentTxnsNumSnafu",319],[5,"HashMap",1527],[10,"Into",1528],[5,"TooManyFailuresSnafu",319],[5,"HashSet",1529],[5,"NotEnoughDecidesSnafu",319],[5,"MismatchedLeafSnafu",319],[5,"InconsistentStatesSnafu",319],[5,"InconsistentBlocksSnafu",319],[5,"RoundResult",319],[1,"bool"],[6,"ViewStatus",319],[5,"OverallSafetyPropertiesDescription",319],[5,"RoundCtx",319],[5,"Leaf",1530],[5,"OverallSafetyTask",319],[5,"Task",1531],[5,"TestTask",1531],[6,"HotShotError",1532],[5,"Arc",1533],[8,"LeafChain",1534],[8,"QuorumCertificate",1535],[6,"PredicateResult",634],[10,"Predicate",634],[6,"HotShotEvent",1536],[5,"TestPredicate",669],[5,"EventPredicate",669],[5,"UpgradeCertPredicate",727],[5,"TestTypes",1537],[5,"MemoryImpl",1537],[5,"ConsensusTaskState",1538],[5,"TestScriptStage",780],[17,"Event"],[10,"TaskState",1531],[5,"SpinningTaskErr",848],[5,"SpinningTaskErrSnafu",848],[6,"UpDown",848],[5,"ChangeNode",848],[5,"SpinningTaskDescription",848],[5,"SpinningTask",848],[17,"InstanceState"],[5,"TestInstanceState",1539],[5,"Message",1540],[10,"ConnectedNetwork",1541],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",1542],[10,"NodeImplementation",1507],[10,"Committable",1543],[10,"Eq",1544],[10,"Hash",1545],[10,"Serialize",1546],[17,"SignatureKey"],[8,"BLSPubKey",1547],[17,"Voteable"],[10,"Certificate",1548],[5,"ViewNumber",1530],[8,"DACertificate",1535],[5,"SystemContextHandle",1549],[5,"Sender",1550],[5,"Receiver",1550],[5,"VidDisperseShare",1530],[5,"Proposal",1540],[5,"QuorumProposal",1530],[6,"GeneralConsensusMessage",1540],[1,"slice"],[5,"VidSchemeType",1513],[5,"TimingData",1006],[5,"TestDescription",1006],[5,"TestLauncher",1077],[5,"TestRunner",1118],[5,"HotShotConfig",1551],[10,"FnMut",1517],[8,"Networks",1077],[5,"Memberships",1552],[5,"HotShotInitializer",1552],[5,"ValidatorConfig",1551],[5,"SystemContext",1552],[5,"Node",1118],[5,"TxnTaskErr",1209],[5,"TxnTaskErrSnafu",1209],[6,"TxnTaskDescription",1209],[5,"TxnTask",1209],[5,"TestViewGenerator",1305],[5,"TimeoutData",1553],[5,"UpgradeProposalData",1553],[5,"ViewSyncFinalizeData",1553],[5,"TestView",1305],[5,"DAData",1553],[8,"DAVote",1553],[8,"QuorumVote",1553],[8,"UpgradeVote",1553],[5,"IterBridge",1554],[5,"ViewSyncTaskErr",1374],[5,"ViewSyncTaskErrSnafu",1374],[6,"ShouldHitViewSync",1374],[6,"ViewSyncTaskDescription",1374],[5,"ViewSyncTask",1374],[10,"TestBuilderImplementation",36],[5,"RandomBuilderImplementation",36],[5,"SimpleBuilderImplementation",36],[5,"BlockEntry",36],[15,"NotEnoughDecides",630],[15,"TooManyFailures",630],[15,"InconsistentTxnsNum",630],[8,"EventCallback",669],[8,"UpgradeCertCallback",727],[8,"ConsensusTaskTestState",727],[5,"TaskScript",780],[5,"Expectations",780],[8,"TestScript",780],[5,"ResourceGenerators",1077],[8,"LateNodeContext",1118],[5,"LateStartNode",1118]],"b":[[256,"impl-Debug-for-CompletionTaskErr"],[257,"impl-Display-for-CompletionTaskErr"],[471,"impl-Debug-for-OverallSafetyTaskErr%3CTYPES%3E"],[472,"impl-Display-for-OverallSafetyTaskErr%3CTYPES%3E"],[915,"impl-Display-for-SpinningTaskErr"],[916,"impl-Debug-for-SpinningTaskErr"],[1253,"impl-Debug-for-TxnTaskErr"],[1254,"impl-Display-for-TxnTaskErr"],[1434,"impl-Debug-for-ViewSyncTaskErr"],[1435,"impl-Display-for-ViewSyncTaskErr"]]}],\
["hotshot_types",{"doc":"Types and Traits for the <code>HotShot</code> consensus module","t":"IPGFPFFSSSNNNNHNNNNNNNNHOONNNNNNNNCCOOCONNNNNNNNNNNNNNNNNNNNNNNNNNNCCOONNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNCCOOOOONNNNOOCONNNNCCCCOOOOOOONNNNNNNCNNNNNNNNNNNNCCOCNNNNFIFFFFFPGPIEEPSSNNNNNNONNOOONNNNNNNNNNNNNNONNNNNNNNNNNNNOOONNNNNOONNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNONNNNNNNNNNNNOONNNNNNNNNNNNNNOOONOOOONNNNNNNONOOONNOOOOOONNNNNNNOONONONOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONONNNNNNNNSSSSSSSSSSSSSISSSIGFPFPFPFFRFKPFFFGFPSSSSNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNONCONOONNNNNNNNNNNNOHONNNNNNNNNHNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOONNNNNNNNNNNNFONNHHNNNNNNNNNHHNNNNNPFPFPFPFGPFPFPPPPPPFPFPFPPPPGPPFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNOOOOOOOOOOOPPPPPPFGGIFPPPPPPPPPPPPNNNNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNNNNNNNCONNNNNNNNNNNNNNNNNNNNOONNNNNNNNNONNNNNNNNNNNNNNNNOONNNNOOOOOOOOOOOOOOOHHIFFIIOFIIFIFINNNNNONNNNNOONOONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNONNNNNNNNOONNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNPGPPPPPPPGPPGPPPFGGFFPPPGPPPPPPPPPPPPPPPPPPNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNIIIINNNNNNNNNNNNNNNNIFIFFKIIFIIINNNNOOOOOOOONNNNNNNNNNNNNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOMNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOONNNNFIFIFFIFIFFIFIFIKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOONNNNNNNNNOOOOOOCNNNNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHOOOOOOOONNNNNNNNNKFNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNEEECCCCCCCCCCCKKFKRRSRRKKRNMNNMMNNNNNNNMMNNNNNOOONNMMMMMNMNNNNMMNMNHNNNNNMNHNKMMMMMGPFKPFNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNMNNNNNNNMMMMMMMNNNNNNNNNNNNNNNNNMNNNMNNNNNNNNNMNNNKKKKKFNMNMNNNNNNMNMNMNMNNNNNNNNNNNNMMNNMNNNNNMNNIFPPGFPFFPFPFKPFPPFPPPFPFPFPFPFPKPFPPFFPGFPFGGKKPFPFPFPPPPFFFPGFGFGPFPFFKPFGPFPFPKPGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMONNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNMOOONMNNNNNNNNNNNNNNNNNNNNNMONNNNNONOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOOOOOOOORRRRKRRKKRRRKRRRMMNMMMMMRRRRKRMMNMRRKRRRRRRKRKHHMMMMMMMMMMMMMNMNMMNMNRRPRPPPPRRPPRPPPPGPGKPSNNNNNNNNNMMNNNNMNNNNNNNNNNNNNNNNMMMMNNMMNMNNNNMNNMNNRRRKKKRKMMMMMKMMMMMFPPPPPIFIIGFGNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNOOOOIIIFFFIIIFINNOONNNNNNNNOONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNONNOHNNNNNNNNNNNNNNNHHONNNNKRKIRKFFIRNNOONNNNNNMONNNNNNONNNNNNNNNNMMMMNMMMNNNNNMNNOONNOOMNNNNNNNONN","n":["BoxSyncFuture","Continuous","ExecutionType","HotShotConfig","Incremental","PeerConfig","ValidatorConfig","_DERIVE_Display_FOR_PeerConfig","_DERIVE_Display_FOR_ValidatorConfig","_DERIVE_core_fmt_Debug_FOR_HotShotConfig","__clone_box","__clone_box","__clone_box","__clone_box","assert_future","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed_sync","builder_timeout","builder_url","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","consensus","constants","da_non_staked_committee_size","da_staked_committee_size","data","data_request_delay","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","error","event","execution_type","fixed_leader_for_gpuvid","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bytes","generated_from_seed_indexed","get_hash","get_public_config","hash","header","header","init","init","init","init","into","into","into","into","is_da","known_da_nodes","known_nodes_with_stake","known_nodes_without_stake","layout_raw","layout_raw","layout_raw","layout_raw","light_client","message","my_own_validator_config","next_view_timeout","num_bootstrap","num_nodes_with_stake","num_nodes_without_stake","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","private_key","public_key","qc","round_start_delay","serialize","serialize","serialize","serialize","signature_key","simple_certificate","simple_vote","stake_table","stake_table_entry","stake_value","start_delay","start_threshold","state_key_pair","state_ver_key","timeout_ratio","to_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","traits","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","utils","vid","view_sync_timeout","vote","vzip","vzip","vzip","vzip","CommitmentAndMetadata","CommitmentMap","Consensus","ConsensusMetrics","ConsensusMetricsValue","InnerConsensusMetrics","ProposalDependencyData","QuorumProposalAndCertificate","SecondaryProposalInformation","Timeout","VidShares","View","ViewInner","ViewSync","_DERIVE_Display_FOR_InnerConsensusMetrics","_DERIVE_core_fmt_Debug_FOR_Consensus","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_marker","add","add_point","alloc","base","block_view","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder_commitment","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect_garbage","commitment","commitment_and_metadata","counters","create_counter","create_gauge","create_histogram","create_label","cur_view","cur_view","current_view","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dontuse_decided_upgrade_cert","dontuse_formed_upgrade_certificate","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fee","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","gauges","get_decided_leaf","get_decided_state","get_hash","get_hash","get_hash","get_state","get_state_and_delta","hash","hash","hash","header","high_qc","high_qc","histograms","init","init","init","init","init","init","init","into","into","into","into","into","into","into","invalid_qc","labels","last_decided_time","last_decided_view","last_decided_view","last_decided_view","last_proposed_view","last_synced_block_height","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","length","locked_view","locked_view","metadata","metrics","new","new","number_of_empty_blocks_proposed","number_of_timeouts","number_of_views_per_decide_event","number_of_views_since_last_decide","outstanding_transactions","outstanding_transactions_memory_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prefix","root","saved_da_certs","saved_da_certs","saved_leaves","saved_leaves","saved_payloads","saved_payloads","secondary_proposal_information","set","set","sub","subgroup","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_dontuse_decided_upgrade_cert","update_high_qc","update_last_decided_view","update_last_proposed_view","update_locked_view","update_saved_da_certs","update_saved_leaves","update_saved_payloads","update_validated_state_map","update_vid_shares","update_view","validated_state_map","validated_state_map","values","vid_shares","vid_shares","visit_leaf_ancestors","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BASE_VERSION","COMBINED_NETWORK_CACHE_SIZE","COMBINED_NETWORK_MIN_PRIMARY_FAILURES","COMBINED_NETWORK_PRIMARY_CHECK_INTERVAL","EVENT_CHANNEL_SIZE","EXTERNAL_EVENT_CHANNEL_SIZE","KAD_DEFAULT_REPUB_INTERVAL_SEC","LOOK_AHEAD","SRS_DEGREE","STATIC_VER_0_1","VERSION_0_1","VERSION_MAJ","VERSION_MIN","Version01","WEB_SERVER_MAJOR_VERSION","WEB_SERVER_MINOR_VERSION","WEB_SERVER_VERSION","WebServerVersion","BlockError","DAProposal","InconsistentPayloadCommitment","InconsistentPayloadCommitmentSnafu","InvalidBlockHeader","InvalidBlockHeaderSnafu","InvalidTransactionLength","InvalidTransactionLengthSnafu","Leaf","NodeType","QuorumProposal","TestableLeaf","Timeout","UpgradeProposal","VidDisperse","VidDisperseShare","ViewChangeEvidence","ViewNumber","ViewSync","_DERIVE_core_fmt_Debug_FOR_DAProposal","_DERIVE_core_fmt_Debug_FOR_QuorumProposal","_DERIVE_core_fmt_Debug_FOR_UpgradeProposal","_DERIVE_core_fmt_Debug_FOR_ViewChangeEvidence","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","add_assign","as_error","as_error_source","backtrace","batch_check","block_header","block_header","block_payload","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","cause","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit","commit","common","common","compare","create_random_transaction","create_random_transaction","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encoded_transactions","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extends_upgrade","fail","fail","fail","fake_commitment","fill_block_payload","fill_block_payload_unchecked","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_membership","from_quorum_proposal","from_vid_disperse","genesis","genesis","get_block_header","get_block_header_mut","get_block_payload","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_height","get_justify_qc","get_parent_commitment","get_payload_commitment","get_u64","get_upgrade_certificate","get_view_number","get_view_number","get_view_number","get_view_number","get_view_number","get_view_number","hash","hash","hash","hash","hash","hash","hash","hash","header","header","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","is_valid_for_view","justify_qc","justify_qc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","metadata","new","null_block","parent_commitment","partial_cmp","payload_commitment","payload_commitment","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proposal_certificate","random_commitment","recipient_key","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_signature2","serialize_with_mode","serialized_size","share","shares","source","sub","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_proposal","to_string","to_string","to_vid_disperse","to_vid_share_proposals","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade_certificate","upgrade_certificate","upgrade_proposal","view_number","view_number","view_number","view_number","view_number","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","MEMOIZED_MAPPING_COMMITMENT","__private_field","borrow","borrow_mut","builder_fee","commitment","deref","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","memoized_flush_commitment","memoized_original_commitment","pointer_metadata","try_from","try_into","type_id","vzip","BlockError","BlockSnafu","Continue","ContinueSnafu","FailedToBroadcast","FailedToBroadcastSnafu","FailedToMessageLeader","FailedToMessageLeaderSnafu","HotShotError","InsufficientValidSignatures","InsufficientValidSignaturesSnafu","InvalidState","InvalidStateSnafu","LeaderMinRoundTimeNotReached","LeaderWaitingForCommitVotes","LeaderWaitingForHighQC","LeaderWaitingForPreCommitVotes","LeaderWaitingForPrepareVotes","LeafNotFound","LeafNotFoundSnafu","Misc","MiscSnafu","NetworkFault","NetworkFaultSnafu","ReplicaWaitingForCommit","ReplicaWaitingForDecide","ReplicaWaitingForPreCommit","ReplicaWaitingForPrepare","RoundTimedoutState","TestCollectRoundEventsTimedOut","TimeoutError","TimeoutSnafu","ViewTimeoutError","ViewTimeoutSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","context","context","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","header","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","num_valid_signatures","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","source","state","threshold","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","context","context","num_valid_signatures","source","source","source","source","source","state","threshold","view_number","DACert","DAProposal","DAPropose","DAVote","Decide","Error","Event","EventType","HotShotAction","LeafChain","LeafInfo","NextLeaderViewTimeout","Propose","QuorumProposal","ReplicaViewTimeout","Transactions","UpgradeProposal","UpgradePropose","UpgradeVote","VidDisperse","ViewFinished","ViewTimeout","Vote","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","delta","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","error_adaptor","event","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","leaf","len","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","state","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vid_share","view_number","vzip","vzip","vzip","vzip","block_size","error","leaf_chain","proposal","proposal","proposal","qc","sender","sender","sender","transactions","view_number","view_number","view_number","view_number","deserialize","serialize","CircuitField","GenericLightClientState","GenericPublicInput","LightClientState","PublicInput","R","StateKeyPair","StateSignKey","StateSignature","StateSignatureRequestBody","StateSignatureScheme","StateSignaturesBundle","StateVerKey","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","accumulated_weight","as_bits","as_ref","batch_check","batch_check","block_comm_root","block_comm_root","block_comm_root","block_height","block_height","block_height","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","curve_param","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fee_ledger_comm","fee_ledger_comm","fee_ledger_comm","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_sign_key","from_str","generate","generate_from_seed","generate_from_seed_indexed","get_hash","hash","header","init","init","init","init","init","into","into","into","into","into","key","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","qc_key_comm","s","serialize","serialize","serialize","serialize","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","signature","signatures","stake_amount_comm","stake_table_comm","stake_table_comm","stake_table_comm","state","state","state_key_comm","tag","threshold","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","view_number","view_number","view_number","vzip","vzip","vzip","vzip","vzip","Committee","CommitteeConsensusMessage","Consensus","DAC","DACertificate","DAProposal","DAVote","Data","Data","DataMessage","DataResponse","General","GeneralConsensusMessage","Internal","LatestProposal","LatestViewSyncCertificate","Message","MessageKind","MessagePurpose","Messages","Proposal","Proposal","Proposal","RequestData","SequencingMessage","SubmitTransaction","TimeoutVote","UpgradeProposal","UpgradeProposal","UpgradeVote","UpgradeVote","VidDisperse","VidDisperseMsg","ViewSyncCertificate","ViewSyncCommitCertificate","ViewSyncCommitVote","ViewSyncFinalizeCertificate","ViewSyncFinalizeVote","ViewSyncPreCommitCertificate","ViewSyncPreCommitVote","ViewSyncVote","Vote","Vote","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_pd","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_consensus_message","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_view_number","get_view_number","hash","hash","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","kind","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","purpose","purpose","purpose","sender","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_signature","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BitVectorQC","QCParams","__clone_box","agg_sig_pp","assemble","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","fmt","from","from","get_hash","hash","init","init","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","serialize","serialize","sign","stake_entries","threshold","to_owned","trace","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BLSPrivKey","BLSPubKey","BLSPublicParam","BuilderKey","assemble","check","from_bytes","from_private","generated_from_seed_indexed","generated_from_seed_indexed","genesis_proposer_pk","get_public_key","get_public_parameter","get_sig_proof","get_stake_table_entry","sign","sign_builder_message","to_bytes","validate","validate_builder_signature","DACertificate","OneHonestThreshold","QuorumCertificate","SimpleCertificate","SuccessThreshold","Threshold","TimeoutCertificate","UpgradeCertificate","UpgradeThreshold","ViewSyncCommitCertificate2","ViewSyncFinalizeCertificate2","ViewSyncPreCommitCertificate2","__clone_box","__clone_box","__clone_box","__clone_box","_pd","_pd","_pd","_pd","_pd","_pd","_pd","_pd","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","commit","create_signed_certificate","data","data","data","data","data","data","data","data","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","genesis","genesis","get_data","get_data_commitment","get_hash","get_hash","get_hash","get_hash","get_view_number","hash","hash","hash","hash","header","in_interim","in_interim","init","init","init","init","into","into","into","into","is_relevant","is_relevant","is_valid_cert","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","signatures","signatures","signatures","signatures","signatures","signatures","signatures","signatures","threshold","threshold","threshold","threshold","threshold","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate","validate","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","vote_commitment","vote_commitment","vote_commitment","vote_commitment","vote_commitment","vote_commitment","vote_commitment","vote_commitment","vzip","vzip","vzip","vzip","DAData","DAVote","QuorumData","QuorumVote","SimpleVote","TimeoutData","TimeoutVote","UpgradeProposalData","UpgradeVote","VIDData","ViewSyncCommitData","ViewSyncCommitVote","ViewSyncFinalizeData","ViewSyncFinalizeVote","ViewSyncPreCommitData","ViewSyncPreCommitVote","Voteable","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","commit","commit","commit","commit","commit","commit","commit","create_signed_vote","data","data","data","data","data","data","data","data","decide_by","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_data","get_data_commitment","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_signature","get_signing_key","get_view_number","hash","hash","hash","hash","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaf_commit","new_version","new_version_first_view","new_version_hash","old_version","old_version_last_view","payload_commit","payload_commit","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","relay","relay","relay","round","round","round","sealed","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","signature","signature","signature","signature","signature","signature","signature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view","view_and_relay_commit","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Sealed","StakeTableEntry","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","get_key","get_stake","hash","init","into","layout_raw","pointer_metadata","serialize","stake_amount","stake_key","to_owned","try_from","try_into","type_id","vzip","BlockPayload","EncodeBytes","ValidatedState","block_contents","consensus_api","election","metrics","network","node_implementation","qc","signature_key","stake_table","states","storage","BlockHeader","BlockPayload","BuilderFee","EncodeBytes","Error","Error","GENESIS_VID_NUM_STORAGE_NODES","Instance","Metadata","TestableBlock","Transaction","Transaction","__clone_box","block_number","borrow","borrow_mut","builder_commitment","builder_commitment","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","encode","encode","eq","equivalent","equivalent","equivalent","equivalent","fee_account","fee_amount","fee_signature","fmt","from","from_bytes","from_transactions","genesis","genesis","genesis","get_hash","get_transactions","hash","init","into","layout_raw","metadata","new","num_transactions","payload_commitment","pointer_metadata","precompute_vid_commitment","serialize","to_owned","transaction_commitments","try_from","try_into","txn_count","type_id","vid_commitment","vzip","ConsensusApi","builder_timeout","private_key","public_key","send_event","total_nodes","ElectionError","MathError","MathSnafu","Membership","StubError","StubSnafu","__clone_box","__clone_box","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build","cause","clone","clone","clone_into","clone_into","create_election","deref","deref","deref","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","drop","drop","drop","fail","fail","failure_threshold","fmt","fmt","fmt","fmt","from","from","from","get_committee_qc_stake_table","get_leader","get_non_staked_committee","get_stake","get_staked_committee","get_whole_committee","has_stake","header","in_current_span","init","init","init","into","into","into","into_error","into_error","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","success_threshold","to_owned","to_owned","to_string","total_nodes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upgrade_threshold","vzip","vzip","vzip","Counter","Gauge","Histogram","Label","Metrics","NoMetrics","__clone_box","add","add","add_point","add_point","borrow","borrow_mut","boxed","clone","clone_into","create_counter","create_counter","create_gauge","create_gauge","create_histogram","create_histogram","create_label","create_label","default","deref","deref_mut","deserialize","drop","fmt","from","init","into","layout_raw","pointer_metadata","set","set","set","set","subgroup","subgroup","to_owned","try_from","try_into","type_id","update","update","vzip","AsyncGenerator","AsynchronousNetwork","Broadcast","CentralizedServer","CentralizedServerNetworkError","CentralizedServerSnafu","ChannelSend","ChannelSendSnafu","ChaosNetwork","ClientDisconnected","ClientDisconnectedSnafu","ClientError","ClientSnafu","ConnectedNetwork","CouldNotDeliver","CouldNotDeliverSnafu","DACommitteeBroadcast","DAProposal","DataRequest","Denied","Direct","EndpointError","EndpointSnafu","FailedToDeserialize","FailedToDeserializeSnafu","FailedToReceive","FailedToReceiveSnafu","FailedToSend","FailedToSendSnafu","FailedToSerialize","FailedToSerializeSnafu","Found","Id","IncorrectConsensusData","IncorrectConsensusDataSnafu","Libp2p","Libp2pMulti","Libp2pMultiSnafu","Libp2pSnafu","MemoryNetwork","MemoryNetworkError","MemoryNetworkSnafu","MultipleErrors","MultipleErrorsSnafu","NetworkChange","NetworkError","NetworkMsg","NetworkReliability","NoBootstrapNodesSpecified","NoBootstrapNodesSpecifiedSnafu","NoMessagesInQueue","NoMessagesInQueueSnafu","NoSuchNode","NoSuchNodeSnafu","NodeConnected","NodeDisconnected","NotFound","NotFound","NotFoundSnafu","PartiallySynchronousNetwork","PerfectNetwork","PushCdnNetwork","PushCdnNetworkError","PushCdnNetworkSnafu","RequestKind","ResponseChannel","ResponseMessage","ShutDown","ShutDownSnafu","Stub","StubSnafu","SynchronousNetwork","TestableNetworkingImplementation","Timeout","TimeoutSnafu","TransmitType","UnableToCancel","UnableToCancelSnafu","UnimplementedFeature","UnimplementedFeatureSnafu","VID","ViewMessage","WebServer","WebServerNetworkError","WebServerSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error","as_error","as_error","as_error","as_error_source","as_error_source","as_error_source","as_error_source","as_error_source","asynchronous","backtrace","backtrace","backtrace","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","cause","cause","cause","cause","cause","chaos_send_msg","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","da_broadcast_message","default","default","default","default","delay_high_ms","delay_high_ms","delay_high_ms","delay_low_ms","delay_low_ms","delay_low_ms","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","description","description","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","direct_message","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generator","get_hash","get_hash","get_hash","get_view_number","gst","hash","hash","hash","header","header","header","header","header","in_current_span","in_current_span","in_current_span","in_current_span","in_current_span","in_flight_message_count","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","is_primary_down","keep_denominator","keep_denominator","keep_numerator","keep_numerator","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new","new","new","pause","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","purpose","queue_node_lookup","recv_msgs","repeat_high","repeat_low","request","request_data","resume","sample_delay","sample_delay","sample_delay","sample_delay","sample_delay","sample_keep","sample_keep","sample_keep","sample_keep","sample_keep","sample_repeat","sample_repeat","scramble","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shut_down","signature","source","source","source","source","source","sources","spawn_request_receiver_task","start","synchronous","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_view","vid_broadcast_message","view","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_ready","errors","source","source","source","source","source","source","source","source","sources","BlockHeader","BlockPayload","BuilderSignatureKey","CommitteeNetwork","ConsensusTime","InstanceState","Membership","NodeImplementation","NodeType","QuorumNetwork","SignatureKey","Storage","TestableNodeImplementation","Time","Transaction","ValidatedState","block_genesis","gen_networks","genesis","get_u64","leaf_create_random_transaction","new","state_create_random_transaction","txn_count","MessageLength","QC","QCProverParams","QCVerifierParams","QuorumCertificateScheme","QuorumSize","assemble","check","sign","trace","BuilderPrivateKey","BuilderSignature","BuilderSignatureKey","PrivateKey","PureAssembledSignatureType","QCParams","QCType","SignError","SignError","SignatureKey","StakeTableEntry","StakeTableEntryType","aggregate_block_info_data","aggregate_fee_data","assemble","check","from_bytes","from_private","generated_from_seed_indexed","generated_from_seed_indexed","genesis_proposer_pk","get_public_key","get_public_parameter","get_sig_proof","get_stake","get_stake_table_entry","sign","sign_block_info","sign_builder_message","sign_fee","to_bytes","validate","validate_block_info_signature","validate_builder_signature","validate_fee_signature","Amount","Aux","BlockNum","Commitment","EpochStart","ExistingKey","Head","InsufficientFund","IntoIter","Key","KeyNotFound","LastEpochStart","LookupProof","MalformedProof","MismatchedKey","RescueError","SnapshotUnsupported","SnapshotVersion","StakeOverflow","StakeTableError","StakeTableScheme","VerificationError","_DERIVE_Display_FOR_StakeTableError","as_error","as_error_source","batch_deregister","batch_register","batch_update","borrow","borrow","borrow_mut","borrow_mut","commitment","contains_key","deref","deref","deref_mut","deref_mut","deregister","deserialize","deserialize","drop","drop","fmt","fmt","from","from","header","in_current_span","init","init","into","into","layout_raw","layout_raw","len","lookup","lookup_with_aux_and_proof","lookup_with_proof","pointer_metadata","pointer_metadata","register","sample","to_string","total_stake","try_from","try_from","try_into","try_into","try_iter","type_id","type_id","update","vzip","vzip","Delta","Error","Instance","InstanceState","StateDelta","TestableState","Time","ValidatedState","create_random_transaction","from_header","genesis","on_commit","validate_and_apply_header","Storage","append_da","append_vid","record_action","update_high_qc","update_undecided_state","BuilderCommitment","DA","Exclusive","Failed","Inclusive","Leaf","LeafCommitment","RoundFinishedEvent","Sha256Digest","StateAndDelta","Terminator","View","ViewInner","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_ref","batch_check","bincode_opts","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bytes","from_raw_digest","from_str","get_hash","get_leaf_and_state","get_leaf_commitment","get_payload_commitment","get_state","get_state_and_delta","hash","header","init","init","init","init","init","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize_with_mode","serialized_size","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","view_inner","view_number","vzip","vzip","vzip","vzip","vzip","delta","leaf","payload_commitment","state","Advz","E","H","KZG_SRS","LargeRangeProofType","SmallRangeProofType","VidCommitment","VidCommon","VidPrecomputeData","VidSchemeType","VidShare","__clone_box","__clone_box","__private_field","_pd","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","ck","clone","clone","clone_into","clone_into","commit_only","commit_only_precompute","core","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","disperse","disperse_precompute","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval_domain","fmt","fmt","from","from","from","from","get_multiplicity","get_num_storage_nodes","get_payload_byte_len","init","init","init","init","into","into","into","into","is_consistent","layout_raw","layout_raw","layout_raw","layout_raw","multi_open_domain","multiplicity","num_storage_nodes","payload_proof","payload_proof","payload_verify","payload_verify","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","recover_payload","recovery_threshold","serialize","serialize","srs_on_gpu_and_cuda_stream","stmt_conversion","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify_share","vid_disperse_conversion","vid_scheme","vk","vzip","vzip","vzip","vzip","Certificate","Commitment","HasViewNumber","SignersMap","Threshold","Vote","VoteAccumulator","VoteDependencyData","VoteMap2","Voteable","__clone_box","accumulate","base","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_signed_certificate","da_cert","deref","deref","deref_mut","deref_mut","deserialize","deserialize","disperse_share","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from","get_data","get_data","get_data_commitment","get_data_commitment","get_hash","get_signature","get_signing_key","get_view_number","hash","init","init","into","into","is_valid_cert","layout_raw","layout_raw","parent_leaf","phantom","pointer_metadata","pointer_metadata","quorum_proposal","signers","threshold","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vote_outcomes","vzip","vzip"],"q":[[0,"hotshot_types"],[162,"hotshot_types::consensus"],[421,"hotshot_types::constants"],[439,"hotshot_types::data"],[867,"hotshot_types::data::null_block"],[889,"hotshot_types::error"],[1220,"hotshot_types::error::HotShotError"],[1231,"hotshot_types::event"],[1352,"hotshot_types::event::EventType"],[1367,"hotshot_types::event::error_adaptor"],[1369,"hotshot_types::light_client"],[1556,"hotshot_types::message"],[1856,"hotshot_types::qc"],[1907,"hotshot_types::signature_key"],[1927,"hotshot_types::simple_certificate"],[2117,"hotshot_types::simple_vote"],[2451,"hotshot_types::simple_vote::sealed"],[2452,"hotshot_types::stake_table"],[2486,"hotshot_types::traits"],[2500,"hotshot_types::traits::block_contents"],[2563,"hotshot_types::traits::consensus_api"],[2569,"hotshot_types::traits::election"],[2659,"hotshot_types::traits::metrics"],[2707,"hotshot_types::traits::network"],[3812,"hotshot_types::traits::network::NetworkError"],[3822,"hotshot_types::traits::node_implementation"],[3846,"hotshot_types::traits::qc"],[3856,"hotshot_types::traits::signature_key"],[3891,"hotshot_types::traits::stake_table"],[3966,"hotshot_types::traits::states"],[3979,"hotshot_types::traits::storage"],[3985,"hotshot_types::utils"],[4131,"hotshot_types::utils::ViewInner"],[4135,"hotshot_types::vid"],[4260,"hotshot_types::vote"],[4332,"dyn_clone::sealed"],[4333,"core::future::future"],[4334,"core::marker"],[4335,"core::marker"],[4336,"rkyv::with"],[4337,"core::result"],[4338,"serde::de"],[4339,"core::cmp"],[4340,"core::fmt"],[4341,"core::fmt"],[4342,"core::hash"],[4343,"core::hash"],[4344,"core::fmt"],[4345,"core::alloc::layout"],[4346,"serde::ser"],[4347,"alloc::string"],[4348,"core::any"],[4349,"alloc::boxed"],[4350,"alloc::sync"],[4351,"alloc::collections::btree::map"],[4352,"std::collections::hash::map"],[4353,"anyhow"],[4354,"core::ops::function"],[4355,"core::error"],[4356,"std::backtrace"],[4357,"ark_serialize::error"],[4358,"core::iter::traits::iterator"],[4359,"core::cmp"],[4360,"rand_core"],[4361,"ark_serialize"],[4362,"ark_serialize"],[4363,"committable"],[4364,"std::io"],[4365,"std::sync::mutex"],[4366,"core::convert"],[4367,"core::num::nonzero"],[4368,"bitvec::slice"],[4369,"bitvec::order"],[4370,"ark_ff::fields::prime"],[4371,"core::cmp"],[4372,"ark_ed_on_bn254::curves"],[4373,"jf_signature::schnorr"],[4374,"core::cmp"],[4375,"tagged_base64"],[4376,"serde::de"],[4377,"generic_array"],[4378,"serde::de"],[4379,"bitvec::vec"],[4380,"core::cmp"],[4381,"core::time"],[4382,"core::pin"],[4383,"core::num::nonzero"],[4384,"vbs::version"],[4385,"core::convert"],[4386,"bincode::config::limit"],[4387,"bincode::config"],[4388,"bincode::config"],[4389,"bincode::config"],[4390,"bincode::config"],[4391,"jf_pcs::univariate_kzg::srs"],[4392,"core::ops::range"],[4393,"jf_vid::payload_prover"],[4394,"sha2"],[4395,"jf_vid::advz"],[4396,"either"]],"d":["Pinned future that is Send and Sync","constantly increment view as soon as view finishes","the type of consensus to run. Either: wait for a signal to …","Holds configuration for a <code>HotShot</code>","wait for a signal","structure of peers’ config, including public key, stake …","config for validator, including public key, private key, …","","","","","","","","yoinked from futures crate","","","","","","","","","yoinked from futures crate, adds sync bound that we need","The maximum amount of time a leader can wait to get a …","Builder API base URL","","","","","","","","","Provides the core consensus types","configurable constants for hotshot","List of DA committee nodes (non-staking)nodes for static …","List of DA committee (staking)nodes for static DA committee","Provides types useful for representing <code>HotShot</code>’s data …","time to wait until we request data associated with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error type for <code>HotShot</code>","Events that a <code>HotShot</code> instance can emit","Whether to run one view or continuous views","Number of fixed leaders for GPU VID, normally it will be …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a peer’s config from bytes","generate validator config from input seed, index, stake …","","get the public config of the validator","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether or not this validator is DA","All public keys known to be DA nodes","List of known node’s public keys and stake value for …","List of known non-staking nodes’ public keys","","","","","Types and structs associated with light client state","Network message types","My own validator config, including my public key, private …","Base duration for next-view timeout, in milliseconds","Number of network bootstrap nodes","Total number of nodes in the network","Number of nodes without stake","","","","","The validator’s private key, should be in the mempool, …","The validator’s public key and stake value","Implementation for <code>BitVectorQC</code> that uses BLS signature + …","The delay a leader inserts before starting pre-commit, in …","","","","","Types and structs for the hotshot signature keys","Implementations of the simple certificate type.  Used for …","Implementations of the simple vote types.","Types and structs related to the stake table","The peer’s public key and stake value","The validator’s stake","Delay after init before starting consensus, in milliseconds","The proportion of nodes required before the orchestrator …","the validator’s key pairs for state signing/verification","the peer’s state public key","The exponential backoff ration for the next-view timeout","Serialize a peer’s config to bytes","","","","","","","Common traits for the <code>HotShot</code> protocol","","","","","","","","","","","","","Utility functions, type aliases, helper structs and enum …","This module provides:","Duration of view sync round timeouts","Vote, Accumulator, and Certificate Types","","","","","Alias for the block payload commitment and the associated …","A type alias for <code>HashMap&lt;Commitment&lt;T&gt;, T&gt;</code>","A reference to the consensus algorithm","The wrapper with a string name for the networking metrics","Contains several <code>ConsensusMetrics</code> that we’re interested …","the set of counters and gauges for the networking metrics","Dependency data required to submit a proposal","The quorum proposal and certificate needed to propose.","Helper type to hold the optional secondary information …","The timeout certificate which we can propose from.","A type alias for …","","","The view sync certificate which we can propose from.","","","","","","","","","","","","","","View number this block is for","","","","","","","","","","","","","","","Builder Commitment","","","","","","","","","","","","","Garbage collects based on state change right now, this …","Vid Commitment","The primary data in a proposal.","All the counters of the networking metrics","","","","","Get the current view.","View number that is currently on.","The current view","","","","","","","","","","","","","","","","","","","","","","","","most recent decided upgrade certificate","The most recent upgrade certificate this node formed. …","","","","","","","","","","","","","","","","","","","","","","","Builder fee data","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","All the gauges of the networking metrics","Gets the last decided leaf.","Gets the last decided validated state.","","","","Gets the validated state with the given view number, if in …","Gets the validated state and state delta with the given …","","","","","Get the high QC.","the highqc per spec","All the histograms of the networking metrics","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Number of invalid QCs we’ve seen since the last commit.","All the labels of the networking metrics","Number of timestamp for the last decided time","Get the last decided view.","last view had a successful decide event","The number of last decided view","View we proposed in last.  To prevent duplicate proposals","The number of last synced block height","","","","","","","","","Get the locked view.","The <code>locked_qc</code> view number","Metadata for the block payload","A reference to the metrics trait","Constructor.","Create a new instance of this <code>ConsensusMetricsValue</code> …","The number of empty blocks that have been proposed","Number of views that timed out","Number of views that are in-flight since the last anchor …","Number of views that are in-flight since the last decided …","Number of outstanding transactions","Memory size in bytes of the serialized transactions still …","","","","","","","","a prefix which tracks the name of the metric","","Get the saved DA certs.","All the DA certs we’ve received for current and future …","Get the saved leaves.","Map of leaf hash -&gt; leaf","Get the saved payloads.","Saved payloads.","The secondary data in a proposal","","","For the creation and naming of gauge, counter, histogram …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the most recent decided upgrade certificate.","Update the high QC if given a newer one.","Update the last decided view.","Update the last proposed view.","Update the locked view.","Add a new entry to the da_certs map.","Update the saved leaves with a new leaf.","Update the saved payloads with a new encoded transaction.","Update the validated state map with a new view_number/view …","Add a new entry to the vid_shares map.","Update the current view.","Get the validated state map.","The validated states that are currently loaded in memory.","a map of values","Get the vid shares.","All the VID shares we’ve received for current and future …","gather information from the parent chain of leaves","","","","","","","","Constant for the base protocol version in this instance of …","the number of messages to cache in the combined network","the number of messages to attempt to send over the primary …","the number of messages to send over the secondary network …","Default channel size for consensus event sharing","Default channel size for HotShot -&gt; application …","the default kademlia record republication interval (in …","the number of views to gather information for ahead of time","For <code>STAKE_TABLE_CAPACITY=200</code>, the light client prover …","Constant for protocol static version 0.1.","Constant for protocol version 0.1.","CONSTANT for protocol major version","CONSTANT for protocol major version","Type for protocol static version 0.1.","Constants for <code>WebServerNetwork</code> and <code>WebServer</code> The Web CDN …","Web Server CDN Version (minor)","Constant for Web Server CDN Version","Type for Web Server CDN Version","The error type for block and its transactions.","A proposal to start providing data availability for a …","Inconsistent payload commitment.","SNAFU context selector for the …","Invalid block header.","SNAFU context selector for the …","Invalid transaction length.","SNAFU context selector for the …","This is the consensus-internal analogous concept to a …","Type of nodes participating in the network.","Proposal to append a block.","Additional functions required to use a <code>Leaf</code> with …","Holds a timeout certificate.","A proposal to upgrade the network","VID dispersal data","VID share and associated metadata for a single node","Helper type to encapsulate the various ways that proposal …","Type-safe wrapper around <code>u64</code> so we know the thing we’re …","Holds a view sync finalized certificate.","","","","","","","","","","","","","","","","","","","","","","The block header to append","Block header.","Optional block payload.","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","VID common data sent to all storage nodes","VID common data sent to all storage nodes","","Create a transaction that can be added to the block …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encoded transactions in the block to be applied.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Validate that a leaf has the right upgrade certificate to …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Fake the thing a genesis block points to. Needed to avoid …","Fill this leaf with the block payload.","Fill this leaf with the block payload, without checking …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create VID dispersal from a specified membership Uses the …","Constructs a leaf from a given quorum proposal.","Create a vector of <code>VidDisperseShare</code> from <code>VidDisperse</code>","Create a genesis view number (0)","Create a new leaf from its components.","The block header contained in this leaf.","Get a mutable reference to the block header contained in …","Optional block payload.","","","","","","","","","Height of this leaf in the chain.","The QC linking this leaf to its parent in the chain.","Commitment to this leaf’s parent.","A commitment to the block payload contained in this leaf.","Returen the u64 format","The QC linking this leaf to its parent in the chain.","","","","","","Time when this leaf was created.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Check that the given ViewChangeEvidence is relevant to the …","Per spec, justification","Per spec, justification","","","","","","","","","","","","","Metadata of the block to be applied.","Create a new <code>ViewNumber</code> with the given value.","","The hash of the parent <code>Leaf</code> So we can ask if it extends","","Block payload commitment","Block payload commitment","","","","","","","","","","","","","Possible timeout or view sync certificate.","create a random commitment","a public key of the share recipient","","","","","","","","","","Serialization for the QC assembled signature","","","A storage node’s key and its corresponding VID share","A storage node’s key and its corresponding VID share","","","","","","","","","","","","","","Consume <code>self</code> and return a <code>Proposal</code>","","","Create <code>VidDisperse</code> out of an iterator to <code>VidDisperseShare</code>s","Split a VID share proposal into a proposal for each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Possible upgrade certificate, which the leader may …","Optional upgrade certificate, if one was attached to the …","The information about which version we are upgrading to.","View this proposal applies to","View this proposal applies to","The view number for which this VID data is intended","The view number for which this VID data is intended","CurView from leader when proposing leaf","CurView from leader when proposing leaf","","","","","","","","","","","","","","","","","Builder fee data for a null block payload","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","The commitment for a null block payload.","","","","","","Failure in the block.","SNAFU context selector for the <code>HotShotError::BlockError</code> …","Internal value used to drive the state machine","SNAFU context selector for the <code>HotShotError::Continue</code> …","Failed to broadcast a message on the network","SNAFU context selector for the …","Failed to Message the leader in the given stage","SNAFU context selector for the …","Error type for <code>HotShot</code>","Not enough valid signatures for a quorum","SNAFU context selector for the …","Error accessing storage Invalid state machine state","SNAFU context selector for the <code>HotShotError::InvalidState</code> …","Leader is in a Prepare phase and timed out before the …","Leader is waiting for commit votes","Leader is in a Prepare phase and is waiting for a HighQC","Leader is waiting for precommit votes","Leader is waiting for prepare votes","Item was not present in storage","SNAFU context selector for the <code>HotShotError::LeafNotFound</code> …","Miscellaneous error TODO fix this with #181 …","SNAFU context selector for the <code>HotShotError::Misc</code> variant","Failure in networking layer","SNAFU context selector for the <code>HotShotError::NetworkFault</code> …","Replica is waiting for a commit message","Replica is waiting for a decide message","Replica is waiting for a pre-commit message","Replica is waiting for a prepare message","Contains information about what the state of the …","HotShot-testing tried to collect round events, but it …","HotShot timed out waiting for msgs","SNAFU context selector for the <code>HotShotError::TimeoutError</code> …","HotShot timed out during round","SNAFU context selector for the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","source of error","Context","Number of valid signatures","source of error","The underlying network fault","The underlying network fault","The underlying block error.","Underlying network fault","The state that the round was in when it timed out","Threshold of signatures needed for a quorum","view number","DA certificate was sent","DA proposal was received from the network or submitted to …","DA proposal was sent","DA vote was sent","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","A list of actions that we track for nodes","The chain of decided leaves with its corresponding state …","Decided leaf with the corresponding state and VID info.","A next leader task was canceled by a timeout interrupt","A quorum proposal was sent","Quorum proposal was received from the network or submitted …","A replica task was canceled by a timeout interrupt","New transactions were received from the network or …","Upgrade proposal was received from the network or …","An upgrade proposal was sent","An upgrade vote was sent","VID shares were sent","The view has finished.  If values were decided on, a <code>Decide</code>…","The view timed out","A quorum vote was sent","","","","","","","","","","","","","","","","","","","","","","Optional application-specific state delta.","","","","","","","","","","","","","","","","","","","","","Utilities for converting between HotShotError and a string.","The underlying event","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Decided leaf.","","Constructor.","","","","","","","","","Validated state.","","","","","","","","","","","","","","","","","Optional VID share data.","The view number that this event originates from","","","","","Optional information of the number of transactions in the …","The underlying error","The chain of Leafs that were committed by this decision","Contents of the proposal","Contents of the proposal","Contents of the proposal","The QC signing the most recent leaf in <code>leaf_chain</code>.","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","The list of transactions","The view that timed out","The view that timed out","The view number that has just finished","The view that timed out","Convert a string into a HotShotError","Convert a HotShotError into a string","Base field in the prover circuit","A light client state","Public input to the light client state prover service","Concrete type for light client state","Concrete for circuit’s public input","","Key pairs for signing/verifying a light client state","Signing key for signing a light client state","Signatures","Request body to send to the state relay server","Signature scheme","The state signatures bundle is a light client state and …","Verification key for verifying state signatures","","","","","","Total stakes associated with the signer","","","","","Return the block commitment root of the light client state","Root of the block commitment tree","Root of the block commitment tree","Return the block height of the light client state","Current block height","Current block height","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the fee ledger commitment of the light client state","Commitment for fee ledger","Commitment for fee ledger","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Generate key pairs from private signing keys","","Generate key pairs from <code>thread_rng()</code>","Generate key pairs from seed","Generate key pairs from an index and a seed","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The public key associated with this request","","","","","","","","","","","","Return the qc key commitment of the light client state","","","","","","","","","","The associated signature of the light client state","The collected signatures","Return the stake amount commitment of the light client …","Return the stake table commitment of the light client state","Commitment for the stake table","Commitment for the stake table","The associated light client state","The state for this signatures bundle","Return the state key commitment of the light client state","","Return the threshold","","","","","","","","","","","","","","","","","","","","","","","","","Return the view number of the light client state","Current view number","Current view number","","","","","","Messages related to the sequencing consensus protocol for …","Messages related to the sequencing consensus protocol for …","Messages related to the consensus protocol","Message with a DAC.","Certificate data is available","Proposal for data availability committee","vote for data availability committee","Data message","Messages relating to sharing data between nodes","TODO: Put <code>DataResponse</code> content in a <code>Box</code> to make enum …","A response to a data request","Messages related to validating and sequencing consensus","Messages related to both validating and sequencing …","Message for internal use","Message with most recent [quorum/DA] proposal the server …","Message with most recent view sync certificate the server …","Incoming message","Enum representation of any message type","A message type agnostic description of a message’s …","A wrapper type for implementing <code>PassType</code> on a vector of …","Prepare qc from the leader","Message with a [quorum/DA] proposal.","Message with a quorum proposal.","A request for data","Messages for sequencing consensus.","Contains a transaction to be submitted TODO rethink this …","Message with a Timeout vote","Message with an upgrade proposal.","Message with an upgrade proposal","Upgrade vote.","Message with an upgrade vote","VID disperse, like <code>Proposal</code>.","Initiate VID dispersal.","Message with a view sync certificate.","Message with a view sync commit certificate","Message with a view sync commit vote","Message with a view sync finalize certificate","Message with a view sync finalize vote","Message with a view sync pre-commit certificate","Message with a view sync pre-commit vote","Message with a view sync vote.","Message with a quorum vote.","Message with a quorum vote.","","","","","","","","","","Phantom for TYPES","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The data being proposed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a <code>MessageKind</code> from <code>SequencingMessage</code>.","","","","","","","","get the view number out of a message","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The message kind","","","","","","","","","","","","","","","","","","","","","Get the message purpos","The sender of this message","","","","","","","","The proposal must be signed by the view leader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that the signature of the quorum proposal is valid.","Get the view number this message relates to","","","","","","","","","","An implementation of QC using BLS signature and a …","Public parameters of <code>BitVectorQC</code>","","public parameter for the aggregated signature scheme","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Sign a message with the signing key","the stake table (snapshot) this QC is verified against","threshold for the accumulated “weight” of votes to …","","","","","","","","","","","BLS private key used to sign a message","BLS public key used to verify a signature","Public parameters for BLS signature scheme","Builder signature key","","","","","","","","","","","","","","","","","Type alias for a DA certificate over <code>DAData</code>","Defines a threshold which is f + 1 (i.e at least one of …","Type alias for a <code>QuorumCertificate</code>, which is a …","A certificate which can be created by aggregating many …","Defines a threshold which is 2f + 1 (Amount needed for …","Trait which allows use to inject different threshold …","Type alias for a Timeout certificate over a view number","Type alias for a <code>UpgradeCertificate</code>, which is a …","Defines a threshold which is 0.9n + 1 (i.e. over 90% of …","Type alias for a <code>ViewSyncCommit</code> certificate over a view …","Type alias for a <code>ViewSyncFinalize</code> certificate over a view …","Type alias for a <code>ViewSyncPreCommit</code> certificate over a view …","","","","","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","","","","","","","","","","","","","","","","","","","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creat the Genesis certificate","Creat the Genesis certificate","","","","","","","","","","","","","Test whether a view is in the interim period prior to the …","Test whether a view is in the interim period prior to the …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines whether or not a certificate is relevant (i.e. …","Determines whether or not a certificate is relevant (i.e. …","","","","","","","","","","","","","","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","Calculate a threshold based on the membership","","","","","","","","","","","","","","","","","","","","","","Validate an upgrade certificate.","Validate an upgrade certificate.","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","","","","","Data used for a DA vote.","DA vote type alias","Data used for a yes vote.","Quorum vote Alias","A simple yes vote over some votable type.","Data used for a timeout vote.","Timeout Vote type alias","Data used for a Upgrade vote.","Upgrade proposal vote","Data used for a VID vote.","Data used for a Commit vote.","View Sync Commit Vote type alias","Data used for a Finalize vote.","View Sync Finalize Vote type alias","Data used for a Pre Commit vote.","View Sync Pre Commit Vote type alias","Marker trait for data or commitments that can be voted on. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates and signs a simple vote","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The last view in which we are allowed to reach a decide on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Commitment to the leaf","The new version that we are upgrading to.","The first block for which the new version will be in …","A unique identifier for the specific protocol being voted …","The old version that we are upgrading from.","The last block for which the old version will be in effect.","Commitment to a block payload","Commitment to the block payload the VID vote is on.","","","","","","","","","","The relay this vote is intended for","The relay this vote is intended for","The relay this vote is intended for","The view number we are trying to sync on","The view number we are trying to sync on","The view number we are trying to sync on","Sealed is used to make sure no other files can implement …","","","","","","","","","","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","View the timeout is for","This implements commit for all the types which contain a …","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","","","","","","","","","","Only structs in this file can impl <code>Sealed</code>","Stake table entry","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Get the public key","Get the stake amount","","","Calls <code>U::from(self)</code>.","","","","The associated stake amount","The public key","","","","","","","","","Abstraction over the contents of a block","Contains the <code>ConsensusApi</code> trait.","The election trait, used to decide which node is the …","The <code>Metrics</code> trait is used to collect information from …","Network access compatibility","Composite trait for node behavior","The quorum certificate (QC) trait is a certificate of a …","Minimal compatibility over public key signatures","Trait for stake table data structures","Abstractions over the immutable instance-level state and …","Abstract storage type for storing DA proposals and VID …","Header of a block, which commits to a <code>BlockPayload</code>.","Abstraction over the full contents of a block","Information about builder fee for proposed block","Trait for structures that need to be unambiguously encoded …","The error type for this type of block","Error type for this type of block header","The number of storage nodes to use when computing the …","The type of the instance-level state this state is …","Data created during block building which feeds into the …","extra functions required on block to be usable by …","Abstraction over any type of transaction. Used by …","The type of the transitions we are applying","","Get the block number.","","","Generate commitment that builders use to sign block …","Get the builder commitment","","","","","","","","Encode <code>&amp;self</code>","Encode the payload","","","","","","Account authorizing the fee.","Proposed fee amount","Signature over fee amount by <code>fee_account</code>.","","Returns the argument unchanged.","Build a payload with the encoded transaction bytes, …","Build a payload and associated metadata with the …","Build the genesis payload and metadata.","generate a genesis block","Build the genesis header, payload, and metadata.","","Get the transactions in the payload.","","","Calls <code>U::from(self)</code>.","","Get the metadata.","Build a header with the parent validate state, …","Number of transactions in the block.","Get the payload commitment.","","Compute the VID payload commitment along with precompute …","","","List of transaction commitments.","","","the number of transactions in this block","","Compute the VID payload commitment. TODO(Gus) delete this …","","The API that tasks use to talk to the system TODO we plan …","The maximum amount of time a leader can wait to get a …","Get a reference to the private key.","Get a reference to the public key.","Notify the system of an event within <code>hotshot-consensus</code>.","Total number of nodes in the network. Also known as <code>n</code>.","Error for election problems","Math error doing something NOTE: it would be better to …","SNAFU context selector for the <code>ElectionError::MathError</code> …","A protocol for determining membership in and participating …","stub error to be filled in","SNAFU context selector for the <code>ElectionError::StubError</code> …","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","create an election TODO may want to move this to a …","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Returns the threshold for a specific <code>Membership</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Clone the public key and corresponding stake table for …","The leader of the committee for view <code>view_number</code>.","The non-staked members of the committee for view …","Get the stake table entry for a public key, returns <code>None</code> …","The staked members of the committee for view <code>view_number</code>.","Get whole (staked + non-staked) committee for view …","Check if a key has stake","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the threshold for a specific <code>Membership</code> …","","","","Returns the number of total nodes in the committee","","","","","","","","","","Returns the threshold required to upgrade the network …","","","","An ever-incrementing counter","A gauge that stores the latest value.","A histogram which will record a series of points.","A label that stores the last string value.","The metrics type.","Use this if you’re not planning to use any metrics. All …","","Add a value to the counter","","Add a point to this histogram.","","","","Create a new <code>Box&lt;dyn Metrics&gt;</code> with this <code>NoMetrics</code>","","","Create a <code>Counter</code> with an optional <code>unit_label</code>.","","Create a <code>Gauge</code> with an optional <code>unit_label</code>.","","Create a <code>Histogram</code> with an optional <code>unit_label</code>.","","Create a <code>Label</code>.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Set the gauge value","Set the label value","","","Create a subgroup with a specified prefix.","","","","","","Update the guage value","","","A channel generator for types that need asynchronous …","An asynchronous network. Packets may be dropped entirely …","broadcast the message to all","Centralized server specific errors","Centralized server specific errors","SNAFU context selector for the …","Error sending output to consumer of …","SNAFU context selector for the <code>NetworkError::ChannelSend</code> …","A chaotic network using all the networking calls","Client disconnected","SNAFU context selector for the …","The client returned an error","SNAFU context selector for the …","represents a networking implmentration exposes low level …","Could not deliver a message to a specified recipient","SNAFU context selector for the …","broadcast to DA committee","Request a DA proposal for a certain view","A request for some data that the consensus layer is asking …","The Request was denied","directly transmit","Endpoint parsed incorrectly","SNAFU context selector for the …","Failed to deserealize a network message","SNAFU context selector for the …","Failed to receive a message from the server","SNAFU context selector for the …","Failed to send a message to the server","SNAFU context selector for the …","Failed to serialize a network message","SNAFU context selector for the …","Peer returned us some data","Trait that bundles what we need from a request ID","The injected consensus data is incorrect","SNAFU context selector for the …","Libp2p specific errors","collection of libp2p specific errors","SNAFU context selector for the <code>NetworkError::Libp2pMulti</code> …","SNAFU context selector for the <code>NetworkError::Libp2p</code> variant","memory network specific errors","for any errors we decide to add to memory network","SNAFU context selector for the <code>NetworkError::MemoryNetwork</code> …","Multiple errors","SNAFU context selector for the <code>NetworkError::MultipleErrors</code>…","Changes that can occur in the network","Error type for networking","common traits we would like our network messages to …","interface describing how reliable the network is","No bootstrap nodes were specified on network creation","SNAFU context selector for the …","The centralized server could not find a specific message.","SNAFU context selector for the …","Attempted to deliver a message to an unknown node","SNAFU context selector for the <code>NetworkError::NoSuchNode</code> …","A node is connected","A node is disconnected","The requested data was not found","Peer failed to get us data","SNAFU context selector for the <code>NetworkError::NotFound</code> …","An partially synchronous network. Behaves asynchronously …","ideal network","Push CDN network-specific errors","Centralized server specific errors","SNAFU context selector for the <code>NetworkError::PushCdnNetwork</code>…","Underlying data request","Wraps a oneshot channel for responding to requests","A response for a request.  <code>SequencingMessage</code> is the same …","The underlying connection has been shut down","SNAFU context selector for the <code>NetworkError::ShutDown</code> …","stub","SNAFU context selector for the <code>MemoryNetworkError::Stub</code> …","A synchronous network. Packets may be delayed, but are …","Describes additional functionality needed by the test …","A timeout occurred","SNAFU context selector for the <code>NetworkError::Timeout</code> …","the type of transmission","unable to cancel a request, the request has already been …","SNAFU context selector for the <code>NetworkError::UnableToCancel</code>…","unimplemented functionality","SNAFU context selector for the …","Request VID data by our key and the VID commitment","a message","Web server specific errors","Web server specific errors","SNAFU context selector for the <code>NetworkError::WebServer</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","asynchronous portion of network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","broadcast message to some subset of nodes blocking","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","given a message and a way to send the message, decide …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","broadcast a message only to a DA committee blocking","","","","","Max value in milliseconds that a packet may be delayed","highest value in milliseconds that a packet may be delayed","highest value in milliseconds that a packet may be delayed","Lowest value in milliseconds that a packet may be delayed","lowest value in milliseconds that a packet may be delayed","lowest value in milliseconds that a packet may be delayed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sends a direct message to a specific node blocking","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generates a network given an expected node count","","","","get the view out of the message","time when GST occurs","","","","","","","","","","","","","","Get the number of messages in-flight.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Is primary network down? Makes sense only for combined …","denominator for probability of keeping packets","denominator for probability of keeping packets","numerator for probability of keeping packets","numerator for probability of keeping packets","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create new <code>SynchronousNetwork</code>","create new <code>AsynchronousNetwork</code>","create new <code>PartiallySynchronousNetwork</code>","Pauses the underlying network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","get the purpose of the message","queues lookup of a node","Receive one or many messages from the underlying network.","highest value of repeats for a message","lowest value of repeats for a message","Request","Ask request the network for some data.  Returns the …","Resumes the underlying network","sample from uniform distribution to decide whether or not …","","","","","Sample from bernoulli distribution to decide whether or …","never drop a packet","","never drop a packet","","number of times to repeat the packet","","scramble the packet","","","","","","","","","Blocks until the network is shut down then returns true","signature of the Sha256 hash of the data so outsiders can…","","","","","","","Spawn a request task in the given network layer.  If it …","when the network was started","synchronous portion of networkhandles view update","send messages with vid shares to its recipients blocking","View this message is for","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blocks until the network is successfully initialized","vec of errors","source of error","source of error","source of error","source of error","source of error","Originating bincode error","originating bincode error","Source of error","sources of errors","The block header type that this hotshot setup is using.","The block type that this hotshot setup is using.","The type builder uses to sign its messages","Network for those in the DA committee","Trait for time compatibility needed for reward collection","The instance-level state type that this hotshot setup is …","Membership used for this implementation","Node implementation aggregate trait","Trait with all the type definitions that are used in the …","Network for all nodes","The signature key that this hotshot setup is using.","Storage for DA layer interactions","extra functions required on a node implementation to be …","The time type that this hotshot setup is using.","The transaction type that this hotshot setup is using.","The validated state type that this hotshot setup is using.","generate a genesis block","Generate the communication channels for testing","Create a new instance of this time unit at time number 0","Get the u64 format of time","Creates random transaction if possible otherwise panics …","Create a new instance of this time unit","Creates random transaction if possible otherwise panics …","the number of transactions in a block","Allows to fix the size of the message at compilation time.","Type of the actual quorum certificate object","Public parameters for generating the QC E.g: snark …","Public parameters for validating the QC E.g: verifying …","Trait for validating a QC built from different signatures …","Type of the quorum size (e.g. number of votes or …","Computes an aggregated signature from a set of partial …","Checks an aggregated signature over some message provided …","Produces a partial signature on a message with a single …","Trace the list of signers given a qc.","The type of the keys builder would use to sign its messages","The type of the signature builder would use to sign its …","Builder Signature Key trait with minimal requirements","The private key type for this signature algorithm","The type of the assembled signature, without <code>BitVec</code>","The type of the quorum certificate parameters used for …","The type of the assembled qc: assembled signature + <code>BitVec</code>","Type of error that can occur when signing data","Type of error that can occur when signing data","Trait for abstracting public key signatures Self is the …","The type of the entry that contain both public key and …","Type representing stake table entries in a <code>StakeTable</code>","Aggregate all inputs used for signature over block info","Aggregate all inputs used for signature over fee data","assemble the signature from the partial signature and the …","check the quorum certificate for the assembled signature","Deserialize a public key from bytes","Produce a public key from a private key","Generate a new key pair","Generate a new key pair","generates the genesis public key. Meant to be dummy/filler","only get the public key from the stake table entry","get the public parameter for the assembled signature …","get the assembled signature and the <code>BitVec</code> separately from …","Get the stake value","get the stake table entry from the public key and stake …","Produce a signature","sign information about offered block","sign the message with the builder’s private key","sign fee offer for proposed payload","Serialize a public key to bytes","Validate a signature","validate signature over block information with the builder…","validate the message with the builder’s public key","validate signature over fee information with the builder’…","type for the staked amount","Auxiliary information associated with the key","at arbitrary block height","type for the commitment to the current stake table","marks the snapshot at the beginning of the current epoch","Key already exists","the latest “Head” where all new changes are applied to","Insufficient fund: the number of stake cannot be negative","type for the iterator over (key, value) entries","type for stake key","Key not found","marks the beginning of the last epoch","type for the proof associated with the lookup result (if …","Malformed Merkle proof","Key mismatched","Internal error caused by Rescue","The historical snapshot requested is not supported.","Snapshots of the stake table","The number of stake exceed U256","Error type for <code>StakeTableScheme</code>","Common interfaces required for a stake table used in …","Verification Error","","","","Batch deregister a list of keys. A default implementation …","Batch register a list of new keys. A default …","Batch update the stake balance of <code>keys</code>. Read documentation …","","","","","Returns the commitment to the <code>version</code> of stake table.","Returns true if <code>key</code> is currently registered, else returns …","","","","","Deregister an existing key from the stake table. Returns …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the number of keys in the <code>version</code> of the table.","Returns the stakes withhelded by a public key.","Return the associated stake amount and auxiliary …","Returns the stakes withhelded by a public key along with a …","","","Register a new key into the stake table.","Randomly sample a (key, stake amount) pair proportional to …","","Returns the accumulated stakes of all registered keys of …","","","","","Returns an iterator over all (key, value) entries of the …","","","Update the stake of the <code>key</code> with …","","","The type of the state delta this state is associated with.","The error type for this particular type of ledger state","The type of the instance-level state this state is …","Instance-level state, which allows us to fetch missing …","Application-specific state delta, which will be used to …","extra functions required on state to be usable by …","Time compatibility needed for reward collection","Abstraction over the state that blocks modify","Creates random transaction if possible otherwise panics …","Construct the state with the given block header.","Construct a genesis validated state.","Gets called to notify the persistence backend that this …","Check if the proposed block header is valid and apply it …","Abstraction for storing a variety of consensus payload …","Add a proposal to the stored DA proposals.","Add a proposal to the stored VID proposals.","Record a HotShotAction taken.","Update the current high QC in storage.","Update the currently undecided state of consensus.  This …","Commitment that builders use to sign block options. A thin …","A pending view with an available block but not leaf …","Stop right before this view number","Leaf has failed","Stop including this view number","Undecided view","The hash of a leaf.","A struct containing information about a finished round.","Type alias for byte array of SHA256 digest length","Optional validated state and state delta.","Whether or not to stop inclusively or exclusively when …","This exists so we can perform state transitions mutably","A view’s state","","","","","","","","For the wire format, we use bincode with the following …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create new commitment for <code>data</code>","Create a new commitment from a raw Sha256 digest","","","Return the underlying undecide leaf commitment and …","return the underlying leaf hash if it exists","return the underlying block paylod commitment if it exists","return the underlying validated state if it exists","Return the underlying validated state and state delta if …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The view data. Wrapped in a struct so we can mutate","The round that finished","","","","","","Optional state delta.","Proposed leaf","Payload commitment to the available block.","Validated state.","Internal Jellyfish VID scheme","Private type alias for the EC pairing type parameter for …","Private type alias for the hash type parameter for <code>Advz</code>.","SRS comment","Newtype wrapper for a large payload range proof.","Newtype wrapper for a small payload range proof.","VID commitment type","VID common type","VID PrecomputeData type","Newtype wrapper for a VID scheme type that impls <code>VidScheme</code>…","VID share type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Convert a [<code>Statement&lt;&#39;_, VidSchemeType&gt;</code>] to a […","","","","","","","","","","","","","","","","Convert a <code>VidDisperse&lt;Advz&gt;</code> to a <code>VidDisperse&lt;VidSchemeType&gt;</code>…","VID scheme constructor.","","","","","","The certificate formed from the collection of signatures a …","Type of data commitment this vote uses.","Any type that is associated with a view","Mapping of vote commitment to signatures and bitvec","Threshold Functions","A simple vote that has a signer and commitment to the data …","Accumulates votes until a certificate is formed.  This …","Payload for the <code>HotShotEvents::VoteNow</code> event type. The …","Mapping of commitments to vote tokens by key.","The data commitment this certificate certifies.","","Add a vote to the total accumulated votes.  Returns the …","","","","","","","","","Build a certificate from the data commitment and the …","The DA certificate.","","","","","","","The Vid disperse proposal.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets the data which was voted on by this vote","Get the commitment which was voted on","Gets the Data commitment of the vote","Get the vote commitment which the votes commit to","","Get the signature of the vote sender","Gets the public signature key of the votes creator/sender","Returns the view number the type refers to.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the cert is valid","","","The leaf we’ve obtained from the <code>QuorumProposalValidated</code> …","Phantom data to specify the types this accumulator is for","","","The quorum proposal (not necessarily valid).","A bitvec to indicate which node is active and send out a …","Returns the amount of stake needed to create this …","","","","","","","","Map of all signatures accumulated so far","",""],"if":"``````````{{cb}d{}}000{ee{}{{h{}{{f{c}}}}}}{ce{}{}}0000000{cj{hlnA`}}``{AbAb}{{{Ad{c}}}{{Ad{c}}}{AfAh}}{{{Aj{c}}}{{Aj{c}}}{AfAh}}{{{Al{c}}}{{Al{c}}}{AfAh}}{{ce}d{}{}}000``````{{}{{Ad{c}}}Ah}{{}{{Aj{c}}}Ah}{Anc{}}0000000{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{Ab}}}Bd}1{c{{Bb{{Ad{e}}}}}BdAh}2{c{{Bb{{Aj{e}}}}}BdAh}3{c{{Bb{{Al{e}}}}}BdAh}{And}000{{{Aj{c}}{Aj{c}}}Bf{BhAh}}{{ce}Bf{}{}}000````{{AbBj}Bl}{{{Ad{c}}Bj}BlAh}{{{Ad{c}}Bj}Bl{BnAh}}{{{Aj{c}}Bj}Bl{BnAh}}{{{Aj{c}}Bj}BlAh}{{{Al{c}}Bj}BlAh}{cc{}}000{{{Cb{C`}}}{{Cd{{Aj{c}}}}}Ah}{{{Cf{C`}}ChChBf}{{Ad{c}}}Ah}{{ce}Ch{Cjl}Cl}{{{Ad{c}}}{{Aj{c}}}Ah}{{{Aj{c}}e}d{CjAh}Cn}{{ce}{{D`{eg}}}{}{DbnA`}{}}0{{}An}000{ce{}{}}000````{{}{{Bb{DdDf}}}}000```````{{}}000````{{Abc}BbDh}{{{Ad{c}}e}Bb{DjAh}Dh}{{{Aj{c}}e}BbAhDh}{{{Al{c}}e}Bb{DjAh}Dh}```````````{{{Aj{c}}}{{Dl{C`}}}Ah}7777{cDn{}}0`{c{{Bb{e}}}{}{}}0000000{cE`{}}000````::::````````````````{{cb}d{}}00000`{{EbAn}d}{{EbEd}d}```==============`{EfEf}{EbEb}{EhEh}{{{Ej{c}}}{{Ej{c}}}{AfEl}}{{{En{c}}}{{En{c}}}{AfEl}}{{{F`{c}}}{{F`{c}}}{AfEl}}{{ce}d{}{}}00000{{{Fb{c}}}dEl}```{{EbDn{Cd{Dn}}}{{Ff{Fd}}}}{{EbDn{Cd{Dn}}}{{Ff{Fh}}}}{{EbDn{Cd{Dn}}}{{Ff{Fj}}}}{{EbDn}{{Ff{Fl}}}}{{{Fb{c}}}{}El}``{{}Ef}{{}Eh}{Anc{}}0000000000000{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}000000``{And}000000{{{Ej{c}}{Ej{c}}}Bf{BhEl}}{{{En{c}}{En{c}}}Bf{BhEl}}{{{F`{c}}{F`{c}}}Bf{BhEl}}{{ce}Bf{}{}}00000000000`{{{Fb{c}}Bj}BlEl}{{EfBj}Bl}{{EbBj}Bl}{{EhBj}Bl}0{{{Ej{c}}Bj}Bl{BnEl}}{{{En{c}}Bj}Bl{BnEl}}{{{F`{c}}Bj}Bl{BnEl}}{cc{}}000000`{{{Fb{c}}}{{Fn{c}}}El}{{{Fb{c}}}G`El}{{ce}Ch{Cjl}Cl}00{{{Fb{c}}}{{Cd{G`}}}El}{{{Fb{c}}}{{Gb{c}}}El}{{{Ej{c}}e}d{CjEl}Cn}{{{En{c}}e}d{CjEl}Cn}{{{F`{c}}e}d{CjEl}Cn}{{ce}{{D`{eg}}}{}{DbnA`}{}}{{{Fb{c}}}{{Gd{c}}}El}``{{}An}000000{ce{}{}}000000```{{{Fb{c}}}{}El}````{{}{{Bb{DdDf}}}}000000`1```{{{Gh{{Gf{c}}}}{Gj{{Fn{c}}}}{Gh{{G`{{Cb{C`}}}}}}{Gd{c}}{G`{Ef}}}{{Fb{c}}}El}{GlEf}``````{{}}000000``{{{Fb{c}}}{{H`{{Gn{c}}}}}El}`{{{Fb{c}}}{{Gj{{Fn{c}}}}}El}`{{{Fb{c}}}{{Gh{{G`{{Cb{C`}}}}}}}El}``{{EbDn}d}{{EbAn}d}{{EbDn}Eb}{{EbDn}{{Ff{Gl}}}}<<<<<<{cDn{}}{c{{Bb{e}}}{}{}}0000000000000{cE`{}}000000{{EbHb}d}{{{Fb{c}}{Cd{{Hd{c}}}}}dEl}{{{Fb{c}}{Gd{c}}}{{Hf{d}}}El}{{{Fb{c}}}{{Hf{d}}}El}00{{{Fb{c}}{Gn{c}}}dEl}{{{Fb{c}}{Fn{c}}}dEl}{{{Fb{c}}{G`{{Cb{C`}}}}}{{Hf{d}}}El}{{{Fb{c}}{Gf{c}}}dEl}{{{Fb{c}}{Hj{c{Hh{c}}}}}dEl}5{{{Fb{c}}}{{Gh{{Gf{c}}}}}El}``{{{Fb{c}}}{{Hl{c}}}El}`{{{Fb{c}}HnBfe}{{Hf{d{I`{c}}}}}El{{Ib{{Fn{c}}G`{Cd{G`}}}{{f{Bf}}}}}}{ce{}{}}000000`````````````````````````````````````````{{cb}d{}}0000000000{{IdCh}c{}}{{IdCh}d}{cIf{}}0{Ih{{Cd{Ij}}}}{c{{Hf{dIl}}}{{J`{}{{In{Id}}}}n}}```666666666666666666666666{JbIh}{JdIh}{JfIh}{Ih{{Cd{If}}}}{Id{{Hf{dIl}}}}{IdId}{{{Jh{c}}}{{Jh{c}}}{AfEl}}{{{Jj{c}}}{{Jj{c}}}{ElAf}}{{{Jl{c}}}{{Jl{c}}}{AfEl}}{{{Jn{c}}}{{Jn{c}}}{AfEl}}{{{Hh{c}}}{{Hh{c}}}{AfEl}}{{{K`{c}}}{{K`{c}}}{AfEl}}{JbJb}{JdJd}{JfJf}{{{Fn{c}}}{{Fn{c}}}{AfEl}}{{ce}d{}{}}0000000000{{IdId}Kb}{Id{{Kd{Id}}}}{{{Fn{c}}}{{Kd{{Fn{c}}}}}El}``{{ce}Kb{}{}}{{{Kh{}{{Kf{c}}}}KjCh}{}El}{{{Fn{c}}KjCh}{}El}{Idc{}}{Anc{}}00000000000000000000000{IhKl}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{Id}}}Bd}1{c{{Bb{{Jh{e}}}}}BdEl}{c{{Bb{{Jj{e}}}}}BdEl}3{c{{Bb{{Jl{e}}}}}BdEl}4{c{{Bb{{Jn{e}}}}}BdEl}5{c{{Bb{{Hh{e}}}}}BdEl}66{c{{Bb{{K`{e}}}}}BdEl}7{c{{Bb{Ih}}}Bd}888{c{{Bb{{Fn{e}}}}}BdEl}9{{cKnL`}{{Hf{IdIl}}}Lb}{And}00000000000`{{IdId}Bf}{{{Jh{c}}{Jh{c}}}Bf{BhEl}}{{{Jj{c}}{Jj{c}}}Bf{ElBh}}{{{Jl{c}}{Jl{c}}}Bf{BhEl}}{{{Jn{c}}{Jn{c}}}Bf{BhEl}}{{{Hh{c}}{Hh{c}}}Bf{BhEl}}{{{K`{c}}{K`{c}}}Bf{BhEl}}{{{Fn{c}}{Fn{c}}}BfEl}{{ce}Bf{}{}}0000000000000000000000000000000{{{Fn{c}}{Fn{c}}{Cd{{Hd{c}}}}}{{Hf{d}}}El}{Jb{{Bb{cIh}}}{}}{Jd{{Bb{cIh}}}{}}{Jf{{Bb{cIh}}}{}}{{}{{Kd{c}}}Ld}{{{Fn{c}}An}{{Hf{dIh}}}El}{{{Fn{c}}}dEl}{{IdBj}Bl}{{{Jh{c}}Bj}BlEl}{{{Jj{c}}Bj}BlEl}{{{Jl{c}}Bj}Bl{BnEl}}{{{Jn{c}}Bj}BlEl}{{{Hh{c}}Bj}Bl{BnEl}}{{{K`{c}}Bj}BlEl}{{IhBj}Bl}0{{JbBj}Bl}{{JdBj}Bl}{{JfBj}Bl}{{{Fn{c}}Bj}Bl{BnEl}}{{{Fn{c}}Bj}BlEl}{cc{}}00000000000{{{Lh{Lf}}}{{Jl{c}}}El}{{{K`{c}}}{{Fn{c}}}El}{{{Jl{c}}}{{Dl{{Hh{c}}}}}El}{{}Id}{{}{{Fn{c}}}El}{{{Fn{c}}}{}El}0{{{Fn{c}}}CdEl}{{ce}Ch{Cjl}Cl}0000000{{{Fn{c}}}ChEl}{{{Fn{c}}}{{Gd{c}}}El}{{{Fn{c}}}{{Kd{{Fn{c}}}}}El}{{{Fn{c}}}LjEl}{IdCh}{{{Fn{c}}}{{Cd{{Hd{c}}}}}El}{{{Jh{c}}}{}El}{{{Jj{c}}}{}El}{{{Jl{c}}}{}El}{{{Hh{c}}}{}El}{{{K`{c}}}{}El}={{Idc}dCn}{{{Jh{c}}e}d{CjEl}Cn}{{{Jj{c}}e}d{ElCj}Cn}{{{Jl{c}}e}d{CjEl}Cn}{{{Jn{c}}e}d{CjEl}Cn}{{{Hh{c}}e}d{CjEl}Cn}{{{K`{c}}e}d{CjEl}Cn}{{{Fn{c}}e}dElCn}{{ce}{{D`{eg}}}{}{DbnA`}{}}0{c{}{}}{{}An}00000000000{ce{}{}}00000000000{{Jbc}Ih{}}{{Jdc}Ih{}}{{Jfc}Ih{}}{{{Jn{c}}}BfEl}``{{}{{Bb{DdDf}}}}00000000000`{ChId}``{{IdId}{{Cd{Kb}}}}``{{}}00000000000`{Kj{{Kd{c}}}Ld}`{{Idc}BbDh}{{{Jh{c}}e}BbElDh}{{{Jj{c}}e}BbElDh}{{{Jl{c}}e}BbElDh}{{{Jn{c}}e}Bb{DjEl}Dh}{{{Hh{c}}e}BbElDh}{{{K`{c}}e}Bb{DjEl}Dh}{{Ihc}BbDh}{{{Fn{c}}e}Bb{DjEl}Dh}{{}{{Dl{C`}}}}{{IdcKn}{{Hf{dIl}}}Ll}{{IdKn}An}``{Ih{{Cd{If}}}}{{IdCh}c{}}{ce{}{}}0000000000{{{Hh{c}}}{{Cd{{Hj{c{Hh{c}}}}}}}El}{cDn{}}0{e{{Cd{{Jl{c}}}}}El{{J`{}{{In{{Hh{c}}}}}}}}{{{Hj{c{Jl{c}}}}}{{Dl{{Hj{c{Hh{c}}}}}}}El}{c{{Bb{e}}}{}{}}00000000000000000000000{cE`{}}00000000000`````````666666666666``66{An{{Cd{{Ln{c}}}}}El}{An{{Cd{Lj}}}}{M`{{Md{{Mb{An{Cd{Lj}}}}}}}}{Anc{}}0{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{And}{cc{}}{{}An}>{{}{{Bb{DdDf}}}}{{}d}8{{}}<<;{ce{}{}}``````````````````````````````````{{cb}d{}}00000000000{cIf{}}0{{{I`{c}}}{{Cd{Ij}}}El}33333333333333333333333333{Mf{{I`{c}}}El}{{{Mh{c}}}{{I`{e}}}{{Mj{Dn}}}El}{{{Ml{ce}}}{{I`{g}}}Mj{{Mj{Mn}}}El}{{{N`{ce}}}{{I`{g}}}{{Mj{An}}}{{Mj{Nb}}}El}{{{Nd{c}}}{{I`{e}}}{{Mj{Dn}}}El}{Nf{{I`{c}}}El}{{{I`{c}}}{{Cd{If}}}El}{NhNh}{NjNj}{NlNl}{NnNn}{MfMf}{{{Mh{c}}}{{Mh{c}}}Af}{O`O`}{{{Ml{ce}}}{{Ml{ce}}}AfAf}{{{N`{ce}}}{{N`{ce}}}AfAf}{{{Nd{c}}}{{Nd{c}}}Af}{NfNf}{MnMn}{{ce}d{}{}}00000000000``{Anc{}}0000000000000000000000000{{{I`{c}}}KlEl}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}00000000000{c{{Bb{Mn}}}Bd}1{And}000000000000{Mf{{Bb{c{I`{e}}}}}{}El}{{{Mh{c}}}{{Bb{e{I`{g}}}}}{{Mj{Dn}}}{}El}{{{Ml{ce}}}{{Bb{g{I`{i}}}}}Mj{{Mj{Mn}}}{}El}{{{N`{ce}}}{{Bb{g{I`{i}}}}}{{Mj{An}}}{{Mj{Nb}}}{}El}{{{Nd{c}}}{{Bb{e{I`{g}}}}}{{Mj{Dn}}}{}El}{Nf{{Bb{c{I`{e}}}}}{}El}{{NhBj}Bl}{{NjBj}Bl}{{NlBj}Bl}{{NnBj}Bl}{{MfBj}Bl}{{{Mh{c}}Bj}BlBn}{{O`Bj}Bl}{{{Ml{ce}}Bj}BlBnBn}{{{N`{ce}}Bj}BlBnBn}{{{Nd{c}}Bj}BlBn}{{NfBj}Bl}{{{I`{c}}Bj}BlEl}{{{I`{c}}Bj}Bl{BnEl}}{{MnBj}Bl}{cc{}}000000000000{{ce}{{D`{eg}}}{}{DbnA`}{}}{c{}{}}{{}An}000000000000{ce{}{}}000000000000{{Nhc}{{I`{e}}}{}El}{{Njc}{{I`{e}}}{}El}{{Nlc}{{I`{e}}}{}El}{{Nnc}{{I`{e}}}{}El}{{Mfc}{{I`{e}}}{}El}{{{Mh{c}}e}{{I`{g}}}{{Mj{Dn}}}{}El}{{O`c}{{I`{e}}}{}El}{{{Ml{ce}}g}{{I`{i}}}Mj{{Mj{Mn}}}{}El}{{{N`{ce}}g}{{I`{i}}}{{Mj{An}}}{{Mj{Nb}}}{}El}{{{Nd{c}}e}{{I`{g}}}{{Mj{Dn}}}{}El}{{Nfc}{{I`{e}}}{}El}{{}{{Bb{DdDf}}}}000000000000`{{}}000000000000{{Mnc}BbDh}{{{I`{c}}}{{Cd{If}}}El}``????????????{cDn{}}{c{{Bb{e}}}{}{}}0000000000000000000000000{cE`{}}000000000000`{ce{}{}}000000000000``````````````````````````````````{{cb}d{}}00011111111`{{{Ob{c}}}{{Ob{c}}}{AfEl}}{{{Od{c}}}{{Od{c}}}{AfEl}}{{{Of{c}}}{{Of{c}}}{AfEl}}{OhOh}{{ce}d{}{}}000`{Anc{}}0000000{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{{Ob{e}}}}}BdEl}1{c{{Bb{{Od{e}}}}}BdEl}{c{{Bb{{Of{e}}}}}BdEl}3{c{{Bb{Oh}}}Bd}4{And}000``{{{Ob{c}}Bj}Bl{BnEl}}{{{Od{c}}Bj}Bl{BnEl}}{{{Of{c}}Bj}Bl{BnEl}}{{OhBj}Bl}{cc{}}000{{}An}000{ce{}{}}000{{}{{Bb{DdDf}}}}000``{{{Fn{c}}G`{Cd{G`}}{Cd{{Hh{c}}}}}{{Od{c}}}El}{{}}000{{{Ob{c}}e}Bb{DjEl}Dh}{{{Od{c}}e}Bb{DjEl}Dh}{{{Of{c}}e}Bb{DjEl}Dh}{{Ohc}BbDh}`7777{c{{Bb{e}}}{}{}}0000000{cE`{}}000``9999```````````````{c{{Bb{{G`{{I`{e}}}}}}}BdEl}{{{G`{{I`{c}}}}e}BbElDh}`````````````{{cb}d{}}0000`{c{{Oj{eg}}}{}{}Ol}{{{On{c}}}{{Cb{c}}}A`}{c{{Bb{dIl}}}{{J`{}{{In{Ab}}}}n}}{e{{Bb{dIl}}}A`{{J`{}{{In{{Ad{c}}}}}}n}}{{{On{c}}}cA`}``0``{ce{}{}}000000000{Ab{{Bb{dIl}}}}{{{Ad{c}}}{{Bb{dIl}}}A`}{AfAf}{AbAb}{AhAh}{{{Ad{c}}}{{Ad{c}}}{AfA`}}{{{On{c}}}{{On{c}}}{AfA`}}{{ce}d{}{}}0000{{{Ad{c}}{Ad{c}}}Kb{AjA`}}{{ce}Kb{}{}}`{{}Af}{{}{{Ad{c}}}{AlA`}}{Afc{}}{Anc{}}000000000{c{{Bb{Af}}}Bd}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{Ab}}}Bd}1{c{{Bb{Ah}}}Bd}2{c{{Bb{{Ad{e}}}}}BdA`}33{{cKnL`}{{Bb{AbIl}}}Lb}{{cKnL`}{{Bb{{Ad{e}}Il}}}LbA`}{And}0000{{{Ad{c}}{Ad{c}}}Bf{BhA`}}{{ce}Bf{}{}}000{{{On{c}}}cA`}``{{AfBj}Bl}{{AbBj}Bl}{{AhBj}Bl}{{{Ad{c}}Bj}BlA`}{{{Ad{c}}Bj}Bl{BnA`}}{{{On{c}}Bj}Bl{BnA`}}{cc{}}{{{AA`{An}}}Af}111{{{Dl{c}}}{{On{c}}}A`}2{AAbAf}{Kl{{Bb{{Ad{c}}e}}}A`{}}{{}Af}{{{Cf{C`}}}Af}{{{Cf{C`}}Ch}Af}{{ce}Ch{Cjl}Cl}{{{Ad{c}}e}d{CjA`}Cn}{{ce}{{D`{eg}}}{}{DbnA`}{}}{{}An}0000{ce{}{}}0000`{{}{{Bb{DdDf}}}}0000{{{Ad{c}}{Ad{c}}}{{Cd{Kb}}}{AAdA`}}{{}}0000{{{On{c}}}cA`}`{{Afc}BbDh}{{Abc}BbDh}{{Ahc}BbDh}{{{Ad{c}}e}BbA`Dh}{{AbcKn}{{Bb{dIl}}}Ll}{{{Ad{c}}eKn}{{Bb{dIl}}}A`Ll}{{AbKn}An}{{{Ad{c}}Kn}AnA`}``8{{{On{c}}}{{AAf{ccc}}}A`}````9{{}Dn}:>>>>>{cDn{}}{c{{Bb{{Oj{eg}}{AAh{e}}}}}{}{}Ol}{c{{Bb{e}}}{}{}}00{AAj{{Bb{{Ad{c}}e}}}A`{}}10111111{cE`{}}0000?``{ce{}{}}0000```````````````````````````````````````````{{cb}d{}}00000000`111111111111111111{{{AAl{c}}}{{AAl{c}}}{AfEl}}{{{AAn{c}}}{{AAn{c}}}{AfEl}}{AB`AB`}{{{ABb{c}}}{{ABb{c}}}{AfEl}}{{{ABd{c}}}{{ABd{c}}}{AfEl}}{{{ABf{c}}}{{ABf{c}}}{AfEl}}{{{ABh{c}}}{{ABh{c}}}{AfEl}}{{{ABj{c}}}{{ABj{c}}}{AfEl}}{{{Hj{ce}}}{{Hj{ce}}}{AfEl}{Af{ABl{c}}ABn}}{{ce}d{}{}}00000000`{Anc{}}00000000000000000{c{{Bb{{AAl{e}}}}}BdEl}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}000{c{{Bb{{ABb{e}}}}}BdEl}{c{{Bb{{ABd{e}}}}}BdEl}22{c{{Bb{{ABf{e}}}}}BdEl}3{c{{Bb{{ABh{e}}}}}BdEl}{c{{Bb{{ABj{e}}}}}BdEl}5{c{{Bb{{Hj{eg}}}}}BdEl{{ABl{e}}ABn}}6{And}00000000{{{AAl{c}}{AAl{c}}}Bf{BhEl}}{{AB`AB`}Bf}{{{ABb{c}}{ABb{c}}}Bf{BhEl}}{{{ABd{c}}{ABd{c}}}Bf{BhEl}}{{{ABf{c}}{ABf{c}}}Bf{BhEl}}{{{ABh{c}}{ABh{c}}}Bf{BhEl}}{{{ABj{c}}{ABj{c}}}Bf{BhEl}}{{{Hj{ce}}{Hj{ce}}}Bf{BhEl}{Bh{ABl{c}}ABn}}{{ce}Bf{}{}}000000000000000000000000000{{{AAl{c}}Bj}BlEl}{{{AAn{c}}Bj}Bl{BnEl}}{{{ABb{c}}Bj}Bl{BnEl}}{{{ABd{c}}Bj}Bl{BnEl}}{{{ABf{c}}Bj}Bl{BnEl}}{{{ABh{c}}Bj}Bl{BnEl}}{{{ABj{c}}Bj}Bl{BnEl}}{{{Hj{ce}}Bj}Bl{BnEl}{Bn{ABl{c}}ABn}}{cc{}}000{{{ABj{c}}}{{ABb{c}}}El}11111{{{ABh{c}}}{{ABb{c}}}El}{{ce}Ch{Cjl}Cl}000000{{{AAl{c}}}{}El}{{{ABb{c}}}{}El}{{{AAl{c}}e}d{CjEl}Cn}{{{ABb{c}}e}d{CjEl}Cn}{{{ABd{c}}e}d{CjEl}Cn}{{{ABf{c}}e}d{CjEl}Cn}{{{ABh{c}}e}d{CjEl}Cn}{{{ABj{c}}e}d{CjEl}Cn}{{{Hj{ce}}g}d{CjEl}{Cj{ABl{c}}ABn}Cn}{{}An}00000000{ce{}{}}00000000`{{}{{Bb{DdDf}}}}00000000{{}}00000000{{{AAl{c}}}AB`El}{{{ABb{c}}}AB`El}{{{ABh{c}}}AB`El}`{{{AAl{c}}e}BbElDh}{{{ABb{c}}e}BbElDh}{{{ABd{c}}e}BbElDh}{{{ABf{c}}e}BbElDh}{{{ABh{c}}e}BbElDh}{{{ABj{c}}e}Bb{DjEl}Dh}{{{Hj{ce}}g}BbEl{Dj{ABl{c}}ABn}Dh}`<<<<<<<<<{c{{Bb{e}}}{}{}}00000000000000000{cE`{}}00000000{{{Hj{c{K`{c}}}}}{{Hf{d}}}El}{{{ABh{c}}}{}El}{ce{}{}}00000000``{{cb}d{}}`{{cOjCb}{{Bb{eAC`}}}{}{}}2222{{c{ACb{e}}g}{{Bb{iAC`}}}{}{}{}{}}{{{ACd{ce}}}{{ACd{ce}}}{AfAh}{AfACf}}{{ce}d{}{}}{Anc{}}000{c{{Bb{{ACh{e}}}}}Bd{ACjDjACf}}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{{ACd{eg}}}}}BdAhACf}1{And}0{{{ACd{ce}}{ACd{ce}}}Bf{BhAh}{BhACf}}{{{ACd{ce}}Bj}Bl{BnAh}{BnACf}}{cc{}}0{{ce}Ch{Cjl}Cl}{{{ACd{ce}}g}d{CjAh}{CjACf}Cn}{{}An}0{ce{}{}}0{{}{{Bb{DdDf}}}}0{{}}0{{{ACh{c}}e}Bb{ACjDjACf}Dh}{{{ACd{ce}}g}Bb{DjAh}{DjACf}Dh}{{ce}{{Bb{AC`}}}{{ACl{Cb}}}{ACnKj}}``5{{c{ACb{e}}g}{{Bb{DlAC`}}}{}{}{}}{c{{Bb{e}}}{}{}}000{cE`{}}088````{{cOj{Cb{e}}}g{}{}{}}{{c{Cb{C`}}e}Bf{}{}}{{{Cb{C`}}}{{Bb{AD`Il}}}}{cAD`{}}{{{Cf{C`}}Ch}{{AAf{AD`c}}}{}}{{{Cf{C`}}Ch}{{AAf{ADbc}}}{}}{{}AD`}3{{{Dl{c}}ADd}e{}{}}{c{{AAf{eADf}}}{}{}}{{AD`Ch}c{}}{{c{Cb{C`}}}{{Bb{eg}}}{}{}{}}0{AD`{{Dl{C`}}}}{{AD`c{Cb{C`}}}Bf{}}{{ADbc{Cb{C`}}}Bf{}}````````````{{cb}d{}}000````````{ce{}{}}0000000{ADhADh}{ADjADj}{ADlADl}{{{ADn{ceg}}}{{ADn{ceg}}}{AfEl}{AfAE`}{Af{AEb{c}}}}{{ce}d{}{}}000{{{ADn{ceg}}}{{Kd{{ADn{ceg}}}}}El{AE`Ld}{{AEb{c}}}}{{{Kd{c}}e}{{ADn{gci}}}AE`{}El{{AEb{g}}}}````````{Anc{}}0000000{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{ADh}}}Bd}1{c{{Bb{ADj}}}Bd}2{c{{Bb{ADl}}}Bd}3{c{{Bb{{ADn{egi}}}}}BdEl{ACfAE`}{{AEb{e}}}}{And}000{{ADhADh}Bf}{{ADjADj}Bf}{{ADlADl}Bf}{{{ADn{ceg}}{ADn{ceg}}}Bf{BhEl}{BhAE`}{Bh{AEb{c}}}}{{ce}Bf{}{}}000000000000000{{{Gd{c}}Bj}BlEl}{{ADhBj}Bl}{{ADjBj}Bl}{{ADlBj}Bl}{{{ADn{ceg}}Bj}Bl{BnEl}{BnAE`}{Bn{AEb{c}}}}{cc{}}000{{}{{Gd{c}}}El}{{}{{ADn{c{AEd{c}}ADh}}}El}{{{ADn{ceg}}}iElAE`{{AEb{c}}}{}}{{{ADn{ceg}}}{{Kd{i}}}ElAE`{{AEb{c}}}{}}{{ce}Ch{Cjl}Cl}000{{{ADn{ceg}}}{}ElAE`{{AEb{c}}}}{{ADhc}dCn}{{ADjc}dCn}{{ADlc}dCn}{{{ADn{ceg}}i}d{CjEl}{CjAE`}{Cj{AEb{c}}}Cn}{{ce}{{D`{eg}}}{}{DbnA`}{}}{{{Hd{c}}}BfEl}{{{ADn{c{AEf{c}}ADl}}}BfEl}{{}An}000{ce{}{}}000{{{Hd{c}}{Cd{{Hd{c}}}}}{{Hf{d}}}El}{{{ADn{c{AEf{c}}ADl}}{Cd{{ADn{c{AEf{c}}ADl}}}}}{{Hf{d}}}El}{{{ADn{ceg}}i}BfElAE`{{AEb{c}}}{{AEh{c}}}}{{}{{Bb{DdDf}}}}000{{}}000{{ADhc}BbDh}{{ADjc}BbDh}{{ADlc}BbDh}{{{ADn{ceg}}i}BbEl{DjAE`}{{AEb{c}}}Dh}````````{eChEl{{AEh{c}}}}0000::::{cDn{}}{c{{Bb{e}}}{}{}}0000000{cE`{}}000{{{Cd{{Hd{c}}}}}{{Hf{d}}}El}{{{Cd{{ADn{c{AEf{c}}ADl}}}}}{{Hf{d}}}El}````````````````????`````````````````{{cb}d{}}00000000{ce{}{}}00000000000000000{{{AEd{c}}}{{AEd{c}}}{AfEl}}{AEjAEj}{{{AEl{c}}}{{AEl{c}}}{AfEl}}{AEnAEn}{{{AF`{c}}}{{AF`{c}}}{AfEl}}{{{AFb{c}}}{{AFb{c}}}{AfEl}}{{{AFd{c}}}{{AFd{c}}}{AfEl}}{{{AEf{c}}}{{AEf{c}}}{AfElABn}}{{{AFf{ce}}}{{AFf{ce}}}{AfEl}{AfAE`}}{{ce}d{}{}}00000000{{{AEd{c}}}{{Kd{{AEd{c}}}}}El}{AEj{{Kd{AEj}}}}{{{AEl{c}}}{{Kd{{AEl{c}}}}}El}{AEn{{Kd{AEn}}}}{{{AF`{c}}}{{Kd{{AF`{c}}}}}El}{{{AFb{c}}}{{Kd{{AFb{c}}}}}El}{{{AFd{c}}}{{Kd{{AFd{c}}}}}El}{{{AEf{c}}}{{Kd{{AEf{c}}}}}El}{c{{Bb{{AFf{ec}}}}}AE`El}`````````{Anc{}}00000000000000000{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{{AEd{e}}}}}BdEl}{c{{Bb{AEj}}}Bd}22{c{{Bb{{AEl{e}}}}}BdEl}{c{{Bb{AEn}}}Bd}44{c{{Bb{{AF`{e}}}}}BdEl}{c{{Bb{{AFb{e}}}}}BdEl}66{c{{Bb{{AFd{e}}}}}BdEl}7{c{{Bb{{AEf{e}}}}}Bd{ElABn}}8{c{{Bb{{AFf{eg}}}}}BdEl{ACfAE`}}{And}00000000{{{AEd{c}}{AEd{c}}}Bf{BhEl}}{{AEjAEj}Bf}{{{AEl{c}}{AEl{c}}}Bf{BhEl}}{{AEnAEn}Bf}{{{AF`{c}}{AF`{c}}}Bf{BhEl}}{{{AFb{c}}{AFb{c}}}Bf{BhEl}}{{{AFd{c}}{AFd{c}}}Bf{BhEl}}{{{AEf{c}}{AEf{c}}}Bf{BhElABn}}{{{AFf{ce}}{AFf{ce}}}Bf{BhEl}{BhAE`}}{{ce}Bf{}{}}00000000000000000000000000000000000{{{AEd{c}}Bj}Bl{BnEl}}{{AEjBj}Bl}{{{AEl{c}}Bj}Bl{BnEl}}{{AEnBj}Bl}{{{AF`{c}}Bj}Bl{BnEl}}{{{AFb{c}}Bj}Bl{BnEl}}{{{AFd{c}}Bj}Bl{BnEl}}{{{AEf{c}}Bj}Bl{BnElABn}}{{{AFf{ce}}Bj}Bl{BnEl}{BnAE`}}{cc{}}00000000{{{AFf{ce}}}eElAE`}{{{AFf{ce}}}{{Kd{e}}}ElAE`}{{ce}Ch{Cjl}Cl}00000000{{{AFf{ce}}}{}ElAE`}00{{{AEd{c}}e}d{CjEl}Cn}{{AEjc}dCn}{{{AEl{c}}e}d{CjEl}Cn}{{AEnc}dCn}{{{AF`{c}}e}d{CjEl}Cn}{{{AFb{c}}e}d{CjEl}Cn}{{{AFd{c}}e}d{CjEl}Cn}{{{AEf{c}}e}d{CjElABn}Cn}{{{AFf{ce}}g}d{CjEl}{CjAE`}Cn}{{}An}00000000{ce{}{}}00000000{{}{{Bb{DdDf}}}}00000000````````{{}}00000000```````{{{AEd{c}}e}Bb{DjEl}Dh}{{AEjc}BbDh}{{{AEl{c}}e}BbElDh}{{AEnc}BbDh}{{{AF`{c}}e}BbElDh}{{{AFb{c}}e}BbElDh}{{{AFd{c}}e}BbElDh}{{{AEf{c}}e}Bb{ElABn}Dh}{{{AFf{ce}}g}BbEl{DjAE`}Dh}````````;;;;;;;;;{c{{Bb{e}}}{}{}}00000000000000000{cE`{}}00000000`{{ChKl}{{Kd{c}}}Ld}````````>>>>>>>>>``{{cb}d{}}??{{{AFh{c}}}{{AFh{c}}}{AfAh}}{{ce}d{}{}}{Anc{}}0{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{{AFh{e}}}}}BdAh}{And}{{{AFh{c}}{AFh{c}}}Bf{BhAh}}{{ce}Bf{}{}}000{{{AFh{c}}Bj}Bl{BnAh}}{cc{}}{{ce}Ch{Cjl}Cl}{{{AFh{c}}}cAh}{{{AFh{c}}}ADdAh}{{{AFh{c}}e}d{CjAh}Cn}{{}An}{ce{}{}}{{}{{Bb{DdDf}}}}{{}}{{{AFh{c}}e}Bb{DjAh}Dh}``3{c{{Bb{e}}}{}{}}0{cE`{}}5``````````````````````````{{cb}d{}}{{{AFl{}{{AFj{c}}}}}Ch{IfBnnA`}}77{{{AGd{}{{AFj{c}}{AFn{e}}{AG`{g}}{AGb{i}}}}i}AGf{IfBnnA`DjABn}AGhAGj{AfBnABnAGlCjnA`DjAGn}}{{{AFl{}{{AFj{c}}}}}AGf{IfBnnA`}}{{{Ln{c}}}{{Ln{c}}}{AfEl}}{{ce}d{}{}}{Anc{}}0{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{{Ln{e}}}}}BdEl}{And}{AGn{{G`{{Cb{C`}}}}}}{{{AGd{}{{AFj{c}}{AFn{e}}{AG`{g}}{AGb{i}}}}}{{Bb{{G`{{Cb{C`}}}}c}}}{IfBnnA`DjABn}AGhAGj{AfBnABnAGlCjnA`DjAGn}}{{{Ln{c}}{Ln{c}}}Bf{BhEl}}{{ce}Bf{}{}}000```{{{Ln{c}}Bj}Bl{BnEl}}{cc{}}{{{Cb{C`}}c}{{AGd{}{{AFj{e}}{AFn{g}}{AG`{i}}{AGb{c}}}}}{AfBnABnAGlCjnA`DjAGn}{IfBnnA`DjABn}AGhAGj}{{eg}{{Bb{{AAf{{AGd{}{{AFj{i}}{AFn{g}}{AG`{c}}{AGb{k}}}}k}}i}}}AGj{{AH`{}{{In{c}}}}}AGh{IfBnnA`DjABn}{AfBnABnAGlCjnA`DjAGn}}{{}{{AAf{{AGd{}{{AFj{c}}{AFn{e}}{AG`{g}}{AGb{i}}}}i}}}{IfBnnA`DjABn}AGhAGj{AfBnABnAGlCjnA`DjAGn}}{{}AHb}{{LjAGf}{{AFl{}{{AFj{c}}}}}{IfBnnA`}}{{ce}Ch{Cjl}Cl}{{{AGd{}{{AFj{c}}{AFn{e}}{AG`{g}}{AGb{i}}}}i}{{`{{J`{}{{In{g}}}}}}}{IfBnnA`DjABn}AGhAGj{AfBnABnAGlCjnA`DjAGn}}{{{Ln{c}}e}d{CjEl}Cn}{{}An}{ce{}{}}{{}{{Bb{DdDf}}}}{{{AFl{}{{AFj{c}}}}}{}{IfBnnA`}}{{{Fn{c}}LjAGf{Ln{c}}AHd}{{`{{h{}{{f{{Bb{{AFl{}{{AFj{e}}}}e}}}}}}n}}}El{IfBnnA`}}{{{AGd{}{{AFj{c}}{AFn{e}}{AG`{g}}{AGb{i}}}}i}An{IfBnnA`DjABn}AGhAGj{AfBnABnAGlCjnA`DjAGn}}{{{AFl{}{{AFj{c}}}}}Lj{IfBnnA`}}{{}}{{{Cb{C`}}An}AAf}{{{Ln{c}}e}BbElDh}8{{{AGd{}{{AFj{c}}{AFn{e}}{AG`{g}}{AGb{i}}}}i}{{Dl{{Kd{g}}}}}{IfBnnA`DjABn}AGhAGj{AfBnABnAGlCjnA`DjAGn}}{c{{Bb{e}}}{}{}}0{AHbCh}{cE`{}}{{{Cb{C`}}An}}=`{AHfAHh}{AHf}0{{AHf{Ob{c}}}{{AHj{{Ff{h}}}}}El}{AHfAHl}``````{{cb}d{}}0{cIf{}}0{AHn{{Cd{Ij}}}}{ce{}{}}00000{AI`AHn}{AIbAHn}{AHn{{Cd{If}}}}{AI`AI`}{AIbAIb}{{ce}d{}{}}0{{{Dl{Aj}}{Dl{Aj}}An}AEh}{Anc{}}00000{AHnKl}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}00{And}00{AI`{{Bb{cAHn}}}{}}{AIb{{Bb{cAHn}}}{}}{AEhNb}{{AHnBj}Bl}0{{AI`Bj}Bl}{{AIbBj}Bl}{cc{}}00{AEhDl}{AEh}{AEhAId}{AEhCd}11{AEhBf}{{ce}{{D`{eg}}}{}{DbnA`}{}}{c{}{}}{{}An}00{ce{}{}}00{{AI`c}AHn{}}{{AIbc}AHn{}}{{}{{Bb{DdDf}}}}00{{}}00{AHn{{Cd{If}}}}{AEhNb}66{cDn{}}{AEhAn}{c{{Bb{e}}}{}{}}00000{cE`{}}004:::``````{{cb}d{}}{{FdAn}d}{{AIfAn}d}{{FjEd}d}{{AIfEd}d}??{{}{{Ff{Gl}}}}{AIfAIf}{{ce}d{}{}}{{GlDn{Cd{Dn}}}{{Ff{Fd}}}}{{AIfDn{Cd{Dn}}}{{Ff{Fd}}}}{{GlDn{Cd{Dn}}}{{Ff{Fh}}}}{{AIfDn{Cd{Dn}}}{{Ff{Fh}}}}{{GlDn{Cd{Dn}}}{{Ff{Fj}}}}{{AIfDn{Cd{Dn}}}{{Ff{Fj}}}}{{GlDn}{{Ff{Fl}}}}{{AIfDn}{{Ff{Fl}}}}{{}AIf}{Anc{}}0{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{And}{{AIfBj}Bl}{cc{}}{{}An}{ce{}{}}{{}{{Bb{DdDf}}}}{{}}{{FhAn}d}{{FlDn}d}{{AIfAn}d}{{AIfDn}d}{{GlDn}{{Ff{Gl}}}}{{AIfDn}{{Ff{Gl}}}}8{c{{Bb{e}}}{}{}}0{cE`{}}{{FhHb}d}{{AIfHb}d}<`````````````````````````````````````````````````````````````````````````````````````{{cb}d{}}0000000000000000000000000000000000{cIf{}}000000000`{AIh{{Cd{Ij}}}}{AIj{{Cd{Ij}}}}{AIl{{Cd{Ij}}}}{AIn{{Cd{Ij}}}}{AJ`{{Cd{Ij}}}}{ce{}{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000{{AJbc{AId{e}}g}{{AHj{{Ff{h}}}}}AJdAhAJf}{AJhAIh}{AJjAIj}{AJlAIl}{AJnAIl}{AK`AIn}{AKbAIn}{AKdAIn}{AKfAIn}{{{AKh{c}}}AJ`{{Mj{{Dl{{Ff{If}}}}}}}}{AKjAJ`}{AKlAJ`}{AKnAJ`}{AL`AJ`}{ALbAJ`}{ALdAJ`}{ALfAJ`}{ALhAJ`}{{{ALj{c}}}AJ`{{Mj{{Dl{{Ff{AJ`}}}}}}}}{AIh{{Cd{If}}}}{AIj{{Cd{If}}}}{AIl{{Cd{If}}}}{AIn{{Cd{If}}}}{AJ`{{Cd{If}}}}{{ALl{Dl{C`}}{G`{n}}}{{j{d}}}}{AJhAJh}{AJjAJj}{AJlAJl}{AJnAJn}{AK`AK`}{AKbAKb}{AKdAKd}{AKfAKf}{{{ALn{c}}}{{ALn{c}}}{AfEl}}{AM`AM`}{{{AKh{c}}}{{AKh{c}}}Af}{AMbAMb}{AMdAMd}{AMfAMf}{AMhAMh}{AKjAKj}{AKlAKl}{AKnAKn}{AL`AL`}{AMjAMj}{AMlAMl}{AMnAMn}{ALbALb}{ALdALd}{ALfALf}{ALhALh}{{{ALj{c}}}{{ALj{c}}}Af}{{{AN`{c}}}{{AN`{c}}}{AfEl}}{{{ANb{c}}}{{ANb{c}}}{AfEl}}{{{ANd{c}}}{{ANd{c}}}{AfEl}}{ANfANf}{ANhANh}{ANjANj}{ANlANl}{ANnANn}{{ce}d{}{}}0000000000000000000000000000000000{{AJbc{AId{e}}g}{{AHj{{Ff{h}}}}}AJdAhAJf}{{}ANf}{{}ANh}{{}ANj}{{}ANl}``````{Anc{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000{AIhKl}{AIjKl}{AIlKl}{AInKl}{AJ`Kl}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}00{c{{Bb{AIh}}}Bd}1{c{{Bb{AIj}}}Bd}2222{c{{Bb{AIl}}}Bd}3333{c{{Bb{AIn}}}Bd}4{c{{Bb{{ALn{e}}}}}BdEl}55555555555555555555{c{{Bb{{AN`{e}}}}}BdEl}66{c{{Bb{{ANb{e}}}}}BdEl}7{c{{Bb{{ANd{e}}}}}BdEl}888888{{AJbceg}{{AHj{{Ff{h}}}}}AJdAhAJf}{And}00000000000000000000000000000000000000000{{{AN`{c}}{AN`{c}}}Bf{BhEl}}{{{ANb{c}}{ANb{c}}}Bf{BhEl}}{{{ANd{c}}{ANd{c}}}Bf{BhEl}}{{ce}Bf{}{}}00000000000`{AJh{{Bb{cAIh}}}{}}{AJj{{Bb{cAIj}}}{}}{AJl{{Bb{cAIl}}}{}}{AJn{{Bb{cAIl}}}{}}{AK`{{Bb{cAIn}}}{}}{AKb{{Bb{cAIn}}}{}}{AKd{{Bb{cAIn}}}{}}{AKf{{Bb{cAIn}}}{}}{{{AKh{c}}}{{Bb{eAJ`}}}{{Mj{{Dl{{Ff{If}}}}}}}{}}{AKj{{Bb{cAJ`}}}{}}{AKl{{Bb{cAJ`}}}{}}{AKn{{Bb{cAJ`}}}{}}{AL`{{Bb{cAJ`}}}{}}{ALb{{Bb{cAJ`}}}{}}{ALd{{Bb{cAJ`}}}{}}{ALf{{Bb{cAJ`}}}{}}{ALh{{Bb{cAJ`}}}{}}{{{ALj{c}}}{{Bb{eAJ`}}}{{Mj{{Dl{{Ff{AJ`}}}}}}}{}}{{AJhBj}Bl}{{AIhBj}Bl}0{{AJjBj}Bl}{{AIjBj}Bl}0{{AJlBj}Bl}{{AJnBj}Bl}{{AIlBj}Bl}0{{AK`Bj}Bl}{{AKbBj}Bl}{{AKdBj}Bl}{{AKfBj}Bl}{{AInBj}Bl}0{{{ALn{c}}Bj}Bl{BnEl}}{{AM`Bj}Bl}{{{AKh{c}}Bj}BlBn}{{AMbBj}Bl}{{AMdBj}Bl}{{AMfBj}Bl}{{AMhBj}Bl}{{AKjBj}Bl}{{AKlBj}Bl}{{AKnBj}Bl}{{AL`Bj}Bl}{{AMjBj}Bl}{{AMlBj}Bl}{{AMnBj}Bl}{{ALbBj}Bl}{{ALdBj}Bl}{{ALfBj}Bl}{{ALhBj}Bl}{{{ALj{c}}Bj}BlBn}{{AJ`Bj}Bl}0{{{AN`{c}}Bj}Bl{BnEl}}{{{ANb{c}}Bj}Bl{BnEl}}{{{ANd{c}}Bj}Bl{BnEl}}{{{AO`{c}}Bj}Bl{BnAh}}{{ANfBj}Bl}{{ANhBj}Bl}{{ANjBj}Bl}{{ANlBj}Bl}{{ANnBj}Bl}{cc{}}00000000000000000000000000000000000000000{{AnAnAnAnBf{Cd{{Ff{ALl}}}}AHh}{{AOd{{AAf{{G`{AOb}}{G`{AOb}}}}}}}}{{ce}Ch{Cjl}Cl}00{AOf}`{{{AN`{c}}e}d{CjEl}Cn}{{{ANb{c}}e}d{CjEl}Cn}{{{ANd{c}}e}d{CjEl}Cn}{{ce}{{D`{eg}}}{}{DbnA`}{}}0000{c{}{}}0000{AOb{{Cd{An}}}}{{}An}00000000000000000000000000000000000000000{ce{}{}}00000000000000000000000000000000000000000{{AJhc}AIh{}}{{AJjc}AIj{}}{{AJlc}AIl{}}{{AJnc}AIl{}}{{AK`c}AIn{}}{{AKbc}AIn{}}{{AKdc}AIn{}}{{AKfc}AIn{}}{{AM`c}AJ`{}}{{{AKh{c}}e}AJ`{{Mj{{Dl{{Ff{If}}}}}}}{}}{{AMbc}AJ`{}}{{AMdc}AJ`{}}{{AMfc}AJ`{}}{{AMhc}AJ`{}}{{AKjc}AJ`{}}{{AKlc}AJ`{}}{{AKnc}AJ`{}}{{AL`c}AJ`{}}{{AMjc}AJ`{}}{{AMlc}AJ`{}}{{AMnc}AJ`{}}{{ALbc}AJ`{}}{{ALdc}AJ`{}}{{ALfc}AJ`{}}{{ALhc}AJ`{}}{{{ALj{c}}e}AJ`{{Mj{{Dl{{Ff{AJ`}}}}}}}{}}{AJbBf}````{{}{{Bb{DdDf}}}}00000000000000000000000000000000000000000{{ChCh}ANh}{{AOhAOhChCh}ANj}{{ANjANhAHh}ANl}{AJbd}{{}}00000000000000000000000000000000000000000{AOfAB`}{{AJbIdc}{{AHj{{Ff{h}}}}}Ah}{AJb{{AHj{{Ff{h}}}}}}```{{AJbceg}{{AHj{{Ff{h}}}}}AJdAhAJf}5{ALlAHh}{ANhAHh}{ANjAHh}{ANlAHh}{ANnAHh}{ALlBf}{ANhBf}{ANjBf}{ANlBf}{ANnBf}{ALlAn}{ANnAn}{{ALl{Dl{C`}}}{{Dl{C`}}}}{{AIhc}BbDh}{{AIjc}BbDh}{{AIlc}BbDh}{{AInc}BbDh}{{{ALn{c}}e}BbElDh}{{{AN`{c}}e}Bb{DjEl}Dh}{{{ANb{c}}e}BbElDh}{{{ANd{c}}e}Bb{DjEl}Dh}{AJb{{j{d}}}}`{AIh{{Cd{If}}}}{AIj{{Cd{If}}}}{AIl{{Cd{If}}}}{AIn{{Cd{If}}}}{AJ`{{Cd{If}}}}`{{AJbc}{{AHj{{Ff{h}}}}}AJf}``{ce{}{}}0000000000000000000000000000000000{cDn{}}0000{c{{Bb{e}}}{}{}}00000000000000000000000000000000000000000000000000000000000000000000000000000000000{cE`{}}00000000000000000000000000000000000000000{{AJbCh}{{AHj{{Ff{h}}}}}}{{AJb{H`{ce}}g}{{AHj{{Ff{h}}}}}AhAJdAJf}`555555555555555555555555555555555555555555{AJb{{AHj{{Ff{h}}}}}}``````````````````````````{{}}{{AnAnAn{Cd{{Ff{ALl}}}}AHh}{{AOd{{AAf{{G`{c}}{G`{c}}}}}}}{}}{{}AOj}{AOjCh}{{{Fn{c}}KjCh}{}El}{ChAOj}{{CdKjCh}}{{}Ch}``````{{cOjCb}{{Bb{eAC`}}}{}{}}{{c{ACb{e}}g}{{Bb{iAC`}}}{}{}{}{}}{{ce}{{Bb{AC`}}}{{ACl{Cb}}}{ACnKj}}{{c{ACb{e}}g}{{Bb{DlAC`}}}{}{}{}}````````````{{ChChAGf}{{Dl{C`}}}}{{Chc}{{Dl{C`}}}AGn}{{cOj{Cb{e}}}g{}{}{}}{{c{Cb{C`}}e}Bf{}{}}{{{Cb{C`}}}{{Bb{{Ah{}{{AOl{c}}{AOn{e}}{B`{g}}{Bb{i}}{Bd{k}}{Bf{m}}}}Il}}}{nA`lAfBnAGlDjACfCj}{BhnA`lAfBnCjAGlDjACf}{nA`lAfBnCj}{nA`lAfBnCjBhAGlDjACf{Mj{AAj}}{Bj{AAj}}}{nA`lAfBnCjBhAGlDjACf}{IfnA`}}{c{{Ah{}{{AOl{c}}{AOn{e}}{B`{g}}{Bb{i}}{Bd{k}}{Bf{m}}}}}{nA`lAfBnAGlDjACfCj}{BhnA`lAfBnCjAGlDjACf}{nA`lAfBnCj}{nA`lAfBnCjBhAGlDjACf{Mj{AAj}}{Bj{AAj}}}{nA`lAfBnCjBhAGlDjACf}{IfnA`}}{{{Cf{C`}}Ch}{{AAf{{Ah{}{{AOl{c}}{AOn{e}}{B`{g}}{Bb{i}}{Bd{k}}{Bf{m}}}}c}}}{nA`lAfBnAGlDjACfCj}{BhnA`lAfBnCjAGlDjACf}{nA`lAfBnCj}{nA`lAfBnCjBhAGlDjACf{Mj{AAj}}{Bj{AAj}}}{nA`lAfBnCjBhAGlDjACf}{IfnA`}}{{{Cf{C`}}Ch}{{AAf{{BA`{}{{Bl{c}}{Bn{e}}{Bf{g}}}}c}}}{nA`lAfBnAGlDjACfCj}{nA`lAfBnAGlDjACfCj}{IfnA`}}{{}{{Ah{}{{AOl{c}}{AOn{e}}{B`{g}}{Bb{i}}{Bd{k}}{Bf{m}}}}}{nA`lAfBnAGlDjACfCj}{BhnA`lAfBnCjAGlDjACf}{nA`lAfBnCj}{nA`lAfBnCjBhAGlDjACf{Mj{AAj}}{Bj{AAj}}}{nA`lAfBnCjBhAGlDjACf}{IfnA`}}{c{{Ah{}{{AOl{e}}{AOn{c}}{B`{g}}{Bb{i}}{Bd{k}}{Bf{m}}}}}{BhnA`lAfBnCjAGlDjACf}{nA`lAfBnAGlDjACfCj}{nA`lAfBnCj}{nA`lAfBnCjBhAGlDjACf{Mj{AAj}}{Bj{AAj}}}{nA`lAfBnCjBhAGlDjACf}{IfnA`}}{{{Dl{c}}ADd}e{}{}}{c{{AAf{eADf}}}{}{}}{BhADd}{{{Ah{}{{AOl{c}}{AOn{e}}{B`{g}}{Bb{i}}{Bd{k}}{Bf{m}}}}Ch}e{nA`lAfBnAGlDjACfCj}{BhnA`lAfBnCjAGlDjACf}{nA`lAfBnCj}{nA`lAfBnCjBhAGlDjACf{Mj{AAj}}{Bj{AAj}}}{nA`lAfBnCjBhAGlDjACf}{IfnA`}}{{c{Cb{C`}}}{{Bb{eg}}}{}{}{}}{{cChChAGf}{{Bb{eg}}}{}{}{}}1{{cChe}{{Bb{gi}}}{}AGn{}{}}{{{Ah{}{{AOl{c}}{AOn{e}}{B`{g}}{Bb{i}}{Bd{k}}{Bf{m}}}}}{{Dl{C`}}}{nA`lAfBnAGlDjACfCj}{BhnA`lAfBnCjAGlDjACf}{nA`lAfBnCj}{nA`lAfBnCjBhAGlDjACf{Mj{AAj}}{Bj{AAj}}}{nA`lAfBnCjBhAGlDjACf}{IfnA`}}{{{Ah{}{{AOl{c}}{AOn{e}}{B`{g}}{Bb{i}}{Bd{k}}{Bf{m}}}}i{Cb{C`}}}Bf{nA`lAfBnAGlDjACfCj}{BhnA`lAfBnCjAGlDjACf}{nA`lAfBnCj}{nA`lAfBnCjBhAGlDjACf{Mj{AAj}}{Bj{AAj}}}{nA`lAfBnCjBhAGlDjACf}{IfnA`}}{{{BA`{}{{Bl{c}}{Bn{e}}{Bf{g}}}}eChChAGf}Bf{nA`lAfBnAGlDjACfCj}{nA`lAfBnAGlDjACfCj}{IfnA`}}{{{BA`{}{{Bl{c}}{Bn{e}}{Bf{g}}}}e{Cb{C`}}}Bf{nA`lAfBnAGlDjACfCj}{nA`lAfBnAGlDjACfCj}{IfnA`}}{{{BA`{}{{Bl{c}}{Bn{e}}{Bf{g}}}}eChi}Bf{nA`lAfBnAGlDjACfCj}{nA`lAfBnAGlDjACfCj}{IfnA`}AGn}```````````````````````{cIf{}}0{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}o}{{Bb{dBB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af{{AH`{}{{In{c}}}}}}{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}oAaAc}{{Bb{dBB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af{{AH`{}{{In{c}}}}}{{AH`{}{{In{e}}}}}{{AH`{}{{In{m}}}}}}{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}{Cb{c}}{Cb{e}}{Dl{Bf}}}{{Bb{{Dl{e}}BB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{ce{}{}}000{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}BBd}{{Bb{gBB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}c}BfAf{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{Anc{}}000{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}c}{{Bb{dBB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}0{And}0{{BB`Bj}Bl}0{cc{}}0{{ce}{{D`{eg}}}{}{DbnA`}{}}{c{}{}}{{}An}0;;{{}{{Bb{DdDf}}}}0{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}BBd}{{Bb{AnBB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}BBdc}{{Bb{eBB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}BBdc}{{Bb{{AAf{emi}}BB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}BBdc}{{Bb{{AAf{ei}}BB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{{}}0{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}cem}{{Bb{dBB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}o}{{Cd{{AAf{ce}}}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af{BBfBBh}}{cDn{}}{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}BBd}{{Bb{eBB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{c{{Bb{e}}}{}{}}000{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}BBd}{{Bb{kBB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{cE`{}}0{{{BAn{}{{BAb{c}}{BAd{e}}{BAf{g}}{BAh{i}}{BAj{k}}{BAl{m}}}}ceBf}{{Bb{eBB`}}}Af{AfBBb}{}{}{{J`{}{{In{{AAf{cem}}}}}}}Af}{ce{}{}}0````````{{{Cd{BBj}}KjCh}}{{}{{BC`{}{{AFj{c}}{AFn{e}}{BBl{g}}{BBn{i}}}}}{IfBnnA`}AGhBCbAOj}{c{{AAf{{BC`{}{{AFj{e}}{AFn{c}}{BBl{g}}{BBn{i}}}}g}}}AGh{IfBnnA`}BCbAOj}{{{BC`{}{{AFj{c}}{AFn{e}}{BBl{g}}{BBn{i}}}}}d{IfBnnA`}AGhBCbAOj}{{{BC`{}{{AFj{c}}{AFn{e}}{BBl{g}}{BBn{i}}}}e{Fn{k}}AHd}{{`{{h{}{{f{{Bb{{AAf{{BC`{}{{AFj{c}}{AFn{e}}{BBl{g}}{BBn{i}}}}g}}c}}}}}}n}}}{IfBnnA`}AGhBCbAOjEl}`{{BCd{Hj{c{Jh{c}}}}}{{AHj{{Ff{h}}}}}El}{{BCd{Hj{c{Hh{c}}}}}{{AHj{{Ff{h}}}}}El}{{BCdOh}{{AHj{{Ff{h}}}}}}{{BCd{Gd{c}}}{{AHj{{Ff{h}}}}}El}{{BCd{Gj{{Fn{c}}}}{Gh{{Gf{c}}}}}{{AHj{{Ff{h}}}}}El}`````````````{{cb}d{}}0000{AGf{{Cf{C`}}}}{c{{Bb{dIl}}}{{J`{}{{In{AGf}}}}n}}{{}{{BDf{{BDb{{BCn{{BCj{BCfBCh}}BCl}}BD`}}BDd}}}}>>>>>>>>>>{AGf{{Bb{dIl}}}}{{{BDh{c}}}{{BDh{c}}}El}{{{Gf{c}}}{{Gf{c}}}{AfEl}}{{{BDj{c}}}{{BDj{c}}}{AfEl}}{{{Hn{c}}}{{Hn{c}}}Af}{AGfAGf}{{ce}d{}{}}0000{Anc{}}{{{Gf{c}}}eEl{}}111111111{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}000{c{{Bb{AGf}}}Bd}1{{cKnL`}{{Bb{AGfIl}}}Lb}{And}0000{{AGfAGf}Bf}{{ce}Bf{}{}}000{{{BDh{c}}Bj}Bl{BnEl}}{{{Gf{c}}Bj}Bl{BnEl}}{{{BDj{c}}Bj}Bl{BnEl}}{{{Hn{c}}Bj}BlBn}{{AGfBj}Bl}0{cc{}}0000{cAGf{{ACl{{Cb{C`}}}}}}{cAGf{{Mj{{Cf{C`}}}}}}{Kl{{Bb{AGfc}}}{}}{{ce}Ch{Cjl}Cl}{{{BDh{c}}}{{Cd{{AAf{{Kd{{Fn{c}}}}G`}}}}}El}{{{BDh{c}}}{{Cd{{Kd{{Fn{c}}}}}}}El}{{{BDh{c}}}{{Cd{Lj}}}El}{{{BDh{c}}}{{Cd{G`}}}El}{{{BDh{c}}}{{Gb{c}}}El}{{AGfc}dCn}{{ce}{{D`{eg}}}{}{DbnA`}{}}{{}An}0000{ce{}{}}0000{{}{{Bb{DdDf}}}}0000{{}}0000{{AGfc}BbDh}{{AGfcKn}{{Bb{dIl}}}Ll}{{AGfKn}An}{{}Dn}66666{cDn{}}{c{{Bb{e}}}{}{}}000{AAj{{Bb{AGfc}}}{}}1011111{cE`{}}0000``:::::```````````````{{cb}d{}}0``;;;;;;;;``{BDlBDl}{BDnBDn}{{ce}d{}{}}0{{Lfc}{{BE`{e}}}{{ACl{{Cb{C`}}}}}{}}{{Lfc}{{BE`{{AAf{eg}}}}}{{ACl{{Cb{C`}}}}}{}{}}`{Anc{}}000{BEb{{BEf{BEd}}}}1111{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{BDl}}}Bd}11{c{{Bb{BDn}}}Bd}2{{Lfc}{{BE`{{Lh{Lf}}}}}{{ACl{{Cb{C`}}}}}}{{Lfce}{{BE`{{Lh{Lf}}}}}{{ACl{{Cb{C`}}}}}{}}{And}000{{BDlBDl}Bf}{{BDnBDn}Bf}{{ce}Bf{}{}}0000000`{{BDlBj}Bl}{{BDnBj}Bl}{cc{}}000{cAOh{}}00{{}An}000{ce{}{}}000{{ce}{{BE`{d}}}{}{}}{{}{{Bb{DdDf}}}}000```{{Lfc{BEh{An}}}{{BE`{BDn}}}{{ACl{{Cb{C`}}}}}}{{Lfc{BEh{An}}}{{BE`{BDl}}}{{ACl{{Cb{C`}}}}}}{{Lf{BEj{Lf}}BDn}{{BE`{{Bb{dd}}}}}}{{Lf{BEj{Lf}}BDl}{{BE`{{Bb{dd}}}}}}{{}}000{{Lf{Cb{c}}e}{{BE`{{Dl{C`}}}}}{}{}}`{{BDlc}BbDh}{{BDnc}BbDh}`{{{BEj{Lf}}}{{BEj{{BEn{BEdBEl}}}}}};;{c{{Bb{e}}}{}{}}0000000{cE`{}}000{{Lfceg}{{BE`{{Bb{dd}}}}}{}{}{}}{{{Lh{{BEn{BEdBEl}}}}}{{Lh{Lf}}}}{AnLf}`{ce{}{}}000``````````{{cb}d{}}{{{BF`{ceg}}e}{{BFb{dg}}}El{{BFd{c}}}{{BFh{c}{{BFf{}}}}}}``2222{{{BFj{c}}}{{BFj{c}}}{AfEl}}{{ce}d{}{}}{{{Kd{c}}c}{{BFh{}{{BFf{c}}{BFl{e}}}}}AE`{{AEb{g}}}El}`{Anc{}}000{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}0`{And}0{{{BFj{c}}{BFj{c}}}Bf{BhEl}}{{ce}Bf{}{}}000{{{BFj{c}}Bj}Bl{BnEl}}{cc{}}0{{{BFd{}{{BAf{c}}}}}cAE`}{{{BFh{}{{BFf{c}}{BFl{e}}}}}cAE`{{AEb{g}}}El}{{{BFd{}{{BAf{c}}}}}{{Kd{c}}}AE`}{{{BFh{}{{BFf{c}}{BFl{e}}}}}{{Kd{c}}}AE`{{AEb{g}}}El}{{ce}Ch{Cjl}Cl}{{{BFd{}{{BAf{c}}}}}{}AE`}0{ABl}{{{BFj{c}}e}d{CjEl}Cn}{{}An}0{ce{}{}}0{{{BFh{}{{BFf{c}}{BFl{e}}}}i}BfAE`{{AEb{g}}}El{{AEh{g}}}}{{}{{Bb{DdDf}}}}0``{{}}0``{eChEl{{AEh{c}}}}4{c{{Bb{e}}}{}{}}000{cE`{}}0`66","c":[],"p":[[5,"Private",4332],[1,"unit"],[17,"Output"],[10,"Future",4333],[8,"BoxSyncFuture",0],[10,"Sized",4334],[10,"Send",4334],[10,"Sync",4334],[6,"ExecutionType",0],[5,"ValidatorConfig",0],[10,"Clone",4335],[10,"SignatureKey",3856],[5,"PeerConfig",0],[5,"HotShotConfig",0],[1,"usize"],[5,"With",4336],[6,"Result",4337],[10,"Deserializer",4338],[1,"bool"],[10,"PartialEq",4339],[5,"Formatter",4340],[8,"Result",4340],[10,"Debug",4340],[1,"u8"],[1,"slice"],[6,"Option",4341],[1,"array"],[1,"u64"],[10,"Hash",4342],[10,"BuildHasher",4342],[10,"Hasher",4342],[5,"IndentedSection",4343],[10,"Display",4340],[5,"Layout",4344],[5,"LayoutError",4344],[10,"Serializer",4345],[10,"Serialize",4345],[5,"Vec",4346],[5,"String",4347],[5,"TypeId",4348],[5,"ConsensusMetrics",162],[1,"f64"],[5,"ConsensusMetricsValue",162],[5,"InnerConsensusMetrics",162],[5,"CommitmentAndMetadata",162],[10,"NodeType",3822],[6,"SecondaryProposalInformation",162],[5,"ProposalDependencyData",162],[5,"Consensus",162],[10,"Counter",2659],[5,"Box",4349],[10,"Gauge",2659],[10,"Histogram",2659],[10,"Label",2659],[5,"Leaf",439],[5,"Arc",4350],[8,"StateAndDelta",3985],[8,"QuorumCertificate",1927],[5,"View",3985],[5,"BTreeMap",4351],[8,"CommitmentMap",162],[10,"Metrics",2659],[8,"DACertificate",1927],[5,"HashMap",4352],[1,"i64"],[8,"UpgradeCertificate",1927],[8,"Result",4353],[5,"VidDisperseShare",439],[5,"Proposal",1556],[8,"VidShares",162],[6,"Terminator",3985],[6,"HotShotError",889],[10,"FnMut",4354],[5,"ViewNumber",439],[10,"Error",4355],[6,"BlockError",439],[5,"Backtrace",4356],[6,"SerializationError",4357],[17,"Item"],[10,"Iterator",4358],[5,"InvalidBlockHeaderSnafu",439],[5,"InvalidTransactionLengthSnafu",439],[5,"InconsistentPayloadCommitmentSnafu",439],[5,"DAProposal",439],[5,"UpgradeProposal",439],[5,"VidDisperse",439],[6,"ViewChangeEvidence",439],[5,"QuorumProposal",439],[6,"Ordering",4339],[5,"Commitment",4359],[17,"NodeType"],[10,"TestableLeaf",439],[10,"RngCore",4360],[1,"str"],[6,"Compress",4361],[6,"Validate",4361],[10,"Read",4362],[10,"Committable",4359],[5,"VidSchemeType",4135],[5,"VidDisperse",4363],[8,"VidCommitment",4135],[10,"Write",4362],[5,"BuilderFee",2500],[5,"MEMOIZED_MAPPING_COMMITMENT",867],[5,"LruCache",4364],[5,"Mutex",4365],[5,"LeafNotFoundSnafu",889],[5,"InvalidStateSnafu",889],[10,"Into",4366],[5,"ViewTimeoutSnafu",889],[6,"RoundTimedoutState",889],[5,"InsufficientValidSignaturesSnafu",889],[8,"NonZeroU64",4367],[5,"MiscSnafu",889],[5,"ContinueSnafu",889],[5,"FailedToMessageLeaderSnafu",889],[5,"FailedToBroadcastSnafu",889],[5,"BlockSnafu",889],[5,"NetworkFaultSnafu",889],[5,"TimeoutSnafu",889],[5,"Event",1231],[5,"LeafInfo",1231],[6,"EventType",1231],[6,"HotShotAction",1231],[5,"BitSlice",4368],[10,"BitOrder",4369],[5,"GenericPublicInput",1369],[10,"PrimeField",4370],[5,"StateSignatureRequestBody",1369],[5,"GenericLightClientState",1369],[5,"StateKeyPair",1369],[5,"StateSignaturesBundle",1369],[10,"Ord",4339],[10,"Default",4371],[5,"EdwardsConfig",4372],[5,"KeyPair",4373],[8,"StateSignKey",1369],[10,"PartialOrd",4339],[1,"tuple"],[6,"BitSpanError",4374],[5,"TaggedBase64",4375],[5,"Message",1556],[5,"Messages",1556],[6,"MessagePurpose",1556],[6,"MessageKind",1556],[6,"GeneralConsensusMessage",1556],[6,"CommitteeConsensusMessage",1556],[6,"SequencingMessage",1556],[6,"DataMessage",1556],[10,"HasViewNumber",4260],[10,"DeserializeOwned",4338],[6,"SignatureError",4376],[5,"GenericArray",4377],[5,"QCParams",1856],[10,"Deserialize",4338],[5,"BitVectorQC",1856],[10,"AggregateableSignatureSchemes",4376],[10,"AsRef",4366],[10,"CryptoRng",4360],[8,"BLSPubKey",1907],[8,"BuilderKey",1907],[5,"U256",4378],[5,"BitVec",4379],[5,"SuccessThreshold",1927],[5,"OneHonestThreshold",1927],[5,"UpgradeThreshold",1927],[5,"SimpleCertificate",1927],[10,"Voteable",2117],[10,"Threshold",1927],[5,"QuorumData",2117],[5,"UpgradeProposalData",2117],[10,"Membership",2569],[5,"DAData",2117],[5,"TimeoutData",2117],[5,"VIDData",2117],[5,"ViewSyncPreCommitData",2117],[5,"ViewSyncCommitData",2117],[5,"ViewSyncFinalizeData",2117],[5,"SimpleVote",2117],[5,"StakeTableEntry",2452],[17,"Error"],[10,"BlockHeader",2500],[17,"Instance"],[17,"Transaction"],[17,"Metadata"],[10,"BlockPayload",2500],[5,"BuilderCommitment",3985],[10,"InstanceState",3966],[10,"Transaction",2500],[10,"Eq",4339],[10,"EncodeBytes",2500],[10,"IntoIterator",4380],[10,"TestableBlock",2500],[8,"VidCommon",4135],[10,"ConsensusApi",2563],[5,"Duration",4381],[5,"Pin",4382],[8,"NonZeroUsize",4367],[6,"ElectionError",2569],[5,"StubSnafu",2569],[5,"MathSnafu",2569],[5,"BTreeSet",4383],[5,"NoMetrics",2659],[6,"MemoryNetworkError",2707],[6,"CentralizedServerNetworkError",2707],[6,"PushCdnNetworkError",2707],[6,"WebServerNetworkError",2707],[6,"NetworkError",2707],[10,"ConnectedNetwork",2707],[10,"NetworkMsg",2707],[10,"StaticVersionType",4384],[5,"StubSnafu",2707],[5,"NoMessagesInQueueSnafu",2707],[5,"FailedToReceiveSnafu",2707],[5,"FailedToSendSnafu",2707],[5,"IncorrectConsensusDataSnafu",2707],[5,"ClientSnafu",2707],[5,"EndpointSnafu",2707],[5,"ClientDisconnectedSnafu",2707],[5,"Libp2pMultiSnafu",2707],[5,"UnimplementedFeatureSnafu",2707],[5,"CouldNotDeliverSnafu",2707],[5,"NoSuchNodeSnafu",2707],[5,"NoBootstrapNodesSpecifiedSnafu",2707],[5,"ChannelSendSnafu",2707],[5,"ShutDownSnafu",2707],[5,"UnableToCancelSnafu",2707],[5,"NotFoundSnafu",2707],[5,"MultipleErrorsSnafu",2707],[10,"NetworkReliability",2707],[6,"TransmitType",2707],[5,"Libp2pSnafu",2707],[5,"MemoryNetworkSnafu",2707],[5,"PushCdnNetworkSnafu",2707],[5,"CentralizedServerSnafu",2707],[5,"WebServerSnafu",2707],[5,"FailedToSerializeSnafu",2707],[5,"FailedToDeserializeSnafu",2707],[5,"TimeoutSnafu",2707],[5,"DataRequest",2707],[6,"RequestKind",2707],[6,"ResponseMessage",2707],[5,"PerfectNetwork",2707],[5,"SynchronousNetwork",2707],[5,"AsynchronousNetwork",2707],[5,"PartiallySynchronousNetwork",2707],[5,"ChaosNetwork",2707],[6,"NetworkChange",2707],[10,"TestableNetworkingImplementation",2707],[8,"AsyncGenerator",2707],[10,"ViewMessage",2707],[1,"u32"],[10,"ConsensusTime",3822],[17,"PrivateKey"],[17,"StakeTableEntry"],[17,"QCParams"],[17,"PureAssembledSignatureType"],[17,"QCType"],[17,"SignError"],[10,"StakeTableEntryType",3856],[10,"TryFrom",4366],[17,"BuilderPrivateKey"],[17,"BuilderSignature"],[10,"BuilderSignatureKey",3856],[17,"Key"],[17,"Amount"],[17,"Commitment"],[17,"LookupProof"],[17,"IntoIter"],[17,"Aux"],[10,"StakeTableScheme",3891],[6,"StakeTableError",3891],[10,"Copy",4334],[6,"SnapshotVersion",3891],[10,"SeedableRng",4360],[10,"CryptoRngCore",4360],[10,"TestableState",3966],[17,"Delta"],[17,"Time"],[10,"ValidatedState",3966],[10,"StateDelta",3966],[10,"Storage",3979],[5,"DefaultOptions",4385],[5,"Infinite",4386],[5,"WithOtherLimit",4385],[5,"LittleEndian",4387],[5,"WithOtherEndian",4385],[5,"FixintEncoding",4388],[5,"WithOtherIntEncoding",4385],[5,"RejectTrailing",4389],[5,"WithOtherTrailing",4385],[6,"ViewInner",3985],[5,"RoundFinishedEvent",3985],[5,"LargeRangeProofType",4135],[5,"SmallRangeProofType",4135],[8,"VidResult",4363],[5,"KZG_SRS",4135],[8,"Bn254",4390],[5,"UnivariateUniversalParams",4391],[5,"Range",4392],[5,"Statement",4393],[8,"Sha256",4394],[8,"Advz",4395],[5,"VoteAccumulator",4260],[6,"Either",4396],[10,"Vote",4260],[17,"Voteable"],[10,"Certificate",4260],[5,"VoteDependencyData",4260],[17,"Threshold"],[15,"Misc",1220],[15,"InvalidState",1220],[15,"InsufficientValidSignatures",1220],[15,"TimeoutError",1220],[15,"FailedToMessageLeader",1220],[15,"FailedToBroadcast",1220],[15,"BlockError",1220],[15,"NetworkFault",1220],[15,"ViewTimeoutError",1220],[8,"LeafChain",1231],[15,"Decide",1352],[15,"Error",1352],[15,"DAProposal",1352],[15,"QuorumProposal",1352],[15,"UpgradeProposal",1352],[15,"Transactions",1352],[15,"ReplicaViewTimeout",1352],[15,"NextLeaderViewTimeout",1352],[15,"ViewFinished",1352],[15,"ViewTimeout",1352],[8,"StateSignature",1369],[8,"LightClientState",1369],[8,"StateSignatureScheme",1369],[8,"TimeoutCertificate",1927],[8,"ViewSyncPreCommitCertificate2",1927],[8,"ViewSyncCommitCertificate2",1927],[8,"ViewSyncFinalizeCertificate2",1927],[8,"QuorumVote",2117],[8,"DAVote",2117],[8,"TimeoutVote",2117],[8,"ViewSyncCommitVote",2117],[8,"ViewSyncPreCommitVote",2117],[8,"ViewSyncFinalizeVote",2117],[8,"UpgradeVote",2117],[5,"ResponseChannel",2707],[15,"MultipleErrors",3812],[15,"Libp2p",3812],[15,"MemoryNetwork",3812],[15,"PushCdnNetwork",3812],[15,"CentralizedServer",3812],[15,"WebServer",3812],[15,"FailedToSerialize",3812],[15,"FailedToDeserialize",3812],[15,"Timeout",3812],[15,"Libp2pMulti",3812],[10,"NodeImplementation",3822],[10,"TestableNodeImplementation",3822],[10,"QuorumCertificateScheme",3846],[15,"Leaf",4131],[15,"DA",4131],[8,"Advz",4135],[8,"H",4135],[8,"SignersMap",4260],[8,"VoteMap2",4260]],"b":[[72,"impl-Display-for-ValidatorConfig%3CKEY%3E"],[73,"impl-Debug-for-ValidatorConfig%3CKEY%3E"],[74,"impl-Debug-for-PeerConfig%3CKEY%3E"],[75,"impl-Display-for-PeerConfig%3CKEY%3E"],[279,"impl-Debug-for-InnerConsensusMetrics"],[280,"impl-Display-for-InnerConsensusMetrics"],[364,"impl-Label-for-ConsensusMetrics"],[365,"impl-Gauge-for-ConsensusMetrics"],[656,"impl-Display-for-BlockError"],[657,"impl-Debug-for-BlockError"],[661,"impl-Debug-for-Leaf%3CTYPES%3E"],[662,"impl-Display-for-Leaf%3CTYPES%3E"],[1068,"impl-Display-for-HotShotError%3CTYPES%3E"],[1069,"impl-Debug-for-HotShotError%3CTYPES%3E"],[1463,"impl-Display-for-GenericLightClientState%3CF%3E"],[1464,"impl-Debug-for-GenericLightClientState%3CF%3E"],[1534,"impl-TryFrom%3CTaggedBase64%3E-for-GenericLightClientState%3CF%3E"],[1536,"impl-TryFrom%3C%26TaggedBase64%3E-for-GenericLightClientState%3CF%3E"],[2610,"impl-Display-for-ElectionError"],[2611,"impl-Debug-for-ElectionError"],[2696,"impl-Gauge-for-NoMetrics"],[2697,"impl-Label-for-NoMetrics"],[3250,"impl-Display-for-MemoryNetworkError"],[3251,"impl-Debug-for-MemoryNetworkError"],[3253,"impl-Display-for-CentralizedServerNetworkError"],[3254,"impl-Debug-for-CentralizedServerNetworkError"],[3257,"impl-Display-for-PushCdnNetworkError"],[3258,"impl-Debug-for-PushCdnNetworkError"],[3263,"impl-Display-for-WebServerNetworkError"],[3264,"impl-Debug-for-WebServerNetworkError"],[3284,"impl-Display-for-NetworkError"],[3285,"impl-Debug-for-NetworkError"],[3934,"impl-Display-for-StakeTableError"],[3935,"impl-Debug-for-StakeTableError"],[4059,"impl-Display-for-BuilderCommitment"],[4060,"impl-Debug-for-BuilderCommitment"],[4111,"impl-TryFrom%3C%26TaggedBase64%3E-for-BuilderCommitment"],[4113,"impl-TryFrom%3CTaggedBase64%3E-for-BuilderCommitment"],[4224,"impl-PayloadProver%3CSmallRangeProofType%3E-for-VidSchemeType"],[4225,"impl-PayloadProver%3CLargeRangeProofType%3E-for-VidSchemeType"],[4226,"impl-PayloadProver%3CSmallRangeProofType%3E-for-VidSchemeType"],[4227,"impl-PayloadProver%3CLargeRangeProofType%3E-for-VidSchemeType"]]}],\
["libp2p_networking",{"doc":"Library for p2p communication","t":"CCPPPPIPGPPPPPPPPPPPPPPPPPPPPPPPPFFEPGGFFFGFGFGPPPPPPPPPPPPPPPPPNOCONNNNNNNNOONNOCNNNNNNNNNNNNNNOOOONNNNNNNNNCNNNNNNNNNNNNNNNHHOOOOOONNNNONNNNNNNNOOOOOOOOOCCOOOONNNNOOOOOOOOOONOOHOOONNNNNNNNNOONNNNNNNNOOOOOOOOOOOOOOOOOOOOOOCCCCFFGGPPFFFSPPPGNNNNOOOOCOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNOONNNNNNNNNOOOONNNNNNNNNOONOOONNONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNPFGPPNNNNNNNNNNNNNNNONNNNNNONNNNONNNNNNNNFGFPPNONNNNNNONNNNNNNNNNNNNNNNNNNNONNNNNNNNNONNNONNNNNNNNNNNNFNONNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNFSNNNONNNNNOONNNONNNNONNNNNNNNNONNNNNNPFGPFPFPPFGPFPFGPFPFPFPFPFPPFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOFFFFFFSSSEFEEEEEESNONNCONNNNOONNNCNNONNNOENNNONNOONENONNNNSFFFGPPSNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNOOOONOONOONNNNNOONOONOONOONNNNNNNNNNNNNOONNNNNNNNPFPFPFPFPFPFGFFPFPFPFPFPFPFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNOCNNONNNNNNNNNNNNNNNNNNNNONONNONNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOEEEEEEFFFNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["network","reexport","AddKnownPeers","AutonatEvent","BeginBootstrap","Bootstrap","BoxedTransport","CantKillTwice","ClientRequest","Conductor","ConnectTimeout","DHTError","DHTEvent","DMEvent","DataRequest","DataResponse","DeserializationError","DirectRequest","DirectRequest","DirectResponse","DirectResponse","GetConnectedPeerNum","GetConnectedPeers","GetDHT","GetRoutingTable","GossipEvent","GossipMsg","GossipMsg","IdentifyEvent","IgnorePeers","IsBootstrapped","Killed","LookupPeer","MeshParams","NetworkDef","NetworkError","NetworkError","NetworkEvent","NetworkEventInternal","NetworkNode","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeReceiver","NetworkNodeType","NoSuchTopic","NodeConfigError","Prune","PutDHT","ReceiverEnded","RecvError","Regular","RequestResponseEvent","ResponseRequested","SendError","SerializationError","Shutdown","Subscribe","TimeoutError","UninitializedField","Unsubscribe","ValidationError","__clone_box","autonat","behaviours","bootstrap_tx","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","clone","clone_into","config","def","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","dht","dht_handler","direct_message","direct_message_state","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","error","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","gen_multiaddr","gen_transport","gossipsub","id","identify","identity","identity","identity","init","init","init","init","inner","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","listen_addr","listener_id","mesh_n","mesh_n_high","mesh_n_low","mesh_outbound_min","mesh_params","mesh_params","network_config","network_node_handle_error","node","node_type","node_type","peer_id","peer_id","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","receiver","recv_kill","replication_factor","replication_factor","republication_interval","republication_interval","request_response","request_response_state","resend_tx","send_network","serialize","server_mode","server_mode","spawn_network_node","swarm","to_connect_addrs","to_connect_addrs","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","ttl","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","chan","chan","contents","key","key","notify","notify","peer","pid","request","response","retry_count","retry_count","value","source","source","source","source","source","source","source","source","dht","direct_message","exponential_backoff","request_response","Bootstrap","DHTBehaviour","DHTEvent","DHTProgress","InProgress","IsBootstrapped","KadGetQuery","KadPutQuery","MAX_DHT_QUERY_SIZE","NUM_REPLICATED_TO_TRUST","NotStarted","NotStarted","Started","State","__clone_box","__clone_box","__clone_box","__clone_box","__private_field","backoff","backoff","backoff","bootstrap","bootstrap_state","bootstrap_tx","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dht_handle_event","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finsish_bootstrap","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_hash","get_record","get_replication_factor","handle_get_query","handle_put_query","hash","in_progress_get_closest_peers","in_progress_get_record_queries","in_progress_put_record_queries","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","key","key","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new","notify","notify","num_replicas","peer_id","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","print_routing_table","progress","progress","put_record","records","replication_factor","retry_count","retry_get","retry_put","retry_tx","set_bootstrap_sender","set_retry","state","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BootstrapFinished","DHTBootstrapTask","InputEvent","ShutdownBootstrap","StartBootstrap","bootstrap","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","in_progress","init","init","into","into","layout_raw","layout_raw","network_tx","pointer_metadata","pointer_metadata","run","run_loop","rx","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DMBehaviour","DMEvent","DMRequest","DirectRequest","DirectResponse","add_direct_request","backoff","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","from","handle_dm_event","in_progress_rr","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","peer_id","pointer_metadata","pointer_metadata","pointer_metadata","retry_count","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ExponentialBackoff","__clone_box","backoff_factor","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","expire","fmt","from","get_hash","hash","init","into","is_expired","layout_raw","new","next_timeout","pointer_metadata","reset","reset_val","start_next","started","timeout","to_owned","try_from","try_into","type_id","vzip","Request","RequestResponseState","Response","__clone_box","__clone_box","add_request","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","handle_request_response","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","request_map","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","NetworkDef","_DERIVE_core_fmt_Debug_FOR_NetworkDef","add_address","add_direct_request","add_direct_response","autonat","borrow","borrow_mut","deref","deref_mut","deserialize","dht","direct_message","drop","fmt","from","gossipsub","handle_established_inbound_connection","handle_established_outbound_connection","handle_pending_inbound_connection","handle_pending_outbound_connection","identify","init","into","layout_raw","new","on_connection_handler_event","on_swarm_event","pointer_metadata","poll","publish_gossip","request_response","subscribe_gossip","try_from","try_into","type_id","unsubscribe_gossip","vzip","CancelledRequest","CancelledRequestSnafu","DHTError","DialError","DialSnafu","Disagreement","DisagreementSnafu","GetRecord","GetRecordError","GetRecordSnafu","GetRecordWrapperError","GossipsubBuild","GossipsubBuildSnafu","GossipsubConfig","GossipsubConfigSnafu","NetworkError","NoKnownPeers","NoKnownPeersSnafu","NotFound","NotFoundSnafu","PublishError","PublishSnafu","PutRecord","PutRecordSnafu","StreamClosed","StreamClosedSnafu","Transport","TransportLaunch","TransportLaunchSnafu","TransportSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error","as_error","as_error_source","as_error_source","as_error_source","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","message","message","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","source","source","source","source","message","message","source","source","source","source","NetworkSnafu","NodeConfigSnafu","RecvSnafu","SendSnafu","SerializationSnafu","TimeoutSnafu","ESTABLISHED_LIMIT","ESTABLISHED_LIMIT_UNWR","MAX_GOSSIP_MSG_SIZE","MeshParams","NetworkNode","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeReceiver","_DERIVE_core_fmt_Debug_FOR_NetworkNode","add_known_peers","bootstrap_tx","borrow","borrow_mut","config","config","connected_pids","deref","deref_mut","deserialize","dht_handler","direct_message_state","drop","fmt","from","handle","handle_client_requests","handle_swarm_events","identity","init","into","layout_raw","listener_id","network_node_handle_error","new","num_connected","peer_id","peer_id","pointer_metadata","put_record","request_response_state","resend_tx","spawn_listeners","spawn_network_node","start_listen","swarm","try_from","try_into","type_id","vzip","DEFAULT_REPLICATION_FACTOR","MeshParams","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","UninitializedField","ValidationError","_DERIVE_core_fmt_Debug_FOR_NetworkNodeConfig","__clone_box","__clone_box","__clone_box","as_error","as_error_source","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","bound_addr","build","clone","clone","clone","clone_into","clone_into","clone_into","create_empty","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","header","identity","identity","identity","in_current_span","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","mesh_n","mesh_n_high","mesh_n_low","mesh_outbound_min","mesh_params","mesh_params","mesh_params","node_type","node_type","node_type","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","replication_factor","replication_factor","replication_factor","republication_interval","republication_interval","republication_interval","server_mode","server_mode","server_mode","to_connect_addrs","to_connect_addrs","to_connect_addrs","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","ttl","ttl","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CantKillTwice","CantKillTwiceSnafu","ConnectTimeout","ConnectTimeoutSnafu","DHTError","DHTSnafu","DeserializationError","DeserializationSnafu","Killed","KilledSnafu","NetworkError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeReceiver","NetworkSnafu","NoSuchTopic","NoSuchTopicSnafu","NodeConfigError","NodeConfigSnafu","ReceiverEnded","ReceiverEndedSnafu","RecvError","RecvSnafu","SendError","SendSnafu","SerializationError","SerializationSnafu","TimeoutError","TimeoutSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add_known_peers","as_error","as_error_source","backtrace","begin_bootstrap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","connected_pids","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","direct_request","direct_request_no_serialize","direct_response","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_record","get_record_timeout","gossip","gossip_no_serialize","header","id","id","ignore_peers","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","listen_addr","listen_addr","lookup_node","lookup_pid","network_config","network_node_handle_error","num_connected","peer_id","peer_id","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","print_routing_table","prune_peer","put_record","put_record_timeout","receiver","recv","recv_kill","request_data","respond_data","send_network","send_request","set_kill_switch","shutdown","source","spawn_network_node","subscribe","take_kill_switch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsubscribe","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_to_connect","source","source","source","source","source","source","source","source","NetworkSnafu","NodeConfigSnafu","RecvSnafu","SendSnafu","SerializationSnafu","TimeoutSnafu","Multiaddr","PeerId","ResponseChannel","__clone_box","__clone_box","as_bits","as_ref","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone_into","clone_into","cmp","cmp","compare","compare","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","empty","encode_hex","encode_hex_upper","ends_with","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_iter","from_multihash","from_public_key","from_str","from_str","get_hash","get_hash","hash","hash","header","header","init","init","init","into","into","into","into_iter","is_empty","is_open","iter","layout_raw","layout_raw","layout_raw","len","multihash","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pop","protocol_stack","push","random","replace","sender","serialize","serialize","to_base58","to_bytes","to_owned","to_owned","to_string","to_string","to_vec","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with","with_capacity","with_p2p"],"q":[[0,"libp2p_networking"],[2,"libp2p_networking::network"],[201,"libp2p_networking::network::ClientRequest"],[215,"libp2p_networking::network::NetworkNodeHandleError"],[223,"libp2p_networking::network::behaviours"],[227,"libp2p_networking::network::behaviours::dht"],[439,"libp2p_networking::network::behaviours::dht::bootstrap"],[480,"libp2p_networking::network::behaviours::direct_message"],[541,"libp2p_networking::network::behaviours::exponential_backoff"],[580,"libp2p_networking::network::behaviours::request_response"],[657,"libp2p_networking::network::def"],[695,"libp2p_networking::network::error"],[1094,"libp2p_networking::network::error::DHTError"],[1097,"libp2p_networking::network::error::GetRecordWrapperError"],[1098,"libp2p_networking::network::error::NetworkError"],[1104,"libp2p_networking::network::network_node_handle_error"],[1110,"libp2p_networking::network::node"],[1162,"libp2p_networking::network::node::config"],[1289,"libp2p_networking::network::node::handle"],[1704,"libp2p_networking::network::node::handle::NetworkNodeHandleError"],[1712,"libp2p_networking::network::node::handle::network_node_handle_error"],[1718,"libp2p_networking::reexport"],[1851,"dyn_clone::sealed"],[1852,"core::result"],[1853,"serde::de"],[1854,"rkyv::with"],[1855,"core::fmt"],[1856,"core::fmt"],[1857,"libp2p_kad::behaviour"],[1858,"libp2p_gossipsub::behaviour"],[1859,"libp2p_autonat::behaviour"],[1860,"alloc::vec"],[1861,"libp2p_request_response"],[1862,"libp2p_identity::keypair"],[1863,"libp2p_core::muxing::boxed"],[1864,"libp2p_core::transport::boxed"],[1865,"core::alloc::layout"],[1866,"core::alloc::layout"],[1867,"core::any"],[1868,"core::num::nonzero"],[1869,"libp2p_kad::record::store::memory"],[1870,"core::option"],[1871,"core::hash"],[1872,"core::marker"],[1873,"core::hash"],[1874,"libp2p_kad::behaviour"],[1875,"libp2p_kad::behaviour"],[1876,"async_compatibility_layer::channel::unbounded::inner"],[1877,"futures_channel::mpsc"],[1878,"libp2p_swarm::connection"],[1879,"libp2p_swarm"],[1880,"libp2p_swarm"],[1881,"libp2p_gossipsub::behaviour"],[1882,"libp2p_autonat::behaviour"],[1883,"core::task::wake"],[1884,"libp2p_swarm"],[1885,"libp2p_gossipsub"],[1886,"core::error"],[1887,"std::backtrace"],[1888,"alloc::string"],[1889,"core::convert"],[1890,"core::clone"],[1891,"core::fmt"],[1892,"core::fmt"],[1893,"async_channel"],[1894,"libp2p_swarm"],[1895,"serde::ser"],[1896,"serde::de"],[1897,"bitvec::slice"],[1898,"bitvec::order"],[1899,"multihash::multihash"],[1900,"core::cmp"],[1901,"core::iter::traits::collect"],[1902,"core::fmt"],[1903,"core::net::ip_addr"],[1904,"core::net::ip_addr"],[1905,"core::iter::traits::collect"],[1906,"multiaddr"],[1907,"multiaddr"],[1908,"bitvec::ptr::span"]],"d":["Network logic","symbols needed to implement a networking instance over …","add vec of known peers or addresses","a autonat event","Start the bootstrap process to kademlia","bootstrap node accepts all connections","<code>BoxedTransport</code> is a type alias for a boxed tuple …","The inner <code>NetworkNode</code> has already been killed","Actions to send from the client to the swarm","conductor node is never pruned","Could not connect to the network in time","Error in the kademlia DHT","a DHT event","a direct message event","request for data from another peer","Respond with some data to another peer","Failure to deserialize a message","client request to send a direct serialized message","Recv-ed a direct message from a node","client request to send a direct reply to a message","Recv-ed a direct response from a node (that hopefully was …","Request the number of connected peers","Request the set of connected peers","Get(Key, Chan)","Print the routing  table to stderr, debugging only","a gossip  event","broadcast a serialized message","Recv-ed a broadcast","a identify event. Is boxed because this event is much …","Ignore peers. Only here for debugging purposes. Allows us …","Report that kademlia has successfully bootstrapped into …","The network node has been killed","Get address of peer","NOTE: …","Overarching network behaviour performing:","","Error generating network","events generated by the swarm that we wish to relay to the …","internal representation of the network events only used …","Network definition","describe the configuration of the network","Builder for <code>NetworkNodeConfig</code>.","Error type for NetworkNodeConfigBuilder","A handle containing:","Error wrapper type for interacting with swarm handle","internal network node receiver","this is mostly to estimate how many network connections a …","no known topic matches the hashset of keys","Error building Node config","prune a peer","Put(Key, Value) into DHT relay success back on channel","The receiver was unable to receive a new message","Error receiving message from network","regular node has a limit to the number of connections to …","a request response event","A peer is asking us for data","Error sending request to network","Failure to serialize a message","kill the swarm","subscribe to a topic","Error waiting for connections","Uninitialized field","unsubscribe from a topic","Custom validation error","","Auto NAT behaviour to determine if we are publically …","networking behaviours wrapping libp2p’s behaviours","Send to the bootstrap task to tell it to start a bootstrap","","","","","","","","","address to bind to","address to bind to","","","the configuration parameters of the netework","defines the swarm and network definition (internal)","","","","","","","","","","","","","","","purpose: peer routing purpose: storing pub key &lt;-&gt; peer id …","Handler for DHT Events","purpose: directly messaging peer","Handler for direct messages","","","","","","","","","","libp2p network errors Contains the <code>NetworkError</code> snafu types","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Bind all interfaces on port <code>port</code> NOTE we may want …","Generate authenticated transport","purpose: broadcasting messages to many peers NOTE …","human readable id","purpose: identifying the addresses from an outside POV","optional identity","optional identity","pub/private key from with peer_id is derived","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","the local address we’re listening on","the listener id we are listening on, if it exists","mesh_n from gossipsub","mesh_n_high from gossipsub","mesh_n_low from gossipsub","mesh_outbound_min from gossipsub","parameters for gossipsub mesh network","parameters for gossipsub mesh network","network configuration","Re-exports of the snafu errors that <code>NetworkNodeHandleError</code> …","functionality of a libp2p network node","The type of node (bootstrap etc)","The type of node (bootstrap etc)","the peer id of the networkbehaviour","peer id of network node","","","","","the receiver","kill switch","replication factor for entries in the DHT default is …","replication factor for entries in the DHT default is …","republication interval in DHT, must be much less than <code>ttl</code>","republication interval in DHT, must be much less than <code>ttl</code>","Behaviour for requesting and receiving data","Handler for requests and response behavior events.","Channel to resend requests, set to Some when we call …","send an action to the networkbehaviour","","whether to start in libp2p::kad::Mode::Server mode","whether to start in libp2p::kad::Mode::Server mode","Spawn a network node task task and return the handle and …","the swarm of networkbehaviours","list of addresses to connect to at initialization","list of addresses to connect to at initialization","","","","","","","","","","expiratiry for records in DHT","expiratiry for records in DHT","","","","","","","","","Send back request ID to client","Send back channel","msg contents","Key to publish under","Key to search for","Channel to notify caller of result of publishing","Channel to notify caller of value (or failure to find …","Peer to try sending the request to","peer id","request sent on wire","Data","number of retries","number of retries to make","Value to publish under","source of error","source of error","source of error","source of error","source of error","source of error","dummy source","source of error","Wrapper around Kademlia","Wrapper around <code>RequestResponse</code>","exponential backoff type","Request Response Handling for data requests","State of bootstrapping","Behaviour wrapping libp2p’s kademlia included:","DHT event enum","represents progress through DHT","The query has been started","Only event tracked currently is when we successfully …","Metadata holder for get query","Metadata holder for get query","the maximum number of nodes to query in the DHT at any one …","the number of nodes required to get an answer from in …","Not in progress","The query has not been started","In progress","State used for random walk and bootstrapping","","","","","","Retry timeout","Exponential retry backoff","Exponential retry backoff","Task for doing bootstraps at a regular interval","State of bootstrapping","Sender to the bootstrap task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","handle a DHT event","","","","","","","","","","","","","","","","","","","","","","","","Send that the bootsrap suceeded","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Retrieve a value for a key from the DHT. Value …","Get the replication factor for queries","update state based on recv-ed get query","Update state based on put query","","in progress queries for nearby peers","List of in-progress get requests","List of in-progress put requests","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","the key to look up","the key to put","","","","","","","","","Create a new DHT behaviour","notify client of result","notify client of result","number of replicas required to replicate over","the peer id (useful only for debugging right now)","","","","","","","","","print out the routing table to stderr","progress through DHT query","progress through DHT query","Publish a key/value to the kv store. Once replicated upon …","already received records","replication factor","the number of remaining retries before giving up","Spawn a task which will retry the query after a backoff.","Spawn a task which will retry the query after a backoff.","Sender to retry requests.","Sets a sender to bootstrap task","Give the handler a way to retry requests.","State of bootstrap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the value to put","","","","","","","","","Bootstrap has finished","Bootstrap task’s state","Internal bootstrap events","Shutdown bootstrap","Start bootstrap","Start bootstrap","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Field indicating progress state","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Task’s sender","","","Run bootstrap task","Task’s loop","Task’s receiver","","","","","","","","","Wrapper metadata around libp2p’s request response usage: …","Lilst of direct message output events","Request to direct message a peert","We received as Direct Request","We received a Direct Response","Add a direct request for a given peer","backoff since last attempted request","","","","","","","the data","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","handle a direct message event","In progress queries","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","the recv-ers peer id","","","","the number of remaining retries before giving up","","","","","","","","","","","","","Track (with exponential backoff) sending of some sort of …","","factor to back off by","","","","","","","","","","","","","","","Marked as expired regardless of time left.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Whether or not the timeout is expired","","Create new backoff","Return the timeout duration and start the next timeout.","","reset backoff","Value to reset to when reset is called","start next timeout result: whether or not we succeeded if …","when we started the timeout","the current timeout amount","","","","","","Request for Consenus data","Handler for request response messages","Response for some VID data that we already collected","","","Add a requests return channel to the map of pending …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handles messages from the <code>request_response</code> behaviour by …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Map requests to the their response channels","","","","","","","","","","","","","","","","","Overarching network behaviour performing:","","Add an address","Add a direct request for a given peer","Add a direct response for a channel","Auto NAT behaviour to determine if we are publically …","","","","","","purpose: peer routing purpose: storing pub key &lt;-&gt; peer id …","purpose: directly messaging peer","","","Returns the argument unchanged.","purpose: broadcasting messages to many peers NOTE …","","","","","purpose: identifying the addresses from an outside POV","","Calls <code>U::from(self)</code>.","","Create a new instance of a <code>NetworkDef</code>","","","","","Publish a given gossip","Behaviour for requesting and receiving data","Subscribe to a given topic","","","","Unsubscribe from a given topic","","request was ignored serverside","SNAFU context selector for the <code>DHTError::CancelledRequest</code> …","Error enum for querying store because for some reason, …","Error initiating dial of peer","SNAFU context selector for the <code>NetworkError::DialError</code> …","nodes disagreed on the value","SNAFU context selector for the <code>DHTError::Disagreement</code> …","Get Record Error","wrapper","SNAFU context selector for the <code>DHTError::GetRecord</code> variant","Wrapper Error enum for <code>libp2p::kad::GetRecordError</code>. …","Error building the gossipsub instance","SNAFU context selector for the <code>NetworkError::GossipsubBuild</code>…","Error building the gossipsub configuration","SNAFU context selector for the …","wrapper type for errors generated by the <code>Network</code>","Error when there are no known peers to bootstrap off","SNAFU context selector for the <code>NetworkError::NoKnownPeers</code> …","could not find 2 or more nodes that had the value","SNAFU context selector for the <code>DHTError::NotFound</code> variant","Error publishing a gossipsub message","SNAFU context selector for the <code>NetworkError::PublishError</code> …","Get Record Error","SNAFU context selector for the <code>DHTError::PutRecord</code> variant","Error if one of the channels to or from the swarm is closed","SNAFU context selector for the <code>NetworkError::StreamClosed</code> …","Error during dialing or listening","Error establishing backend connection","SNAFU context selector for the …","SNAFU context selector for the <code>NetworkError::Transport</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","source of error","source of error","source of error","source of error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","Wrapped num of connections","Number of connections to a single peer before logging an …","Maximum size of a message","","Network definition","","","","","","","","initialize the DHT with known peers add the peers to …","Send to the bootstrap task to tell it to start a bootstrap","","","configuration for the libp2p network (e.g. how it should …","the configuration parameters of the netework","return hashset of PIDs this node is connected to","","","","Handler for DHT Events","Handler for direct messages","","","Returns the argument unchanged.","libp2p network handle allows for control over the libp2p …","event handler for client events currectly supported …","event handler for events emitted from the swarm","pub/private key from with peer_id is derived","","Calls <code>U::from(self)</code>.","","the listener id we are listening on, if it exists","","Creates a new <code>Network</code> with the given settings.","Returns number of peers this node is connected to","Get a reference to the network node’s peer id.","peer id of network node","","Publish a key/value to the kv store. Once replicated upon …","Handler for requests and response behavior events.","Channel to resend requests, set to Some when we call …","Spawn a task to listen for requests on the returned channel","","starts the swarm listening on <code>listen_addr</code> and optionally …","the swarm of networkbehaviours","","","","","replication factor for kademlia","NOTE: …","describe the configuration of the network","Builder for <code>NetworkNodeConfig</code>.","Error type for NetworkNodeConfigBuilder","Uninitialized field","Custom validation error","","","","","","","","","","","","","","","address to bind to","address to bind to","address to bind to","Builds a new <code>NetworkNodeConfig</code>.","","","","","","","Create an empty builder, with all fields set to <code>None</code> or …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","optional identity","optional identity","optional identity","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","mesh_n from gossipsub","mesh_n_high from gossipsub","mesh_n_low from gossipsub","mesh_outbound_min from gossipsub","parameters for gossipsub mesh network","parameters for gossipsub mesh network","parameters for gossipsub mesh network","The type of node (bootstrap etc)","The type of node (bootstrap etc)","The type of node (bootstrap etc)","","","","","replication factor for entries in the DHT default is …","replication factor for entries in the DHT default is …","replication factor for entries in the DHT default is …","republication interval in DHT, must be much less than <code>ttl</code>","republication interval in DHT, must be much less than <code>ttl</code>","republication interval in DHT, must be much less than <code>ttl</code>","whether to start in libp2p::kad::Mode::Server mode","whether to start in libp2p::kad::Mode::Server mode","whether to start in libp2p::kad::Mode::Server mode","list of addresses to connect to at initialization","list of addresses to connect to at initialization","list of addresses to connect to at initialization","","","","","","","","","","","","","expiratiry for records in DHT","expiratiry for records in DHT","expiratiry for records in DHT","","","","","","","","","The inner <code>NetworkNode</code> has already been killed","SNAFU context selector for the …","Could not connect to the network in time","SNAFU context selector for the …","Error in the kademlia DHT","SNAFU context selector for the …","Failure to deserialize a message","SNAFU context selector for the …","The network node has been killed","SNAFU context selector for the …","Error generating network","A handle containing:","Error wrapper type for interacting with swarm handle","internal network node receiver","SNAFU context selector for the …","no known topic matches the hashset of keys","SNAFU context selector for the …","Error building Node config","SNAFU context selector for the …","The receiver was unable to receive a new message","SNAFU context selector for the …","Error receiving message from network","SNAFU context selector for the …","Error sending request to network","SNAFU context selector for the …","Failure to serialize a message","SNAFU context selector for the …","Error waiting for connections","SNAFU context selector for the …","","","","","","","","","","","","","","","Tell libp2p about known network nodes","","","","Notify the network to begin the bootstrap process","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a reference to the network config","return hashset of PIDs this node is connected to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Make a direct request to <code>peer_id</code> containing <code>msg</code>","Make a direct request to <code>peer_id</code> containing <code>msg</code> without …","Reply with <code>msg</code> to a request over <code>chan</code>","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Receive a record from the kademlia DHT if it exists. Must …","Get a record from the kademlia DHT with a timeout","Gossip a message to peers","Gossip a message to peers without serializing","","Get a reference to the network node handle’s id.","human readable id","Ignore <code>peers</code> when pruning e.g. maintain their connection","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference to the network node handle’s listen addr.","the local address we’re listening on","Looks up a node’s <code>PeerId</code> and attempts to validate routing","Look up a peer’s addresses in kademlia NOTE: this should …","network configuration","Re-exports of the snafu errors that <code>NetworkNodeHandleError</code> …","Returns number of peers this node is connected to","Get a reference to the network node handle’s peer id.","the peer id of the networkbehaviour","","","","","","","","","","","","","","","","","Print out the routing table used by kademlia NOTE: only …","Forcefully disconnect from a peer","Insert a record into the kademlia DHT","Insert a record into the kademlia DHT with a timeout","the receiver","recv a network event","kill switch","Request another peer for some data we want.  Returns the …","Send a response to a request with the response channel","send an action to the networkbehaviour","Send a client request to the network","Add a kill switch to the receiver","Cleanly shuts down a swarm node This is done by sending a …","","Spawn a network node task task and return the handle and …","Subscribe to a topic","Take the kill switch to allow killing the receiver task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsubscribe from a topic","","","","","","","","","","","","","","","","","Wait until at least <code>num_peers</code> have connected, or until …","source of error","source of error","source of error","source of error","source of error","source of error","dummy source","source of error","","","","","","","Representation of a Multiaddr.","Identifier of a peer of the network.","A channel for sending a response to an inbound request.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new, empty multiaddress.","","","Checks whether the given <code>Multiaddr</code> is a suffix of this …","","","","","","","","","","","","Convert a Multiaddr to a string","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Parses a <code>PeerId</code> from bytes.","","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.","Builds a <code>PeerId</code> from a public key.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the length of this multiaddress is 0.","Checks whether the response channel is still open, i.e. …","Returns the components of this multiaddress.","","","","Return the length in bytes of this multiaddress.","","","","","","","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …","Returns &amp;str identifiers for the protocol names themselves.","Adds an already-parsed address component to the end of …","Generates a random peer ID from a cryptographically secure …","Replace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.","","","","Returns a base-58 encoded string of this <code>PeerId</code>.","Returns a raw bytes representation of this <code>PeerId</code>.","","","","","Return a copy of this <code>Multiaddr</code>’s byte representation.","","","","","","","","","","","","","","","","","","","Like <code>Multiaddr::push</code> but consumes <code>self</code>.","Create a new, empty multiaddress with the given capacity.","Appends the given <code>PeerId</code> if not yet present at the end of …"],"i":[0,0,11,13,11,3,0,38,0,3,38,38,13,13,11,11,38,11,12,11,12,11,11,11,11,13,11,12,13,11,12,38,11,0,0,0,38,0,0,0,0,0,0,0,0,0,0,38,38,11,11,38,38,3,13,12,38,38,11,11,38,123,11,123,3,74,0,117,3,11,12,13,3,11,12,13,35,122,3,3,117,0,3,3,11,12,13,3,11,12,13,3,3,11,12,13,74,117,74,117,3,11,12,13,3,3,3,3,3,0,3,11,12,13,3,11,12,13,13,13,13,13,13,13,3,0,0,74,37,74,35,122,117,3,11,12,13,164,3,11,12,13,3,11,12,13,37,117,124,124,124,124,35,122,37,0,0,35,122,37,117,3,11,12,13,36,36,35,122,35,122,74,117,117,37,3,35,122,0,117,35,122,3,3,11,12,13,3,11,12,13,35,122,3,11,12,13,3,11,12,13,165,166,167,168,169,168,169,165,167,165,166,167,169,168,170,171,172,173,174,175,176,177,0,0,0,0,0,0,0,0,43,42,0,0,0,0,41,43,41,0,40,41,42,43,44,40,49,50,0,46,46,44,46,40,41,42,49,50,43,44,46,40,41,42,49,50,43,40,41,42,43,40,41,42,43,44,44,46,40,41,42,49,50,43,44,46,40,41,42,49,50,43,44,46,40,41,42,49,50,43,46,44,46,40,41,42,49,50,43,41,42,43,41,41,41,41,42,42,42,42,43,43,43,43,46,46,40,41,42,49,50,43,44,46,40,41,42,49,50,43,43,46,46,46,46,43,46,46,46,44,46,40,41,42,49,50,43,44,46,40,41,42,49,50,43,49,50,44,46,40,41,42,49,50,43,46,49,50,49,46,44,46,40,41,42,49,50,43,46,49,50,46,49,46,49,46,46,46,46,46,40,40,41,42,43,44,46,40,41,42,49,50,43,44,46,40,41,42,49,50,43,44,46,40,41,42,49,50,43,50,44,46,40,41,42,49,50,43,62,0,0,62,62,65,62,65,62,65,62,65,62,65,62,65,62,65,62,65,65,62,65,62,65,62,65,65,62,65,65,65,65,62,65,62,65,62,65,62,65,0,0,0,70,70,67,68,68,67,70,68,67,70,68,67,68,67,70,68,67,70,68,67,70,68,67,70,68,67,70,68,67,70,67,67,68,67,70,68,67,70,68,67,70,68,68,67,70,68,68,67,70,68,67,70,68,67,70,68,67,70,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,21,22,73,21,22,73,21,22,73,21,22,21,22,73,21,22,73,21,22,73,21,21,22,22,73,21,22,73,21,22,21,21,21,21,22,22,22,22,21,22,73,21,22,73,73,21,22,73,21,22,73,21,22,73,21,22,73,73,21,22,21,22,21,22,73,21,22,73,21,22,73,21,22,73,0,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,94,0,0,31,0,94,0,94,111,0,0,31,0,31,0,0,31,0,94,0,31,0,94,0,31,0,31,31,0,0,103,104,105,95,98,99,107,100,108,109,101,102,110,94,111,31,94,111,31,94,111,31,94,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,95,98,99,100,101,102,31,94,103,104,105,95,98,99,107,100,108,109,101,102,110,94,111,103,104,105,95,98,99,107,100,108,109,101,102,110,94,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,31,94,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,95,98,99,100,101,102,103,104,105,95,98,99,107,100,31,31,108,109,101,102,110,94,94,111,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,31,94,111,31,94,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,103,104,105,95,98,99,107,100,108,109,101,102,110,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,95,98,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,31,94,103,104,105,95,98,99,107,100,108,109,101,102,110,94,111,31,94,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,103,104,105,95,98,99,107,100,31,108,109,101,102,110,94,111,178,179,180,181,182,183,184,185,186,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,117,117,117,0,117,117,117,117,117,117,117,117,117,117,0,117,117,117,117,117,117,117,0,117,117,117,117,117,117,117,117,117,0,117,117,117,117,117,117,0,0,0,0,0,123,123,0,35,122,124,123,123,35,122,123,124,35,122,123,124,122,35,122,122,35,122,124,35,122,124,122,35,122,124,35,122,123,124,35,122,123,124,35,122,123,124,35,122,123,124,35,123,123,124,35,122,123,123,123,124,123,122,35,122,123,35,122,123,124,35,122,123,124,35,122,123,124,124,124,124,124,122,35,122,122,35,122,35,122,123,124,122,35,122,122,35,122,122,35,122,122,35,122,35,122,124,123,35,122,123,124,35,122,123,124,122,35,122,35,122,123,124,35,122,123,124,38,0,38,0,38,0,38,0,38,0,38,0,0,0,0,38,0,38,0,38,0,38,0,38,0,38,0,38,0,37,131,132,133,126,127,134,135,128,136,137,129,138,130,37,38,38,38,37,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,126,127,128,129,130,38,37,131,132,133,126,127,134,135,128,136,137,129,138,130,37,131,132,133,126,127,134,135,128,136,137,129,138,130,37,37,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,38,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,37,37,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,126,127,128,129,130,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,38,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,37,37,37,38,37,37,37,38,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,131,132,133,126,127,134,135,128,136,137,129,138,130,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,37,37,37,37,0,37,37,37,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,37,37,37,36,36,36,37,37,37,37,36,37,38,0,37,36,37,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,37,36,131,132,133,126,127,134,135,128,136,137,129,138,130,38,37,170,171,172,173,174,175,176,177,0,0,0,0,0,0,0,0,0,25,27,25,25,27,25,27,75,25,27,75,25,25,27,25,27,25,27,25,27,25,27,75,25,27,75,25,25,27,27,75,25,27,75,25,25,25,25,25,27,25,25,25,25,27,27,27,27,25,25,27,27,75,25,25,25,25,25,27,27,27,75,27,25,27,27,25,27,25,27,25,27,25,27,25,27,75,25,27,75,25,25,75,25,25,27,75,25,27,25,27,25,27,75,25,25,25,27,25,75,25,27,27,27,25,27,25,27,25,25,25,25,25,25,27,27,27,75,25,27,75,25,27,75,25,27,75,25,25,25],"f":"````````````````````````````````````````````````````````````````{{cb}d{}}```{ce{}{}}0000000``{ff}{{ce}d{}{}}``{{}f}{hc{}}0000000{c{{j{f}}}l}{{ce}{{j{{n{gi}}}}}{}{}{}{}}000````{hd}000{{ff}A`}{{ce}A`{}{}}000`{{fAb}Ad}{{AfAb}Ad}{{AhAb}Ad}{{AjAb}Ad}{cc{}}00{AlAj}{AnAj}2{B`Aj}{BbAj}{{{Bh{{Bf{Bd}}{Bf{Bd}}}}}Aj}{{{Bh{BjBl}}}Aj}{Bn{{j{fc}}}{}}{C`Cb}{Cd{{j{{Cl{{Cj{CfCh}}}}Cn}}}}``````{{}h}000`{ce{}{}}000{{}{{j{D`Db}}}}000```````````````{{}}000``````````{{fc}jDd}``{{Dfh}{{j{{Cj{DhDj}}Dl}}}}```4{c{{j{e}}}{}{}}0000000``{cDn{}}0006666````````````````````````````````````````{{cb}d{}}000```````7777777777777777{E`E`}{EbEb}{EdEd}{EfEf}{{ce}d{}{}}000{EhEj}{hc{}}000000000000000{{ce}{{j{{n{gi}}}}}{}{}{}{}}0000000{{ElAnEn}{{F`{Ah}}}}{hd}0000000{{EbEb}A`}{{EdEd}A`}{{EfEf}A`}{{ce}A`{}{}}00000000000{Eld}{{ElAb}Ad}{{E`Ab}Ad}{{EbAb}Ad}{{EdAb}Ad}{{FbAb}Ad}{{FdAb}Ad}{{EfAb}Ad}{cc{}}0000000{{ce}Ff{FhFj}Fl}{{El{Bf{Bd}}{Fn{{Bf{Bd}}}}EjG`Bd{Gb{En}}}d}{ElEj}{{ElEnGdGfA`}d}{{ElGhGf}d}{{Efc}dGj}```{{}h}0000000{ce{}{}}0000000``{{}{{j{D`Db}}}}0000000{{CfEj}El}````{{}}0000000{{El{Gb{En}}}d}``{{ElGfFd}d}```{{ElFb}d}{{ElFd}d}`{{El{Gn{Gl}}}d}{{El{H`{Af}}}d}`9999{c{{j{e}}}{}{}}000000000000000{cDn{}}0000000`;;;;;;;;`````{Hbd}<<<<{hc{}}000{{ce}{{j{{n{gi}}}}}{}{}{}{}}0{hd}0{cc{}}0`{{}h}0{ce{}{}}0{{}{{j{D`Db}}}}0`{{}}0{{{Hd{Gl}}{H`{Af}}}d}9`;;;;::33`````{{HfHhHj}d}`444444`{{}Hf}::::::999888{{HhAb}Ad}{{HfAb}Ad}{{HlAb}Ad}:::{{Hf{Bh{{Bf{Bd}}{Bf{Bd}}}}{F`{{H`{Af}}}}}{{F`{Ah}}}}`:::999888`777`{c{{j{e}}}{}{}}00000{cDn{}}00;;;`{{cb}d{}}`<<{G`G`}{{ce}d{}{}}{{}G`}{hc{}}0{{ce}{{j{{n{gi}}}}}{}{}{}{}}{hd}{{G`G`}A`}{{ce}A`{}{}}000{G`d}{{G`Ab}Ad}{cc{}}{{ce}Ff{FhFj}Fl}{{G`c}dGj}{{}h}{ce{}{}}{G`A`}{{}{{j{D`Db}}}}{{HnI`}G`}{{G`A`}I`}{{}};`{{G`A`}d}``6{c{{j{e}}}{}{}}0{cDn{}}8```{{cb}d{}}0{{IbHj{Fn{{F`{Bl}}}}}d}::::::{BjBj}{BlBl}{{ce}d{}{}}0{{}Ib}{hc{}}00000{{ce}{{j{{n{gi}}}}}{}{}{}{}}{c{{j{Bj}}}l}1{c{{j{Bl}}}l}2{hd}00{{BjBj}A`}{{BlBl}A`}{{ce}A`{}{}}0000000{{BjAb}Ad}{{BlAb}Ad}{{IbAb}Ad}{cc{}}00{{Ib{Bh{BjBl}}}{{F`{Ah}}}}{{}h}00{ce{}{}}00{{}{{j{D`Db}}}}00{{}}00`{{Bjc}jDd}{{Blc}jDd}44{c{{j{e}}}{}{}}00000{cDn{}}00666``{{IdCfCb}d}{{IdCf{Bf{Bd}}}Hj}{{Id{If{{Bf{Bd}}}}{Bf{Bd}}}d}`99{hc{}}0{{ce}{{j{{n{gi}}}}}{}{}{}{}}``{hd}{{IdAb}Ad}{cc{}}`{{IdIhCfCbCb}{{j{{Ij{Id}}Il}}}}{{IdIhCfCbIn}{{j{{Ij{Id}}Il}}}}{{IdIhCbCb}{{j{dIl}}}}{{IdIh{F`{Cf}}{J`{Cb}}In}{{j{{Bf{Cb}}Il}}}}`{{}h}{ce{}{}}{{}{{j{D`Db}}}}{{Jb{Gb{En}}Jd{Jf{{Bf{Bd}}{Bf{Bd}}}}{Jf{BjBl}}Jh}Id}{{IdCfIh{Jj{Id}}}d}{{IdJl}d}{{}}{{IdJn}{{Kd{{Kb{c{K`{Id}}}}}}}{}}{{IdKf{Bf{Bd}}}d}`{{IdBn}d}{c{{j{e}}}{}{}}0{cDn{}}2:``````````````````````````````{{cb}d{}}00000000000000{cKh{}}00000{Cn{{F`{Kj}}}}{Kl{{F`{Kj}}}}>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>{{{Kn{c}}}Cn{{Lb{L`}}}}{{{Ld{c}}}Cn{{Lb{L`}}}}{LfCn}{LhCn}{LjKl}{LlKl}{Cn{{F`{Kh}}}}{Kl{{F`{Kh}}}}{LnLn}{M`M`}{MbMb}{{{Kn{c}}}{{Kn{c}}}Md}{{{Ld{c}}}{{Ld{c}}}Md}{LfLf}{MfMf}{LhLh}{MhMh}{MjMj}{LjLj}{LlLl}{MlMl}{KlKl}{MnMn}{{ce}d{}{}}00000000000000{hc{}}0000000000000000000000000000000{CnBn}{KlBn}{{ce}{{j{{n{gi}}}}}{}{}{}{}}000000000000000{hd}000000000000000{{{Kn{c}}}{{j{eCn}}}{{Lb{L`}}}{}}{{{Ld{c}}}{{j{eCn}}}{{Lb{L`}}}{}}{Lf{{j{cCn}}}{}}{Lh{{j{cCn}}}{}}{Lj{{j{cKl}}}{}}{Ll{{j{cKl}}}{}}{{LnAb}Ad}{{M`Ab}Ad}{{MbAb}Ad}{{{Kn{c}}Ab}AdN`}{{{Ld{c}}Ab}AdN`}{{LfAb}Ad}{{MfAb}Ad}{{LhAb}Ad}{{CnAb}Ad}0{{MhAb}Ad}{{MjAb}Ad}{{LjAb}Ad}{{LlAb}Ad}{{MlAb}Ad}{{KlAb}Ad}0{{MnAb}Ad}0{cc{}}000000000000000{{ce}{{Nb{eg}}}{}{NdNfNh}{}}00{c{}{}}00{{}h}000000000000000{ce{}{}}000000000000000{{Lnc}Cn{}}{{M`c}Cn{}}{{Mbc}Cn{}}{{{Kn{c}}e}Cn{{Lb{L`}}}{}}{{{Ld{c}}e}Cn{{Lb{L`}}}{}}{{Lfc}Cn{}}{{Mfc}Cn{}}{{Lhc}Cn{}}{{Mhc}Kl{}}{{Mjc}Kl{}}{{Ljc}Kl{}}{{Llc}Kl{}}{{Mlc}Kl{}}{{}{{j{D`Db}}}}000000000000000``{{}}000000000000000{Cn{{F`{Kh}}}}{Kl{{F`{Kh}}}}{ce{}{}}00000000000000{cL`{}}00{c{{j{e}}}{}{}}0000000000000000000000000000000{cDn{}}0000000000000003333333333333333````````````````````````````{{Nj{J`{{Cj{CfCb}}}}}d}`44``{Nj{{Nl{Cf}}}}{hc{}}0{{ce}{{j{{n{gi}}}}}{}{}{}{}}``{hd}{{NjAb}Ad}{cc{}}`{{Nj{j{AfNn}}}{{j{A`Cn}}}}{{Nj{O`{Aj}}{H`{Ah}}}{{j{dCn}}}}`{{}h}={{}{{j{D`Db}}}}``{Df{{j{NjCn}}}}{Njh}{NjCf}`{{}}{{NjFd}d}``{Nj{{j{{Cj{{H`{Af}}{Ob{Ah}}}}Cn}}}}`{{NjCb}{{j{CbCn}}}}`{c{{j{e}}}{}{}}0{cDn{}}{ce{}{}}````````{{cb}d{}}00{cKh{}}022222222{{Od{F`{Cb}}}Od}``{Od{{j{DfOf}}}}{DfDf}{OdOd}{OhOh}{{ce}d{}{}}00{{}Od}{{}Df}1{{}Oh}{hc{}}0000000{{ce}{{j{{n{gi}}}}}{}{}{}{}}000{hd}000{{DfAb}Ad}{{OfAb}Ad}0{{OhAb}Ad}{cc{}}0{OjOf}1{L`Of}2{{ce}{{Nb{eg}}}{}{NdNfNh}{}}{{Odc}Od{{Lb{Cd}}}}``{c{}{}}{{}h}000{ce{}{}}000{{}{{j{D`Db}}}}000````{{Od{F`{Oh}}}Od}``{{Odf}Od}``{{}}000{{Odc}Od{{Lb{Ej}}}}``{{Od{F`{I`}}}Od}``{{OdA`}Od}``{{Od{Nl{{Cj{CfCb}}}}}Od}``888{cL`{}}{c{{j{e}}}{}{}}00000004``{cDn{}}000;;;;`````````````````````````````{{cb}d{}}0000000000000{{Dj{Bf{{Cj{CfCb}}}}}{{j{dDl}}}}{cKh{}}0{Dl{{F`{Kj}}}}{Dj{{j{dDl}}}}{ce{}{}}0000000000000000000000000000000{OlDl}{OnDl}{A`Dl}{AbDl}{AdDl}{Dl{{F`{Kh}}}}{DjDj}{AfAf}{AhAh}{AjAj}{OlOl}{OnOn}{AlAl}{AnAn}{A`A`}{AA`AA`}{AAbAAb}{AbAb}{AAdAAd}{AdAd}{{ce}d{}{}}0000000000000{DjDf}{Dj{{j{{Nl{Cf}}Dl}}}}{hc{}}0000000000000000000000000000000{DlBn}{{ce}{{j{{n{gi}}}}}{}{}{}{}}000000000000000{{DjCfce}{{j{dDl}}}AAfAAh}{{DjCf{Bf{Bd}}}{{j{dDl}}}}{{Dj{If{{Bf{Bd}}}}ce}{{j{dDl}}}AAfAAh}{hd}000000000000000{Ol{{j{cDl}}}{}}{On{{j{cDl}}}{}}{A`{{j{cDl}}}{}}{Ab{{j{cDl}}}{}}{Ad{{j{cDl}}}{}}{{DjAb}Ad}{{DhAb}Ad}{{AfAb}Ad}{{AhAb}Ad}{{AjAb}Ad}{{OlAb}Ad}{{OnAb}Ad}{{AlAb}Ad}{{AnAb}Ad}{{A`Ab}Ad}{{AA`Ab}Ad}{{AAbAb}Ad}{{AbAb}Ad}{{AAdAb}Ad}{{AdAb}Ad}{{DlAb}Ad}0{cc{}}000000000000000{{DjcBde}{{j{gDl}}}AAfAAhAAj}{{DjcI`e}{{j{gDl}}}AAfAAhAAj}{{DjL`ce}{{j{dDl}}}AAfAAh}{{DjL`{Bf{Bd}}}{{j{dDl}}}}{{ce}{{Nb{eg}}}{}{NdNfNh}{}}{Djh}`{{Dj{Bf{Cf}}}{{j{dDl}}}}{c{}{}}{{}h}000000000000000{ce{}{}}000000000000000{{Afc}Dl{}}{{Ahc}Dl{}}{{Ajc}Dl{}}{{Olc}Dl{}}{{Onc}Dl{}}{{Alc}Dl{}}{{Anc}Dl{}}{{A`c}Dl{}}{{AA`c}Dl{}}{{AAbc}Dl{}}{{Abc}Dl{}}{{AAdc}Dl{}}{{Adc}Dl{}}{{}{{j{D`Db}}}}000000000000000{DjCb}`{{DjcI`e}{{j{CfDl}}}{AAjAAf}AAh}{{DjCf}{{j{dDl}}}}``{Dj{{j{hDl}}}}{DjCf}`{{}}000000000000000{Dj{{j{dDl}}}}4{{Djceg}{{j{dDl}}}AAfAAfAAh}{{DjceI`g}{{j{dDl}}}AAfAAfAAh}`{Dh{{j{AhDl}}}}`{{DjcCfe}{{j{{F`{Bl}}Dl}}}AAfAAh}{{Djc{If{Bl}}e}{{j{dDl}}}AAfAAh}`{{DjAf}{{j{dDl}}}}{{Dh{AAl{d}}}d}7{Dl{{F`{Kh}}}}{{Dfh}{{j{{Cj{DhDj}}Dl}}}}{{DjL`}{{j{dDl}}}}{Dh{{F`{{AAl{d}}}}}}{ce{}{}}0000000000000{cL`{}}{c{{j{e}}}{}{}}0000000000000000000000000000000{cDn{}}00000000000000053333333333333333{{DjhhI`}{{j{dDl}}}}`````````````````{{cb}d{}}0{c{{AAn{eg}}}{}{}AB`}{Cb{{J`{Bd}}}}{CfABb}888888`{CbCb}{CfCf}{{ce}d{}{}}0{{CbCb}ABd}{{CfCf}ABd}{{ce}ABd{}{}}0{hc{}}00000{{ce}{{j{{n{gi}}}}}{}{}{}{}}{c{{j{Cb}}}l}1{c{{j{Cf}}}l}2{hd}00{{}Cb}{ce{}{{ABh{ABf}}}}0{{CbCb}A`}0{{CfCf}A`}{{ce}A`{}{}}0000000{{CbAb}{{j{dABj}}}}0{{CfAb}{{j{dABj}}}}0{{{If{c}}Ab}{{j{dABj}}}N`}{ABlCb}{cc{}}{ABnCb}{AC`Cb}{ACbCb}3{ACdCf}04{{{J`{Bd}}}{{j{CfACf}}}}{cCb{{ACj{}{{ACh{AC`}}}}}}{ABb{{j{CfABb}}}}3{Bn{{j{CbACl}}}}{Bn{{j{Cf}}}}{{ce}Ff{FhFj}Fl}0{{Cbc}dGj}{{Cfc}dGj}{{ce}{{Nb{eg}}}{}{NdNfNh}{}}0{{}h}00{ce{}{}}00{CbACn}{CbA`}{{{If{c}}}A`{}}2{{}{{j{D`Db}}}}00{Cbh}`{{CbCb}{{F`{ABd}}}}{{CfCf}{{F`{ABd}}}}{{}}00{Cb{{F`{AC`}}}}{CbAD`}{{CbAC`}d}{{}Cf}{{Cbhc}{{F`{Cb}}}{{ADd{AC`}{{ADb{{F`{AC`}}}}}}}}`{{Cbc}jDd}{{Cfc}jDd}{CfL`}{Cf{{Bf{Bd}}}}{ce{}{}}0{cL`{}}0{Cb{{Bf{Bd}}}}{c{{j{{AAn{eg}}{ADf{e}}}}}{}{}AB`}{L`{{j{CbACl}}}}{Bn{{j{CbACl}}}}{c{{j{e}}}{}{}}{{{Bf{Bd}}}{{j{CbACl}}}}{{{Bf{Bd}}}{{j{Cf}}}}{ABb{{j{Cf}}}}33333{cDn{}}00:::{{CbAC`}Cb}{hCb}{{CbCf}{{j{CbCb}}}}","c":[],"p":[[5,"Private",1851],[1,"unit"],[6,"NetworkNodeType",2],[1,"usize"],[6,"Result",1852],[10,"Deserializer",1853],[5,"With",1854],[1,"bool"],[5,"Formatter",1855],[8,"Result",1855],[6,"ClientRequest",2],[6,"NetworkEvent",2],[6,"NetworkEventInternal",2],[6,"Event",1856],[6,"Event",1857],[6,"Event",1858],[6,"Event",1859],[1,"u8"],[5,"Vec",1860],[6,"Event",1861],[5,"Request",580],[5,"Response",580],[1,"str"],[1,"u16"],[5,"Multiaddr",1718],[5,"Keypair",1862],[5,"PeerId",1718],[5,"StreamMuxerBox",1863],[1,"tuple"],[5,"Boxed",1864],[6,"NetworkError",695],[5,"Layout",1865],[5,"LayoutError",1865],[10,"Serializer",1866],[5,"NetworkNodeConfig",1162],[5,"NetworkNodeReceiver",1289],[5,"NetworkNodeHandle",1289],[6,"NetworkNodeHandleError",1289],[5,"TypeId",1867],[5,"Bootstrap",227],[6,"State",227],[6,"DHTEvent",227],[6,"DHTProgress",227],[5,"MAX_DHT_QUERY_SIZE",227],[8,"NonZeroUsize",1868],[5,"DHTBehaviour",227],[5,"MemoryStore",1869],[6,"Option",1870],[5,"KadGetQuery",227],[5,"KadPutQuery",227],[1,"u64"],[10,"Hash",1871],[10,"Sized",1872],[10,"BuildHasher",1871],[5,"Sender",1873],[5,"ExponentialBackoff",541],[5,"Behaviour",1857],[8,"GetRecordResult",1857],[5,"QueryId",1874],[8,"PutRecordResult",1857],[10,"Hasher",1871],[6,"InputEvent",439],[5,"Sender",1875],[5,"UnboundedSender",1876],[5,"DHTBootstrapTask",439],[5,"Receiver",1875],[5,"DMBehaviour",480],[5,"DMRequest",480],[5,"OutboundRequestId",1861],[6,"DMEvent",480],[1,"u32"],[5,"Duration",1877],[5,"RequestResponseState",580],[5,"NetworkDef",657],[5,"ResponseChannel",1718],[5,"ConnectionId",1878],[8,"THandler",1879],[5,"ConnectionDenied",1879],[6,"Endpoint",1880],[1,"slice"],[5,"Behaviour",1858],[5,"Behaviour",1856],[8,"Behaviour",1881],[5,"Behaviour",1859],[8,"THandlerOutEvent",1879],[6,"FromSwarm",1882],[5,"Context",1883],[8,"THandlerInEvent",1879],[6,"ToSwarm",1882],[6,"Poll",1884],[8,"IdentTopic",1885],[10,"Error",1886],[5,"Backtrace",1887],[6,"DHTError",695],[5,"GossipsubConfigSnafu",695],[5,"String",1888],[10,"Into",1889],[5,"GossipsubBuildSnafu",695],[5,"StreamClosedSnafu",695],[5,"NoKnownPeersSnafu",695],[5,"DisagreementSnafu",695],[5,"NotFoundSnafu",695],[5,"DialSnafu",695],[5,"TransportSnafu",695],[5,"TransportLaunchSnafu",695],[10,"Clone",1890],[5,"PublishSnafu",695],[5,"GetRecordSnafu",695],[5,"PutRecordSnafu",695],[5,"CancelledRequestSnafu",695],[6,"GetRecordWrapperError",695],[10,"Debug",1855],[5,"IndentedSection",1891],[10,"Display",1855],[10,"Send",1872],[10,"Sync",1872],[5,"NetworkNode",1110],[5,"HashSet",1892],[5,"RecvError",1893],[6,"SwarmEvent",1879],[5,"UnboundedReceiver",1876],[5,"NetworkNodeConfigBuilder",1162],[6,"NetworkNodeConfigBuilderError",1162],[5,"MeshParams",1162],[5,"UninitializedFieldError",1894],[5,"SendSnafu",1289],[5,"RecvSnafu",1289],[5,"ConnectTimeoutSnafu",1289],[5,"KilledSnafu",1289],[5,"NoSuchTopicSnafu",1289],[5,"NetworkSnafu",1289],[5,"SerializationSnafu",1289],[5,"DeserializationSnafu",1289],[5,"NodeConfigSnafu",1289],[5,"TimeoutSnafu",1289],[5,"DHTSnafu",1289],[5,"CantKillTwiceSnafu",1289],[5,"ReceiverEndedSnafu",1289],[10,"Serialize",1866],[10,"StaticVersionType",1895],[10,"Deserialize",1853],[5,"Receiver",1896],[5,"BitSlice",1897],[10,"BitOrder",1898],[5,"Multihash",1899],[6,"Ordering",1900],[1,"char"],[10,"FromIterator",1901],[5,"Error",1855],[5,"Ipv4Addr",1902],[5,"Ipv6Addr",1902],[6,"Protocol",1903],[6,"IpAddr",1902],[5,"PublicKey",1862],[6,"ParseError",1904],[17,"Item"],[10,"IntoIterator",1901],[6,"Error",1905],[5,"Iter",1906],[5,"ProtoStackIter",1906],[17,"Output"],[10,"FnOnce",1907],[6,"BitSpanError",1908],[8,"BoxedTransport",2],[15,"DataRequest",201],[15,"DataResponse",201],[15,"DirectRequest",201],[15,"PutDHT",201],[15,"GetDHT",201],[15,"NetworkError",1704],[15,"SerializationError",1704],[15,"DeserializationError",1704],[15,"NodeConfigError",1704],[15,"TimeoutError",1704],[15,"DHTError",1704],[15,"CantKillTwice",1704],[15,"ReceiverEnded",1704],[15,"CancelledRequest",1094],[15,"GetRecord",1094],[15,"PutRecord",1094],[15,"GetRecordError",1097],[15,"GossipsubConfig",1098],[15,"GossipsubBuild",1098],[15,"DialError",1098],[15,"Transport",1098],[15,"TransportLaunch",1098],[15,"PublishError",1098]],"b":[[117,"impl-From%3CEvent%3E-for-NetworkEventInternal"],[118,"impl-From%3CEvent%3E-for-NetworkEventInternal"],[120,"impl-From%3CEvent%3E-for-NetworkEventInternal"],[121,"impl-From%3CEvent%3E-for-NetworkEventInternal"],[122,"impl-From%3CEvent%3CVec%3Cu8%3E,+Vec%3Cu8%3E%3E%3E-for-NetworkEventInternal"],[123,"impl-From%3CEvent%3CRequest,+Response%3E%3E-for-NetworkEventInternal"],[898,"impl-Debug-for-NetworkError"],[899,"impl-Display-for-NetworkError"],[905,"impl-Display-for-DHTError"],[906,"impl-Debug-for-DHTError"],[907,"impl-Display-for-GetRecordWrapperError"],[908,"impl-Debug-for-GetRecordWrapperError"],[1214,"impl-Display-for-NetworkNodeConfigBuilderError"],[1215,"impl-Debug-for-NetworkNodeConfigBuilderError"],[1219,"impl-From%3CUninitializedFieldError%3E-for-NetworkNodeConfigBuilderError"],[1221,"impl-From%3CString%3E-for-NetworkNodeConfigBuilderError"],[1493,"impl-Debug-for-NetworkNodeHandleError"],[1494,"impl-Display-for-NetworkNodeHandleError"],[1769,"impl-Debug-for-Multiaddr"],[1770,"impl-Display-for-Multiaddr"],[1771,"impl-Display-for-PeerId"],[1772,"impl-Debug-for-PeerId"],[1774,"impl-From%3CIpv4Addr%3E-for-Multiaddr"],[1776,"impl-From%3CIpv6Addr%3E-for-Multiaddr"],[1777,"impl-From%3CProtocol%3C\'a%3E%3E-for-Multiaddr"],[1778,"impl-From%3CIpAddr%3E-for-Multiaddr"],[1780,"impl-From%3C%26PublicKey%3E-for-PeerId"],[1781,"impl-From%3CPublicKey%3E-for-PeerId"],[1831,"impl-TryFrom%3CString%3E-for-Multiaddr"],[1832,"impl-TryFrom%3C%26str%3E-for-Multiaddr"],[1834,"impl-TryFrom%3CVec%3Cu8%3E%3E-for-Multiaddr"],[1835,"impl-TryFrom%3CVec%3Cu8%3E%3E-for-PeerId"],[1836,"impl-TryFrom%3CMultihash%3C64%3E%3E-for-PeerId"]]}],\
["multi_validator_combined",{"doc":"A multi-validator using both the web server libp2p","t":"CHCFFFFFKNNNNNNNNNNNNNNHNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNNNNNNNMNNNNNNNNNNNNNNHHNNNNNOOOHNHNNNNNNNNNNNNNNNNNNNONNNNNIFIIIINNNNNOOOOOOOOOONNNNNNNNNNNNNNNNNOOOOOOOONOOOOOOOOONNNNNN","n":["infra","main","types","CombinedDARun","ConfigArgs","Libp2pDARun","OrchestratorArgs","PushCdnDaRun","RunDA","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config_file","da_channel","da_channel","da_channel","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","get_config","get_config","get_config","get_config","get_da_channel","get_da_channel","get_da_channel","get_da_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","group_id","init","init","init","init","init","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","quorum_channel","quorum_channel","quorum_channel","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisRun","VIDNetwork","ViewSyncNetwork","__clone_box","borrow","borrow_mut","clone","clone_into","config","da_channel","delay_duration","delay_duration","delay_duration","delay_duration","delayed_tasks","delayed_tasks","delayed_tasks","delayed_tasks","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","layout_raw","message_cache","message_cache","message_cache","message_cache","networks","networks","networks","networks","pointer_metadata","primary_down","primary_down","primary_down","primary_down","primary_fail_counter","primary_fail_counter","primary_fail_counter","primary_fail_counter","quorum_channel","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"multi_validator_combined"],[3,"multi_validator_combined::infra"],[139,"multi_validator_combined::types"],[201,"dyn_clone::sealed"],[202,"clap_builder::builder::command"],[203,"core::clone"],[204,"hotshot_types::traits::node_implementation"],[205,"rkyv::with"],[206,"core::result"],[207,"core::fmt"],[208,"core::fmt"],[209,"clap_builder"],[210,"hotshot_orchestrator::config"],[211,"hotshot_example_types::block_types"],[212,"hotshot_example_types::block_types"],[213,"hotshot_types::message"],[214,"hotshot_types::traits::network"],[215,"hotshot::traits::networking::push_cdn_network"],[216,"hotshot::traits::networking::libp2p_network"],[217,"hotshot::traits::networking::combined_network"],[218,"clap_builder::util::id"],[219,"core::option"],[220,"core::net::socket_addr"],[221,"core::future::future"],[222,"alloc::boxed"],[223,"core::pin"],[224,"core::alloc::layout"],[225,"core::alloc::layout"],[226,"url"],[227,"hotshot::types::handle"],[228,"alloc::vec"],[229,"hotshot_example_types::storage_types"],[230,"hotshot_types::traits::node_implementation"],[231,"serde::de"],[232,"core::hash"],[233,"core::marker"],[234,"core::hash"]],"d":["general infra used for this example","","types used for this example","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","","","","","","","","","","","","","","","Helper function to calculate the nuymber of transactions …","","","","","","","The underlying configuration","the network configuration","the network configuration","The configuration file to be used for this run","The configuration file to be used for this run","The DA channel","data availability channel","data availability channel","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the config for this run","","","","Returns the da network for this run","","","","Returns the quorum network for this run","","","","","","","","","","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","","","","","","The quorum channel","quorum channel","quorum channel","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","convenience type alias","dummy struct so we can choose types","convenience type alias","convenience type alias","convenience type alias","convenience type alias","","","","","","the network configuration","data availability channel","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","quorum channel","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,6,9,9,9,19,28,29,6,9,19,28,29,6,9,0,6,9,6,9,9,9,19,28,29,6,9,19,28,29,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,6,9,19,28,29,6,9,9,9,17,19,28,29,17,19,28,29,17,19,28,29,9,19,28,29,6,9,17,19,28,29,17,19,28,29,6,9,19,28,29,6,9,0,0,19,28,29,6,9,19,28,29,0,17,0,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,9,9,6,19,28,29,6,9,0,0,0,0,0,0,55,55,55,55,55,63,63,64,65,66,67,64,65,66,67,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,64,65,66,67,64,65,66,67,55,64,65,66,67,64,65,66,67,63,55,55,55,55,55,55],"f":"`{{}b}```````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0````````{{}Ab}{jc{}}000000000{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Ah}Aj{AlA`}}{{AbAh}Aj}{cc{}}0000{An{{Af{AbB`}}}}0{BbBd}{{{Bf{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{Bbe{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}}{{{Bf{c}}}{{D`{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}{{Db{{Cl{c}}}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}{{Dd{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}3210{{}{{Dh{Df}}}}{{}j}0000{{Bd{Dh{Dj}}}{{E`{{Dn{Dl}}}}}}000{Bb{{E`{{Dn{Dl}}}}}}{ce{}{}}0000{{}{{Af{EbEd}}}}0000{EfBd}{Ehb}{{}}0000```{{}{{El{BdEj}}}}{{Bb{En{ci}}{F`{Bj}}hh}{{E`{{Dn{Dl}}}}}{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}{{Cn{{Cl{c}}}}}{{Fj{c}{{Fb{e}}{Fd{g}}{Ff{{Fh{c}}}}}}}}{{{l{c}}}bA`}77{c{{Af{e}}}{}{}}000000000{cFl{}}0000{{AbAn}{{Af{bB`}}}}0`:::::``````{{cd}b{}};;{FnFn}{{ce}b{}{}}``````````{jc{}}0{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}{c{{Af{Fn}}}G`}{jb}{{FnFn}Gb}{{ce}Gb{}{}}000{{FnAh}Aj}{cc{}}{{ce}h{GdGf}Gh}{{Fnc}bGj}{{}j}{ce{}{}}{{}{{Af{EbEd}}}}````````{{}}`````````{{Fnc}AfGl}3{c{{Af{e}}}{}{}}0{cFl{}}5","c":[],"p":[[1,"unit"],[5,"Private",201],[5,"Command",202],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",203],[10,"NodeType",204],[5,"ConfigArgs",3],[5,"With",205],[6,"Result",206],[5,"Formatter",207],[8,"Result",207],[10,"Debug",207],[5,"ArgMatches",208],[8,"Error",209],[10,"RunDA",3],[5,"NetworkConfig",210],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",211],[17,"BlockPayload"],[5,"TestBlockPayload",211],[17,"BlockHeader"],[5,"TestBlockHeader",211],[17,"InstanceState"],[5,"TestInstanceState",212],[5,"Libp2pDARun",3],[5,"CombinedDARun",3],[5,"Message",213],[10,"ConnectedNetwork",214],[5,"PushCdnNetwork",215],[5,"Libp2pNetwork",216],[5,"CombinedNetworks",217],[5,"Id",218],[6,"Option",219],[6,"SocketAddr",220],[10,"Future",221],[5,"Box",222],[5,"Pin",223],[5,"Layout",224],[5,"LayoutError",224],[1,"str"],[5,"ValidatorArgs",225],[5,"Url",226],[1,"tuple"],[5,"SystemContextHandle",227],[5,"Vec",228],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",229],[10,"NodeImplementation",204],[5,"TypeId",230],[5,"NodeImpl",139],[10,"Deserializer",231],[1,"bool"],[10,"Hash",232],[10,"Sized",233],[10,"BuildHasher",232],[10,"Hasher",232],[10,"Serializer",234],[8,"ThisRun",139],[8,"DANetwork",139],[8,"VIDNetwork",139],[8,"QuorumNetwork",139],[8,"ViewSyncNetwork",139]],"b":[]}],\
["multi_validator_libp2p",{"doc":"A multi-validator using libp2p","t":"CHCFFFFFKNNNNNNNNNNNNNNHNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNNNNNNNMNNNNNNNNNNNNNNHHNNNNNOOOHNHNNNNNNNNNNNNNNNNNNNONNNNNIFIINNNNNOONNNNNNNNNNNNNNNOONNNONNNNNN","n":["infra","main","types","CombinedDARun","ConfigArgs","Libp2pDARun","OrchestratorArgs","PushCdnDaRun","RunDA","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config_file","da_channel","da_channel","da_channel","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","get_config","get_config","get_config","get_config","get_da_channel","get_da_channel","get_da_channel","get_da_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","group_id","init","init","init","init","init","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","quorum_channel","quorum_channel","quorum_channel","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisRun","__clone_box","borrow","borrow_mut","clone","clone_into","config","da_channel","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","inner","inner","into","layout_raw","pointer_metadata","quorum_channel","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"multi_validator_libp2p"],[3,"multi_validator_libp2p::infra"],[139,"multi_validator_libp2p::types"],[177,"dyn_clone::sealed"],[178,"clap_builder::builder::command"],[179,"core::clone"],[180,"hotshot_types::traits::node_implementation"],[181,"rkyv::with"],[182,"core::result"],[183,"core::fmt"],[184,"core::fmt"],[185,"clap_builder"],[186,"hotshot_orchestrator::config"],[187,"hotshot_example_types::block_types"],[188,"hotshot_example_types::block_types"],[189,"hotshot_types::message"],[190,"hotshot_types::traits::network"],[191,"hotshot::traits::networking::push_cdn_network"],[192,"hotshot::traits::networking::libp2p_network"],[193,"hotshot::traits::networking::combined_network"],[194,"clap_builder::util::id"],[195,"core::option"],[196,"core::net::socket_addr"],[197,"core::future::future"],[198,"alloc::boxed"],[199,"core::pin"],[200,"core::alloc::layout"],[201,"core::alloc::layout"],[202,"url"],[203,"hotshot::types::handle"],[204,"alloc::vec"],[205,"hotshot_example_types::storage_types"],[206,"hotshot_types::traits::node_implementation"],[207,"serde::de"],[208,"core::hash"],[209,"core::marker"],[210,"core::hash"]],"d":["general infra used for this example","","types used for this example","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","","","","","","","","","","","","","","","Helper function to calculate the nuymber of transactions …","","","","","","","The underlying configuration","the network configuration","the network configuration","The configuration file to be used for this run","The configuration file to be used for this run","The DA channel","data availability channel","data availability channel","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the config for this run","","","","Returns the da network for this run","","","","Returns the quorum network for this run","","","","","","","","","","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","","","","","","The quorum channel","quorum channel","quorum channel","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","convenience type alias","dummy struct so we can choose types","convenience type alias","convenience type alias","","","","","","the network configuration","data availability channel","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","quorum channel","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,6,9,9,9,19,28,29,6,9,19,28,29,6,9,0,6,9,6,9,9,9,19,28,29,6,9,19,28,29,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,6,9,19,28,29,6,9,9,9,17,19,28,29,17,19,28,29,17,19,28,29,9,19,28,29,6,9,17,19,28,29,17,19,28,29,6,9,19,28,29,6,9,0,0,19,28,29,6,9,19,28,29,0,17,0,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,9,9,6,19,28,29,6,9,0,0,0,0,55,55,55,55,55,63,63,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,64,65,55,55,55,63,55,55,55,55,55,55],"f":"`{{}b}```````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0````````{{}Ab}{jc{}}000000000{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Ah}Aj{AlA`}}{{AbAh}Aj}{cc{}}0000{An{{Af{AbB`}}}}0{BbBd}{{{Bf{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{Bbe{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}}{{{Bf{c}}}{{D`{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}{{Db{{Cl{c}}}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}{{Dd{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}3210{{}{{Dh{Df}}}}{{}j}0000{{Bd{Dh{Dj}}}{{E`{{Dn{Dl}}}}}}000{Bb{{E`{{Dn{Dl}}}}}}{ce{}{}}0000{{}{{Af{EbEd}}}}0000{EfBd}{Ehb}{{}}0000```{{}{{El{BdEj}}}}{{Bb{En{ci}}{F`{Bj}}hh}{{E`{{Dn{Dl}}}}}{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}{{Cn{{Cl{c}}}}}{{Fj{c}{{Fb{e}}{Fd{g}}{Ff{{Fh{c}}}}}}}}{{{l{c}}}bA`}77{c{{Af{e}}}{}{}}000000000{cFl{}}0000{{AbAn}{{Af{bB`}}}}0`:::::````{{cd}b{}};;{FnFn}{{ce}b{}{}}``{jc{}}0{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}{c{{Af{Fn}}}G`}{jb}{{FnFn}Gb}{{ce}Gb{}{}}000{{FnAh}Aj}{cc{}}{{ce}h{GdGf}Gh}{{Fnc}bGj}{{}j}``{ce{}{}}{{}{{Af{EbEd}}}}{{}}`{{Fnc}AfGl}3{c{{Af{e}}}{}{}}0{cFl{}}5","c":[],"p":[[1,"unit"],[5,"Private",177],[5,"Command",178],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",179],[10,"NodeType",180],[5,"ConfigArgs",3],[5,"With",181],[6,"Result",182],[5,"Formatter",183],[8,"Result",183],[10,"Debug",183],[5,"ArgMatches",184],[8,"Error",185],[10,"RunDA",3],[5,"NetworkConfig",186],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",187],[17,"BlockPayload"],[5,"TestBlockPayload",187],[17,"BlockHeader"],[5,"TestBlockHeader",187],[17,"InstanceState"],[5,"TestInstanceState",188],[5,"Libp2pDARun",3],[5,"CombinedDARun",3],[5,"Message",189],[10,"ConnectedNetwork",190],[5,"PushCdnNetwork",191],[5,"Libp2pNetwork",192],[5,"CombinedNetworks",193],[5,"Id",194],[6,"Option",195],[6,"SocketAddr",196],[10,"Future",197],[5,"Box",198],[5,"Pin",199],[5,"Layout",200],[5,"LayoutError",200],[1,"str"],[5,"ValidatorArgs",201],[5,"Url",202],[1,"tuple"],[5,"SystemContextHandle",203],[5,"Vec",204],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",205],[10,"NodeImplementation",180],[5,"TypeId",206],[5,"NodeImpl",139],[10,"Deserializer",207],[1,"bool"],[10,"Hash",208],[10,"Sized",209],[10,"BuildHasher",208],[10,"Hasher",208],[10,"Serializer",210],[8,"ThisRun",139],[8,"DANetwork",139],[8,"QuorumNetwork",139]],"b":[]}],\
["orchestrator",{"doc":"A orchestrator using the web server","t":"CHFFFFFKNNNNNNNNNNNNNNHNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNNNNNNNMNNNNNNNNNNNNNNHHNNNNNOOOHNHNNNNNNNNNNNNNNNNNNNONNNNN","n":["infra","main","CombinedDARun","ConfigArgs","Libp2pDARun","OrchestratorArgs","PushCdnDaRun","RunDA","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config_file","da_channel","da_channel","da_channel","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","get_config","get_config","get_config","get_config","get_da_channel","get_da_channel","get_da_channel","get_da_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","group_id","init","init","init","init","init","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","quorum_channel","quorum_channel","quorum_channel","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"orchestrator"],[2,"orchestrator::infra"],[138,"dyn_clone::sealed"],[139,"clap_builder::builder::command"],[140,"core::clone"],[141,"hotshot_types::traits::node_implementation"],[142,"rkyv::with"],[143,"core::result"],[144,"core::fmt"],[145,"core::fmt"],[146,"clap_builder"],[147,"hotshot_orchestrator::config"],[148,"hotshot_example_types::block_types"],[149,"hotshot_example_types::block_types"],[150,"hotshot_types::message"],[151,"hotshot_types::traits::network"],[152,"hotshot::traits::networking::push_cdn_network"],[153,"hotshot::traits::networking::libp2p_network"],[154,"hotshot::traits::networking::combined_network"],[155,"clap_builder::util::id"],[156,"core::option"],[157,"core::net::socket_addr"],[158,"core::future::future"],[159,"alloc::boxed"],[160,"core::pin"],[161,"core::alloc::layout"],[162,"core::alloc::layout"],[163,"url"],[164,"hotshot::types::handle"],[165,"alloc::vec"],[166,"hotshot_example_types::storage_types"],[167,"hotshot_types::traits::node_implementation"]],"d":["general infra used for this example","","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","","","","","","","","","","","","","","","Helper function to calculate the nuymber of transactions …","","","","","","","The underlying configuration","the network configuration","the network configuration","The configuration file to be used for this run","The configuration file to be used for this run","The DA channel","data availability channel","data availability channel","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the config for this run","","","","Returns the da network for this run","","","","Returns the quorum network for this run","","","","","","","","","","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","","","","","","The quorum channel","quorum channel","quorum channel","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","",""],"i":[0,0,0,0,0,0,0,0,6,9,9,9,19,28,29,6,9,19,28,29,6,9,0,6,9,6,9,9,9,19,28,29,6,9,19,28,29,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,6,9,19,28,29,6,9,9,9,17,19,28,29,17,19,28,29,17,19,28,29,9,19,28,29,6,9,17,19,28,29,17,19,28,29,6,9,19,28,29,6,9,0,0,19,28,29,6,9,19,28,29,0,17,0,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,9,9,6,19,28,29,6,9],"f":"`{{}b}``````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0````````{{}Ab}{jc{}}000000000{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Ah}Aj{AlA`}}{{AbAh}Aj}{cc{}}0000{An{{Af{AbB`}}}}0{BbBd}{{{Bf{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{Bbe{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}}{{{Bf{c}}}{{D`{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}{{Db{{Cl{c}}}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}{{Dd{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}3210{{}{{Dh{Df}}}}{{}j}0000{{Bd{Dh{Dj}}}{{E`{{Dn{Dl}}}}}}000{Bb{{E`{{Dn{Dl}}}}}}{ce{}{}}0000{{}{{Af{EbEd}}}}0000{EfBd}{Ehb}{{}}0000```{{}{{El{BdEj}}}}{{Bb{En{ci}}{F`{Bj}}hh}{{E`{{Dn{Dl}}}}}{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}{{Cn{{Cl{c}}}}}{{Fj{c}{{Fb{e}}{Fd{g}}{Ff{{Fh{c}}}}}}}}{{{l{c}}}bA`}77{c{{Af{e}}}{}{}}000000000{cFl{}}0000{{AbAn}{{Af{bB`}}}}0`:::::","c":[],"p":[[1,"unit"],[5,"Private",138],[5,"Command",139],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",2],[10,"Clone",140],[10,"NodeType",141],[5,"ConfigArgs",2],[5,"With",142],[6,"Result",143],[5,"Formatter",144],[8,"Result",144],[10,"Debug",144],[5,"ArgMatches",145],[8,"Error",146],[10,"RunDA",2],[5,"NetworkConfig",147],[5,"PushCdnDaRun",2],[17,"Transaction"],[5,"TestTransaction",148],[17,"BlockPayload"],[5,"TestBlockPayload",148],[17,"BlockHeader"],[5,"TestBlockHeader",148],[17,"InstanceState"],[5,"TestInstanceState",149],[5,"Libp2pDARun",2],[5,"CombinedDARun",2],[5,"Message",150],[10,"ConnectedNetwork",151],[5,"PushCdnNetwork",152],[5,"Libp2pNetwork",153],[5,"CombinedNetworks",154],[5,"Id",155],[6,"Option",156],[6,"SocketAddr",157],[10,"Future",158],[5,"Box",159],[5,"Pin",160],[5,"Layout",161],[5,"LayoutError",161],[1,"str"],[5,"ValidatorArgs",162],[5,"Url",163],[1,"tuple"],[5,"SystemContextHandle",164],[5,"Vec",165],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",166],[10,"NodeImplementation",141],[5,"TypeId",167]],"b":[]}],\
["orchestrator_combined",{"doc":"Orchestrator using the web server","t":"CHCFFFFFKNNNNNNNNNNNNNNHNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNNNNNNNMNNNNNNNNNNNNNNHHNNNNNOOOHNHNNNNNNNNNNNNNNNNNNNONNNNNIFIIIINNNNNOOOOOOOOOONNNNNNNNNNNNNNNNNOOOOOOOONOOOOOOOOONNNNNN","n":["infra","main","types","CombinedDARun","ConfigArgs","Libp2pDARun","OrchestratorArgs","PushCdnDaRun","RunDA","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config_file","da_channel","da_channel","da_channel","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","get_config","get_config","get_config","get_config","get_da_channel","get_da_channel","get_da_channel","get_da_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","group_id","init","init","init","init","init","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","quorum_channel","quorum_channel","quorum_channel","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisRun","VIDNetwork","ViewSyncNetwork","__clone_box","borrow","borrow_mut","clone","clone_into","config","da_channel","delay_duration","delay_duration","delay_duration","delay_duration","delayed_tasks","delayed_tasks","delayed_tasks","delayed_tasks","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","layout_raw","message_cache","message_cache","message_cache","message_cache","networks","networks","networks","networks","pointer_metadata","primary_down","primary_down","primary_down","primary_down","primary_fail_counter","primary_fail_counter","primary_fail_counter","primary_fail_counter","quorum_channel","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"orchestrator_combined"],[3,"orchestrator_combined::infra"],[139,"orchestrator_combined::types"],[201,"dyn_clone::sealed"],[202,"clap_builder::builder::command"],[203,"core::clone"],[204,"hotshot_types::traits::node_implementation"],[205,"rkyv::with"],[206,"core::result"],[207,"core::fmt"],[208,"core::fmt"],[209,"clap_builder"],[210,"hotshot_orchestrator::config"],[211,"hotshot_example_types::block_types"],[212,"hotshot_example_types::block_types"],[213,"hotshot_types::message"],[214,"hotshot_types::traits::network"],[215,"hotshot::traits::networking::push_cdn_network"],[216,"hotshot::traits::networking::libp2p_network"],[217,"hotshot::traits::networking::combined_network"],[218,"clap_builder::util::id"],[219,"core::option"],[220,"core::net::socket_addr"],[221,"core::future::future"],[222,"alloc::boxed"],[223,"core::pin"],[224,"core::alloc::layout"],[225,"core::alloc::layout"],[226,"url"],[227,"hotshot::types::handle"],[228,"alloc::vec"],[229,"hotshot_example_types::storage_types"],[230,"hotshot_types::traits::node_implementation"],[231,"serde::de"],[232,"core::hash"],[233,"core::marker"],[234,"core::hash"]],"d":["general infra used for this example","","types used for this example","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","","","","","","","","","","","","","","","Helper function to calculate the nuymber of transactions …","","","","","","","The underlying configuration","the network configuration","the network configuration","The configuration file to be used for this run","The configuration file to be used for this run","The DA channel","data availability channel","data availability channel","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the config for this run","","","","Returns the da network for this run","","","","Returns the quorum network for this run","","","","","","","","","","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","","","","","","The quorum channel","quorum channel","quorum channel","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","convenience type alias","dummy struct so we can choose types","convenience type alias","convenience type alias","convenience type alias","convenience type alias","","","","","","the network configuration","data availability channel","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","quorum channel","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,6,9,9,9,19,28,29,6,9,19,28,29,6,9,0,6,9,6,9,9,9,19,28,29,6,9,19,28,29,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,6,9,19,28,29,6,9,9,9,17,19,28,29,17,19,28,29,17,19,28,29,9,19,28,29,6,9,17,19,28,29,17,19,28,29,6,9,19,28,29,6,9,0,0,19,28,29,6,9,19,28,29,0,17,0,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,9,9,6,19,28,29,6,9,0,0,0,0,0,0,55,55,55,55,55,63,63,64,65,66,67,64,65,66,67,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,64,65,66,67,64,65,66,67,55,64,65,66,67,64,65,66,67,63,55,55,55,55,55,55],"f":"`{{}b}```````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0````````{{}Ab}{jc{}}000000000{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Ah}Aj{AlA`}}{{AbAh}Aj}{cc{}}0000{An{{Af{AbB`}}}}0{BbBd}{{{Bf{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{Bbe{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}}{{{Bf{c}}}{{D`{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}{{Db{{Cl{c}}}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}{{Dd{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}3210{{}{{Dh{Df}}}}{{}j}0000{{Bd{Dh{Dj}}}{{E`{{Dn{Dl}}}}}}000{Bb{{E`{{Dn{Dl}}}}}}{ce{}{}}0000{{}{{Af{EbEd}}}}0000{EfBd}{Ehb}{{}}0000```{{}{{El{BdEj}}}}{{Bb{En{ci}}{F`{Bj}}hh}{{E`{{Dn{Dl}}}}}{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}{{Cn{{Cl{c}}}}}{{Fj{c}{{Fb{e}}{Fd{g}}{Ff{{Fh{c}}}}}}}}{{{l{c}}}bA`}77{c{{Af{e}}}{}{}}000000000{cFl{}}0000{{AbAn}{{Af{bB`}}}}0`:::::``````{{cd}b{}};;{FnFn}{{ce}b{}{}}``````````{jc{}}0{c{{Af{Fn}}}G`}{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}{jb}{{FnFn}Gb}{{ce}Gb{}{}}000{{FnAh}Aj}{cc{}}{{ce}h{GdGf}Gh}{{Fnc}bGj}{{}j}{ce{}{}}{{}{{Af{EbEd}}}}````````{{}}`````````{{Fnc}AfGl}3{c{{Af{e}}}{}{}}0{cFl{}}5","c":[],"p":[[1,"unit"],[5,"Private",201],[5,"Command",202],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",203],[10,"NodeType",204],[5,"ConfigArgs",3],[5,"With",205],[6,"Result",206],[5,"Formatter",207],[8,"Result",207],[10,"Debug",207],[5,"ArgMatches",208],[8,"Error",209],[10,"RunDA",3],[5,"NetworkConfig",210],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",211],[17,"BlockPayload"],[5,"TestBlockPayload",211],[17,"BlockHeader"],[5,"TestBlockHeader",211],[17,"InstanceState"],[5,"TestInstanceState",212],[5,"Libp2pDARun",3],[5,"CombinedDARun",3],[5,"Message",213],[10,"ConnectedNetwork",214],[5,"PushCdnNetwork",215],[5,"Libp2pNetwork",216],[5,"CombinedNetworks",217],[5,"Id",218],[6,"Option",219],[6,"SocketAddr",220],[10,"Future",221],[5,"Box",222],[5,"Pin",223],[5,"Layout",224],[5,"LayoutError",224],[1,"str"],[5,"ValidatorArgs",225],[5,"Url",226],[1,"tuple"],[5,"SystemContextHandle",227],[5,"Vec",228],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",229],[10,"NodeImplementation",204],[5,"TypeId",230],[5,"NodeImpl",139],[10,"Deserializer",231],[1,"bool"],[10,"Hash",232],[10,"Sized",233],[10,"BuildHasher",232],[10,"Hasher",232],[10,"Serializer",234],[8,"ThisRun",139],[8,"DANetwork",139],[8,"VIDNetwork",139],[8,"QuorumNetwork",139],[8,"ViewSyncNetwork",139]],"b":[]}],\
["validator_combined",{"doc":"A validator using both the web server and libp2p","t":"CHCFFFFFKNNNNNNNNNNNNNNHNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNNNNNNNMNNNNNNNNNNNNNNHHNNNNNOOOHNHNNNNNNNNNNNNNNNNNNNONNNNNIFIIIINNNNNOOOOOOOOOONNNNNNNNNNNNNNNNNOOOOOOOONOOOOOOOOONNNNNN","n":["infra","main","types","CombinedDARun","ConfigArgs","Libp2pDARun","OrchestratorArgs","PushCdnDaRun","RunDA","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config_file","da_channel","da_channel","da_channel","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","get_config","get_config","get_config","get_config","get_da_channel","get_da_channel","get_da_channel","get_da_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","group_id","init","init","init","init","init","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","quorum_channel","quorum_channel","quorum_channel","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisRun","VIDNetwork","ViewSyncNetwork","__clone_box","borrow","borrow_mut","clone","clone_into","config","da_channel","delay_duration","delay_duration","delay_duration","delay_duration","delayed_tasks","delayed_tasks","delayed_tasks","delayed_tasks","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","layout_raw","message_cache","message_cache","message_cache","message_cache","networks","networks","networks","networks","pointer_metadata","primary_down","primary_down","primary_down","primary_down","primary_fail_counter","primary_fail_counter","primary_fail_counter","primary_fail_counter","quorum_channel","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"validator_combined"],[3,"validator_combined::infra"],[139,"validator_combined::types"],[201,"dyn_clone::sealed"],[202,"clap_builder::builder::command"],[203,"core::clone"],[204,"hotshot_types::traits::node_implementation"],[205,"rkyv::with"],[206,"core::result"],[207,"core::fmt"],[208,"core::fmt"],[209,"clap_builder"],[210,"hotshot_orchestrator::config"],[211,"hotshot_example_types::block_types"],[212,"hotshot_example_types::block_types"],[213,"hotshot_types::message"],[214,"hotshot_types::traits::network"],[215,"hotshot::traits::networking::push_cdn_network"],[216,"hotshot::traits::networking::libp2p_network"],[217,"hotshot::traits::networking::combined_network"],[218,"clap_builder::util::id"],[219,"core::option"],[220,"core::net::socket_addr"],[221,"core::future::future"],[222,"alloc::boxed"],[223,"core::pin"],[224,"core::alloc::layout"],[225,"core::alloc::layout"],[226,"url"],[227,"hotshot::types::handle"],[228,"alloc::vec"],[229,"hotshot_example_types::storage_types"],[230,"hotshot_types::traits::node_implementation"],[231,"serde::de"],[232,"core::hash"],[233,"core::marker"],[234,"core::hash"]],"d":["general infra used for this example","","types used for this example","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","","","","","","","","","","","","","","","Helper function to calculate the nuymber of transactions …","","","","","","","The underlying configuration","the network configuration","the network configuration","The configuration file to be used for this run","The configuration file to be used for this run","The DA channel","data availability channel","data availability channel","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the config for this run","","","","Returns the da network for this run","","","","Returns the quorum network for this run","","","","","","","","","","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","","","","","","The quorum channel","quorum channel","quorum channel","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","convenience type alias","dummy struct so we can choose types","convenience type alias","convenience type alias","convenience type alias","convenience type alias","","","","","","the network configuration","data availability channel","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","quorum channel","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,6,9,9,9,19,28,29,6,9,19,28,29,6,9,0,6,9,6,9,9,9,19,28,29,6,9,19,28,29,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,6,9,19,28,29,6,9,9,9,17,19,28,29,17,19,28,29,17,19,28,29,9,19,28,29,6,9,17,19,28,29,17,19,28,29,6,9,19,28,29,6,9,0,0,19,28,29,6,9,19,28,29,0,17,0,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,9,9,6,19,28,29,6,9,0,0,0,0,0,0,55,55,55,55,55,63,63,64,65,66,67,64,65,66,67,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,64,65,66,67,64,65,66,67,55,64,65,66,67,64,65,66,67,63,55,55,55,55,55,55],"f":"`{{}b}```````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0````````{{}Ab}{jc{}}000000000{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Ah}Aj{AlA`}}{{AbAh}Aj}{cc{}}0000{An{{Af{AbB`}}}}0{BbBd}{{{Bf{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{Bbe{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}}{{{Bf{c}}}{{D`{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}{{Db{{Cl{c}}}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}{{Dd{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}3210{{}{{Dh{Df}}}}{{}j}0000{{Bd{Dh{Dj}}}{{E`{{Dn{Dl}}}}}}000{Bb{{E`{{Dn{Dl}}}}}}{ce{}{}}0000{{}{{Af{EbEd}}}}0000{EfBd}{Ehb}{{}}0000```{{}{{El{BdEj}}}}{{Bb{En{ci}}{F`{Bj}}hh}{{E`{{Dn{Dl}}}}}{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}{{Cn{{Cl{c}}}}}{{Fj{c}{{Fb{e}}{Fd{g}}{Ff{{Fh{c}}}}}}}}{{{l{c}}}bA`}77{c{{Af{e}}}{}{}}000000000{cFl{}}0000{{AbAn}{{Af{bB`}}}}0`:::::``````{{cd}b{}};;{FnFn}{{ce}b{}{}}``````````{jc{}}0{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}{c{{Af{Fn}}}G`}{jb}{{FnFn}Gb}{{ce}Gb{}{}}000{{FnAh}Aj}{cc{}}{{ce}h{GdGf}Gh}{{Fnc}bGj}{{}j}{ce{}{}}{{}{{Af{EbEd}}}}````````{{}}`````````{{Fnc}AfGl}3{c{{Af{e}}}{}{}}0{cFl{}}5","c":[],"p":[[1,"unit"],[5,"Private",201],[5,"Command",202],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",203],[10,"NodeType",204],[5,"ConfigArgs",3],[5,"With",205],[6,"Result",206],[5,"Formatter",207],[8,"Result",207],[10,"Debug",207],[5,"ArgMatches",208],[8,"Error",209],[10,"RunDA",3],[5,"NetworkConfig",210],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",211],[17,"BlockPayload"],[5,"TestBlockPayload",211],[17,"BlockHeader"],[5,"TestBlockHeader",211],[17,"InstanceState"],[5,"TestInstanceState",212],[5,"Libp2pDARun",3],[5,"CombinedDARun",3],[5,"Message",213],[10,"ConnectedNetwork",214],[5,"PushCdnNetwork",215],[5,"Libp2pNetwork",216],[5,"CombinedNetworks",217],[5,"Id",218],[6,"Option",219],[6,"SocketAddr",220],[10,"Future",221],[5,"Box",222],[5,"Pin",223],[5,"Layout",224],[5,"LayoutError",224],[1,"str"],[5,"ValidatorArgs",225],[5,"Url",226],[1,"tuple"],[5,"SystemContextHandle",227],[5,"Vec",228],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",229],[10,"NodeImplementation",204],[5,"TypeId",230],[5,"NodeImpl",139],[10,"Deserializer",231],[1,"bool"],[10,"Hash",232],[10,"Sized",233],[10,"BuildHasher",232],[10,"Hasher",232],[10,"Serializer",234],[8,"ThisRun",139],[8,"DANetwork",139],[8,"VIDNetwork",139],[8,"QuorumNetwork",139],[8,"ViewSyncNetwork",139]],"b":[]}],\
["validator_libp2p",{"doc":"A validator using libp2p","t":"CHCFFFFFKNNNNNNNNNNNNNNHNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNNNNNNNMNNNNNNNNNNNNNNHHNNNNNOOOHNHNNNNNNNNNNNNNNNNNNNONNNNNIFIINNNNNOONNNNNNNNNNNNNNNOONNNONNNNNN","n":["infra","main","types","CombinedDARun","ConfigArgs","Libp2pDARun","OrchestratorArgs","PushCdnDaRun","RunDA","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config_file","da_channel","da_channel","da_channel","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","get_config","get_config","get_config","get_config","get_da_channel","get_da_channel","get_da_channel","get_da_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","group_id","init","init","init","init","init","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","quorum_channel","quorum_channel","quorum_channel","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisRun","__clone_box","borrow","borrow_mut","clone","clone_into","config","da_channel","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","inner","inner","into","layout_raw","pointer_metadata","quorum_channel","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"validator_libp2p"],[3,"validator_libp2p::infra"],[139,"validator_libp2p::types"],[177,"dyn_clone::sealed"],[178,"clap_builder::builder::command"],[179,"core::clone"],[180,"hotshot_types::traits::node_implementation"],[181,"rkyv::with"],[182,"core::result"],[183,"core::fmt"],[184,"core::fmt"],[185,"clap_builder"],[186,"hotshot_orchestrator::config"],[187,"hotshot_example_types::block_types"],[188,"hotshot_example_types::block_types"],[189,"hotshot_types::message"],[190,"hotshot_types::traits::network"],[191,"hotshot::traits::networking::push_cdn_network"],[192,"hotshot::traits::networking::libp2p_network"],[193,"hotshot::traits::networking::combined_network"],[194,"clap_builder::util::id"],[195,"core::option"],[196,"core::net::socket_addr"],[197,"core::future::future"],[198,"alloc::boxed"],[199,"core::pin"],[200,"core::alloc::layout"],[201,"core::alloc::layout"],[202,"url"],[203,"hotshot::types::handle"],[204,"alloc::vec"],[205,"hotshot_example_types::storage_types"],[206,"hotshot_types::traits::node_implementation"],[207,"serde::de"],[208,"core::hash"],[209,"core::marker"],[210,"core::hash"]],"d":["general infra used for this example","","types used for this example","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","","","","","","","","","","","","","","","Helper function to calculate the nuymber of transactions …","","","","","","","The underlying configuration","the network configuration","the network configuration","The configuration file to be used for this run","The configuration file to be used for this run","The DA channel","data availability channel","data availability channel","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the config for this run","","","","Returns the da network for this run","","","","Returns the quorum network for this run","","","","","","","","","","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","","","","","","The quorum channel","quorum channel","quorum channel","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","convenience type alias","dummy struct so we can choose types","convenience type alias","convenience type alias","","","","","","the network configuration","data availability channel","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","quorum channel","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,6,9,9,9,19,28,29,6,9,19,28,29,6,9,0,6,9,6,9,9,9,19,28,29,6,9,19,28,29,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,6,9,19,28,29,6,9,9,9,17,19,28,29,17,19,28,29,17,19,28,29,9,19,28,29,6,9,17,19,28,29,17,19,28,29,6,9,19,28,29,6,9,0,0,19,28,29,6,9,19,28,29,0,17,0,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,9,9,6,19,28,29,6,9,0,0,0,0,55,55,55,55,55,63,63,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,64,65,55,55,55,63,55,55,55,55,55,55],"f":"`{{}b}```````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0````````{{}Ab}{jc{}}000000000{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Ah}Aj{AlA`}}{{AbAh}Aj}{cc{}}0000{An{{Af{AbB`}}}}0{BbBd}{{{Bf{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{Bbe{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}}{{{Bf{c}}}{{D`{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}{{Db{{Cl{c}}}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}{{Dd{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}3210{{}{{Dh{Df}}}}{{}j}0000{{Bd{Dh{Dj}}}{{E`{{Dn{Dl}}}}}}000{Bb{{E`{{Dn{Dl}}}}}}{ce{}{}}0000{{}{{Af{EbEd}}}}0000{EfBd}{Ehb}{{}}0000```{{}{{El{BdEj}}}}{{Bb{En{ci}}{F`{Bj}}hh}{{E`{{Dn{Dl}}}}}{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}{{Cn{{Cl{c}}}}}{{Fj{c}{{Fb{e}}{Fd{g}}{Ff{{Fh{c}}}}}}}}{{{l{c}}}bA`}77{c{{Af{e}}}{}{}}000000000{cFl{}}0000{{AbAn}{{Af{bB`}}}}0`:::::````{{cd}b{}};;{FnFn}{{ce}b{}{}}``{jc{}}0{c{{Af{Fn}}}G`}{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}{jb}{{FnFn}Gb}{{ce}Gb{}{}}000{{FnAh}Aj}{cc{}}{{ce}h{GdGf}Gh}{{Fnc}bGj}{{}j}``{ce{}{}}{{}{{Af{EbEd}}}}{{}}`{{Fnc}AfGl}3{c{{Af{e}}}{}{}}0{cFl{}}5","c":[],"p":[[1,"unit"],[5,"Private",177],[5,"Command",178],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",179],[10,"NodeType",180],[5,"ConfigArgs",3],[5,"With",181],[6,"Result",182],[5,"Formatter",183],[8,"Result",183],[10,"Debug",183],[5,"ArgMatches",184],[8,"Error",185],[10,"RunDA",3],[5,"NetworkConfig",186],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",187],[17,"BlockPayload"],[5,"TestBlockPayload",187],[17,"BlockHeader"],[5,"TestBlockHeader",187],[17,"InstanceState"],[5,"TestInstanceState",188],[5,"Libp2pDARun",3],[5,"CombinedDARun",3],[5,"Message",189],[10,"ConnectedNetwork",190],[5,"PushCdnNetwork",191],[5,"Libp2pNetwork",192],[5,"CombinedNetworks",193],[5,"Id",194],[6,"Option",195],[6,"SocketAddr",196],[10,"Future",197],[5,"Box",198],[5,"Pin",199],[5,"Layout",200],[5,"LayoutError",200],[1,"str"],[5,"ValidatorArgs",201],[5,"Url",202],[1,"tuple"],[5,"SystemContextHandle",203],[5,"Vec",204],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",205],[10,"NodeImplementation",180],[5,"TypeId",206],[5,"NodeImpl",139],[10,"Deserializer",207],[1,"bool"],[10,"Hash",208],[10,"Sized",209],[10,"BuildHasher",208],[10,"Hasher",208],[10,"Serializer",210],[8,"ThisRun",139],[8,"DANetwork",139],[8,"QuorumNetwork",139]],"b":[]}],\
["validator_push_cdn",{"doc":"A validator using the web server","t":"CHCFFFFFKNNNNNNNNNNNNNNHNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNNNNNNNMNNNNNNNNNNNNNNHHNNNNNOOOHNHNNNNNNNNNNNNNNNNNNNONNNNNIFIIIINNNOOOONNOONNNNNNNNNNNNNNNOOOONNONNNNNN","n":["infra","main","types","CombinedDARun","ConfigArgs","Libp2pDARun","OrchestratorArgs","PushCdnDaRun","RunDA","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config_file","da_channel","da_channel","da_channel","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","get_config","get_config","get_config","get_config","get_da_channel","get_da_channel","get_da_channel","get_da_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","get_quorum_channel","group_id","init","init","init","init","init","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","quorum_channel","quorum_channel","quorum_channel","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","DANetwork","NodeImpl","QuorumNetwork","ThisRun","VIDNetwork","ViewSyncNetwork","__clone_box","borrow","borrow_mut","client","client","client","client","clone","clone_into","config","da_channel","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","from","get_hash","hash","init","into","is_paused","is_paused","is_paused","is_paused","layout_raw","pointer_metadata","quorum_channel","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"validator_push_cdn"],[3,"validator_push_cdn::infra"],[139,"validator_push_cdn::types"],[184,"dyn_clone::sealed"],[185,"clap_builder::builder::command"],[186,"core::clone"],[187,"hotshot_types::traits::node_implementation"],[188,"rkyv::with"],[189,"core::result"],[190,"core::fmt"],[191,"core::fmt"],[192,"clap_builder"],[193,"hotshot_orchestrator::config"],[194,"hotshot_example_types::block_types"],[195,"hotshot_example_types::block_types"],[196,"hotshot_types::message"],[197,"hotshot_types::traits::network"],[198,"hotshot::traits::networking::push_cdn_network"],[199,"hotshot::traits::networking::libp2p_network"],[200,"hotshot::traits::networking::combined_network"],[201,"clap_builder::util::id"],[202,"core::option"],[203,"core::net::socket_addr"],[204,"core::future::future"],[205,"alloc::boxed"],[206,"core::pin"],[207,"core::alloc::layout"],[208,"core::alloc::layout"],[209,"url"],[210,"hotshot::types::handle"],[211,"alloc::vec"],[212,"hotshot_example_types::storage_types"],[213,"hotshot_types::traits::node_implementation"],[214,"serde::de"],[215,"core::hash"],[216,"core::marker"],[217,"core::hash"]],"d":["general infra used for this example","","types used for this example","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","","","","","","","","","","","","","","","Helper function to calculate the nuymber of transactions …","","","","","","","The underlying configuration","the network configuration","the network configuration","The configuration file to be used for this run","The configuration file to be used for this run","The DA channel","data availability channel","data availability channel","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the config for this run","","","","Returns the da network for this run","","","","Returns the quorum network for this run","","","","","","","","","","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","","","","","","The quorum channel","quorum channel","quorum channel","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","Convenience type alias","Convenience type alias","Convenience type alias","Convenience type alias","Convenience type alias","","","","","","","","","","The underlying configuration","The DA channel","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","The quorum channel","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,6,9,9,9,19,28,29,6,9,19,28,29,6,9,0,6,9,6,9,9,9,19,28,29,6,9,19,28,29,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,6,9,19,28,29,6,9,9,9,17,19,28,29,17,19,28,29,17,19,28,29,9,19,28,29,6,9,17,19,28,29,17,19,28,29,6,9,19,28,29,6,9,0,0,19,28,29,6,9,19,28,29,0,17,0,6,9,19,28,29,6,9,19,28,29,6,9,19,28,29,6,9,9,9,6,19,28,29,6,9,0,0,0,0,0,0,55,55,55,63,64,65,66,55,55,67,67,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,63,64,65,66,55,55,67,55,55,55,55,55,55],"f":"`{{}b}```````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0````````{{}Ab}{jc{}}000000000{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Ah}Aj{AlA`}}{{AbAh}Aj}{cc{}}0000{An{{Af{AbB`}}}}0{BbBd}{{{Bf{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}Bd{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{Bbe{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}}{{{Bf{c}}}{{D`{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Ch{c}}}{{Db{{Cl{c}}}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}{{{Cj{c}}}{{Dd{c}}}{{A`{}{{Bh{Bj}}{Bl{Bn}}{C`{Cb}}{Cd{Cf}}}}}}3210{{}{{Dh{Df}}}}{{}j}0000{{Bd{Dh{Dj}}}{{E`{{Dn{Dl}}}}}}000{Bb{{E`{{Dn{Dl}}}}}}{ce{}{}}0000{{}{{Af{EbEd}}}}0000{EfBd}{Ehb}{{}}0000```{{}{{El{BdEj}}}}{{Bb{En{ci}}{F`{Bj}}hh}{{E`{{Dn{Dl}}}}}{{A`{}{{Bh{Bj}}}}{A`{}{{Cd{Cf}}}}}{{Cn{{Cl{c}}}}}{{Cn{{Cl{c}}}}}{{Fj{c}{{Fb{e}}{Fd{g}}{Ff{{Fh{c}}}}}}}}{{{l{c}}}bA`}77{c{{Af{e}}}{}{}}000000000{cFl{}}0000{{AbAn}{{Af{bB`}}}}0`:::::``````{{cd}b{}};;````{FnFn}{{ce}b{}{}}``{jc{}}0{c{{Af{Fn}}}G`}{{ce}{{Af{{Ad{gi}}}}}{}{}{}{}}{jb}{{FnFn}Gb}{{ce}Gb{}{}}000{cc{}}{{ce}h{GdGf}Gh}{{Fnc}bGj}{{}j}{ce{}{}}````{{}{{Af{EbEd}}}}{{}}`{{Fnc}AfGl}3{c{{Af{e}}}{}{}}0{cFl{}}5","c":[],"p":[[1,"unit"],[5,"Private",184],[5,"Command",185],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",186],[10,"NodeType",187],[5,"ConfigArgs",3],[5,"With",188],[6,"Result",189],[5,"Formatter",190],[8,"Result",190],[10,"Debug",190],[5,"ArgMatches",191],[8,"Error",192],[10,"RunDA",3],[5,"NetworkConfig",193],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",194],[17,"BlockPayload"],[5,"TestBlockPayload",194],[17,"BlockHeader"],[5,"TestBlockHeader",194],[17,"InstanceState"],[5,"TestInstanceState",195],[5,"Libp2pDARun",3],[5,"CombinedDARun",3],[5,"Message",196],[10,"ConnectedNetwork",197],[5,"PushCdnNetwork",198],[5,"Libp2pNetwork",199],[5,"CombinedNetworks",200],[5,"Id",201],[6,"Option",202],[6,"SocketAddr",203],[10,"Future",204],[5,"Box",205],[5,"Pin",206],[5,"Layout",207],[5,"LayoutError",207],[1,"str"],[5,"ValidatorArgs",208],[5,"Url",209],[1,"tuple"],[5,"SystemContextHandle",210],[5,"Vec",211],[17,"QuorumNetwork"],[17,"CommitteeNetwork"],[17,"Storage"],[5,"TestStorage",212],[10,"NodeImplementation",187],[5,"TypeId",213],[5,"NodeImpl",139],[10,"Deserializer",214],[1,"bool"],[10,"Hash",215],[10,"Sized",216],[10,"BuildHasher",215],[10,"Hasher",215],[10,"Serializer",217],[8,"DANetwork",139],[8,"VIDNetwork",139],[8,"QuorumNetwork",139],[8,"ViewSyncNetwork",139],[8,"ThisRun",139]],"b":[]}],\
["whitelist_push_cdn",{"doc":"The whitelist is an adaptor that is able to update the …","t":"FNNNNNNNNNONNNNNNNNNOHONNNNNNN","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","deserialize","discovery_endpoint","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","layout_raw","local_discovery","main","orchestrator_url","pointer_metadata","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"whitelist_push_cdn"],[30,"clap_builder::builder::command"],[31,"rkyv::with"],[32,"core::result"],[33,"core::fmt"],[34,"core::fmt"],[35,"clap_builder"],[36,"clap_builder::util::id"],[37,"core::option"],[38,"core::alloc::layout"],[39,"core::alloc::layout"],[40,"core::any"]],"d":["The main component of the push CDN.","","","","","","","","","","The discovery client endpoint (including scheme) to …","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Whether or not to use the local discovery client","","The URL the orchestrator is running on. This should be …","","","","","","",""],"i":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6],"f":"`{bb}0{ce{}{}}0{{}b}0{dc{}}0{{ce}{{h{{f{gi}}}}}{}{}{}{}}`{dj}{{ln}A`}{cc{}}{Ab{{h{lAd}}}}0{{}{{Ah{Af}}}}{{}d}9{{}{{h{AjAl}}}}`{{}{{An{j}}}}`{{}}{c{{h{e}}}{}{}}0{cB`{}}{{lAb}{{h{jAd}}}}0?","c":[],"p":[[5,"Command",30],[1,"usize"],[5,"With",31],[6,"Result",32],[1,"unit"],[5,"Args",0],[5,"Formatter",33],[8,"Result",33],[5,"ArgMatches",34],[8,"Error",35],[5,"Id",36],[6,"Option",37],[5,"Layout",38],[5,"LayoutError",38],[8,"Result",39],[5,"TypeId",40]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);

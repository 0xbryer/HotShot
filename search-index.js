var searchIndex = JSON.parse('{\
"phaselock":{"doc":"Provides a generic rust implementation of the <code>PhaseLock</code> …","t":[13,13,13,13,13,13,17,17,13,13,13,13,3,3,4,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,12,11,11,11,11,12,0,12,12,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,16,16,16,16,16,8,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,3,13,13,3,13,13,13,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,6,3,6,3,4,3,13,13,13,13,13,13,3,3,3,12,12,12,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,8,6,13,13,13,16,16,13,13,13,13,13,13,4,16,8,13,13,8,13,13,13,13,13,8,16,16,8,16,8,16,4,16,13,10,10,11,11,11,11,11,11,11,10,10,11,11,10,0,11,11,11,11,10,10,10,10,10,10,10,10,10,0,10,10,10,10,11,11,11,11,11,10,10,10,10,10,10,10,11,10,11,11,11,11,11,11,11,11,10,11,11,12,12,12,12,12,12,12,12,12,12,12,8,16,16,16,3,16,16,11,11,11,10,11,10,11,10,11,10,11,11,10,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,13,13,13,3,13,13,13,3,4,13,13,13,13,13,13,13,13,4,13,3,13,13,4,3,3,13,13,3,13,13,13,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,12,3,3,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BadBlock","BadOrForgedQC","Continue","FailedToAssembleQC","FailedToBroadcast","FailedToMessageLeader","H_256","H_512","InconsistentBlock","InvalidState","ItemNotFound","NetworkFault","PhaseLock","PhaseLockConfig","PhaseLockError","PhaseLockInner","PrivKey","PubKey","StorageError","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","committee","data","demos","deserialize","documentation","eq","extends_from","fmt","fmt","fmt","from","from","from","from","from","from_secret_key_set_escape_hatch","get_state","hash","init","into","into","into","into","into","known_nodes","max_transactions","ne","new","next_view","next_view_timeout","nonce","partial_cmp","partial_sign","publish_transaction_async","round_start_delay","run_round","safe_node","serialize","spawn_networking_tasks","start_delay","state_machine","threshold","timeout_ratio","to_owned","to_owned","to_owned","to_owned","total_nodes","traits","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","types","utility","vzip","vzip","vzip","vzip","vzip","bad_qc","context","err","hash","source","source","source","source","stage","stage","stage","stage","stage","stage","DynamicCommittee","Input","Output","Proof","PublicKey","SecretKey","Vrf","borrow","borrow_mut","default","evaluate","evaluate","from","get_leader","get_vote_count","get_votes","into","make_vote_token","new","prove","prove","try_from","try_into","type_id","verify","verify","vzip","BlockHash","Commit","Decide","Leaf","None","PreCommit","Prepare","QuorumCertificate","Stage","VecQuorumCertificate","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","create_hash","default","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_array","hash","hash","into","into","into","into","into","item","ne","ne","ne","new","parent","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_vec","to_vec_cert","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","dentry","Account","Addition","Balance","DEntryBlock","DEntryError","DEntryNode","InconsistentTransaction","InsufficentBalance","NoSuchInputAccount","NoSuchOutputAccount","PreviousStateMismatch","ReusedNonce","State","Subtraction","Transaction","account","account","add","add_transaction_raw","amount","amount","append","as_error_source","as_fail","backtrace","balances","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","description","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash_bytes","hash_transaction","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","new","next_block","nonce","nonces","on_commit","previous_block","serialize","serialize","serialize","serialize","serialize","source","sub","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_block","validate_independence","vzip","vzip","vzip","vzip","vzip","vzip","vzip","SequentialRound","borrow","borrow_mut","from","into","into_future","into_future","new","poll","try_from","try_into","try_poll","type_id","vzip","Block","Block","Block","BlockContents","BoxedFuture","ChannelSend","CouldNotDeliver","Err","Error","Error","ExecutorError","FailedToBindListener","FailedToDeserialize","FailedToSerialize","IdentityHandshake","ListenerSend","NetworkError","Networking","NetworkingImplementation","NoSocketsError","NoSuchNode","NodeImplementation","None","Other","ShutDown","SocketDecodeError","Some","State","State","State","StatefulHandler","StatefulHandler","Storage","Storage","StorageResult","Transaction","WError","add_transaction_raw","append","as_error_source","as_fail","backtrace","borrow","borrow","borrow_mut","borrow_mut","broadcast_message","broadcast_queue","cause","description","direct_queue","election","fmt","fmt","from","from","get_block","get_leaf","get_leaf_by_block","get_qc","get_qc_for_view","get_state","hash","hash_bytes","hash_transaction","implementations","insert_block","insert_leaf","insert_qc","insert_state","into","into","is_err","is_none","is_some","known_nodes","message_node","next_block","next_broadcast","next_direct","notify","obj_clone","ok","on_commit","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","validate_block","vzip","vzip","inner","input","input","source","source","source","source","source","source","0","0","Election","SelectionThreshold","StakeTable","State","StaticCommittee","ValidatedVoteToken","VoteToken","borrow","borrow_mut","from","get_leader","get_leader","get_stake_table","get_stake_table","get_vote_count","get_vote_count","get_votes","get_votes","into","make_vote_token","make_vote_token","new","try_from","try_into","type_id","vzip","MasterMap","MemoryNetwork","MemoryStorage","Stateless","WNetwork","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","broadcast_message","broadcast_queue","broadcast_queue","clone","clone","clone","clone_into","clone_into","clone_into","connect_to","connection_table_size","default","default","direct_queue","direct_queue","fmt","fmt","fmt","fmt","from","from","from","from","from","generate_task","get_block","get_leaf","get_leaf_by_block","get_qc","get_qc_for_view","get_state","insert_block","insert_leaf","insert_qc","insert_state","into","into","into","into","into","known_nodes","known_nodes","message_node","message_node","new","new","new","new","next_broadcast","next_broadcast","next_direct","next_direct","notify","obj_clone","obj_clone","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","BadBlock","BadOrForgedQC","Commit","Commit","CommitVote","Continue","Decide","Decide","Decide","Error","Event","EventType","FailedToAssembleQC","FailedToBroadcast","FailedToMessageLeader","Follower","InconsistentBlock","InvalidState","ItemNotFound","Leader","Message","NetworkFault","NewView","NewView","NewView","PhaseLockError","PhaseLockHandle","PreCommit","PreCommit","PreCommitVote","Prepare","Prepare","PrepareVote","Propose","StorageError","SubmitTransaction","ViewTimeout","Vote","as_error_source","as_fail","availible_events","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","current_view","current_view","current_view","current_view","current_view","current_view","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","event","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_stage","get_state","get_state_sync","high_qc","id","into","into","into","into","into","into","into","into","into","into","into","justify","leaf","leaf_hash","leaf_hash","leaf_hash","leaf_hash","next_event","next_event_sync","pause","pause_sync","qc","qc","qc","run_one_round","run_one_round_sync","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","source","stage","stage","start","start_sync","state","storage","submit_transaction","submit_transaction_sync","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_next_event","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","block","block","error","state","view_number","view_number","view_number","view_number","0","0","0","0","0","0","0","0","0","bad_qc","context","err","hash","source","source","source","source","stage","stage","stage","stage","stage","stage","broadcast","waitqueue","0","BroadcastReceiver","BroadcastSender","Disconnected","RecvError","SendError","as_error_source","as_error_source","as_fail","as_fail","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone","clone","clone_async","clone_into","clone_into","clone_into","clone_into","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","handle_async","handle_sync","into","into","into","into","into_inner","ne","recv","recv_async","send","send_async","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_recv","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","WaitOnce","WaitQueue","borrow","borrow","borrow_mut","borrow_mut","default","from","from","into","into","new","new","push","put","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wait","wait","wait_for","wait_for"],"q":["phaselock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::PhaseLockError","","","","","","","","","","","","","","phaselock::committee","","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::demos","phaselock::demos::dentry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::state_machine","","","","","","","","","","","","","","phaselock::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::traits::NetworkError","","","","","","","","","phaselock::traits::StorageResult","","phaselock::traits::election","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::traits::implementations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::typesphaselock::types::EventType","","","","","","","","phaselock::types::Message","","","","","","","","","phaselock::types::PhaseLockError","","","","","","","","","","","","","","phaselock::utility","","phaselock::utility::broadcast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::utility::waitqueue","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A block failed verification","Bad or forged quorum certificate","Internal value used to drive the state machine","Failed to assemble a quorum certificate","Failed to broadcast a message on the network","Failed to Message the leader in the given stage","Length, in bytes, of a 256 bit hash","Length, in bytes, of a 512 bit hash","A block was not consistent with the existing state","Invalid state machine state","Item was not present in storage","Failure in networking layer","Thread safe, shared view of a <code>PhaseLock</code>","Holds configuration for a <code>PhaseLock</code>","Error type for <code>PhaseLock</code>","Holds the state needed to participate in <code>PhaseLock</code> …","Private key stub type","Public key type","Error accesing storage","","","","","","","","","","","","","","","","","","","","Contains structures and functions for committee election","Provides types useful for representing <code>PhaseLock</code>’s data …","Contains implementations of the <code>PhaseLock</code> traits used in …","","PhaseLock: A linear time, committee electing, BFT Protocol.","","Returns true if the proposed leaf extends from the given …","","","","","","","","","Temporary escape hatch to generate a <code>PubKey</code> from a …","Returns a copy of the state","","Initializes a new phaselock and does the work of setting …","","","","","","List of known node’s public keys, including own, sorted …","Maximum transactions per block","","Creates a new phaselock with the given configuration …","Sends out the next view message","Base duration for next-view timeout, in milliseconds","The portion of the KeyShare this node holds","","Uses this private key to produce a partial signature for …","Publishes a transaction to the network","The delay a leader inserts before starting pre-commit, in …","Runs a single round of consensus","Returns true if a proposed leaf satisfies the safety rule","","Spawns the background tasks for network processin for this …","Delay after init before starting consensus, in milliseconds","State machine representation of round logic","Nodes required to reach a decision","The exponential backoff ration for the next-view timeout","","","","","Total number of nodes in the network","Contains traits consumed by <code>PhaseLock</code>","","","","","","","","","","","","","","","","Contains types used by the crate","Contains general utility structures and methods","","","","","","The bad quorum certificate","Context","Underlying error","Hash of the missing item","The underlying network fault","The underlying network fault","The underlying crypto fault","Underlying network fault","The stage the failure occurred in","The stage the failure occurred in","The stage the failure occurred in","The stage the error occurred in","The stage the error occurred in","The stage the error occurred in","A structure for dynamic committee.","The input of VRF proof.","The output of VRF evaluation.","VRF signature.","VRF public key.","VRF secret key.","A trait for VRF proof, evaluation and verification.","","","","Computes the VRF output associated with a VRF proof.","Computes the VRF output for committee election.","","Determines the leader. Note: A leader doesn’t …","Returns the number of votes a validated token has.","Validates a vote token.","","Attempts to generate a vote token for self.","Creates a new dynamic committee.","Creates the VRF proof associated with a VRF secret key.","Signs the VRF signature.","","","","Verifies a VRF proof.","Verifies the VRF proof.","","Type used for representing hashes","Commit Phase","Decide Phase","A node in <code>PhaseLock</code>’s consensus-internal merkle tree.","Between rounds","PreCommit Phase","Prepare Phase","The type used for Quorum Certificates","Represents the stages of consensus","<code>QuorumCertificate</code> variant using a <code>Vec</code> rather than a …","","","","","","","","","","","","","","","","","","","","","","This concatenates the encoding of <code>blockhash</code>, <code>view</code>, and …","","","","","","","","","","","","","","","","","","","","","","Converts an array of the correct size directly into a …","Hashes the leaf with the hashing algorithm provided by the …","","","","","","","The block contained in this <code>Leaf</code>","","","","Creates a new leaf with the specified block and parent","The hash of the parent <code>Leaf</code>","","","","","","","","","","","Clones the contents of this <code>BlockHash</code> into a <code>Vec&lt;u8&gt;</code>","Converts this Quorum Certificate to a version using a <code>Vec</code> …","","","","","","","","","","","","","","","","Verifies a quorum certificate","","","","","","Double entry accounting demo","The account identifier type used by the demo","Records an increase in an account balance","The account balance type used by the demo","The block for the dentry demo","The error type for the dentry demo","The node implementation for the dentry demo","The subtraction and addition amounts for this transaction …","Tried to move more money than was in the account","No such input account exists","No such output account exists","Previous state commitment does not match","Nonce was reused","The state for the dentry demo","Records a reduction in an account balance","The transaction for the dentry demo","An account identifier","An account identifier","An increment to an account balance","","An account balance","An account balance","","","","","Key/value store of accounts and balances","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>DEntryNode</code>","","The nonce for a transaction, no two transactions can have …","Set of previously seen nonces","","Block state commitment","","","","","","","A decrement to an account balance","","","","","","","","Transaction vector","","","","","","","","","","","","","","","","","","","","","","","Ensures that this transaction is at least consistent with …","","","","","","","","Represents the round logic for sequential <code>PhaseLock</code>","","","","","","","Creates a new state machine","","","","","","","Block type for this consensus implementation","The type of block this state is associated with","Block type for this consensus implementation","Abstraction over the contents of a block","A boxed future trait object with a static lifetime","Channel error","Could not deliver a message to a specified recipient","An error occurred","The error type for this type of block","The error type for this particular type of ledger state","Error orginiating from within the executor","Failed to bind a listener socket","Failed to deserealize a message","Failed to serialize a message","Could not complete handshake","A Listener failed to send a message","Error type for networking","Networking type for this consensus implementation","Describes, generically, the behaviors a networking …","No sockets were open","Attempted to deliver a message to an unknown node","Node implementation aggregate trait","The item was not found","Generic error type for compatibility if needed","The underlying connection has been shut down","Failed to decode a socket specification","The item was located in storage","Abstraction over the state that blocks modify","State type for this consensus implementation","State type for this consensus implementation","Trait for a stateful event handler","Stateful call back handler for this consensus …","Abstraction over on disk persistence of node state;","Storage type for this consensus implementation","Result for a storage type","The type of the transitions we are applying","WebSockets specific error","Attempts to add a transaction, returning an Error if it …","Appends the given block to this state, returning an new …","","","","","","","","Broadcasts a message to the network","Moves out the entire queue of received broadcast messages, …","","","Moves out the entire queue of received direct messages to …","Sortition trait","","","","","Retrieves a block from storage, returning <code>None</code> if it could …","Retrieves a leaf by its hash","Retrieves a leaf by the hash of its block","Retrieves a Quorum Certificate from storage, by the hash …","Retrieves the Quorum Certificate associated with a …","Retrieves a <code>State</code>, indexed by the hash of the <code>Leaf</code> that …","Produces a hash for the contents of the block","Produces a hash for an arbitrary sequence of bytes","Produces a hash for a transaction","Module for publicly usable implementations of the traits","Inserts a block into storage","Inserts a leaf","Inserts a Quorum Certificate into the storage. Should …","Inserts a <code>State</code>, indexed by the hash of the <code>Leaf</code> that …","","","Returns true if the result is a <code>Err</code>","Returns true if the result is a <code>None</code>","Returns true if the result is a <code>Some</code>","Node’s currently known to the networking implementation","Sends a direct message to a specific node","Returns an empty, template next block given this current …","Provides a future for the next received broadcast","Provides a future for the next received direct message to …","The <code>PhaseLock</code> implementation will call this method, with …","Object safe clone","Converts to an option","Gets called to notify the persistence backend that this …","","","","","","","","","Returns true if and only if the provided block is valid …","","","Originating error","Input that was given","Input that was given","Originating bincode error","originating bincode error","Originating websockets error","Originating async_std error","Originating io error","originating io error","","","Describes how <code>PhaseLock</code> chooses committees and leaders","The threshold for membership selection.","Data structure describing the currently valid states","The state type this election implementation is bound to","Dummy implementation of <code>Election</code>","A type stated, validated membership proof","A membership proof","","","","Returns leader for the current view number, given the …","Index the vector of public keys with the current view …","Returns the table from the current committed state","Clone the static table","Returns the number of votes the validated vote token has","If its a validated token, it always has one vote","Validates a vote token and returns the number of seats …","Simply verify the signature and check the membership list","","Attempts to generate a vote token for self","Simply make the partial signature","Creates a new dummy elector","","","","","Shared state for in-memory mock networking.","In memory only network simulator.","In memory, ephemeral, storage for a <code>PhaseLock</code> instance","Dummy, do nothing implementation of <code>StatefulHandler</code>","Handle to the underlying networking implementation","","","","","","","","","","","","","","","","","","","","","Creates a connection to the given node.","Returns the size of the internal connection table","","","","","","","","","","","","","","Generates the background processing task","","","","","","","","","","","","","","","","","","","","Create a new, empty, <code>MasterMap</code>","Creates a new <code>MemoryNetwork</code> and hooks it up to the group …","Creates a new <code>WNetwork</code> preloaded with connections to the …","Creates a new, empty <code>MemoryStorage</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A block failed verification","Bad or forged quorum certificate","<code>Commit</code> qc from the leader","Contains the commit qc from the leader","A node’s vote on the commit stage","Internal value used to drive the state machine","Final decision","A new decision event was issued","Contains the decide qc from the leader","A view encountered an error and was interrupted","A status event emitted by a <code>PhaseLock</code> instance","The type and contents of a status event emitted by a …","Failed to assemble a quorum certificate","Failed to broadcast a message on the network","Failed to Message the leader in the given stage","This node is a follower for this view","A block was not consistent with the existing state","Invalid state machine state","Item was not present in storage","This node is the leader for this view","Enum representation of any message type","Failure in networking layer","Signals the start of a new view","A new view was started by this node","Signals start of a new view","Error type for <code>PhaseLock</code>","Event streaming handle for a <code>PhaseLock</code> instance running in …","Pre-commit qc from the leader","Contains the precommit qc from the leader","A node’s vote on the precommit stage","Prepare qc from the leader","Contains the prepare qc from the leader","A nodes vote on the prepare stage","A new block was proposed","Error accesing storage","Contains a transaction to be submitted","A view was canceled by a timeout interrupt","A nodes vote on the prepare field","","","Will pull all the currently available events out of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current view","The current view","The view this vote was cast for","The current view","The current view","the current view","","","","","","","","","The underlying event","","","","","","","","","","","","","","","","","","","","","","","Returns the stage this error happened in, if such …","Gets the current commited state of the <code>PhaseLock</code> instance","Gets the current commited state of the <code>PhaseLock</code> instance, …","The current high qc","Id of the voting nodes","","","","","","","","","","","","The justification qc for this view","The item being proposed","Hash of the item being voted on","Hash of the item being worked on","Hash of the thing being worked on","Hash of the thing we just decided on","Will return the next event in the queue","Syncronous version of <code>next_event</code>","Signals the underlying <code>PhaseLock</code> to pause","Synchronously signals the underlying <code>PhaseLock</code> to pause","The pre commit qc","The <code>Commit</code> qc","final qc for the round","Signals the underlying <code>PhaseLock</code> to run one round, if …","Synchronously signals the underlying <code>PhaseLock</code> to run one …","","","","","","","","The signature share associated with this vote","","The stage that this event originates from","The current stage","Signals to the underlying <code>PhaseLock</code> to unpause","Synchronously signals the underlying <code>PhaseLock</code> to unpause","The state this proposal results in","Provides a reference to the underlying storage for this …","Submits a transaction to the backing <code>PhaseLock</code> instance.","Sycronously sumbits a transaction to the backing <code>PhaseLock</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Will attempt to immediatly pull an event out of the queue","","","","","","","","","","","","The view number that this event originates from","","","","","","","","","","","","The block that was proposed","The list of blocks that were committed by this decision","The underlying error","The list of states that were committed by this decision","The view being started","The view that timed out","The current view number","The current view number","","","","","","","","","","The bad quorum certificate","Context","Underlying error","Hash of the missing item","The underlying network fault","The underlying network fault","The underlying crypto fault","Underlying network fault","The stage the failure occurred in","The stage the failure occurred in","The stage the failure occurred in","The stage the error occurred in","The stage the error occurred in","The stage the error occurred in","Provides an unbounded size broadcast async-aware queue","Provides types useful for waiting on certain values to …","","Broadcast queue receiver","Public interface for a broadcast queue sender","All senders were dropped and no messages are waiting in …","An error that may be emitted when attempting to wait for a …","An error that may be emitted when attempting to send a …","","","","","","","","","","","","","Creates a sender, receiver pair","","","","","Asynchronously clones this handle","","","","","Remove self from sender’s map","","","","","","","","","","","","Asynchronously creates a new handle","Synchronously creates a new handle","","","","","Consume the error, yielding the message that failed to …","","Synchronously receives a value","Asynchronously receives a value","Synchronously sends a value to all connected receivers","Asynchronously sends a value to all connected receivers","","","","","","","","","","","","","","","Returns a value, if one is available","","","","","","","","","A type that allows waiting on a single value that …","Allows the consumer to wait until the queue is full enough …","","","","","","","","","","Creates a new <code>WaitQueue</code>","Creates a new, empty <code>WaitOnce</code>","Insert a value into the queue","If the <code>WaitOnce</code> has any contents, replace them, otherwise …","","","","","","","","","Waits for the queue to be ready, then returns it","Waits for the <code>WaitOnce</code> to have any contents, then removes …","Waits with a filter, discarding elements that don’t meet …","Waits for the <code>WaitOnce</code> to have any contents, then applies …"],"i":[1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,1,2,3,4,5,6,2,3,4,5,6,3,4,5,6,3,4,5,6,3,0,0,0,3,0,3,6,3,4,5,2,3,4,5,6,3,6,3,6,2,3,4,5,6,5,5,3,6,6,5,3,3,4,6,5,6,6,3,6,5,0,5,5,3,4,5,6,5,0,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,0,0,2,3,4,5,6,7,8,9,10,11,12,13,14,11,12,7,13,15,16,0,17,17,17,17,17,0,18,18,18,17,18,18,18,18,18,18,18,18,17,18,18,18,18,17,18,18,0,19,19,0,19,19,19,0,0,0,20,21,22,23,19,20,21,22,23,19,20,21,22,23,19,20,21,22,23,19,20,0,20,21,22,23,19,20,22,23,19,20,21,22,23,19,20,21,22,23,19,20,20,20,21,20,21,22,23,19,20,21,22,23,20,21,21,21,22,23,19,20,21,22,23,19,20,20,22,21,22,23,19,20,21,22,23,19,20,21,22,23,19,20,22,21,22,23,19,20,0,0,0,0,0,0,0,24,24,24,24,24,24,0,0,0,25,26,27,28,25,26,29,24,24,24,29,25,26,24,27,29,28,30,25,26,24,27,29,28,30,24,25,26,27,29,28,30,25,26,27,29,28,30,28,30,24,25,26,27,29,28,25,26,27,29,28,25,26,24,24,27,29,28,30,25,26,24,27,29,28,30,25,26,27,29,28,28,28,28,25,26,24,27,29,28,30,25,26,27,29,28,30,29,27,29,29,28,25,26,27,29,28,24,27,25,26,27,29,28,30,24,28,25,26,24,27,29,28,30,25,26,24,27,29,28,30,25,26,24,27,29,28,30,29,27,25,26,24,27,29,28,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,32,33,34,0,0,35,35,36,37,33,35,35,35,35,35,35,0,32,0,35,35,0,36,35,35,35,36,0,32,34,0,32,0,32,0,37,35,37,33,35,35,35,36,35,36,35,38,38,35,35,38,0,35,35,36,35,39,39,39,39,39,39,37,37,37,0,39,39,39,39,36,35,36,36,36,38,38,33,38,38,34,38,36,33,35,35,36,35,36,35,36,35,33,36,35,40,41,42,43,44,45,46,41,47,48,49,0,50,50,50,0,50,50,51,51,51,50,51,50,51,50,51,50,51,51,50,51,51,51,51,51,51,0,0,0,0,0,52,53,54,55,56,52,53,54,55,56,54,55,54,55,54,55,56,54,55,56,55,55,53,56,54,55,52,53,54,55,52,53,54,55,56,55,56,56,56,56,56,56,56,56,56,56,52,53,54,55,56,54,55,54,55,52,54,55,56,54,55,54,55,53,54,55,54,55,56,52,53,54,55,56,52,53,54,55,56,52,53,54,55,56,52,53,54,55,56,1,1,0,57,57,1,0,58,57,58,0,0,1,1,1,58,1,1,1,58,0,1,0,58,57,0,0,0,57,57,0,57,57,58,1,57,58,0,1,1,59,1,59,1,60,58,57,61,62,63,64,65,66,59,1,60,58,57,61,62,63,64,65,66,1,59,60,58,57,61,62,63,64,65,66,59,60,58,57,61,62,63,64,65,66,61,62,63,64,65,66,1,57,61,62,63,64,65,66,60,1,1,60,58,57,61,62,63,64,65,66,59,1,60,58,57,61,62,63,64,65,66,1,59,59,62,63,59,1,60,58,57,61,62,63,64,65,66,61,62,63,64,65,66,59,59,59,59,64,65,66,59,59,57,61,62,63,64,65,66,63,1,60,63,59,59,62,59,59,59,59,60,58,57,61,62,63,64,65,66,1,59,1,60,58,57,61,62,63,64,65,66,59,1,60,58,57,61,62,63,64,65,66,59,59,1,60,58,57,61,62,63,64,65,66,60,59,1,60,58,57,61,62,63,64,65,66,67,68,69,68,70,71,72,73,74,75,76,77,78,79,80,81,82,7,8,9,10,11,12,13,14,11,12,7,13,15,16,0,0,83,0,0,84,0,0,83,84,83,84,85,86,83,84,85,86,83,84,0,85,86,83,84,85,85,86,83,84,85,83,84,86,83,83,84,84,85,86,83,84,86,86,85,86,83,84,83,83,85,85,86,86,85,86,83,84,83,84,85,86,83,84,85,86,83,84,85,85,86,83,84,85,86,83,84,0,0,87,88,87,88,88,87,88,87,88,87,88,87,88,87,88,87,88,87,88,87,88,87,88,87,88],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pubkey",3]],[[],["privkey",3]],[[],["phaselockconfig",3]],[[],["phaselock",3]],[[]],[[]],[[]],[[]],[[],["ordering",4]],null,null,null,[[],["result",4]],null,[[["pubkey",3]],["bool",15]],[[["leaf",3],["blockhash",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["u64",15],["secretkeyset",3]]],[[]],[[]],[[["secretkeyshare",3],["u64",15],["publickeyset",3],["phaselockconfig",3]]],[[]],[[]],[[]],[[]],[[]],null,null,[[["pubkey",3]],["bool",15]],[[["secretkeyshare",3],["u64",15],["publickeyset",3],["phaselockconfig",3]]],[[["u64",15],["option",4,["broadcastsender"]],["broadcastsender",3]]],null,null,[[],[["option",4,["ordering"]],["ordering",4]]],[[["u64",15],["blockhash",3],["stage",4]],["signatureshare",3]],[[]],null,[[["u64",15],["option",4,["broadcastsender"]],["broadcastsender",3]]],[[["quorumcertificate",3],["leaf",3]]],[[],["result",4]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15],["hashmap",3]],["pubkey",3]],[[],["u64",15]],[[["u64",15],["signatureshare",3],["blockhash",3],["hashmap",3],["pubkey",3]],["option",4]],[[]],[[["u64",15],["privkey",3],["blockhash",3],["hashmap",3]],[["option",4,["signatureshare"]],["signatureshare",3]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[],["bool",15]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["leaf",3]],[[],["quorumcertificate",3]],[[],["vecquorumcertificate",3]],[[],["stage",4]],[[],["blockhash",3]],[[]],[[]],[[]],[[]],[[]],[[["u64",15],["blockhash",3],["stage",4]],["blockhash",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["quorumcertificate",3]],["bool",15]],[[["vecquorumcertificate",3]],["bool",15]],[[["stage",4]],["bool",15]],[[["blockhash",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blockhash",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["quorumcertificate",3]],["bool",15]],[[["vecquorumcertificate",3]],["bool",15]],[[["blockhash",3]],["bool",15]],[[["blockhash",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],["vecquorumcertificate",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15],["publickeyset",3],["stage",4]],["bool",15]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],null,null,[[],["result",4]],[[],["error",8]],[[],["fail",8]],[[],[["option",4,["backtrace"]],["backtrace",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",8],["option",4,["error"]]]],[[],["subtraction",3]],[[],["addition",3]],[[],["transaction",3]],[[],["state",3]],[[],["dentryblock",3]],[[],["dentrynode",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dentryblock",3]],[[]],[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["subtraction",3]],["bool",15]],[[["addition",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["state",3]],["bool",15]],[[["dentryblock",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blockhash",3]],[[],["blockhash",3]],[[],["blockhash",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["subtraction",3]],["bool",15]],[[["addition",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["state",3]],["bool",15]],[[["dentryblock",3]],["bool",15]],[[]],[[]],null,null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["error",8],["option",4,["error"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15],["option",4,["broadcastsender"]],["phaselock",3],["broadcastsender",3]]],[[["pin",3],["context",3]],["poll",4]],[[],["result",4]],[[],["result",4]],[[["pin",3],["context",3]],["poll",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["error",8]],[[],["fail",8]],[[],[["option",4,["backtrace"]],["backtrace",3]]],[[]],[[]],[[]],[[]],[[],[["boxfuture",6,["result"]],["result",4,["networkerror"]]]],[[],[["result",4,["vec","networkerror"]],["boxfuture",6,["result"]]]],[[],[["error",8],["option",4,["error"]]]],[[],["str",15]],[[],[["result",4,["vec","networkerror"]],["boxfuture",6,["result"]]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["blockhash",3]],[["boxfuture",6,["storageresult"]],["storageresult",4]]],[[["blockhash",3]],[["boxfuture",6,["storageresult"]],["storageresult",4,["leaf"]]]],[[["blockhash",3]],[["storageresult",4,["leaf"]],["boxfuture",6,["storageresult"]]]],[[["blockhash",3]],[["boxfuture",6,["storageresult"]],["storageresult",4,["quorumcertificate"]]]],[[["u64",15]],[["boxfuture",6,["storageresult"]],["storageresult",4,["quorumcertificate"]]]],[[["blockhash",3]],[["storageresult",4],["boxfuture",6,["storageresult"]]]],[[],["blockhash",3]],[[],["blockhash",3]],[[],["blockhash",3]],null,[[["blockhash",3]],[["storageresult",4],["boxfuture",6,["storageresult"]]]],[[["leaf",3]],[["storageresult",4],["boxfuture",6,["storageresult"]]]],[[["quorumcertificate",3]],[["storageresult",4],["boxfuture",6,["storageresult"]]]],[[["blockhash",3]],[["storageresult",4],["boxfuture",6,["storageresult"]]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["vec",3,["pubkey"]],["boxfuture",6,["vec"]]]],[[["pubkey",3]],[["boxfuture",6,["result"]],["result",4,["networkerror"]]]],[[]],[[],[["boxfuture",6,["result"]],["result",4,["networkerror"]]]],[[],[["boxfuture",6,["result"]],["result",4,["networkerror"]]]],[[["vec",3],["vec",3]]],[[],[["box",3,["networkingimplementation"]],["networkingimplementation",8]]],[[],["option",4]],[[]],[[],[["error",8],["option",4,["error"]]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["u64",15]],["pubkey",3]],[[["u64",15]],["pubkey",3]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[["u64",15],["blockhash",3],["pubkey",3]],["option",4]],[[["u64",15],["blockhash",3],["pubkey",3]],["option",4]],[[]],[[["u64",15],["privkey",3],["blockhash",3]],["option",4]],[[["u64",15],["privkey",3],["blockhash",3]],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["networkerror"]],["boxfuture",6,["result"]]]],[[],[["boxfuture",6,["result"]],["result",4,["networkerror"]]]],[[],[["boxfuture",6,["result"]],["result",4,["vec","networkerror"]]]],[[],[["boxfuture",6,["result"]],["result",4,["vec","networkerror"]]]],[[],["memorynetwork",3]],[[],["wnetwork",3]],[[],["memorystorage",3]],[[]],[[]],[[]],[[["pubkey",3]]],[[]],[[]],[[]],[[],[["boxfuture",6,["result"]],["result",4,["vec","networkerror"]]]],[[],[["boxfuture",6,["result"]],["result",4,["vec","networkerror"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["sender",3]],[["option",4,["vec"]],["vec",3,["boxedfuture"]]]],[[["blockhash",3]],[["boxfuture",6,["storageresult"]],["storageresult",4]]],[[["blockhash",3]],[["storageresult",4,["leaf"]],["boxfuture",6,["storageresult"]]]],[[["blockhash",3]],[["boxfuture",6,["storageresult"]],["storageresult",4,["leaf"]]]],[[["blockhash",3]],[["boxfuture",6,["storageresult"]],["storageresult",4,["quorumcertificate"]]]],[[["u64",15]],[["boxfuture",6,["storageresult"]],["storageresult",4,["quorumcertificate"]]]],[[["blockhash",3]],[["storageresult",4],["boxfuture",6,["storageresult"]]]],[[["blockhash",3]],[["storageresult",4],["boxfuture",6,["storageresult"]]]],[[["leaf",3]],[["storageresult",4],["boxfuture",6,["storageresult"]]]],[[["quorumcertificate",3]],[["storageresult",4],["boxfuture",6,["storageresult"]]]],[[["blockhash",3]],[["storageresult",4],["boxfuture",6,["storageresult"]]]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["pubkey"]],["boxfuture",6,["vec"]]]],[[],[["vec",3,["pubkey"]],["boxfuture",6,["vec"]]]],[[["pubkey",3]],[["result",4,["networkerror"]],["boxfuture",6,["result"]]]],[[["pubkey",3]],[["boxfuture",6,["result"]],["result",4,["networkerror"]]]],[[],[["arc",3,["mastermap"]],["mastermap",3]]],[[["arc",3,["mastermap"]],["pubkey",3],["mastermap",3]],["memorynetwork",3]],[[["duration",3],["u16",15],["str",15],["pubkey",3],["option",4,["duration"]]]],[[]],[[],[["result",4,["networkerror"]],["boxfuture",6,["result"]]]],[[],[["result",4,["networkerror"]],["boxfuture",6,["result"]]]],[[],[["result",4,["networkerror"]],["boxfuture",6,["result"]]]],[[],[["result",4,["networkerror"]],["boxfuture",6,["result"]]]],[[["vec",3],["vec",3]]],[[],[["networkingimplementation",8],["box",3,["networkingimplementation"]]]],[[],[["networkingimplementation",8],["box",3,["networkingimplementation"]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["error",8]],[[],["fail",8]],[[],[["vec",3,["event"]],["phaselockerror",4],["result",4,["vec","phaselockerror"]]]],[[],[["option",4,["backtrace"]],["backtrace",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",8],["option",4,["error"]]]],[[]],[[],["event",3]],[[],["eventtype",4]],[[],["message",4]],[[],["newview",3]],[[],["prepare",3]],[[],["vote",3]],[[],["precommit",3]],[[],["commit",3]],[[],["decide",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["stage"]],["stage",4]]],[[]],[[],["arc",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[],[["phaselockerror",4],["result",4,["event","phaselockerror"]],["event",3]]],[[]],[[]],null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],[["error",8],["option",4,["error"]]]],null,null,[[]],[[]],null,[[]],[[]],[[],[["phaselockerror",4],["result",4,["phaselockerror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["option",4,["event"]],["phaselockerror",4],["result",4,["option","phaselockerror"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["error",8]],[[],["error",8]],[[],["fail",8]],[[],["fail",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["broadcastsender",3]],[[],["senderror",3]],[[],["recverror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["senderror",3]],["bool",15]],[[["recverror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[],["broadcastreceiver",3]],[[]],[[]],[[]],[[]],[[]],[[["senderror",3]],["bool",15]],[[],[["result",4,["recverror"]],["recverror",4]]],[[]],[[],[["result",4,["senderror"]],["senderror",3]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"PhaseLockError"],[3,"PhaseLockInner"],[3,"PubKey"],[3,"PrivKey"],[3,"PhaseLockConfig"],[3,"PhaseLock"],[13,"BadOrForgedQC"],[13,"InvalidState"],[13,"StorageError"],[13,"ItemNotFound"],[13,"FailedToMessageLeader"],[13,"FailedToBroadcast"],[13,"FailedToAssembleQC"],[13,"NetworkFault"],[13,"BadBlock"],[13,"InconsistentBlock"],[8,"Vrf"],[3,"DynamicCommittee"],[4,"Stage"],[3,"BlockHash"],[3,"Leaf"],[3,"QuorumCertificate"],[3,"VecQuorumCertificate"],[4,"DEntryError"],[3,"Subtraction"],[3,"Addition"],[3,"Transaction"],[3,"DEntryBlock"],[3,"State"],[3,"DEntryNode"],[3,"SequentialRound"],[8,"NodeImplementation"],[8,"State"],[8,"StatefulHandler"],[4,"NetworkError"],[4,"StorageResult"],[8,"BlockContents"],[8,"NetworkingImplementation"],[8,"Storage"],[13,"Other"],[13,"SocketDecodeError"],[13,"NoSocketsError"],[13,"FailedToSerialize"],[13,"FailedToDeserialize"],[13,"WError"],[13,"ExecutorError"],[13,"FailedToBindListener"],[13,"Some"],[13,"Err"],[8,"Election"],[3,"StaticCommittee"],[3,"MasterMap"],[3,"Stateless"],[3,"MemoryNetwork"],[3,"WNetwork"],[3,"MemoryStorage"],[4,"Message"],[4,"EventType"],[3,"PhaseLockHandle"],[3,"Event"],[3,"NewView"],[3,"Prepare"],[3,"Vote"],[3,"PreCommit"],[3,"Commit"],[3,"Decide"],[13,"Propose"],[13,"Decide"],[13,"Error"],[13,"NewView"],[13,"ViewTimeout"],[13,"Leader"],[13,"Follower"],[13,"NewView"],[13,"Prepare"],[13,"PrepareVote"],[13,"PreCommit"],[13,"PreCommitVote"],[13,"Commit"],[13,"CommitVote"],[13,"Decide"],[13,"SubmitTransaction"],[3,"SendError"],[4,"RecvError"],[3,"BroadcastReceiver"],[3,"BroadcastSender"],[3,"WaitQueue"],[3,"WaitOnce"]]},\
"threshold_crypto":{"doc":"A pairing-based threshold cryptosystem for collaborative …","tn":["0","0","0","Ciphertext","DecryptionShare","Fr","FrRepr","G1","G1Affine","G2","G2Affine","IntoFr","PEngine","PK_SIZE","PublicKey","PublicKeySet","PublicKeyShare","SIG_SIZE","SecretKey","SecretKeySet","SecretKeyShare","Signature","SignatureShare","add","add","add_assign","add_assign","add_assign","add_assign","add_assign_mixed","add_nocarry","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","batch_normalization","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","combine_signatures","decrypt","decrypt","decrypt_share","decrypt_share_no_verify","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div2","double","double","drop","empty","encrypt","encrypt_with_rng","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","final_exponentiation","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frobenius_map","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine","from_bytes","from_bytes","from_bytes","from_bytes","from_mut","from_mut","from_repr","hash","hash","hash","hash","hash","hash","hash","hash_g2","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_affine","into_affine","into_affine_unchecked","into_fr","into_fr","into_projective","into_repr","inverse","is_even","is_normalized","is_odd","is_zero","is_zero","is_zero","is_zero","legendre","miller_loop","mul","mul","mul","mul2","mul_assign","mul_assign","mul_assign","mul_assign","multiplicative_generator","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","negate","negate","negate","new","num_bits","one","one","one","pairing","pairing_with","parity","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","poly","pow","prepare","public_key","public_key","public_key_share","public_key_share","public_keys","random","random","random","random","read_be","recommended_wnaf_for_num_scalars","recommended_wnaf_for_scalar","reveal","reveal","root_of_unity","secret_key_share","serde_impl","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shl","shr","sign","sign","sign_g2","sign_g2","size","sqrt","square","sub","sub","sub_assign","sub_assign","sub_assign","sub_noborrow","threshold","threshold","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_random","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","verify","verify_decryption_share","verify_g2","verify_g2","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_be","zero","zero","zero","zeroize","DegreeTooHigh","DuplicateEntry","Error","FromBytesError","FromBytesResult","Invalid","NotEnoughShares","Result","as_fail","as_fail","backtrace","backtrace","borrow","borrow","borrow_mut","borrow_mut","cause","cause","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","into","into","name","name","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BivarCommitment","BivarPoly","Commitment","Poly","add","add","add","add","add_assign","add_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","commitment","commitment","constant","degree","degree","degree","degree","deserialize","deserialize","deserialize","drop","drop","eq","eq","eq","evaluate","evaluate","evaluate","evaluate","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","identity","interpolate","into","into","into","into","is_zero","monomial","mul","mul","mul","mul","mul_assign","mul_assign","ne","ne","ne","one","partial_cmp","partial_cmp","random","random","reveal","reveal","row","row","serialize","serialize","serialize","sub","sub","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_random","try_random","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zero","zeroize","zeroize","0","0","FieldWrap","SerdeSecret","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deserialize","deserialize","eq","fmt","from","from","inner","into","into","into_inner","into_inner","ne","serialize","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["threshold_cryptothreshold_crypto::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","threshold_crypto::poly","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","threshold_crypto::serde_impl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","An encrypted message.","A decryption share. A threshold of decryption shares can …","Eighth Mersenne prime field element","Eighth Mersenne prime field element","Projective type for <code>Mersenne8</code>.","Affine type for <code>Mersenne8</code>.","Projective type for <code>Mersenne8</code>.","Affine type for <code>Mersenne8</code>.","A conversion into an element of the field <code>Fr</code>.","A <code>pairing</code> Engine based on <code>Mersenne8</code> prime fields.","The size of a key’s representation in bytes.","A public key.","A public key and an associated set of public key shares.","A public key share.","The size of a signature’s representation in bytes.","A secret key; wraps a single prime field element. The …","A secret key and an associated set of secret key shares.","A secret key share.","A signature.","A signature share.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Combines the shares into a signature that can be verified …","Returns the decrypted text, or <code>None</code>, if the ciphertext isn…","Combines the shares to decrypt the ciphertext.","Returns a decryption share, or <code>None</code>, if the ciphertext isn…","Returns a decryption share, without validating the …","","","","","","","","","","","","","","","","","","","","Encrypts the message using the OS random number generator.","Encrypts the message.","","","","","","","","","","","","","","","Crypto errors.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the key with the given representation, if valid.","Returns the key share with the given representation, if …","Returns the signature with the given representation, if …","Returns the signature share with the given representation, …","Creates a new <code>SecretKey</code> from a mutable reference to a …","Creates a new <code>SecretKeyShare</code> from a mutable reference to a …","","","","","","","","","Returns a hash of the given message in <code>G2</code>.","","","","","","","","","","","","","","","","","","Converts <code>self</code> to a field element.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Mersenne8</code>, with the value <code>v</code> modulo <code>MS8</code>.","","","","","","","Returns <code>true</code> if the signature contains an odd number of …","","","","","","","","","","Utilities for distributed key generation: uni- and …","Takes <code>self</code> to the power of <code>exp</code>.","","Returns the matching public key.","Returns the public key.","Returns the matching public key share.","Returns the <code>i</code>-th public key share.","Returns the corresponding public key set. That information …","","","Creates a new random instance of <code>SecretKey</code>. If you want to …","Creates a set of secret key shares, where any <code>threshold + 1</code>…","","","","Generates a non-redacted debug string. This method differs …","Generates a non-redacted debug string. This method differs …","","Returns the <code>i</code>-th secret key share.","Serialization and deserialization implementations for …","","","","","","","","","","Signs the given message.","Signs the given message.","Signs the given element of <code>G2</code>.","Signs the given element of <code>G2</code>.","","","","","","","","","","Returns the threshold <code>t</code>: any set of <code>t + 1</code> signature shares …","Returns the threshold <code>t</code>: any set of <code>t + 1</code> signature shares …","Returns a byte string representation of the public key.","Returns a byte string representation of the public key …","Returns a byte string representation of the signature.","Returns a byte string representation of the signature …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a set of secret key shares, where any <code>threshold + 1</code>…","","","","","","","","","","","","","","","Returns <code>true</code> if the signature matches the message.","Returns <code>true</code> if the signature matches the message.","Returns <code>true</code> if this is a valid ciphertext. This check is …","Returns <code>true</code> if the decryption share matches the …","Returns <code>true</code> if the signature matches the element of <code>G2</code>.","Returns <code>true</code> if the signature matches the element of <code>G2</code>.","","","","","","","","","","","","","","","","","","","","The degree is too high for the coefficients to be indexed …","Signature shares contain a duplicated index.","A crypto error.","An error reading a structure from an array of bytes.","The result of attempting to read a structure from an array …","Invalid representation","Not enough signature shares.","A crypto result.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment to a symmetric bivariate polynomial.","A symmetric bivariate polynomial in the prime field.","A commitment to a univariate polynomial.","A univariate polynomial in the prime field.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the corresponding commitment.","Returns the corresponding commitment. That information can …","Returns the polynomial with constant value <code>c</code>.","Returns the degree.","Returns the polynomial’s degree.","Returns the polynomial’s degree; which is the same in …","Returns the polynomial’s degree: It is the same in both …","","","","","","","","","Returns the value at the point <code>i</code>.","Returns the <code>i</code>-th public key share.","Returns the polynomial’s value at the point <code>(x, y)</code>.","Returns the commitment’s value at the point <code>(x, y)</code>.","","","","","","","","","","","","Returns the identity function, i.e. the polynomial “<code>x</code>”.","Returns the unique polynomial <code>f</code> of degree <code>samples.len() - 1</code>…","","","","","Returns <code>true</code> if the polynomial is the constant value <code>0</code>.","Returns the (monic) monomial: <code>x.pow(degree)</code>.","","","","","","","","","","Returns the polynomial with constant value <code>1</code>.","","","Creates a random polynomial.","Creates a random polynomial.","Generates a non-redacted debug string. This method differs …","Generates a non-redacted debug string. This method differs …","Returns the <code>x</code>-th row, as a univariate polynomial.","Returns the <code>x</code>-th row, as a commitment to a univariate …","","","","","","","","","","","","","","","","","","","","Creates a random polynomial. This constructor is identical …","Creates a random polynomial.","","","","","","","","","Returns the polynomial with constant value <code>0</code>.","","","","","A wrapper type to facilitate serialization and …","<code>SerdeSecret</code> is a wrapper struct for serializing and …","","","","","","","","","","","","","","Returns a reference to the actual secret contained in the …","","","Returns the wrapped field element.","Returns the actual secret from the wrapper","","","","","","","","","","","",""],"i":[1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,3,3,1,1,1,4,1,1,4,3,1,5,4,3,6,7,8,2,9,10,11,12,13,14,1,5,4,3,6,7,8,2,9,10,11,12,13,14,1,1,5,4,3,6,7,8,2,9,10,11,12,13,14,1,5,4,3,6,7,8,2,9,10,11,12,13,14,1,4,3,6,7,8,2,11,13,13,9,13,10,10,1,4,3,9,10,6,7,8,2,9,10,11,12,13,1,1,3,9,4,6,6,1,1,4,3,6,7,8,2,9,10,11,12,13,14,0,5,1,1,5,4,4,3,3,6,7,8,2,9,10,11,12,13,1,1,1,1,5,4,4,3,3,6,7,8,2,9,10,11,12,13,13,14,14,4,6,7,8,2,9,10,1,6,7,8,2,11,12,13,0,1,5,4,3,6,7,8,2,9,10,11,12,13,14,4,3,4,15,1,4,1,1,1,3,1,1,1,4,3,1,5,1,1,4,1,1,1,1,3,1,1,4,3,6,7,8,2,9,10,11,12,13,14,1,4,3,1,1,1,4,3,5,4,8,1,4,3,6,7,8,2,11,13,0,1,4,9,13,10,13,14,1,3,9,14,1,3,3,9,10,1,14,0,6,7,8,2,11,12,13,1,1,9,10,9,10,4,1,1,1,1,1,1,1,1,13,14,6,7,8,2,1,5,4,3,6,7,8,2,9,10,11,12,13,14,1,4,3,1,5,4,3,6,7,8,2,9,10,11,12,13,14,1,5,4,3,6,7,8,2,9,10,11,12,13,14,14,1,5,4,3,6,7,8,2,9,10,11,12,13,14,6,7,11,7,6,7,1,5,4,3,6,7,8,2,9,10,11,12,13,14,1,1,4,3,9,16,16,0,0,0,17,16,0,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,16,17,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,0,0,0,0,18,18,18,19,18,19,18,19,20,21,18,19,20,21,18,19,20,21,18,19,20,21,19,21,18,20,18,18,19,20,21,18,19,21,18,20,18,19,21,18,19,20,21,18,19,20,21,18,18,19,20,21,19,21,18,18,18,19,20,21,18,18,18,18,18,18,18,18,18,19,21,18,19,21,18,20,18,20,20,21,18,19,21,18,18,18,18,18,19,20,21,18,19,20,21,18,19,20,21,18,20,18,19,20,21,18,19,20,21,18,18,20,22,23,0,0,22,23,22,23,23,23,23,22,23,23,23,22,23,23,22,23,22,23,23,22,23,23,22,23,22,23,22,23,22,23],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["mersenne8",3]]],[[["mersenne8",3]]],[[]],[[["mersenne8",3]]],[[["mersenne8",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mersenne8",3]],[[],["mocktography",3]],[[],["ms8affine",3]],[[],["ms8projective",3]],[[],["publickey",3]],[[],["publickeyshare",3]],[[],["signature",3]],[[],["signatureshare",3]],[[],["secretkey",3]],[[],["secretkeyshare",3]],[[],["ciphertext",3]],[[],["decryptionshare",3]],[[],["publickeyset",3]],[[],["secretkeyset",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mersenne8",3]],["ordering",4]],[[["ms8affine",3]],["ordering",4]],[[["ms8projective",3]],["ordering",4]],[[],["ordering",4]],[[["publickeyshare",3]],["ordering",4]],[[],["ordering",4]],[[["signatureshare",3]],["ordering",4]],[[],["ordering",4]],[[["publickeyset",3]],["ordering",4]],[[],[["signature",3],["result",6,["signature"]]]],[[["ciphertext",3]],[["option",4,["vec"]],["vec",3,["u8"]]]],[[["ciphertext",3]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[["ciphertext",3]],[["option",4,["decryptionshare"]],["decryptionshare",3]]],[[["ciphertext",3]],["decryptionshare",3]],[[],["mersenne8",3]],[[],["ms8affine",3]],[[],["ms8projective",3]],[[]],[[],["secretkeyshare",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[["asref",8]],["ciphertext",3]],[[["asref",8]],["ciphertext",3]],[[["mersenne8",3]],["bool",15]],[[["u32",15]],["bool",15]],[[["ms8affine",3]],["bool",15]],[[["ms8projective",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["publickeyshare",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["signatureshare",3]],["bool",15]],[[["secretkey",3]],["bool",15]],[[["secretkeyshare",3]],["bool",15]],[[["ciphertext",3]],["bool",15]],[[["decryptionshare",3]],["bool",15]],[[["publickeyset",3]],["bool",15]],[[["secretkeyset",3]],["bool",15]],null,[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["u64",15]],["mersenne8",3]],[[]],[[["u32",15]],["mersenne8",3]],[[]],[[]],[[["ms8projective",3]],["ms8affine",3]],[[]],[[["ms8affine",3]],["ms8projective",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["commitment",3]],["publickeyset",3]],[[]],[[["poly",3]],["secretkeyset",3]],[[]],[[["borrow",8]],["frombytesresult",6]],[[["borrow",8]],["frombytesresult",6]],[[["borrow",8]],["frombytesresult",6]],[[["borrow",8]],["frombytesresult",6]],[[["fr",3]]],[[["fr",3]]],[[],[["primefielddecodingerror",4],["result",4,["primefielddecodingerror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["asref",8]],["g2",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["groupdecodingerror",4],["result",4,["groupdecodingerror"]]]],[[]],[[],[["groupdecodingerror",4],["result",4,["groupdecodingerror"]]]],[[],["fr",3]],[[],["fr",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["legendresymbol",4]],[[]],[[["mersenne8",3]]],[[["mersenne8",3]]],[[["into",8]]],[[]],[[["mersenne8",3]]],[[["mersenne8",3]]],[[]],[[["into",8]]],[[]],[[["mersenne8",3]],["bool",15]],[[["ms8affine",3]],["bool",15]],[[["ms8projective",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["publickeyshare",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["signatureshare",3]],["bool",15]],[[["secretkey",3]],["bool",15]],[[["secretkeyshare",3]],["bool",15]],[[["ciphertext",3]],["bool",15]],[[["decryptionshare",3]],["bool",15]],[[["publickeyset",3]],["bool",15]],[[["secretkeyset",3]],["bool",15]],[[]],[[]],[[]],[[["u32",15]],["mersenne8",3]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["mersenne8",3]],[["option",4,["ordering"]],["ordering",4]]],[[["ms8affine",3]],[["option",4,["ordering"]],["ordering",4]]],[[["ms8projective",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["publickeyshare",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["signatureshare",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["publickeyset",3]],[["option",4,["ordering"]],["ordering",4]]],null,[[["u32",15]],["mersenne8",3]],[[]],[[],["publickey",3]],[[],["publickey",3]],[[],["publickeyshare",3]],[[["intofr",8]],["publickeyshare",3]],[[],["publickeyset",3]],[[]],[[]],[[]],[[["usize",15]]],[[["read",8]],["result",6]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[],["string",3]],[[],["string",3]],[[]],[[["intofr",8]],["secretkeyshare",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u32",15]]],[[["u32",15]]],[[["asref",8]],["signature",3]],[[["asref",8]],["signatureshare",3]],[[["g2affine",3],["into",8,["g2affine"]]],["signature",3]],[[["g2affine",3],["into",8,["g2affine"]]],["signatureshare",3]],[[],["usize",15]],[[],["option",4]],[[]],[[["mersenne8",3]]],[[["mersenne8",3]]],[[["mersenne8",3]]],[[["mersenne8",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["asref",8],["signature",3]],["bool",15]],[[["asref",8],["signatureshare",3]],["bool",15]],[[],["bool",15]],[[["decryptionshare",3],["ciphertext",3]],["bool",15]],[[["g2affine",3],["into",8,["g2affine"]],["signature",3]],["bool",15]],[[["g2affine",3],["signatureshare",3],["into",8,["g2affine"]]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["write",8]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[],["fail",8]],[[],["fail",8]],[[],[["backtrace",3],["option",4,["backtrace"]]]],[[],[["backtrace",3],["option",4,["backtrace"]]]],[[]],[[]],[[]],[[]],[[],[["fail",8],["option",4,["fail"]]]],[[],[["fail",8],["option",4,["fail"]]]],[[],["error",4]],[[],["frombyteserror",4]],[[]],[[]],[[["error",4]],["bool",15]],[[["frombyteserror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[["fr",3]]],[[["u64",15]]],[[],["poly",3]],[[],["commitment",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["poly",3]],[[],["commitment",3]],[[],["bivarpoly",3]],[[],["bivarcommitment",3]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[],["commitment",3]],[[],["bivarcommitment",3]],[[["fr",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[["deserializer",8]],["result",4]],[[]],[[]],[[["poly",3]],["bool",15]],[[["commitment",3]],["bool",15]],[[["bivarcommitment",3]],["bool",15]],[[["intofr",8]],["fr",3]],[[["intofr",8]],["g1",3]],[[["intofr",8]],["fr",3]],[[["intofr",8]],["g1",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["vec",3,["fr"]],["fr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["usize",15]]],[[["fr",3]]],[[["u64",15]]],[[["fr",3]]],[[]],[[["fr",3]]],[[]],[[["poly",3]],["bool",15]],[[["commitment",3]],["bool",15]],[[["bivarcommitment",3]],["bool",15]],[[]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["usize",15]]],[[["usize",15]]],[[],["string",3]],[[],["string",3]],[[["intofr",8]],["poly",3]],[[["intofr",8]],["commitment",3]],[[],["result",4]],[[],["result",4]],[[["serializer",8]],["result",4]],[[["u64",15]]],[[["fr",3]]],[[],["poly",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["serdesecret",3]],[[]],[[]],[[["deserializer",8]],["result",4]],[[],["result",4]],[[["serdesecret",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["fr",3]],[[]],[[["serdesecret",3]],["bool",15]],[[["serializer",8]],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"Fr"],[3,"SignatureShare"],[3,"G1"],[3,"G1Affine"],[3,"PEngine"],[3,"PublicKey"],[3,"PublicKeyShare"],[3,"Signature"],[3,"SecretKey"],[3,"SecretKeyShare"],[3,"Ciphertext"],[3,"DecryptionShare"],[3,"PublicKeySet"],[3,"SecretKeySet"],[8,"IntoFr"],[4,"Error"],[4,"FromBytesError"],[3,"Poly"],[3,"Commitment"],[3,"BivarPoly"],[3,"BivarCommitment"],[3,"FieldWrap"],[3,"SerdeSecret"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};
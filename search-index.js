var searchIndex = new Map(JSON.parse('[\
["all_combined",{"doc":"An example program using both the web server and libp2p","t":"CHCSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNNIFINNNNNOOONNNNNNNNNNNNNNNNNOOOONOONNNNNN","n":["infra","main","types","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","Network","NodeImpl","ThisRun","__clone_box","borrow","borrow_mut","clone","clone_into","config","delay_duration","delayed_tasks_channels","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","layout_raw","message_cache","network","networks","no_delay_counter","pointer_metadata","primary_down","primary_fail_counter","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"all_combined"],[3,"all_combined::infra"],[137,"all_combined::types"],[178,"dyn_clone::sealed"],[179,"clap_builder::builder::command"],[180,"core::clone"],[181,"hotshot_types::traits::node_implementation"],[182,"hotshot_orchestrator::config"],[183,"hotshot_example_types::block_types"],[184,"hotshot_example_types::block_types"],[185,"rkyv::with"],[186,"core::result"],[187,"core::fmt"],[188,"core::fmt"],[189,"clap_builder"],[190,"core::net::socket_addr"],[191,"alloc::vec"],[192,"clap_builder::util::id"],[193,"core::option"],[194,"hotshot_orchestrator::client"],[195,"hotshot_orchestrator::client"],[196,"alloc::boxed"],[197,"core::future::future"],[198,"core::pin"],[199,"core::alloc::layout"],[200,"core::alloc::layout"],[201,"hotshot::traits::networking::push_cdn_network"],[202,"hotshot::traits::networking::libp2p_network"],[203,"hotshot::traits::networking::combined_network"],[204,"url"],[205,"hotshot::types::handle"],[206,"hotshot_example_types::storage_types"],[207,"hotshot_example_types::auction_results_provider_types"],[208,"hotshot_types::traits::node_implementation"],[209,"serde::de"],[210,"core::hash"],[211,"core::marker"],[212,"core::hash"]],"d":["general infra used for this example","","types used for this example","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","dummy struct so we can choose types","convenience type alias","","","","","","The underlying network configuration","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","The underlying network","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9,0,0,0,58,58,58,58,58,66,67,67,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,67,66,67,67,58,67,67,58,58,58,58,58,58],"f":"`{{}b}`````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>```{{cd}b{}}??{GdGd}{{ce}b{}{}}```{jc{}}0{c{{C`{Gd}}}Gf}{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}{jb}{{GdGd}Gh}{{ce}Gh{}{}}000{{GdCb}Cd}{cc{}}{{ce}h{GjGl}Gn}{{Gdc}bH`}{{}j}{ce{}{}}{{}{{C`{E`Eb}}}}````{{}}``{{Gdc}C`Hb}3{c{{C`{e}}}{}{}}0{cGb{}}5","c":[],"p":[[1,"unit"],[5,"Private",178],[5,"Command",179],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",180],[10,"NodeType",181],[5,"ConfigArgs",3],[10,"RunDa",3],[5,"NetworkConfig",182],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",183],[17,"BlockPayload"],[5,"TestBlockPayload",183],[17,"BlockHeader"],[5,"TestBlockHeader",183],[17,"InstanceState"],[5,"TestInstanceState",184],[5,"Libp2pDaRun",3],[5,"CombinedDaRun",3],[5,"With",185],[6,"Result",186],[5,"Formatter",187],[8,"Result",187],[10,"Debug",187],[5,"ArgMatches",188],[8,"Error",189],[6,"SocketAddr",190],[5,"Vec",191],[5,"Id",192],[6,"Option",193],[5,"ValidatorArgs",194],[5,"OrchestratorClient",194],[10,"BuilderTask",195],[5,"Box",196],[10,"Future",197],[5,"Pin",198],[5,"Layout",199],[5,"LayoutError",199],[1,"str"],[10,"ConnectedNetwork",200],[5,"PushCdnNetwork",201],[5,"Libp2pNetwork",202],[5,"CombinedNetworks",203],[5,"Url",204],[1,"tuple"],[5,"SystemContextHandle",205],[17,"Network"],[17,"Storage"],[5,"TestStorage",206],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",207],[10,"NodeImplementation",181],[10,"Versions",181],[5,"TypeId",208],[5,"NodeImpl",137],[10,"Deserializer",209],[1,"bool"],[10,"Hash",210],[10,"Sized",211],[10,"BuildHasher",210],[10,"Hasher",210],[10,"Serializer",212],[8,"ThisRun",137],[8,"Network",137]],"b":[]}],\
["all_libp2p",{"doc":"An example program using libp2p","t":"CHCSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNNIFINNNNNONNNNNNNNNNNNNNNONNONNNNNNN","n":["infra","main","types","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","Network","NodeImpl","ThisRun","__clone_box","borrow","borrow_mut","clone","clone_into","config","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","inner","into","layout_raw","network","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"all_libp2p"],[3,"all_libp2p::infra"],[137,"all_libp2p::types"],[172,"dyn_clone::sealed"],[173,"clap_builder::builder::command"],[174,"core::clone"],[175,"hotshot_types::traits::node_implementation"],[176,"hotshot_orchestrator::config"],[177,"hotshot_example_types::block_types"],[178,"hotshot_example_types::block_types"],[179,"rkyv::with"],[180,"core::result"],[181,"core::fmt"],[182,"core::fmt"],[183,"clap_builder"],[184,"core::net::socket_addr"],[185,"alloc::vec"],[186,"clap_builder::util::id"],[187,"core::option"],[188,"hotshot_orchestrator::client"],[189,"hotshot_orchestrator::client"],[190,"alloc::boxed"],[191,"core::future::future"],[192,"core::pin"],[193,"core::alloc::layout"],[194,"core::alloc::layout"],[195,"hotshot::traits::networking::push_cdn_network"],[196,"hotshot::traits::networking::libp2p_network"],[197,"hotshot::traits::networking::combined_network"],[198,"url"],[199,"hotshot::types::handle"],[200,"hotshot_example_types::storage_types"],[201,"hotshot_example_types::auction_results_provider_types"],[202,"hotshot_types::traits::node_implementation"],[203,"serde::de"],[204,"core::hash"],[205,"core::marker"],[206,"core::hash"]],"d":["general infra used for this example","","types used for this example","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","dummy struct so we can choose types","convenience type alias","","","","","","The underlying network configuration","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","The underlying network","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9,0,0,0,58,58,58,58,58,66,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,67,58,58,66,58,58,58,58,58,58,58],"f":"`{{}b}`````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>```{{cd}b{}}??{GdGd}{{ce}b{}{}}`{jc{}}0{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}{c{{C`{Gd}}}Gf}{jb}{{GdGd}Gh}{{ce}Gh{}{}}000{{GdCb}Cd}{cc{}}{{ce}h{GjGl}Gn}{{Gdc}bH`}{{}j}`{ce{}{}}{{}{{C`{E`Eb}}}}`{{}}{{Gdc}C`Hb}3{c{{C`{e}}}{}{}}0{cGb{}}5","c":[],"p":[[1,"unit"],[5,"Private",172],[5,"Command",173],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",174],[10,"NodeType",175],[5,"ConfigArgs",3],[10,"RunDa",3],[5,"NetworkConfig",176],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",177],[17,"BlockPayload"],[5,"TestBlockPayload",177],[17,"BlockHeader"],[5,"TestBlockHeader",177],[17,"InstanceState"],[5,"TestInstanceState",178],[5,"Libp2pDaRun",3],[5,"CombinedDaRun",3],[5,"With",179],[6,"Result",180],[5,"Formatter",181],[8,"Result",181],[10,"Debug",181],[5,"ArgMatches",182],[8,"Error",183],[6,"SocketAddr",184],[5,"Vec",185],[5,"Id",186],[6,"Option",187],[5,"ValidatorArgs",188],[5,"OrchestratorClient",188],[10,"BuilderTask",189],[5,"Box",190],[10,"Future",191],[5,"Pin",192],[5,"Layout",193],[5,"LayoutError",193],[1,"str"],[10,"ConnectedNetwork",194],[5,"PushCdnNetwork",195],[5,"Libp2pNetwork",196],[5,"CombinedNetworks",197],[5,"Url",198],[1,"tuple"],[5,"SystemContextHandle",199],[17,"Network"],[17,"Storage"],[5,"TestStorage",200],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",201],[10,"NodeImplementation",175],[10,"Versions",175],[5,"TypeId",202],[5,"NodeImpl",137],[10,"Deserializer",203],[1,"bool"],[10,"Hash",204],[10,"Sized",205],[10,"BuildHasher",204],[10,"Hasher",204],[10,"Serializer",206],[8,"ThisRun",137],[8,"Network",137]],"b":[]}],\
["all_push_cdn",{"doc":"A example program using the Push CDN","t":"CHCSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNNIFINNNONNONNNNNNNNNNNNNNNONOONNNNNNN","n":["infra","main","types","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","Network","NodeImpl","ThisRun","__clone_box","borrow","borrow_mut","client","clone","clone_into","config","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","from","get_hash","hash","init","into","is_paused","layout_raw","metrics","network","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"all_push_cdn"],[3,"all_push_cdn::infra"],[137,"all_push_cdn::types"],[173,"dyn_clone::sealed"],[174,"clap_builder::builder::command"],[175,"core::clone"],[176,"hotshot_types::traits::node_implementation"],[177,"hotshot_orchestrator::config"],[178,"hotshot_example_types::block_types"],[179,"hotshot_example_types::block_types"],[180,"rkyv::with"],[181,"core::result"],[182,"core::fmt"],[183,"core::fmt"],[184,"clap_builder"],[185,"core::net::socket_addr"],[186,"alloc::vec"],[187,"clap_builder::util::id"],[188,"core::option"],[189,"hotshot_orchestrator::client"],[190,"hotshot_orchestrator::client"],[191,"alloc::boxed"],[192,"core::future::future"],[193,"core::pin"],[194,"core::alloc::layout"],[195,"core::alloc::layout"],[196,"hotshot::traits::networking::push_cdn_network"],[197,"hotshot::traits::networking::libp2p_network"],[198,"hotshot::traits::networking::combined_network"],[199,"url"],[200,"hotshot::types::handle"],[201,"hotshot_example_types::storage_types"],[202,"hotshot_example_types::auction_results_provider_types"],[203,"hotshot_types::traits::node_implementation"],[204,"serde::de"],[205,"core::hash"],[206,"core::marker"],[207,"core::hash"]],"d":["The infra implementation","","The types we’re importing","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","Convenience type alias","Convenience type alias","","","","","","","The underlying configuration","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","The underlying network","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9,0,0,0,58,58,58,66,58,58,67,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,66,58,66,67,58,58,58,58,58,58,58],"f":"`{{}b}`````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>```{{cd}b{}}??`{GdGd}{{ce}b{}{}}`{jc{}}0{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}{c{{C`{Gd}}}Gf}{jb}{{GdGd}Gh}{{ce}Gh{}{}}000{cc{}}{{ce}h{GjGl}Gn}{{Gdc}bH`}{{}j}{ce{}{}}`{{}{{C`{E`Eb}}}}``{{}}{{Gdc}C`Hb}3{c{{C`{e}}}{}{}}0{cGb{}}5","c":[],"p":[[1,"unit"],[5,"Private",173],[5,"Command",174],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",175],[10,"NodeType",176],[5,"ConfigArgs",3],[10,"RunDa",3],[5,"NetworkConfig",177],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",178],[17,"BlockPayload"],[5,"TestBlockPayload",178],[17,"BlockHeader"],[5,"TestBlockHeader",178],[17,"InstanceState"],[5,"TestInstanceState",179],[5,"Libp2pDaRun",3],[5,"CombinedDaRun",3],[5,"With",180],[6,"Result",181],[5,"Formatter",182],[8,"Result",182],[10,"Debug",182],[5,"ArgMatches",183],[8,"Error",184],[6,"SocketAddr",185],[5,"Vec",186],[5,"Id",187],[6,"Option",188],[5,"ValidatorArgs",189],[5,"OrchestratorClient",189],[10,"BuilderTask",190],[5,"Box",191],[10,"Future",192],[5,"Pin",193],[5,"Layout",194],[5,"LayoutError",194],[1,"str"],[10,"ConnectedNetwork",195],[5,"PushCdnNetwork",196],[5,"Libp2pNetwork",197],[5,"CombinedNetworks",198],[5,"Url",199],[1,"tuple"],[5,"SystemContextHandle",200],[17,"Network"],[17,"Storage"],[5,"TestStorage",201],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",202],[10,"NodeImplementation",176],[10,"Versions",176],[5,"TypeId",203],[5,"NodeImpl",137],[10,"Deserializer",204],[1,"bool"],[10,"Hash",205],[10,"Sized",206],[10,"BuildHasher",205],[10,"Hasher",205],[10,"Serializer",207],[8,"Network",137],[8,"ThisRun",137]],"b":[]}],\
["cdn_broker",{"doc":"The following is the main <code>Broker</code> binary, which just …","t":"FNNNNOONNNNNONNNNNONNNONHONOOOONNNNNN","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","ca_cert_path","ca_key_path","command","command_for_update","deref","deref_mut","deserialize","discovery_endpoint","drop","fmt","from","from_arg_matches","from_arg_matches_mut","global_memory_pool_size","group_id","init","into","key_seed","layout_raw","main","metrics_bind_endpoint","pointer_metadata","private_advertise_endpoint","private_bind_endpoint","public_advertise_endpoint","public_bind_endpoint","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"cdn_broker"],[37,"clap_builder::builder::command"],[38,"rkyv::with"],[39,"core::result"],[40,"core::fmt"],[41,"core::fmt"],[42,"clap_builder"],[43,"clap_builder::util::id"],[44,"core::option"],[45,"core::alloc::layout"],[46,"core::alloc::layout"],[47,"core::any"]],"d":["The main component of the push CDN.","","","","","The path to the CA certificate If not provided, a local, …","The path to the CA key If not provided, a local, pinned CA …","","","","","","The discovery client endpoint (including scheme) to …","","","Returns the argument unchanged.","","","The size of the global memory pool (in bytes). This is the …","","","Calls <code>U::from(self)</code>.","The seed for broker key generation","","","The endpoint to bind to for externalizing metrics (in …","","The broker-facing endpoint in <code>IP:port</code> form to advertise","The broker-facing endpoint in <code>IP:port</code> form to bind to for …","The user-facing endpoint in <code>IP:port</code> form to advertise","The user-facing endpoint in <code>IP:port</code> form to bind to for …","","","","","",""],"i":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6],"f":"`{bb}0{ce{}{}}0``{{}b}0{dc{}}0{{ce}{{h{{f{gi}}}}}{}{}{}{}}`{dj}{{ln}A`}{cc{}}{Ab{{h{lAd}}}}0`{{}{{Ah{Af}}}}{{}d}9`{{}{{h{AjAl}}}}{{}{{An{j}}}}`{{}}````{c{{h{e}}}{}{}}0{cB`{}}{{lAb}{{h{jAd}}}}0?","c":[],"p":[[5,"Command",37],[1,"usize"],[5,"With",38],[6,"Result",39],[1,"unit"],[5,"Args",0],[5,"Formatter",40],[8,"Result",40],[5,"ArgMatches",41],[8,"Error",42],[5,"Id",43],[6,"Option",44],[5,"Layout",45],[5,"LayoutError",45],[8,"Result",46],[5,"TypeId",47]],"b":[]}],\
["cdn_marshal",{"doc":"The following is the main <code>Marshal</code> binary, which just …","t":"FNNONNOONNNNNONNNNNONNNNHONNNNNNN","n":["Args","augment_args","augment_args_for_update","bind_port","borrow","borrow_mut","ca_cert_path","ca_key_path","command","command_for_update","deref","deref_mut","deserialize","discovery_endpoint","drop","fmt","from","from_arg_matches","from_arg_matches_mut","global_memory_pool_size","group_id","init","into","layout_raw","main","metrics_bind_endpoint","pointer_metadata","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"cdn_marshal"],[33,"clap_builder::builder::command"],[34,"rkyv::with"],[35,"core::result"],[36,"core::fmt"],[37,"core::fmt"],[38,"clap_builder"],[39,"clap_builder::util::id"],[40,"core::option"],[41,"core::alloc::layout"],[42,"core::alloc::layout"],[43,"core::any"]],"d":["The main component of the push CDN.","","","The port to bind to for connections (from users)","","","The path to the CA certificate If not provided, a local, …","The path to the CA key If not provided, a local, pinned CA …","","","","","","The discovery client endpoint (including scheme) to …","","","Returns the argument unchanged.","","","The size of the global memory pool (in bytes). This is the …","","","Calls <code>U::from(self)</code>.","","","The endpoint to bind to for externalizing metrics (in …","","","","","","",""],"i":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6],"f":"`{bb}0`{ce{}{}}0``{{}b}0{dc{}}0{{ce}{{h{{f{gi}}}}}{}{}{}{}}`{dj}{{ln}A`}{cc{}}{Ab{{h{lAd}}}}0`{{}{{Ah{Af}}}}{{}d}9{{}{{h{AjAl}}}}{{}{{An{j}}}}`{{}}{c{{h{e}}}{}{}}0{cB`{}}{{lAb}{{h{jAd}}}}0?","c":[],"p":[[5,"Command",33],[1,"usize"],[5,"With",34],[6,"Result",35],[1,"unit"],[5,"Args",0],[5,"Formatter",36],[8,"Result",36],[5,"ArgMatches",37],[8,"Error",38],[5,"Id",39],[6,"Option",40],[5,"Layout",41],[5,"LayoutError",41],[8,"Result",42],[5,"TypeId",43]],"b":[]}],\
["hotshot",{"doc":"Provides a generic rust implementation of the <code>HotShot</code> BFT …","t":"PIPFPPPSSGFPPPFFPPFFPKPNNNNONNONNNNNNNNNNNNNNNNNNNNNNNNONOONNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNOONNNNNNNNNNNNNNNOONNNNNNNNNONOOONNNNNNNNNNNNNNOOOONNNONNNNNNNOONOEMNNNONMNNNNNOONOOCNNNNNCNNNNNNNNNNNNNNNNNNNNNNCOOOOOONNNNNNNOOOOOOOOOOOFFFPKGPNOHHHHNHHNNNNNNNNNNHNNNNNNNNNNNNONNNNNNNNNNNNNONNNNNNNNNNNNONNNNMNNNMNNNNCNONNNNNNNNNNNNOONNNNKMRKPPPRRRPPRRPPPRPRGFKPPKPPPPRKRPRPPKRNNNNONMNNNNNONMNNNNNNNNNNNNNNCMNNNNNMMMMMNNOCNNNNNNNMNOCCNONMNNNONONNNNNONNOMNONNNMNNNNNOMNNMNNOOOOOOOOOCCFINOOOONNNNOOOONNOONNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNIFNOOOONNNNOOOONNOONNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNFGFPPFFFFFIFFFFFNONNONNOONNHHNNNONOONOONOOOOOOOOONOOOOOONNNNNPPPPPPPPPGKPPPPPPPPPNCCCCNNNNOOOOOOOOOFIFNNONNNNNHNNNNNOONNNNNNNNNNNNNNNNNNNNOONONONNNOOONNNNNNNNNNNNNNNNNNNNNIFFFFISNNOOONNNNNNNNNONNNNNNNNNNNNNNHHNNNNONNNNNNNNNNNNNNONNNNNNNONNNNOONOOOONNNNONNOOONOOONNNNOONONONONONNNNNONNNNNNNNNNNNNNNNNNNNNFFFSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNONONNNNNNOONNONNNNNONNONNNNNNNNNNNNNNFFFPPFFFFGFFNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNONNONNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRRKRKMMMMMIIPPPFGPFRRRRPPRKRFPPPPNNNMNNNNNNMNNNNNNONNNNNNNNNNNNNNNNNNNNCONNNNNNMMMMNCNONNNONNNONNNOOOONNNMMONNNMMMOMNNNNNNNNNNNNMNONNNOOOOOOOOOOOOOOPPPFGPPPPPPPOOOOOOOOOOOOOOOOFNNNNNONNNNNNNNNNNONNONNNNNOOONONNNNNNNNNONNNNNNN","n":["BlockError","Channel","Continue","DoubleTwinsHandler","FailedToBroadcast","FailedToMessageLeader","FailedToSerialize","H_256","H_512","HotShotError","HotShotInitializer","InsufficientValidSignatures","InvalidState","LeafNotFound","MarketplaceConfig","Memberships","Misc","NetworkFault","RandomTwinsHandler","SystemContext","TimeoutError","TwinsHandlerState","ViewTimeoutError","__clone_box","__clone_box","__clone_box","__clone_box","anchored_leaf","as_error","as_error_source","auction_results_provider","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","consensus","consensus","da_membership","decided_leaf","decided_state","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","documentation","drop","drop","drop","drop","drop","drop","drop","external_event_stream","fallback_builder_url","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_genesis","from_reload","fuse_channels","header","high_qc","id","in_current_span","init","init","init","init","init","init","init","init","inner","instance_state","instance_state","instance_state","internal_event_stream","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","marketplace_config","memberships","metrics","network","new","new_from_channels","next_view_timeout","output_event_stream","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","private_key","public_key","publish_transaction_async","quorum_membership","rand","recv_handler","recv_handler","recv_handler","run_tasks","saved_proposals","send_external_event","send_handler","send_handler","send_handler","source","spawn_twin_handles","start_consensus","start_view","start_view","state","state_delta","storage","tasks","to_owned","to_owned","to_owned","to_owned","to_string","traits","try_decided_leaf","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","undecided_leafs","undecided_state","upgrade_lock","validated_state","vid_membership","view_sync_membership","vzip","vzip","vzip","vzip","vzip","vzip","vzip","context","context","num_valid_signatures","source","source","source","source","source","state","threshold","view_number","BadProposalViewDos","DishonestLeader","DoubleProposeVote","Dummy","EventTransformerState","GlobalEvent","Shutdown","__clone_box","_phantom","add_consensus_tasks","add_network_event_task","add_network_message_task","add_network_tasks","add_network_tasks","add_request_network_task","add_response_task","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_shutdown_event_monitor","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","dishonest_at_proposal_numbers","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","handle_proposal_send_event","increment","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","multiplier","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","recv_handler","recv_handler","recv_handler","recv_handler","send_handler","send_handler","send_handler","send_handler","spawn_handle","task_state","to_owned","total_proposals_from_node","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validated_proposals","view_look_back","vzip","vzip","vzip","vzip","CreateTaskState","create_from","AuctionResultsProvider","BlockPayload","CentralizedServer","ChannelSend","CouldNotDeliver","Delta","Error","Error","FailedToDeserialize","FailedToSerialize","Instance","Instance","Libp2p","Libp2pMulti","MemoryNetwork","Metadata","MultipleErrors","Network","NetworkError","NetworkNodeConfigBuilder","NetworkReliability","NoBootstrapNodesSpecified","NoSuchNode","NodeImplementation","NotFound","NotReady","PushCdnNetwork","ShutDown","Storage","TestableNodeImplementation","Time","Timeout","Transaction","UnableToCancel","UnimplementedFeature","ValidatedState","ValidatedState","__clone_box","as_error","as_error_source","auth_message","auth_message","backtrace","block_genesis","borrow","borrow","borrow_mut","borrow_mut","bound_addr","bound_addr","build","builder_commitment","cause","chaos_send_msg","clone","clone_into","default","deref","deref","deref_mut","deref_mut","description","deserialize","deserialize","drop","drop","election","empty","fmt","fmt","from","from","from","from_bytes","from_header","from_transactions","gen_networks","genesis","header","identity","identity","implementations","in_current_span","init","init","into","into","layout_raw","layout_raw","leaf_create_random_transaction","mesh_params","mesh_params","networking","node_implementation","node_type","node_type","num_transactions","on_commit","pointer_metadata","pointer_metadata","replication_factor","replication_factor","republication_interval","republication_interval","sample_delay","sample_keep","sample_repeat","scramble","server_mode","server_mode","source","stake_table","stake_table","state_create_random_transaction","to_connect_addrs","to_connect_addrs","to_owned","to_string","transaction_commitments","transactions","try_from","try_from","try_into","try_into","ttl","ttl","txn_count","type_id","type_id","validate_and_apply_header","vzip","vzip","errors","source","source","source","source","source","source","source","sources","static_committee","static_committee_leader_two_views","GeneralStaticCommittee","StaticCommittee","__clone_box","_type_phantom","_type_phantom","all_nodes_with_stake","all_nodes_with_stake","borrow","borrow_mut","clone","clone_into","committee_nodes_with_stake","committee_nodes_with_stake","committee_nodes_without_stake","committee_nodes_without_stake","committee_qc_stake_table","committee_topic","committee_topic","committee_topic","create_election","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","failure_threshold","fixed_leader_for_gpuvid","fixed_leader_for_gpuvid","fmt","from","get_hash","has_stake","hash","init","into","layout_raw","leader","new","non_staked_committee","non_staked_nodes","non_staked_nodes_count","pointer_metadata","stake","staked_committee","success_threshold","to_owned","total_nodes","try_from","try_into","type_id","upgrade_threshold","vzip","whole_committee","StaticCommittee","StaticCommitteeLeaderForTwoViews","__clone_box","_type_phantom","_type_phantom","all_nodes_with_stake","all_nodes_with_stake","borrow","borrow_mut","clone","clone_into","committee_nodes_with_stake","committee_nodes_with_stake","committee_nodes_without_stake","committee_nodes_without_stake","committee_qc_stake_table","committee_topic","committee_topic","committee_topic","create_election","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","failure_threshold","fixed_leader_for_gpuvid","fixed_leader_for_gpuvid","fmt","from","get_hash","has_stake","hash","init","into","layout_raw","leader","new","non_staked_committee","non_staked_nodes","non_staked_nodes_count","pointer_metadata","stake","staked_committee","success_threshold","to_owned","total_nodes","try_from","try_into","type_id","upgrade_threshold","vzip","whole_committee","CdnMetricsValue","CdnTopic","CombinedNetworks","Da","Global","KeyPair","Libp2pMetricsValue","Libp2pNetwork","MasterMap","MemoryNetwork","PeerInfoVec","ProductionDef","PushCdnNetwork","TestingDef","UnderlyingCombinedNetworks","WrappedSignatureKey","__clone_box","alloc","borrow","borrow_mut","client","clone","clone_into","delay_duration","delayed_tasks_channels","deref","deref_mut","derive_libp2p_keypair","derive_libp2p_peer_id","deserialize","drop","from","id","init","inner","inner","into","is_paused","is_ready","layout_raw","map","message_cache","metrics","networks","no_delay_counter","num_connected_peers","num_failed_messages","num_failed_messages","phantom","pointer_metadata","primary_down","primary_fail_counter","private_key","ptr","public_key","subscribed_map","to_owned","try_from","try_into","type_id","vzip","CentralizedServer","ChannelSend","CouldNotDeliver","FailedToDeserialize","FailedToSerialize","Libp2p","Libp2pMulti","MemoryNetwork","MultipleErrors","NetworkError","NetworkReliability","NoBootstrapNodesSpecified","NoSuchNode","NotFound","NotReady","PushCdnNetwork","ShutDown","Timeout","UnableToCancel","UnimplementedFeature","chaos_send_msg","combined_network","libp2p_network","memory_network","push_cdn_network","sample_delay","sample_keep","sample_repeat","scramble","errors","source","source","source","source","source","source","source","sources","CombinedNetworks","DelayedTasksChannelsMap","UnderlyingCombinedNetworks","__clone_box","__clone_box","alloc","borrow","borrow","borrow_mut","borrow_mut","broadcast_message","calculate_hash_of","clone","clone","clone_into","clone_into","da_broadcast_message","delay_duration","delayed_tasks_channels","deref","deref","deref_mut","deref_mut","deserialize","deserialize","direct_message","drop","drop","from","from","generator","in_flight_message_count","init","init","into","into","is_primary_down","layout_raw","layout_raw","message_cache","networks","new","no_delay_counter","pause","phantom","pointer_metadata","pointer_metadata","primary","primary_down","primary_fail_counter","ptr","queue_node_lookup","recv_msgs","request_data","resume","secondary","send_both_networks","shut_down","spawn_request_receiver_task","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_view","vid_broadcast_message","vzip","vzip","wait_for_ready","BootstrapAddrs","Empty","Libp2pMetricsValue","Libp2pNetwork","Libp2pNetworkInner","PeerInfoVec","QC_TOPIC","__clone_box","__clone_box","alloc","alloc","bootstrap_addrs","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","byte","clone","clone","clone_into","clone_into","da_broadcast_message","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","derive_libp2p_keypair","derive_libp2p_peer_id","deserialize","deserialize","deserialize","deserialize","dht_timeout","direct_message","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","from","from_config","generator","handle","handle_event_generator","handle_recvd_events","in_flight_message_count","init","init","init","init","inner","into","into","into","into","is_bootstrapped","is_da","is_ready","is_ready","is_ready","kill_switch","latest_seen_view","layout_raw","layout_raw","layout_raw","layout_raw","metrics","new","new","node_lookup_send","num_connected_peers","num_failed_messages","pause","phantom","phantom","pk","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","ptr","ptr","queue_node_lookup","receiver","recv_msgs","reliability_config","request_data","requests_rx","resume","sender","serialize","shut_down","spawn_connect","spawn_node_lookup","spawn_request_receiver_task","subscribed_topics","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_view","vzip","vzip","vzip","vzip","wait_for_ready","wait_for_ready","MasterMap","MemoryNetwork","MemoryNetworkInner","_DERIVE_core_fmt_Debug_FOR_MasterMap","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","broadcast_message","clone","clone_into","da_broadcast_message","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","direct_message","drop","drop","drop","fmt","fmt","fmt","from","from","from","generator","id","in_flight_message_count","in_flight_message_count","init","init","init","inner","input","input","into","into","into","layout_raw","layout_raw","layout_raw","map","master_map","new","new","output","pause","pointer_metadata","pointer_metadata","pointer_metadata","recv_msgs","reliability_config","resume","shut_down","subscribed_map","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wait_for_ready","BrokerDef","CdnMetricsValue","ClientDef","Da","Global","KeyPair","ProductionDef","PushCdnNetwork","TestingDef","Topic","UserDef","WrappedSignatureKey","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","broadcast_message","client","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","da_broadcast_message","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","direct_message","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","from","from","from","from","from","from","from","from","from","from","generator","in_flight_message_count","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","is_paused","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","metrics","new","new","num_failed_messages","pause","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","private_key","public_key","queue_node_lookup","recv_msgs","request_data","resume","serialize","shut_down","sign","spawn_request_receiver_task","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_ready","AuctionResultsProvider","Network","NodeImplementation","Storage","TestableNodeImplementation","block_genesis","gen_networks","leaf_create_random_transaction","state_create_random_transaction","txn_count","BLSPrivKey","BLSPubKey","DaProposal","Decide","Error","Event","EventType","ExternalMessageReceived","Message","PrivateKey","PureAssembledSignatureType","QcParams","QcType","QuorumProposal","ReplicaViewTimeout","SignError","SignatureKey","StakeTableEntry","SystemContextHandle","Transactions","UpgradeProposal","ViewFinished","ViewTimeout","__clone_box","__clone_box","__clone_box","assemble","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone_into","clone_into","clone_into","consensus_registry","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","event","event","fmt","fmt","fmt","from","from","from","from_bytes","from_private","generated_from_seed_indexed","genesis_proposer_pk","get_hash","handle","hash","hotshot","init","init","init","internal_event_stream","into","into","into","kind","layout_raw","layout_raw","layout_raw","memberships","network","network_registry","output_event_stream","pointer_metadata","pointer_metadata","pointer_metadata","public_key","public_parameter","sender","serialize","serialize","serialize","sig_proof","sign","stake_table_entry","storage","to_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","view_number","view_number","vzip","vzip","vzip","block_size","error","leaf_chain","proposal","proposal","proposal","qc","sender","sender","sender","transactions","view_number","view_number","view_number","DaProposal","Decide","Error","Event","EventType","ExternalMessageReceived","QuorumProposal","ReplicaViewTimeout","Transactions","UpgradeProposal","ViewFinished","ViewTimeout","event","view_number","block_size","error","leaf_chain","proposal","proposal","proposal","qc","sender","sender","sender","transactions","view_number","view_number","view_number","SystemContextHandle","add_task","borrow","borrow_mut","builder_timeout","consensus","consensus_registry","cur_view","decided_leaf","decided_state","deref","deref_mut","deserialize","drop","event_stream","event_stream_known_impl","external_channel_sender","from","hotshot","init","internal_channel_sender","internal_event_stream","internal_event_stream_receiver_known_impl","internal_event_stream_sender","into","layout_raw","leader","memberships","network","network_registry","next_view_timeout","output_event_stream","pointer_metadata","private_key","public_key","public_key","send_event","shut_down","spawn_initial_timeout_task","state","storage","storage","submit_transaction","total_nodes","try_decided_leaf","try_from","try_into","type_id","vzip"],"q":[[0,"hotshot"],[218,"hotshot::HotShotError"],[229,"hotshot::tasks"],[330,"hotshot::tasks::task_state"],[332,"hotshot::traits"],[464,"hotshot::traits::NetworkError"],[473,"hotshot::traits::election"],[475,"hotshot::traits::election::static_committee"],[532,"hotshot::traits::election::static_committee_leader_two_views"],[589,"hotshot::traits::implementations"],[650,"hotshot::traits::networking"],[679,"hotshot::traits::networking::NetworkError"],[688,"hotshot::traits::networking::combined_network"],[760,"hotshot::traits::networking::libp2p_network"],[892,"hotshot::traits::networking::memory_network"],[970,"hotshot::traits::networking::push_cdn_network"],[1177,"hotshot::traits::node_implementation"],[1187,"hotshot::types"],[1311,"hotshot::types::EventType"],[1325,"hotshot::types::event"],[1339,"hotshot::types::event::EventType"],[1353,"hotshot::types::handle"],[1402,"dyn_clone::sealed"],[1403,"core::error"],[1404,"std::backtrace"],[1405,"core::option"],[1406,"hotshot_types::traits::node_implementation"],[1407,"hotshot_types::traits::node_implementation"],[1408,"hotshot_types::consensus"],[1409,"async_lock::rwlock"],[1410,"alloc::sync"],[1411,"hotshot_types::data"],[1412,"rkyv::with"],[1413,"core::result"],[1414,"core::fmt"],[1415,"core::fmt"],[1416,"alloc::collections::btree::map"],[1417,"hotshot_types::simple_certificate"],[1418,"alloc::vec"],[1419,"hotshot_types::utils"],[1420,"hotshot_task_impls::events"],[1421,"async_broadcast"],[1422,"async_broadcast"],[1423,"core::fmt"],[1424,"core::marker"],[1425,"hotshot_types::consensus"],[1426,"core::alloc::layout"],[1427,"core::future::future"],[1428,"alloc::boxed"],[1429,"core::pin"],[1430,"alloc::string"],[1431,"core::any"],[1432,"hotshot_types::traits::network"],[1433,"hotshot_types::request_response"],[1434,"futures_core::future"],[1435,"multiaddr"],[1436,"libp2p_networking::network::node::config"],[1437,"libp2p_networking::network::node::config"],[1438,"serde::de"],[1439,"hotshot_types::traits::states"],[1440,"hotshot_types::traits::block_contents"],[1441,"core::cmp"],[1442,"core::hash"],[1443,"hotshot_types::traits::block_contents"],[1444,"libp2p_networking::network::node::handle"],[1445,"hotshot_types::traits::states"],[1446,"core::time"],[1447,"libp2p_identity::keypair"],[1448,"core::convert"],[1449,"rand_core"],[1450,"libp2p_networking::network::node::config"],[1451,"core::num::nonzero"],[1452,"std::collections::hash::set"],[1453,"libp2p_identity::peer_id"],[1454,"committable"],[1455,"core::iter::traits::iterator"],[1456,"vbs::version"],[1457,"hotshot_types::traits::network"],[1458,"cdn_proto::crypto::signature"],[1459,"anyhow"],[1460,"hotshot_types::traits::network"],[1461,"hotshot_types"],[1462,"hotshot_orchestrator::config"],[1463,"core::net::socket_addr"],[1464,"async_compatibility_layer::channel::unbounded::inner"],[1465,"hotshot_types::request_response"],[1466,"futures_channel::mpsc"],[1467,"libp2p_networking::network::node::handle"],[1468,"libp2p_networking::network::behaviours::dht::record"],[1469,"serde::ser"],[1470,"async_channel"],[1471,"bitvec::slice"],[1472,"serde::de"],[1473,"serde::de"],[1474,"tagged_base64"],[1475,"core::convert"],[1476,"bitvec::vec"],[1477,"hotshot_task::task"],[1478,"futures_core::stream"],[1479,"async_std::task::join_handle"],[1480,"core::num::nonzero"]],"d":["Failure in the block.","An async broadcast channel","Internal value used to drive the state machine","A <code>TwinsHandlerState</code> that forwards each message to both …","Failed to broadcast a message on the network","Failed to Message the leader in the given stage","Failed to serialize message","Length, in bytes, of a 256 bit hash","Length, in bytes, of a 512 bit hash","Reexport error type Error type for <code>HotShot</code>","initializer struct for creating starting block","Not enough valid signatures for a quorum","Error accessing storage Invalid state machine state","Item was not present in storage","Wrapper for all marketplace config that needs to be passed …","Bundle of all the memberships a consensus instance uses","Miscellaneous error TODO fix this with #181 …","Failure in networking layer","A <code>TwinsHandlerState</code> that randomly forwards a message to …","Holds the state needed to participate in <code>HotShot</code> consensus","HotShot timed out waiting for msgs","Trait for handling messages for a node with a twin copy of …","HotShot timed out during round","","","","","Anchored leaf provided by the initializer.","","","auction results provider","","","","","","","","","","","","","","","","","","","","","","","","","Configuration items for this hotshot instance","Returns a copy of the consensus struct","The hotstuff implementation","DA","Returns a copy of the last decided leaf","Returns the last decided validated state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","External event stream for communication with the …","fallback builder","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","initialize from genesis","Reload previous state based on most recent leaf and the …","Fuse two channels into a single channel","","Highest QC that was seen, for genesis it’s the genesis …","uid for instrumentation","","Initializes a new <code>SystemContext</code> and does the work of …","","","","","","","","the leaf specified initialization","Returns a copy of the instance state","Immutable instance state","Instance-level state.","access to the internal event stream, in case we need to, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Marketplace config for this instance of HotShot","Memberships used by consensus","the metrics that the implementor is using.","The underlying network","Creates a new <code>Arc&lt;SystemContext&gt;</code> with the given …","Creates a new <code>Arc&lt;SystemContext&gt;</code> with the given …","return the timeout for a view for <code>self</code>","Access to the output event stream.","","","","","","","","The private key of this node","The public key of this node","Publishes a transaction asynchronously to the network.","Quorum Membership","Reexport rand crate","Handle a message from either twin, forwarding it to the …","","","Spawn all tasks that operate on <code>SystemContextHandle</code>.","Proposals we have sent out to provide to others for catchup","Emit an external event","Handle a message sent to the twin from the network task, …","","","","Spawn all tasks that operate on <code>SystemContextHandle</code>.","“Starts” consensus by sending a <code>QcFormed</code>, <code>ViewChange</code>, …","The view to enter when first starting consensus","Starting view number that we are confident won’t lead to …","Get the validated state from a given <code>view</code>.","Optional state delta.","Reference to the internal storage for consensus datum.","Provides a number of tasks that run continuously","","","","","","Contains traits consumed by <code>SystemContext</code>","[Non-blocking] instantly returns a copy of the last …","","","","","","","","","","","","","","","","","","","","","","Contains types used by the crate","Undecided leafs that were seen, but not yet decided on.  …","Not yet decided state","shared lock for upgrade information","Optional validated state.","VID","View Sync","","","","","","","","source of error","Context","Number of valid signatures","source of error","The underlying network fault","The underlying network fault","The underlying block error.","Underlying network fault","The state that the round was in when it timed out","Threshold of signatures needed for a quorum","view number","An <code>EventTransformerState</code> that multiplies <code>QuorumProposalSend</code>…","An <code>EventHandlerState</code> that modifies justify_qc on …","An <code>EventHandlerState</code> that doubles the <code>QuorumVoteSend</code> and …","dummy (TODO delete later)","Trait for intercepting and modifying messages between the …","event for global event stream","shut everything down","","Phantom","Adds consensus-related tasks to a <code>SystemContextHandle</code>.","Add the network task to handle events and send messages.","Add the network task to handle messages and publish events.","adds tasks for sending/receiving messages to/from the …","Add byzantine network tasks with the trait","Add tasks for network requests and responses","Add a task which responds to requests on the network.","","","","","","","","","","","Creates a monitor for shutdown events.","","","","","","","","","","","","","Which proposals to be dishonest at","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","When a leader is sending a proposal this method will mock …","The view number increment each time it’s duplicated","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The number of times to duplicate a <code>QuorumProposalSend</code> event","","","","","modify incoming messages from the network","","","","modify outgoing messages from the network","","","","Creates a <code>SystemContextHandle</code> with the given even …","Provides trait to create task states from a …","","How many times current node has been elected leader and …","","","","","","","","","","","","","Store events from previous views","How far back to look for a QC","","","","","Trait for creating task states.","Function to create the task state from a given …","The auction results type for Solver interactions","Abstraction over the full contents of a block","Centralized server specific errors","Error sending output to consumer of …","Could not deliver a message to a specified recipient","The type of the state delta this state is associated with.","The error type for this particular type of ledger state","The error type for this type of block","Failed to deserealize a network message","Failed to serialize a network message","The type of the instance-level state this state is …","The type of the instance-level state this state is …","Libp2p specific errors","collection of libp2p specific errors","memory network specific errors","Data created during block building which feeds into the …","Multiple errors","The underlying network type","Error type for networking","Builder for <code>NetworkNodeConfig</code>.","interface describing how reliable the network is","No bootstrap nodes were specified on network creation","Attempted to deliver a message to an unknown node","Node implementation aggregate trait","The requested data was not found","The network is not ready yet","Push CDN network-specific errors","The underlying connection has been shut down","Storage for DA layer interactions","extra functions required on a node implementation to be …","Time compatibility needed for reward collection","A timeout occurred","The type of the transitions we are applying","unable to cancel a request, the request has already been …","unimplemented functionality","Abstraction over the state that blocks modify","Validated State","","","","The signed authentication message sent to the remote peer …","","","generate a genesis block","","","","","address to bind to","","Builds a new <code>NetworkNodeConfig</code>.","Generate commitment that builders use to sign block …","","given a message and a way to send the message, decide …","","","","","","","","","","","","","Sortition trait elections used for consensus","Build the payload and metadata for genesis/null block.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Build a payload with the encoded transaction bytes, …","Construct the state with the given block header.","Build a payload and associated metadata with the …","Generate the communication channels for testing","Construct a genesis validated state.","","optional identity","","Module for publicly usable implementations of the traits","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates random transaction if possible otherwise panics …","parameters for gossipsub mesh network","","Network access compatibility","Composite trait for node behavior","The type of node (bootstrap etc)","","Number of transactions in the block.","Gets called to notify the persistence backend that this …","","","Replication factor for entries in the DHT","","republication interval in DHT, must be much less than <code>ttl</code>","","sample from uniform distribution to decide whether or not …","Sample from bernoulli distribution to decide whether or …","number of times to repeat the packet","scramble the packet","whether to start in libp2p::kad::Mode::Server mode","","","The stake table. Used for authenticating other nodes. If …","","Creates random transaction if possible otherwise panics …","list of addresses to connect to at initialization","","","","List of transaction commitments.","Get the transactions in the payload.","","","","","expiratiry for records in DHT","","the number of transactions in a block","","","Check if the proposed block header is valid and apply it …","","","vec of errors","source of error","source of error","source of error","source of error","Originating bincode error","originating bincode error","Source of error","sources of errors","static (round robin) committee election","static (round robin leader for 2 consecutive views) …","Dummy implementation of <code>Membership</code>","static committee using a vrf kp","","Node type phantom","Node type phantom","All the nodes participating and their stake","All the nodes participating and their stake","","","","","The nodes on the static committee and their stake","The nodes on the static committee and their stake","builder nodes","builder nodes","Clone the public key and corresponding stake table for …","Get the network topic for the committee","The network topic of the committee","The network topic of the committee","","","","","","","","","","","","the number of fixed leader for gpuvid","the number of fixed leader for gpuvid","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Index the vector of public keys with the current view …","Creates a new dummy elector","","get all the non-staked nodes","get the non-staked builder nodes","","","","","","","","","","","","","static committee using a vrf kp","Dummy implementation of <code>Membership</code>","","Node type phantom","Node type phantom","All the nodes participating and their stake","All the nodes participating and their stake","","","","","The nodes on the static committee and their stake","The nodes on the static committee and their stake","builder nodes","builder nodes","Clone the public key and corresponding stake table for …","Get the network topic for the committee","The network topic of the committee","The network topic of the committee","","","","","","","","","","","","the number of fixed leader for gpuvid","the number of fixed leader for gpuvid","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Index the vector of public keys with the current view …","Creates a new dummy elector","","get all the non-staked nodes","get the non-staked builder nodes","","","","","","","","","","","","","CDN-specific metrics","The enum for the topics we can subscribe to in the Push CDN","A communication channel with 2 networks, where we can fall …","The DA topic","The global topic","We encapsulate keys here to help readability.","Libp2p-specific metrics","Networking implementation that uses libp2p generic over <code>M</code> …","Shared state for in-memory mock networking.","In memory only network simulator.","Type alias for a shared collection of peerid, multiaddrs","The production run definition for the Push CDN. Uses the …","A communication channel to the Push CDN, which is a …","The testing run definition for the Push CDN. Uses the real …","Wrapper for the tuple of <code>PushCdnNetwork</code> and <code>Libp2pNetwork</code> …","A wrapped <code>SignatureKey</code>. We need to implement the Push CDN…","","","","","The underlying client","","","How long to delay","Channels to the delayed tasks","","","Derive a Libp2p keypair from a given private key","Derive a Libp2p Peer ID from a given private key","","","Returns the argument unchanged.","The id of this <code>MemoryNetwork</code> cluster","","holds the state of the libp2p network","The actual internal state","Calls <code>U::from(self)</code>.","Whether or not the underlying network is supposed to be …","Whether or not the network is considered ready","","The list of <code>MemoryNetwork</code>s","Last n seen messages to prevent processing duplicates","The CDN-specific metrics","The two networks we’ll use for send/recv","How many times messages were sent on secondary without …","The number of currently connected peers","The number of failed messages","The number of failed messages","","","Whether primary is considered down","How many times primary failed to deliver","The underlying (private) signing key, used to sign …","","The underlying (public) verification key, used to …","The list of <code>MemoryNetwork</code>s aggregated by topic","","","","","","Centralized server specific errors","Error sending output to consumer of …","Could not deliver a message to a specified recipient","Failed to deserealize a network message","Failed to serialize a network message","Libp2p specific errors","collection of libp2p specific errors","memory network specific errors","Multiple errors","Error type for networking","interface describing how reliable the network is","No bootstrap nodes were specified on network creation","Attempted to deliver a message to an unknown node","The requested data was not found","The network is not ready yet","Push CDN network-specific errors","The underlying connection has been shut down","A timeout occurred","unable to cancel a request, the request has already been …","unimplemented functionality","given a message and a way to send the message, decide …","Networking Implementation that has a primary and a …","Libp2p based/production networking implementation This …","In memory network simulator","The Push CDN network","sample from uniform distribution to decide whether or not …","Sample from bernoulli distribution to decide whether or …","number of times to repeat the packet","scramble the packet","vec of errors","source of error","source of error","source of error","source of error","Originating bincode error","originating bincode error","Source of error","sources of errors","A communication channel with 2 networks, where we can fall …","Thread-safe ref counted lock to a map of channels to the …","Wrapper for the tuple of <code>PushCdnNetwork</code> and <code>Libp2pNetwork</code> …","","","","","","","","","Helper function to calculate a hash of a type that …","","","","","","How long to delay","Channels to the delayed tasks","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Get the number of messages in-flight.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Last n seen messages to prevent processing duplicates","The two networks we’ll use for send/recv","Constructor","How many times messages were sent on secondary without …","","","","","Get a ref to the primary network","Whether primary is considered down","How many times primary failed to deliver","","","Receive one or many messages from the underlying network.","","","Get a ref to the backup network","a helper function to send messages through both networks …","","","","","","","","","","","","","","","","convenience alias for the type for bootstrap addresses …","Stubbed out Ack","Libp2p-specific metrics","Networking implementation that uses libp2p generic over <code>M</code> …","The underlying state of the libp2p network","Type alias for a shared collection of peerid, multiaddrs","hardcoded topic of QC used","","","","","this is really cheating to enable local tests hashset of …","","","","","","","","","","This should not be required, but it is. Version …","","","","","","Initialize with empty metrics","","","","","","","","","Derive a Libp2p keypair from a given private key","Derive a Libp2p Peer ID from a given private key","","","","","max time before dropping message due to DHT error","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create and return a Libp2p network from a network config …","Returns a boxed function …","handle to control the network","task to propagate messages to handlers terminates on shut …","Handle events","","","","","","holds the state of the libp2p network","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","whether or not we’ve bootstrapped into the DHT yet","if we’re a member of the DA committee or not","Returns whether or not the network is currently ready.","Whether or not the network is considered ready","whether or not the network is ready to send","Killswitch sender","the latest view number (for node lookup purposes) NOTE: …","","","","","The Libp2p metrics we’re managing","Populate the metrics with Libp2p-specific metrics","Constructs new network for a node. Note that this network …","Sender for node lookup (relevant view number, key of node) …","The number of currently connected peers","The number of failed messages","","","","this node’s public key","","","","","","","","Message Receiver","Receive one or many messages from the underlying network.","reliability_config","","Receiver for Requests for Data, includes the request and …","","Sender for broadcast messages","","","Initiates connection to the outside world","Spawns task for looking up nodes pre-emptively","","The list of topics we’re subscribed to","","","","","","","","","","","","","","","The libp2p view update is a special operation intrinsic to …","","","","","","Returns only when the network is ready.","Shared state for in-memory mock networking.","In memory only network simulator.","Internal state for a <code>MemoryNetwork</code> instance","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","The id of this <code>MemoryNetwork</code> cluster","","Count of messages that are in-flight (send but not …","","","","The actual internal state","Send a <code>Vec&lt;u8&gt;</code> message to the inner <code>input</code>","Input for messages","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The list of <code>MemoryNetwork</code>s","The master map","Create a new, empty, <code>MasterMap</code>","Creates a new <code>MemoryNetwork</code> and hooks it up to the group …","Output for messages","","","","","Receive one or many messages from the underlying network.","config to introduce unreliability to the network","","","The list of <code>MemoryNetwork</code>s aggregated by topic","","","","","","","","","","","","","","","The broker definition for the Push CDN. Uses the TCP …","CDN-specific metrics","The client definition for the Push CDN. Uses the Quic …","The DA topic","The global topic","We encapsulate keys here to help readability.","The production run definition for the Push CDN. Uses the …","A communication channel to the Push CDN, which is a …","The testing run definition for the Push CDN. Uses the real …","The enum for the topics we can subscribe to in the Push CDN","The user definition for the Push CDN. Uses the Quic …","A wrapped <code>SignatureKey</code>. We need to implement the Push CDN…","","","","","","","","","","","","","","","","","","","","","","","","Broadcast a message to all members of the quorum.","Broadcast a message to members of the particular topic. …","The underlying client","","","","","","","","","","","Broadcast a message to all members of the DA committee.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Send a direct message to a node with a particular key. …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Generate n Push CDN clients, a marshal, and two brokers …","The PushCDN does not support in-flight message counts","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether or not the underlying network is supposed to be …","","","","","","","","","","The CDN-specific metrics","Populate the metrics with the CDN-specific ones","Create a new <code>PushCdnNetwork</code> (really a client) from a …","The number of failed messages","Pause sending and receiving on the PushCDN network.","","","","","","","","","","The underlying (private) signing key, used to sign …","The underlying (public) verification key, used to …","Do nothing here, as we don’t need to look up nodes.","Receive a message. Is agnostic over <code>transmit_type</code>, which …","","Resume sending and receiving on the PushCDN network.","","TODO: shut down the networks. Unneeded for testing.","Sign a message of arbitrary data and return the serialized …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a message of arbitrary data and return the result","","","","","","","","","","Wait for the client to initialize the connection","The auction results type for Solver interactions","The underlying network type","Node implementation aggregate trait","Storage for DA layer interactions","extra functions required on a node implementation to be …","generate a genesis block","Generate the communication channels for testing","Creates random transaction if possible otherwise panics …","Creates random transaction if possible otherwise panics …","the number of transactions in a block","BLS private key used to sign a message","BLS public key used to verify a signature","DA proposal was received from the network or submitted to …","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","A message destined for external listeners was received","Incoming message","The private key type for this signature algorithm","The type of the assembled signature, without <code>BitVec</code>","The type of the quorum certificate parameters used for …","The type of the assembled qc: assembled signature + <code>BitVec</code>","Quorum proposal was received from the network or submitted …","A replica task was canceled by a timeout interrupt","Type of error that can occur when signing data","Trait for abstracting public key signatures Self is the …","The type of the entry that contain both public key and …","Event streaming handle for a <code>SystemContext</code> instance …","New transactions were received from the network or …","Upgrade proposal was received from the network or …","The view has finished.  If values were decided on, a <code>Decide</code>…","The view timed out","","","","assemble the signature from the partial signature and the …","","","","","","","check the quorum certificate for the assembled signature","","","","","","","registry for controlling consensus tasks","","","","","","","","","","","","","","","","","","","","","Events that a <code>SystemContext</code> instance can emit","The underlying event","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a public key from bytes","Produce a public key from a private key","Generate a new key pair","generates the genesis public key. Meant to be dummy/filler","","Provides an event-streaming handle for a <code>SystemContext</code> …","","Internal reference to the underlying <code>SystemContext</code>","","","","access to the internal event stream, in case we need to, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The message kind","","","","Memberships used by consensus","Networks used by the instance of hotshot","registry for controlling network tasks","The sender and receiver, to allow the application to …","","","","only get the public key from the stake table entry","get the public parameter for the assembled signature …","The sender of this message","","","","get the assembled signature and the <code>BitVec</code> separately from …","Produce a signature","get the stake table entry from the public key and stake …","Reference to the internal storage for consensus datum.","Serialize a public key to bytes","","","","","","","","","","","","","Validate a signature","get the view number out of a message","The view number that this event originates from","","","","Optional information of the number of transactions in the …","The underlying error","The chain of Leafs that were committed by this decision","Contents of the proposal","Contents of the proposal","Contents of the proposal","The QC signing the most recent leaf in <code>leaf_chain</code>.","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","The list of transactions","The view that timed out","The view number that has just finished","The view that timed out","DA proposal was received from the network or submitted to …","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","A message destined for external listeners was received","Quorum proposal was received from the network or submitted …","A replica task was canceled by a timeout interrupt","New transactions were received from the network or …","Upgrade proposal was received from the network or …","The view has finished.  If values were decided on, a <code>Decide</code>…","The view timed out","The underlying event","The view number that this event originates from","Optional information of the number of transactions in the …","The underlying error","The chain of Leafs that were committed by this decision","Contents of the proposal","Contents of the proposal","Contents of the proposal","The QC signing the most recent leaf in <code>leaf_chain</code>.","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","The list of transactions","The view that timed out","The view number that has just finished","The view that timed out","Event streaming handle for a <code>SystemContext</code> instance …","Adds a hotshot consensus-related task to the …","","","","Get the underlying consensus state for this <code>SystemContext</code>","registry for controlling consensus tasks","Wrapper to get the view number this node is on.","Get the last decided leaf of the <code>SystemContext</code> instance.","Get the last decided validated state of the <code>SystemContext</code> …","","","","","obtains a stream to expose to the user","HACK so we can know the types when running tests… there …","Get the sender side of the external event stream for …","Returns the argument unchanged.","Internal reference to the underlying <code>SystemContext</code>","","Get the sender side of the internal event stream for …","access to the internal event stream, in case we need to, …","HACK so we can know the types when running tests… there …","HACK so we can create dependency tasks when running tests","Calls <code>U::from(self)</code>.","","Wrapper for <code>HotShotConsensusApi</code>’s <code>leader</code> function","Memberships used by consensus","Networks used by the instance of hotshot","registry for controlling network tasks","return the timeout for a view of the underlying …","The sender and receiver, to allow the application to …","","","Wrapper to get this node’s public key","","","Shut down the the inner hotshot and wait until all …","A helper function to spawn the initial timeout task from a …","Get the validated state from a given <code>view</code>.","Provides a reference to the underlying storage for this …","Reference to the internal storage for consensus datum.","Submits a transaction to the backing <code>SystemContext</code> …","","Tries to get the most recent decided leaf, returning …","","","",""],"i":[4,0,4,0,4,4,4,0,0,0,0,4,4,4,0,0,4,4,0,0,4,0,4,8,11,13,14,8,4,4,11,4,8,11,13,23,26,14,4,8,11,13,23,26,14,4,4,8,11,13,14,8,11,13,14,8,8,8,13,8,8,8,11,13,23,26,14,4,8,11,13,23,26,14,4,4,8,11,13,23,26,14,4,0,8,11,13,23,26,14,4,8,11,23,26,4,4,8,11,13,23,26,14,4,14,14,35,4,14,8,4,8,8,11,13,23,26,14,4,14,8,8,14,8,8,11,13,23,26,14,4,8,11,13,23,26,14,4,8,8,8,8,8,8,8,8,8,11,13,23,26,14,4,8,8,8,13,0,35,23,26,8,14,8,35,23,26,4,35,8,8,14,8,14,8,0,8,11,13,14,4,0,8,8,11,13,23,26,14,4,8,11,13,23,26,14,4,8,11,13,23,26,14,4,0,14,14,8,14,13,13,8,11,13,23,26,14,4,183,184,185,186,187,188,189,190,191,185,191,0,0,0,63,0,0,63,63,67,0,0,0,0,61,0,0,63,65,66,67,63,65,66,67,63,63,0,63,65,66,67,63,65,66,67,63,65,66,67,67,63,65,66,67,63,65,66,67,63,65,66,67,67,65,63,65,66,67,63,65,66,67,63,65,66,67,65,63,65,66,67,61,65,66,67,61,65,66,67,61,0,63,67,63,65,66,67,63,65,66,67,63,65,66,67,67,67,63,65,66,67,0,192,9,0,71,71,71,86,86,80,71,71,86,80,71,71,71,80,71,9,0,0,0,71,71,0,71,71,71,71,9,0,86,71,80,71,71,0,80,68,71,71,68,68,71,193,68,71,68,71,68,68,68,80,71,90,68,68,68,68,71,68,71,71,68,71,68,71,0,80,71,71,68,71,71,80,86,80,193,86,71,68,68,0,71,68,71,68,71,68,71,193,68,68,0,0,68,68,80,86,68,71,68,68,68,68,90,90,90,90,68,68,71,68,68,193,68,68,68,71,80,80,68,71,68,71,68,68,193,68,71,86,68,71,194,195,196,197,198,199,200,201,202,0,0,0,0,112,203,112,203,112,112,112,112,112,203,112,203,112,112,112,203,112,112,112,112,112,112,112,112,112,112,112,112,203,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,0,0,122,204,122,204,122,122,122,122,122,204,122,204,122,122,122,204,122,122,122,122,122,122,122,122,122,122,122,122,204,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,0,0,0,155,155,0,0,0,0,0,0,0,0,0,0,0,123,205,123,123,130,123,123,126,126,123,123,0,0,123,123,123,152,123,131,151,123,130,136,123,152,126,130,126,126,136,136,156,205,123,126,126,123,205,123,152,123,123,123,123,123,71,71,71,71,71,71,71,71,71,0,0,71,71,71,71,71,71,71,71,71,90,0,0,0,0,90,90,90,90,194,195,196,197,198,199,200,201,202,0,0,0,126,128,206,126,128,126,128,126,0,126,128,126,128,126,126,126,126,128,126,128,126,128,126,126,128,126,128,126,126,126,128,126,128,126,126,128,126,126,126,126,126,206,126,128,126,126,126,206,126,126,126,126,126,126,126,126,126,128,126,128,126,128,126,128,126,126,126,128,126,0,0,0,0,0,0,0,136,131,207,205,137,136,148,137,131,136,148,137,131,131,148,136,131,136,131,131,136,136,148,137,131,136,148,137,131,0,0,136,148,137,131,137,131,136,148,137,131,136,137,131,136,148,137,131,131,131,137,131,131,131,136,148,137,131,131,136,148,137,131,137,137,131,136,137,137,137,136,148,137,131,137,136,131,137,136,136,131,207,205,137,136,148,137,131,207,205,131,137,131,137,131,137,131,137,148,131,131,131,131,137,136,131,136,148,137,131,136,148,137,131,136,148,137,131,131,136,148,137,131,131,131,0,0,0,0,151,152,153,151,152,153,151,151,151,151,151,152,153,151,152,153,151,152,153,151,151,152,153,151,152,153,151,152,153,151,151,152,151,153,152,153,151,151,151,153,152,153,151,152,153,151,152,153,152,151,153,151,152,153,151,151,153,151,151,152,151,152,153,151,152,153,151,152,153,151,152,153,151,151,0,0,0,155,155,0,0,0,0,0,0,0,156,157,158,130,155,208,209,210,211,156,157,158,130,155,208,209,210,211,156,157,158,130,155,130,130,130,156,157,158,130,155,156,157,158,130,155,130,156,208,209,210,211,156,157,158,130,155,208,209,210,211,156,157,158,130,155,208,209,210,211,156,157,157,158,130,155,130,208,209,210,211,156,157,158,130,155,157,155,157,157,157,157,155,155,155,155,208,209,210,211,156,157,158,130,155,155,130,130,208,209,210,211,156,157,158,130,155,208,209,210,211,156,157,158,130,155,130,208,209,210,211,156,157,158,130,155,130,156,130,156,130,208,209,210,211,156,157,158,130,155,123,123,130,130,130,130,157,130,157,130,156,157,158,130,155,208,209,210,211,156,157,158,130,155,155,155,208,209,210,211,156,157,158,130,155,208,209,210,211,156,157,158,130,155,157,208,209,210,211,156,157,158,130,155,130,9,9,0,9,0,193,193,193,193,193,0,0,161,161,161,0,0,161,0,70,70,70,70,161,161,70,0,70,0,161,161,161,161,50,161,162,70,50,161,162,50,161,162,70,50,161,162,50,161,162,47,50,161,162,50,161,162,50,50,161,161,162,162,50,161,162,162,162,162,162,162,0,50,50,161,162,50,161,162,70,70,70,70,162,0,162,47,50,161,162,47,50,161,162,162,50,161,162,47,47,47,47,50,161,162,70,70,162,50,161,162,70,70,70,47,70,50,161,162,50,161,162,50,161,162,50,161,162,70,162,50,50,161,162,212,213,212,214,215,216,212,214,215,216,217,218,219,220,161,161,161,0,0,161,161,161,161,161,161,161,50,50,212,213,212,214,215,216,212,214,215,216,217,218,219,220,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47],"f":"```````````````````````{{cb}d{}}000`{cf{}}0`{{{h{c}}}{{l{j}}}n}{ce{}{}}0000000000000{{{h{c}}}{{l{f}}}n}{{{A`{ceg}}}{{A`{ceg}}}n{{Ab{c}}}Ad}{{{Af{ce}}}{{Af{ce}}}{Ahn}{Ah{Ab{c}}}}{{{Aj{c}}}{{Aj{c}}}{Ahn}}{{{Al{c}}}{{Al{c}}}{Ahn}}{{ce}d{}{}}000`{{{A`{ceg}}}{{Bb{{B`{{An{c}}}}}}}n{{Ab{c}}}Ad}``{{{A`{ceg}}}{{Bd{c}}}n{{Ab{c}}}Ad}{{{A`{ceg}}}Bbn{{Ab{c}}}Ad}{Bfc{}}0000000000000{{{h{c}}}Bhn}{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}000000`{Bfd}000000``{{BnC`}Cb}{{CdC`}Cb}{{{h{c}}C`}{{Bl{dCf}}}n}{{{h{c}}C`}{{Bl{dCf}}}{Chn}}{cc{}}000000{{}{{Bl{{Al{c}}{h{c}}}}}n}{{{Bd{c}}{l{Bb}}{Cn{{Cl{c{Cj{c}}}}}}{D`{c}}{Db{{Bd{c}}}}{Cn{{Dd{c}}}}}{{Al{c}}}n}{{Df{Dn{{Dj{{Bb{{Dh{c}}}}}}{Dl{{Bb{{Dh{c}}}}}}}}{Dn{{Dj{{Bb{{Dh{c}}}}}}{Dl{{Bb{{Dh{c}}}}}}}}}{{Dn{{Dj{{Bb{{Dh{c}}}}}}{Dl{{Bb{{Dh{c}}}}}}}}}n}{{ce}{{E`{eg}}}{}{EbEdEf}{}}``{c{}{}}{{EhEj{Aj{c}}Bb{Al{c}}El{Af{ce}}}{{Bl{{Dn{{En{ceg}}{Dj{{Bb{{Dh{c}}}}}}{Dl{{Bb{{Dh{c}}}}}}}}{h{c}}}}}n{{Ab{c}}}Ad}{{}Bf}000000`{{{A`{ceg}}}Bbn{{Ab{c}}}Ad}```{ce{}{}}000000{{}{{Bl{F`Fb}}}}000000````{{EhEj{Aj{c}}Bb{Al{c}}El{Af{ce}}}{{Bb{{A`{ceg}}}}}n{{Ab{c}}}Ad}{{EhEj{Aj{c}}Bb{Al{c}}El{Af{ce}}{Dn{{Dj{{Bb{{Dh{c}}}}}}{Dl{{Bb{{Dh{c}}}}}}}}{Dn{{Dj{{Fd{c}}}}{Dl{{Fd{c}}}}}}}{{Bb{{A`{ceg}}}}}n{{Ab{c}}}Ad}{{{A`{ceg}}}Ehn{{Ab{c}}}Ad}`{{}}000000``{{{A`{ceg}}}{{Bl{d{h{c}}}}}n{{Ab{c}}}Ad}``{{Df{Ff{{Dh{c}}{Dh{c}}}}}{{Fl{{Fj{Fh}}}}}n}{{Bn{Ff{{Dh{c}}{Dh{c}}}}}{{Fl{{Fj{Fh}}}}}n}{{Cd{Ff{{Dh{c}}{Dh{c}}}}}{{Fl{{Fj{Fh}}}}}n}{{{A`{ceg}}}{{En{ceg}}}n{{Ab{c}}}Ad}`{{{A`{ceg}}{Fd{c}}}dn{{Ab{c}}}Ad}{{Df{Dh{c}}}{{Fl{{Fj{Fh}}}}}n}{{Bn{Dh{c}}}{{Fl{{Fj{Fh}}}}}n}{{Cd{Dh{c}}}{{Fl{{Fj{Fh}}}}}n}{{{h{c}}}{{l{f}}}n}{{DfEhEj{Aj{c}}Bb{Al{c}}El{Af{ce}}}{{Fl{{Fj{Fh}}}}}n{{Ab{c}}}}{{{A`{ceg}}}dn{{Ab{c}}}Ad}``{{{A`{ceg}}}{{l{Bb}}}n{{Ab{c}}}Ad}```{ce{}{}}000{cFn{}}`{{{A`{ceg}}}{{l{{Bd{c}}}}}n{{Ab{c}}}Ad}{c{{Bl{e}}}{}{}}0000000000000{cG`{}}000000```````4444444``````````````````{{cb}d{}}`{{{En{ceg}}}dn{{Ab{c}}}Ad}{{{En{ceg}}{Bb{i}}{Gf{{Bb{{Dh{c}}}}}{{Gb{Gd}}}}}dn{{Ab{c}}}AdGh}{{{En{ceg}}{Bb{i}}}dn{{Ab{c}}}AdGh}2{{Gj{En{ceg}}}{{Fl{{Fj{Fh}}}}}n{{Ab{c}}}Ad}3{{{En{ceg}}Gl}dn{{Ab{c}}}Ad}::::::::{GnGn}{{ce}d{}{}}{{{En{ceg}}}{{H`{d}}}n{{Ab{c}}}Ad}{Bfc{}}0000000{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}000`{Bfd}000{{GnC`}Cb}{{HbC`}Cb}{{HdC`}Cb}{{{Hf{ce}}C`}Cb{Chn}{Ch{Ab{c}}}}{cc{}}000{{{Hf{ce}}{Dh{c}}{Cl{c{Cj{c}}}}}{{Dh{c}}}n{{Ab{c}}}}`{{}Bf}000{ce{}{}}000{{}{{Bl{F`Fb}}}}000`{{}}000{{Gj{Dh{c}}}{{Fl{{Fj{Fh}}}}}n}{{Hb{Dh{c}}}{{Fl{{Fj{Fh}}}}}n}{{Hd{Dh{c}}}{{Fl{{Fj{Fh}}}}}n}{{{Hf{ce}}{Dh{c}}}{{Fl{{Fj{Fh}}}}}n{{Ab{c}}Ch}}3210{{GjEhEj{Aj{c}}Bb{Al{c}}El{Af{ce}}}{{Fl{{Fj{Fh}}}}}n{{Ab{c}}}}`7`{c{{Bl{e}}}{}{}}0000000{cG`{}}000``9999`{{{En{ceg}}}{{Fl{{Fj{Fh}}}}}n{{Ab{c}}}Ad}`````````````````````````````````````{{cb}d{}}{cf{}}0{{{Hh{c}}{l{{Db{Hj}}}}}{{Hh{c}}}{HlAh}}`{Hn{{l{j}}}}<>>>>{{{Hh{c}}{l{I`}}}{{Hh{c}}}{HlAh}}`{{{Hh{c}}}{{Bl{{Ib{c}}Id}}}{HlAh}}{{{J`{}{{If{c}}{Ih{e}}{Ij{g}}{Il{i}}{In{m}}}}m}Jb{fChEdEfJdJf}Jh{JjJdJf}{{Jl{k}}}n{AhChJfJnK`EdEfJdKb}}{Hn{{l{f}}}}{{Kd{Db{Hj}}{Bb{Kf}}}{{Fl{{Fj{Fh}}}}}}{{{Hh{c}}}{{Hh{c}}}{AhHl}}{{ce}d{}{}}{{}{{Hh{c}}}{HlAh}}{Bfc{}}000{HnBh}{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}0{Bfd}0`{{}{{Dn{{J`{}{{If{c}}{Ih{e}}{Ij{g}}{Il{i}}{In{m}}}}m}}}{fChEdEfJdJf}Jh{JjJdJf}{{Jl{k}}}n{AhChJfJnK`EdEfJdKb}}{{HnC`}{{Bl{dCf}}}}0{cc{}}{KhHn}1{{{Kj{Hj}}c}{{J`{}{{If{e}}{Ih{g}}{Ij{i}}{Il{k}}{In{c}}}}}{AhChJfJnK`EdEfJdKb}{fChEdEfJdJf}Jh{JjJdJf}{{Jl{m}}}n}{{}{{Jl{}{{If{c}}{Ih{e}}{Kl{g}}{Kn{i}}}}}{fChEdEf}JhL`Lb}{{egi}{{Fl{{Fj{Fh}}}}}{}{{Lf{}{{Ld{c}}}}Ed}{}{}}{{BfBfBf{l{{Fj{Kd}}}}Lh}{{Fl{{Fj{Kf}}}}}}{c{{Dn{{Jl{}{{If{e}}{Ih{c}}{Kl{g}}{Kn{i}}}}g}}}Jh{fChEdEf}L`Lb}{{ce}{{E`{eg}}}{}{EbEdEf}{}}{{{Hh{c}}e}{{Hh{c}}}{HlAh}{{Ll{Lj}}}}``{c{}{}}{{}Bf}0{ce{}{}}0{{}{{Bl{F`Fb}}}}0{{{Bd{c}}LnEh}{}n}{{{Hh{c}}{l{M`}}}{{Hh{c}}}{HlAh}}```{{{Hh{c}}Mb}{{Hh{c}}}{HlAh}}`{{{J`{}{{If{c}}{Ih{e}}{Ij{g}}{Il{i}}{In{m}}}}m}Bf{fChEdEfJdJf}Jh{JjJdJf}{{Jl{k}}}n{AhChJfJnK`EdEfJdKb}}{{{Jl{}{{If{c}}{Ih{e}}{Kl{g}}{Kn{i}}}}}d{fChEdEf}JhL`Lb}{{}}0{{{Hh{c}}e}{{Hh{c}}}{HlAh}{{Ll{{Md{Bf}}}}}}`{{{Hh{c}}{l{Lh}}}{{Hh{c}}}{HlAh}}`{KdLh}{KdGd}{KdBf}{{Kd{Db{Hj}}}{{Db{Hj}}}}{{{Hh{c}}Gd}{{Hh{c}}}{HlAh}}`{Hn{{l{f}}}}{{{Hh{c}}{l{{Mf{c}}}}}{{Hh{c}}}{HlAh}}`{{lLnEh}}{{{Hh{c}}{Mf{{Dn{MhI`}}}}}{{Hh{c}}}{HlAh}}`{ce{}{}}{cFn{}}{{{J`{}{{If{c}}{Ih{e}}{Ij{g}}{Il{i}}{In{m}}}}m}{{Db{{Mj{g}}}}}{fChEdEfJdJf}Jh{JjJdJf}{{Jl{k}}}n{AhChJfJnK`EdEfJdKb}}{{{J`{}{{If{c}}{Ih{e}}{Ij{g}}{Il{i}}{In{m}}}}m}{{`{{Ml{}{{Ld{g}}}}}}}{fChEdEfJdJf}Jh{JjJdJf}{{Jl{k}}}n{AhChJfJnK`EdEfJdKb}}{c{{Bl{e}}}{}{}}000>`{{}Eh}{cG`{}}0{{{Jl{}{{If{c}}{Ih{e}}{Kl{g}}{Kn{i}}}}e{Bd{k}}Mn}{{`{{Fh{}{{Gb{{Bl{{Dn{{Jl{}{{If{c}}{Ih{e}}{Kl{g}}{Kn{i}}}}g}}c}}}}}}Ed}}}{fChEdEf}JhL`Lbn}77`````````````{{cb}d{}}````88{{{N`{ce}}}{{N`{ce}}}Ah{AhHl}}{{ce}d{}{}}````{{{N`{ec}}}DbHl{{n{}{{Nb{c}}}}}}{{{N`{ec}}}NdHl{{n{}{{Nb{c}}}}}}``{{{Db{{Nf{c}}}}{Db{{Nf{c}}}}NdBf}{{N`{ec}}}Hl{{n{}{{Nb{c}}}}}}{Bfc{}}0{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}{Bfd}{{{N`{ce}}{N`{ce}}}GdNh{NhHl}}{{ce}Gd{}{}}000{{{N`{ec}}}NjHl{{n{}{{Nb{c}}}}}}``{{{N`{ce}}C`}CbCh{ChHl}}{cc{}}{{ce}Eh{K`Nl}Nn}{{{N`{ec}}c}GdHl{{n{}{{Nb{c}}}}}}{{{N`{ce}}g}dK`{K`Hl}O`}{{}Bf}{ce{}{}}{{}{{Bl{F`Fb}}}}{{{N`{ec}}}cHl{{n{}{{Nb{c}}}}}}{{{Kj{c}}Db{Db{c}}BfNd}{{N`{ec}}}Hl{}}{{{N`{ec}}}ObHl{{n{}{{Nb{c}}}}}}{{{N`{ec}}}{{Db{c}}}Hl{{n{}{{Nb{c}}}}}}{{{N`{ec}}}BfHl{{n{}{{Nb{c}}}}}}{{}}{{{N`{ec}}}lHl{{n{}{{Nb{c}}}}}}4?82{c{{Bl{e}}}{}{}}0{cG`{}}{{{N`{ec}}}NjHl{{n{}{{Nb{c}}}}}};7``{{cb}d{}}````<<{{{Od{ce}}}{{Od{ce}}}Ah{AhHl}}{{ce}d{}{}}````{{{Od{ec}}}DbHl{{n{}{{Nb{c}}}}}}{{{Od{ec}}}NdHl{{n{}{{Nb{c}}}}}}``{{{Db{{Nf{c}}}}{Db{{Nf{c}}}}NdBf}{{Od{ec}}}Hl{{n{}{{Nb{c}}}}}}{Bfc{}}0{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}{Bfd}{{{Od{ce}}{Od{ce}}}GdNh{NhHl}}{{ce}Gd{}{}}000{{{Od{ec}}}NjHl{{n{}{{Nb{c}}}}}}``{{{Od{ce}}C`}CbCh{ChHl}}{cc{}}{{ce}Eh{K`Nl}Nn}{{{Od{ec}}c}GdHl{{n{}{{Nb{c}}}}}}{{{Od{ce}}g}dK`{K`Hl}O`}{{}Bf}{ce{}{}}{{}{{Bl{F`Fb}}}}{{{Od{ec}}}cHl{{n{}{{Nb{c}}}}}}{{{Kj{c}}Db{Db{c}}BfNd}{{Od{ec}}}Hl{}}{{{Od{ec}}}ObHl{{n{}{{Nb{c}}}}}}{{{Od{ec}}}{{Db{c}}}Hl{{n{}{{Nb{c}}}}}}{{{Od{ec}}}BfHl{{n{}{{Nb{c}}}}}}{{}}{{{Od{ec}}}lHl{{n{}{{Nb{c}}}}}}4?82{c{{Bl{e}}}{}{}}0{cG`{}}{{{Od{ec}}}NjHl{{n{}{{Nb{c}}}}}};7````````````````{{cb}d{}}`<<`{{{Of{c}}}{{Of{c}}}{AhOh}}{{ce}d{}{}}``{Bfc{}}0{{}{{Oj{Lj}}}}{{}{{Oj{Mh}}}}{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}{Bfd}{cc{}}`{{}Bf}``{ce{}{}}``{{}{{Bl{F`Fb}}}}`````````{{}}``````2??>2````````````````````{{Kd{Db{Hj}}{Bb{Kf}}}{{Fl{{Fj{Fh}}}}}}````{KdLh}{KdGd}{KdBf}{{Kd{Db{Hj}}}{{Db{Hj}}}}````````````{{cb}d{}}0`8888{{{Ol{c}}{Db{Hj}}NdOn}{{Fl{{Fj{Fh}}}}}n}{cEhK`}{{{Ol{c}}}{{Ol{c}}}{Ahn}}{{{A`{c}}}{{A`{c}}}{Ahn}}{{ce}d{}{}}0{{{Ol{c}}{Db{Hj}}ObOn}{{Fl{{Fj{Fh}}}}}n}``{Bfc{}}000{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}0{{{Ol{c}}{Db{Hj}}}{{Fl{{Fj{Fh}}}}}n}{Bfd}0{cc{}}0{{BfBfBfBfGd{l{{Fj{Kd}}}}Lh}{{Ab{{Bb{{Ol{c}}}}}}}n}{{{Ol{c}}}{{l{Bf}}}n}{{}Bf}0{ce{}{}}0{{{Ol{c}}}Gdn}{{}{{Bl{F`Fb}}}}0``{{AdAf{l{Lh}}}{{Ol{c}}}n}`{{{Ol{c}}}dn}`{{}}0{{{Ol{c}}}Adn}```{{{Ol{c}}Ah}{{Bl{d{Aj{{l{{Dn{Ah}}}}}}}}}n}{{{Ol{c}}}{{Fl{{Fj{Fh}}}}}n}>4{{{Ol{c}}}Afn}{{{Ol{c}}{Db{Hj}}egOn}{{Bl{dHn}}}n{{Fh{}{{Gb{{Bl{dHn}}}}}}Ed}{{Fh{}{{Gb{{Bl{dHn}}}}}}Ed}}{{{Ol{c}}}{{Al{d}}}n}3;;{c{{Bl{e}}}{}{}}000{cG`{}}0{{{Ol{c}}Eh}{{Fl{{Fj{Fh}}}}}n}{{{Ol{c}}{An{{Db{Hj}}}}}{{Fl{{Fj{Fh}}}}}n}??7```````{{cb}d{}}0```{ce{}{}}0000000{{{Af{c}}{Db{Hj}}NdOn}{{Fl{{Fj{Fh}}}}}Hl}`{AA`AA`}{{{Af{c}}}{{Af{c}}}{AhHl}}{{ce}d{}{}}0{{{Af{c}}{Db{Hj}}{Ob{c}}On}{{Fl{{Fj{Fh}}}}}Hl}{{}AA`}{Bfc{}}0000000{{}{{Oj{Lj}}}}{{}{{Oj{Mh}}}}{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}000`{{{Af{c}}{Db{Hj}}c}{{Fl{{Fj{Fh}}}}}Hl}{Bfd}000{{AA`C`}Cb}{{{AAb{c}}C`}Cb{ChHl}}{{{Af{c}}C`}CbHl}{cc{}}000{{{AAd{c}}AAfcAA`}{{Oj{{Af{c}}}}}Hl}{{BfBfBfBfGd{l{{Fj{Kd}}}}Lh}{{Ab{{Bb{Af}}}}}}`{{{Af{c}}{AAh{{Db{Hj}}}}{AAn{{Dn{{Db{Hj}}{AAl{AAj}}}}}}AB`}dHl}{{{Af{c}}ABb{AAh{{Db{Hj}}}}{AAn{{Dn{{Db{Hj}}{AAl{AAj}}}}}}}{{Bl{dHn}}}Hl}{Af{{l{Bf}}}}{{}Bf}000`{ce{}{}}000``{{{Af{c}}}GdHl}````{{}{{Bl{F`Fb}}}}000`{ABdAA`}{{AA`{Ib{c}}c{ABf{c}}{Bb{{B`{{Db{{Dn{MhI`}}}}}}}}Bf{l{{Fj{Kd}}}}Gd}{{Bl{{Af{c}}Hn}}}Hl}```{{{Af{c}}}dHl}```{{}}000``{{{Af{c}}Ahc}{{Bl{d{Aj{{l{{Dn{Ahc}}}}}}}}}Hl}`{{{Af{c}}}{{Fl{{Fj{Fh}}}}}Hl}`{{{Af{c}}{Db{Hj}}c}{{Fl{{Fj{Fh}}}}}Hl}`4`{{ABhc}BlABj}{{{Af{c}}}{{Al{d}}}Hl}{{{Af{c}}Bf{ABf{c}}}dHl}{{{Af{c}}{ABl{{l{{Dn{Ahc}}}}}}}dHl}5`=={c{{Bl{e}}}{}{}}0000000{cG`{}}000{{{Af{c}}Eh}{{Fl{{Fj{Fh}}}}}Hl}{ce{}{}}0009<````{{cb}d{}}111111{{{ABn{c}}{Db{Hj}}NdOn}{{Fl{{Fj{Fh}}}}}Hl}{{{ABn{c}}}{{ABn{c}}}{AhHl}}{{ce}d{}{}}{{{ABn{c}}{Db{Hj}}{Ob{c}}On}{{Fl{{Fj{Fh}}}}}Hl}{Bfc{}}00000{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}00{{{ABn{c}}{Db{Hj}}c}{{Fl{{Fj{Fh}}}}}Hl}{Bfd}00{{{AC`{c}}C`}CbHl}{{{ACb{c}}C`}Cb{ChHl}}{{{ABn{c}}C`}CbHl}{cc{}}00{{BfBfBfBfGd{l{{Fj{Kd}}}}Lh}{{Ab{{Bb{ABn}}}}}}`{ABn{{l{Bf}}}}`{{}Bf}00`{{{ABn{c}}{Db{Hj}}}{{Bl{d{ACd{{Db{Hj}}}}}}}Hl}`{ce{}{}}00{{}{{Bl{F`Fb}}}}00``{{}{{Bb{{AC`{c}}}}}Hl}{{c{Bb{{AC`{c}}}}{Kj{Nd}}{l{{Fj{Kd}}}}}{{ABn{c}}}Hl}`{{{ABn{c}}}dHl}{{}}00{{{ABn{c}}}{{Fl{{Fj{Fh}}}}}Hl}`2{{{ABn{c}}}{{Al{d}}}Hl}`7{c{{Bl{e}}}{}{}}00000{cG`{}}009993````````````{{cb}d{}}0000::::::::::::::::::{{{Ad{c}}{Db{Hj}}NdOn}{{Fl{{Fj{Fh}}}}}Hl}{{{Ad{c}}{Db{Hj}}ACf}{{Bl{dHn}}}Hl}`{AChACh}{{{ACj{c}}}{{ACj{c}}}{AhHl}}{{{ACl{c}}}{{ACl{c}}}{AhHl}}{{{Ad{c}}}{{Ad{c}}}{AhHl}}{ACfACf}{{ce}d{}{}}0000{{{Ad{c}}{Db{Hj}}{Ob{c}}On}{{Fl{{Fj{Fh}}}}}Hl}{{}ACh}{Bfc{}}00000000000000000{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}0000{{{Kj{Hj}}}{{Oj{{ACj{c}}}}}Hl}1111{{{Ad{c}}{Db{Hj}}c}{{Fl{{Fj{Fh}}}}}Hl}{Bfd}00000000{{{ACj{c}}{ACj{c}}}Gd{NhHl}}{{ACfACf}Gd}{{ce}Gd{}{}}0000000{cc{}}0000000{NdACf}1{{BfBfBfBfGd{l{{Fj{Kd}}}}Lh}{{Ab{{Bb{Ad}}}}}}{Ad{{l{Bf}}}}{{}Bf}00000000{ce{}{}}00000000`{{}{{Bl{F`Fb}}}}00000000`{ABdACh}{{Fn{Db{ACf}}{Of{{ACj{c}}}}ACh}{{Oj{{Ad{c}}}}}Hl}`{{{Ad{c}}}dHl}{{}}00000000``{{{Ad{c}}Ahc}{{Bl{d{Aj{{l{{Dn{Ahc}}}}}}}}}Hl}{{{Ad{c}}}{{Fl{{Fj{Fh}}}}}Hl}{{{Ad{c}}{Db{Hj}}c}{{Fl{{Fj{Fh}}}}}Hl}4{{{ACj{c}}}{{Oj{{Db{Hj}}}}}Hl}{{{Ad{c}}}{{Al{d}}}Hl}{{c{Kj{Hj}}}{{Oj{{Db{Hj}}}}}{}}4;;;;;{c{{Bl{e}}}{}{}}0000000{Hj{{Bl{ACf{ACn{ACf}}}}}}1{c{{Bl{ACf{ACn{ACf}}}}}{}}222222222{cG`{}}00000000{{c{Kj{Hj}}{Kj{Hj}}}Gd{}}{ce{}{}}00000000:`````<{{BfBfBf{l{{Fj{Kd}}}}Lh}{{Fl{{Fj{Kf}}}}}}{{{Bd{c}}LnEh}{}n}{{lLnEh}}{{}Eh}```````````````````````{{cb}d{}}00{{cAD`{Kj{e}}}g{}{}{}}666666{{c{Kj{Hj}}e}Gd{}{}}{{{Fd{c}}}{{Fd{c}}}{Ahn}}{{{ADb{c}}}{{ADb{c}}}{Ahn}}{{{ADd{c}}}{{ADd{c}}}{Ahn}}{{ce}d{}{}}00`{Bfc{}}00000{c{{Bl{{Fd{e}}}}}ADf{nn}}{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}{c{{Bl{{ADb{e}}}}}ADf{nn}}1{c{{Bl{{ADd{e}}}}}ADfn}2{Bfd}00{{{ADd{c}}{ADd{c}}}Gd{Nhn}}{{ce}Gd{}{}}000``{{{Fd{c}}C`}{{Bl{dCf}}}{Chn}}{{{ADb{c}}C`}{{Bl{dCf}}}{Chn}}{{{ADd{c}}C`}{{Bl{dCf}}}n}{cc{}}00{{{Kj{Hj}}}{{Bl{{Hl{}{{ADh{c}}{ADj{e}}{ADl{g}}{ADn{i}}{AE`{k}}{AEb{m}}}}AEd}}}{EdEfAhChJnJdAEfK`}{AEhEdEfAhChK`JnJdAEf}{EdEfAhChK`}{EdEfAhChK`NhJnJdAEf{Ll{AEj}}{AEl{AEj}}}{EdEfAhChK`NhJnJdAEf}{fEdEf}}{c{{Hl{}{{ADh{c}}{ADj{e}}{ADl{g}}{ADn{i}}{AE`{k}}{AEb{m}}}}}{EdEfAhChJnJdAEfK`}{AEhEdEfAhChK`JnJdAEf}{EdEfAhChK`}{EdEfAhChK`NhJnJdAEf{Ll{AEj}}{AEl{AEj}}}{EdEfAhChK`NhJnJdAEf}{fEdEf}}{{{AEn{Hj}}Eh}{{Dn{{Hl{}{{ADh{c}}{ADj{e}}{ADl{g}}{ADn{i}}{AE`{k}}{AEb{m}}}}c}}}{EdEfAhChJnJdAEfK`}{AEhEdEfAhChK`JnJdAEf}{EdEfAhChK`}{EdEfAhChK`NhJnJdAEf{Ll{AEj}}{AEl{AEj}}}{EdEfAhChK`NhJnJdAEf}{fEdEf}}{{}{{Hl{}{{ADh{c}}{ADj{e}}{ADl{g}}{ADn{i}}{AE`{k}}{AEb{m}}}}}{EdEfAhChJnJdAEfK`}{AEhEdEfAhChK`JnJdAEf}{EdEfAhChK`}{EdEfAhChK`NhJnJdAEf{Ll{AEj}}{AEl{AEj}}}{EdEfAhChK`NhJnJdAEf}{fEdEf}}{{ce}Eh{K`Nl}Nn}`{{{ADd{c}}e}d{K`n}O`}`{{}Bf}00`{ce{}{}}00`{{}{{Bl{F`Fb}}}}00````{{}}00{c{{Hl{}{{ADh{e}}{ADj{c}}{ADl{g}}{ADn{i}}{AE`{k}}{AEb{m}}}}}{AEhEdEfAhChK`JnJdAEf}{EdEfAhChJnJdAEfK`}{EdEfAhChK`}{EdEfAhChK`NhJnJdAEf{Ll{AEj}}{AEl{AEj}}}{EdEfAhChK`NhJnJdAEf}{fEdEf}}{{{Db{c}}AF`}e{}{}}`{{{Fd{c}}e}Bl{nJd}ABj}{{{ADb{c}}e}Bl{nJd}ABj}{{{ADd{c}}e}BlnABj}{c{{Dn{eAFb}}}{}{}}{{c{Kj{Hj}}}{{Bl{eg}}}{}{}{}}{{{Hl{}{{ADh{c}}{ADj{e}}{ADl{g}}{ADn{i}}{AE`{k}}{AEb{m}}}}Eh}e{EdEfAhChJnJdAEfK`}{AEhEdEfAhChK`JnJdAEf}{EdEfAhChK`}{EdEfAhChK`NhJnJdAEf{Ll{AEj}}{AEl{AEj}}}{EdEfAhChK`NhJnJdAEf}{fEdEf}}`{{{Hl{}{{ADh{c}}{ADj{e}}{ADl{g}}{ADn{i}}{AE`{k}}{AEb{m}}}}}{{Db{Hj}}}{EdEfAhChJnJdAEfK`}{AEhEdEfAhChK`JnJdAEf}{EdEfAhChK`}{EdEfAhChK`NhJnJdAEf{Ll{AEj}}{AEl{AEj}}}{EdEfAhChK`NhJnJdAEf}{fEdEf}};;;{c{{Bl{e}}}{}{}}00000{cG`{}}00{{{Hl{}{{ADh{c}}{ADj{e}}{ADl{g}}{ADn{i}}{AE`{k}}{AEb{m}}}}i{Kj{Hj}}}Gd{EdEfAhChJnJdAEfK`}{AEhEdEfAhChK`JnJdAEf}{EdEfAhChK`}{EdEfAhChK`NhJnJdAEf{Ll{AEj}}{AEl{AEj}}}{EdEfAhChK`NhJnJdAEf}{fEdEf}}{{{ADd{c}}}{}n}`???```````````````````````````````````````````{{{En{ceg}}i}dn{{Ab{c}}}Ad{{AFf{}{{AFd{{Dh{c}}}}}}}}{ce{}{}}0{{{En{ceg}}}Lhn{{Ab{c}}}Ad}{{{En{ceg}}}{{Bb{{B`{{An{c}}}}}}}n{{Ab{c}}}Ad}`{{{En{ceg}}}{}n{{Ab{c}}}Ad}{{{En{ceg}}}{{Bd{c}}}n{{Ab{c}}}Ad}{{{En{ceg}}}Bbn{{Ab{c}}}Ad}{Bfc{}}0{{ce}{{Bl{{Bj{gi}}}}}{}{}{}{}}{Bfd}{{{En{ceg}}}{{`{{AFh{}{{Ld{{Fd{c}}}}}}}}}n{{Ab{c}}}Ad}{{{En{ceg}}}{{Dl{{Fd{c}}}}}n{{Ab{c}}}Ad}{{{En{ceg}}}{{Dj{{Fd{c}}}}}n{{Ab{c}}}Ad}{cc{}}`{{}Bf}{{{En{ceg}}}{{Dj{{Bb{{Dh{c}}}}}}}n{{Ab{c}}}Ad}`{{{En{ceg}}}{{Dl{{Bb{{Dh{c}}}}}}}n{{Ab{c}}}Ad}1?{{}{{Bl{F`Fb}}}}=```{{{En{ceg}}}Ehn{{Ab{c}}}Ad}`{{}}???{{{En{ceg}}{Fd{c}}}{{Fl{{Fj{Fh}}}}}n{{Ab{c}}}Ad}{{{En{ceg}}}dn{{Ab{c}}}Ad}{{{En{ceg}}}{{AFj{d}}}n{{Ab{c}}}Ad}{{{En{ceg}}}{{l{Bb}}}n{{Ab{c}}}Ad}{{{En{ceg}}}{{Bb{B`}}}n{{Ab{c}}}Ad}`{{{En{ceg}}}{{Bl{d{h{c}}}}}n{{Ab{c}}}Ad}{{{En{ceg}}}AFln{{Ab{c}}}Ad}{{{En{ceg}}}{{l{{Bd{c}}}}}n{{Ab{c}}}Ad}{c{{Bl{e}}}{}{}}0{cG`{}}{ce{}{}}","c":[],"p":[[5,"Private",1402],[1,"unit"],[10,"Error",1403],[6,"HotShotError",0],[5,"Backtrace",1404],[6,"Option",1405],[10,"NodeType",1406],[5,"SystemContext",0],[10,"NodeImplementation",332],[10,"Versions",1406],[5,"MarketplaceConfig",0],[10,"Clone",1407],[5,"Memberships",0],[5,"HotShotInitializer",0],[5,"Consensus",1408],[5,"RwLock",1409],[5,"Arc",1410],[5,"Leaf",1411],[1,"usize"],[1,"str"],[5,"With",1412],[6,"Result",1413],[5,"RandomTwinsHandler",0],[5,"Formatter",1414],[8,"Result",1414],[5,"DoubleTwinsHandler",0],[5,"Error",1414],[10,"Debug",1414],[5,"QuorumProposal",1411],[5,"Proposal",1415],[5,"BTreeMap",1416],[8,"QuorumCertificate",1417],[5,"Vec",1418],[5,"View",1419],[10,"TwinsHandlerState",0],[6,"HotShotEvent",1420],[5,"Sender",1421],[5,"Receiver",1421],[1,"tuple"],[5,"IndentedSection",1422],[10,"Display",1414],[10,"Send",1423],[10,"Sync",1423],[1,"u64"],[5,"HotShotConfig",1424],[5,"ConsensusMetricsValue",1408],[5,"SystemContextHandle",1353],[5,"Layout",1425],[5,"LayoutError",1425],[5,"Event",1187],[6,"Either",1426],[10,"Future",1427],[5,"Box",1428],[5,"Pin",1429],[5,"String",1430],[5,"TypeId",1431],[17,"Output"],[1,"bool"],[1,"fn"],[10,"ConnectedNetwork",1432],[10,"EventTransformerState",229],[8,"RequestReceiver",1433],[6,"GlobalEvent",229],[8,"BoxFuture",1434],[5,"BadProposalViewDos",229],[5,"DoubleProposeVote",229],[5,"DishonestLeader",229],[5,"NetworkNodeConfigBuilder",332],[1,"u8"],[10,"SignatureKey",1187],[6,"NetworkError",332],[5,"Multiaddr",1435],[5,"NetworkNodeConfig",1436],[6,"NetworkNodeConfigBuilderError",1436],[17,"Error"],[17,"Instance"],[17,"Transaction"],[17,"ValidatedState"],[17,"Metadata"],[10,"BlockPayload",332],[5,"BuilderCommitment",1419],[10,"Serialize",1437],[10,"DeserializeOwned",1438],[10,"InstanceState",1439],[10,"Transaction",1440],[10,"ValidatedState",332],[10,"Eq",1441],[10,"Hash",1442],[10,"EncodeBytes",1440],[10,"NetworkReliability",332],[10,"Fn",1443],[6,"NetworkNodeHandleError",1444],[1,"slice"],[17,"Delta"],[17,"Time"],[10,"StateDelta",1439],[10,"ConsensusTime",1406],[17,"Item"],[10,"IntoIterator",1445],[5,"Duration",1446],[5,"Keypair",1447],[10,"Into",1448],[10,"RngCore",1449],[5,"MeshParams",1436],[6,"NetworkNodeType",1450],[5,"NonZero",1451],[5,"HashSet",1452],[5,"PeerId",1453],[5,"Commitment",1454],[10,"Iterator",1455],[5,"Version",1456],[5,"GeneralStaticCommittee",475],[17,"SignatureKey"],[6,"Topic",1432],[5,"PeerConfig",1424],[10,"PartialEq",1441],[8,"NonZeroU64",1451],[10,"Sized",1423],[10,"BuildHasher",1442],[10,"Hasher",1442],[5,"BTreeSet",1457],[5,"StaticCommitteeLeaderForTwoViews",532],[5,"KeyPair",589],[10,"SignatureScheme",1458],[8,"Result",1459],[5,"CombinedNetworks",688],[6,"BroadcastDelay",1432],[5,"UnderlyingCombinedNetworks",688],[8,"AsyncGenerator",1432],[5,"PushCdnNetwork",970],[5,"Libp2pNetwork",760],[5,"ViewNumber",1411],[6,"TrySendError",1460],[8,"BoxSyncFuture",1424],[5,"HashMap",1461],[5,"Libp2pMetricsValue",760],[5,"Libp2pNetworkInner",760],[5,"NetworkConfig",1462],[6,"SocketAddr",1463],[5,"UnboundedSender",1464],[5,"Response",1433],[5,"ResponseChannel",1465],[5,"Sender",1466],[5,"NetworkNodeReceiver",1444],[6,"NetworkEvent",1450],[10,"Metrics",1467],[6,"RecordValue",1468],[5,"Empty",760],[10,"Serializer",1437],[5,"Receiver",1469],[5,"MemoryNetwork",892],[5,"MasterMap",892],[5,"MemoryNetworkInner",892],[5,"SendError",1460],[6,"Topic",970],[5,"CdnMetricsValue",970],[5,"WrappedSignatureKey",970],[5,"ClientDef",970],[5,"TryFromPrimitiveError",1470],[5,"BitSlice",1471],[6,"EventType",1187],[5,"Message",1187],[10,"Deserializer",1438],[17,"PrivateKey"],[17,"StakeTableEntry"],[17,"QcParams"],[17,"PureAssembledSignatureType"],[17,"QcType"],[17,"SignError"],[6,"SerializationError",1472],[10,"Deserialize",1438],[10,"StakeTableEntryType",1473],[5,"TaggedBase64",1474],[10,"TryFrom",1448],[1,"array"],[5,"U256",1475],[5,"BitVec",1476],[17,"Event"],[10,"TaskState",1477],[10,"Stream",1478],[5,"JoinHandle",1479],[8,"NonZeroUsize",1451],[15,"Misc",218],[15,"InvalidState",218],[15,"InsufficientValidSignatures",218],[15,"TimeoutError",218],[15,"FailedToMessageLeader",218],[15,"FailedToBroadcast",218],[15,"BlockError",218],[15,"NetworkFault",218],[15,"ViewTimeoutError",218],[10,"CreateTaskState",330],[10,"TestableNodeImplementation",332],[15,"MultipleErrors",679],[15,"Libp2p",679],[15,"MemoryNetwork",679],[15,"PushCdnNetwork",679],[15,"CentralizedServer",679],[15,"FailedToSerialize",679],[15,"FailedToDeserialize",679],[15,"Timeout",679],[15,"Libp2pMulti",679],[8,"StaticCommittee",475],[8,"StaticCommittee",532],[8,"PeerInfoVec",760],[8,"DelayedTasksChannelsMap",688],[8,"BootstrapAddrs",760],[5,"ProductionDef",970],[5,"UserDef",970],[5,"BrokerDef",970],[5,"TestingDef",970],[15,"Decide",1339],[15,"Error",1339],[15,"DaProposal",1339],[15,"QuorumProposal",1339],[15,"UpgradeProposal",1339],[15,"Transactions",1339],[15,"ReplicaViewTimeout",1339],[15,"ViewFinished",1339],[15,"ViewTimeout",1339]],"b":[[95,"impl-Display-for-HotShotError%3CTYPES%3E"],[96,"impl-Debug-for-HotShotError%3CTYPES%3E"],[400,"impl-Display-for-NetworkError"],[401,"impl-Debug-for-NetworkError"],[890,"impl-ConnectedNetwork%3CK%3E-for-Libp2pNetwork%3CK%3E"],[891,"impl-Libp2pNetwork%3CK%3E"],[1005,"impl-ConnectedNetwork%3CK%3E-for-PushCdnNetwork%3CK%3E"],[1006,"impl-PushCdnNetwork%3CK%3E"],[1387,"impl-SystemContextHandle%3CTYPES,+I,+V%3E"],[1388,"impl-ConsensusApi%3CTYPES,+I%3E-for-SystemContextHandle%3CTYPES,+I,+V%3E"]]}],\
["hotshot_builder_api",{"doc":"","t":"CCCCHHHICCCCFFFNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNOOONNNOOONNNOONNNNNNNNNNNNNNOONNNPFPFGPFPFGPPFPFFPFFPFPFNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNOONNNNNOHNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOKKMMMMMFNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNIICCEEEEEEEHEEKMM","n":["api","v0_1","v0_2","v0_3","load_api","load_toml","merge_toml","Version","block_info","builder","data_source","query_data","AvailableBlockData","AvailableBlockHeaderInput","AvailableBlockInfo","__clone_box","__clone_box","__clone_box","_phantom","block_hash","block_payload","block_size","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fee_signature","fmt","fmt","fmt","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","message_signature","metadata","offered_fee","pointer_metadata","pointer_metadata","pointer_metadata","sender","sender","sender","serialize","serialize","serialize","signature","signature","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate_signature","validate_signature","vid_commitment","vid_precompute_data","vzip","vzip","vzip","BlockAvailable","BlockAvailableSnafu","BlockClaim","BlockClaimSnafu","BuildError","BuilderAddress","BuilderAddressSnafu","Custom","CustomSnafu","Error","Error","Missing","MissingSnafu","NotFound","NotFoundSnafu","Options","Request","RequestSnafu","Snafu","TxnSubmit","TxnSubmitSnafu","TxnUnpack","TxnUnpackSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","api_path","as_error","as_error","as_error_source","as_error_source","augment_args","augment_args_for_update","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","catch_all","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","define_api","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","extensions","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","group_id","header","header","in_current_span","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","message","message","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","resource","resource","serialize","serialize","source","source","status","status","submit_api","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_extract_param","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","message","message","resource","resource","source","source","source","source","source","source","status","AcceptsTxnSubmits","BuilderDataSource","available_blocks","builder_address","claim_block","claim_block_header_input","submit_txns","AvailableBlocksQueryData","__clone_box","blocks","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","vzip","Version","Version","builder","data_source","query_data","BlockAvailableSnafu","BlockClaimSnafu","BuildError","BuilderAddressSnafu","Error","Options","define_api","submit_api","AcceptsTxnSubmits","BuilderDataSource","builder_address","bundle"],"q":[[0,"hotshot_builder_api"],[4,"hotshot_builder_api::api"],[7,"hotshot_builder_api::v0_1"],[12,"hotshot_builder_api::v0_1::block_info"],[119,"hotshot_builder_api::v0_1::builder"],[461,"hotshot_builder_api::v0_1::builder::BuildError"],[462,"hotshot_builder_api::v0_1::builder::Error"],[472,"hotshot_builder_api::v0_1::data_source"],[479,"hotshot_builder_api::v0_1::query_data"],[511,"hotshot_builder_api::v0_2"],[512,"hotshot_builder_api::v0_3"],[516,"hotshot_builder_api::v0_3::builder"],[524,"hotshot_builder_api::v0_3::data_source"],[528,"core::option"],[529,"tide_disco::api"],[530,"tide_disco::api"],[531,"std::path"],[532,"core::convert"],[533,"toml::value"],[534,"core::iter::traits::collect"],[535,"vbs::version"],[536,"dyn_clone::sealed"],[537,"core::clone"],[538,"hotshot_types::traits::node_implementation"],[539,"rkyv::with"],[540,"serde::de"],[541,"core::cmp"],[542,"core::fmt"],[543,"core::fmt"],[544,"core::marker"],[545,"core::hash"],[546,"core::alloc::layout"],[547,"core::any"],[548,"core::error"],[549,"clap_builder::builder::command"],[550,"std::backtrace"],[551,"alloc::string"],[552,"core::convert"],[553,"core::marker"],[554,"tide_disco::request"],[555,"clap_builder::parser::matches::arg_matches"],[556,"clap_builder"],[557,"clap_builder::util::id"],[558,"color_eyre::section"],[559,"core::fmt"],[560,"core::convert"],[561,"core::future::future"],[562,"alloc::boxed"],[563,"core::pin"],[564,"hotshot_types::utils"],[565,"alloc::vec"],[566,"core::default"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SNAFU context selector for the <code>Error::BlockAvailable</code> …","","SNAFU context selector for the <code>Error::BlockClaim</code> variant","","","SNAFU context selector for the <code>Error::BuilderAddress</code> …","","SNAFU context selector for the <code>Error::Custom</code> variant","","There was an error while trying to fetch the requested …","The requested resource exists but is not currently …","SNAFU context selector for the <code>BuildError::Missing</code> variant","The requested resource does not exist or is not known to …","SNAFU context selector for the <code>BuildError::NotFound</code> variant","","","SNAFU context selector for the <code>Error::Request</code> variant","SNAFU context selector for the <code>BuildError::Error</code> variant","","SNAFU context selector for the <code>Error::TxnSubmit</code> variant","","SNAFU context selector for the <code>Error::TxnUnpack</code> variant","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Additional API specification files to merge with …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","To get the list of available blocks","To get the builder’s address","to claim a block from the list of provided available blocks","To claim a block header input","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","No changes to this module","No changes to these types","No changes to these types","No changes to these types","No changes to these types","No changes to these types","No changes to these types","","No changes to these types","No changes to these types","","To get the builder’s address","To get the list of available blocks"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,17,18,14,14,17,14,14,17,18,14,17,18,14,17,18,14,17,18,14,17,18,14,17,18,14,14,17,17,18,18,14,17,18,14,17,18,14,14,14,14,17,17,17,17,18,18,18,18,18,14,17,18,14,17,18,14,17,18,14,17,18,14,17,18,14,17,18,14,17,18,18,17,14,14,17,18,14,17,18,14,17,18,14,17,14,17,18,14,17,18,14,17,18,14,17,18,17,18,18,18,14,17,18,40,0,40,0,0,40,0,40,0,0,38,38,0,38,0,0,40,0,0,40,0,40,0,41,42,43,38,48,49,50,51,52,53,46,40,54,38,40,38,40,54,54,38,40,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,38,48,49,50,51,52,53,46,40,41,42,43,46,40,38,40,41,42,43,38,48,49,50,51,52,53,46,40,41,42,43,38,48,49,50,51,52,53,46,40,54,0,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,38,48,49,50,51,52,53,46,40,38,40,54,41,42,43,38,38,48,49,50,51,52,53,46,40,40,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,46,41,42,43,38,38,48,49,50,51,52,53,46,40,40,54,41,42,43,38,48,49,50,51,52,53,46,40,40,40,54,54,54,38,40,38,40,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,38,48,49,50,51,52,53,46,40,41,42,43,48,49,50,51,52,53,46,54,41,42,43,38,48,49,50,51,52,53,46,40,43,46,54,41,42,43,38,48,49,50,51,52,53,46,40,49,50,38,40,38,40,40,46,0,41,42,43,38,48,49,50,51,52,53,46,40,38,40,0,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,38,48,49,50,51,52,53,46,40,54,41,42,43,38,48,49,50,51,52,53,46,40,54,54,54,41,42,43,38,48,49,50,51,52,53,46,40,81,82,83,84,85,83,84,86,87,88,82,0,0,70,70,70,70,66,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80],"f":"````{{{b{c}}de}{{j{{f{gik}}h}}}{{n{l}}}{{Ad{}{{A`{Ab}}}}}{}{}Af}{l{{j{Abh}}}}{{AbAb}Ah}````````{{cAj}Ah{}}00````{ce{}{}}00000{{{Al{c}}}{{Al{c}}}{AnB`}}{{{Bb{c}}}{{Bb{c}}}{AnB`}}{{{Bd{c}}}{{Bd{c}}}{AnB`}}{{ce}Ah{}{}}00{Bfc{}}00000{{ce}{{j{{Bh{gi}}}}}{}{}{}{}}{c{{j{{Al{e}}}}}BjB`}1{c{{j{{Bb{e}}}}}BjB`}2{c{{j{{Bd{e}}}}}BjB`}{BfAh}00{{{Al{c}}{Al{c}}}Bl{BnB`}}{{{Bb{c}}{Bb{c}}}Bl{BnB`}}{{{Bd{c}}{Bd{c}}}Bl{BnB`}}{{ce}Bl{}{}}00000000000`{{{Al{c}}C`}Cb{CdB`}}{{{Bb{c}}C`}Cb{CdB`}}{{{Bd{c}}C`}Cb{CdB`}}{cc{}}00{{ce}Cf{ChCj}Cl}00{{{Al{c}}e}Ah{ChB`}Cn}{{{Bb{c}}e}Ah{ChB`}Cn}{{{Bd{c}}e}Ah{ChB`}Cn}{{}Bf}00{ce{}{}}00{{}{{j{D`Db}}}}00```{{}}00```{{{Al{c}}e}jB`Dd}{{{Bb{c}}e}jB`Dd}{{{Bd{c}}e}jB`Dd}``555{c{{j{e}}}{}{}}00000{cDf{}}00{{{Bb{c}}}BlB`}{{{Bd{c}}Cf}BlB`}``999```````````````````````{{cAj}Ah{}}00000000000`{cDh{}}000{DjDj}0{Dl{{b{Dn}}}}{E`{{b{Dn}}}}>>>>>>>>>>>>>>>>>>>>>>>>>>{EbDl}{EdDl}{{{Ef{c}}}Dl{{Ej{Eh}}}}{{{El{ce}}}E`{{Ej{Eh}}}{{Ej{En}}}}{{EnEh}E`}{Dl{{b{Dh}}}}{E`{{b{Dh}}}}{EbEb}{EdEd}{{{Ef{c}}}{{Ef{c}}}An}{DlDl}{F`F`}{{{Fb{c}}}{{Fb{c}}}An}{{{Fd{c}}}{{Fd{c}}}An}{FfFf}{FhFh}{FjFj}{{{El{ce}}}{{El{ce}}}AnAn}{E`E`}{{ce}Ah{}{}}00000000000{{}Fl}{Fl{{j{{f{cE`Fn}}h}}}{G`GbGd}}{Bfc{}}0000000000000000000000000{Dld}{E`d}{{ce}{{j{{Bh{gi}}}}}{}{}{}{}}000{c{{j{Dl}}}Bj}11111111{c{{j{E`}}}Bj}2{BfAh}000000000000`{Eb{{j{cDl}}}{}}{Ed{{j{cDl}}}{}}{{{Ef{c}}}{{j{eDl}}}{{Ej{Eh}}}{}}{{{El{ce}}}{{j{gE`}}}{{Ej{Eh}}}{{Ej{En}}}{}}{{EbC`}Cb}{{EdC`}Cb}{{{Ef{c}}C`}CbCd}{{DlC`}Cb}0{{F`C`}Cb}{{{Fb{c}}C`}CbCd}{{{Fd{c}}C`}CbCd}{{FfC`}Cb}{{FhC`}Cb}{{FjC`}Cb}{{{El{ce}}C`}CbCdCd}{{E`C`}Cb}0{cc{}}000000000000{{{Gf{EhEn}}}E`}{GhE`}{Gj{{j{FlGl}}}}0{{}{{b{Gn}}}}{{ce}{{H`{eg}}}{}{HbG`Gb}{}}0{c{}{}}0{{}Bf}000000000000{ce{}{}}000000000000{{Ebc}Dl{}}{{Edc}Dl{}}{{{Ef{c}}e}Dl{{Ej{Eh}}}{}}{{F`c}E`{}}{{{Fb{c}}e}E`{{Ej{Eh}}}{}}{{{Fd{c}}e}E`{{Ej{Eh}}}{}}{{Ffc}E`{}}{{Fhc}E`{}}{{Fjc}E`{}}{{{El{ce}}g}E`{{Ej{Eh}}}{{Ej{En}}}{}}{{}{{j{D`Db}}}}000000000000``{{}}000000000000``{{Dlc}jDd}{{E`c}jDd}{Dl{{b{Dh}}}}{E`{{b{Dh}}}}{E`En}`{Fl{{j{{f{eE`g}}h}}}B`{G`Gb{Hd{c}}}Af}{ce{}{}}00000000000{cEh{}}0{{Hfd}{{j{cE`}}}{{Hj{Hh}}}}{c{{j{e}}}{}{}}0000000000000000000000000{cDf{}}000000000000{{FlGj}{{j{AhGl}}}}05555555555555`````````````{{HlHnCf}{{Id{{Ib{I`}}}}}}{Hl{{Id{{Ib{I`}}}}}}{{HlIfCf}{{Id{{Ib{I`}}}}}}0{{HdIh}{{Id{{Ib{I`}}}}}}`{{cAj}Ah{}}`::{{{Ij{c}}}{{Ij{c}}}{AnB`}}{{ce}Ah{}{}}{{}{{Ij{c}}}{IlB`}}{Bfc{}}0{{ce}{{j{{Bh{gi}}}}}{}{}{}{}}{c{{j{{Ij{e}}}}}BjB`}{BfAh}{{{Ij{c}}{Ij{c}}}Bl{BnB`}}{{ce}Bl{}{}}000{{{Ij{c}}C`}Cb{CdB`}}{cc{}}{{ce}Cf{ChCj}Cl}{{{Ij{c}}e}Ah{ChB`}Cn}{{}Bf}{ce{}{}}{{}{{j{D`Db}}}}{{}}{{{Ij{c}}e}jB`Dd}3{c{{j{e}}}{}{}}0{cDf{}}5```````````{Fl{{j{{f{cE`In}}h}}}{G`GbGd}}```{J`{{Id{{Ib{I`}}}}}}{{J`CfHnCf}{{Id{{Ib{I`}}}}}}","c":[],"p":[[6,"Option",528],[1,"str"],[5,"Api",529],[6,"ApiError",529],[6,"Result",530],[5,"Path",531],[10,"AsRef",532],[17,"Item"],[6,"Value",533],[10,"IntoIterator",534],[10,"StaticVersionType",535],[1,"unit"],[5,"Private",536],[5,"AvailableBlockInfo",12],[10,"Clone",537],[10,"NodeType",538],[5,"AvailableBlockData",12],[5,"AvailableBlockHeaderInput",12],[1,"usize"],[5,"With",539],[10,"Deserializer",540],[1,"bool"],[10,"PartialEq",541],[5,"Formatter",542],[8,"Result",542],[10,"Debug",542],[1,"u64"],[10,"Hash",543],[10,"Sized",544],[10,"BuildHasher",543],[10,"Hasher",543],[5,"Layout",545],[5,"LayoutError",545],[10,"Serializer",546],[5,"TypeId",547],[10,"Error",548],[5,"Command",549],[6,"BuildError",119],[5,"Backtrace",550],[6,"Error",119],[5,"NotFoundSnafu",119],[5,"MissingSnafu",119],[5,"Snafu",119],[5,"String",551],[10,"Into",532],[5,"CustomSnafu",119],[5,"StatusCode",552],[5,"RequestSnafu",119],[5,"BlockAvailableSnafu",119],[5,"BlockClaimSnafu",119],[5,"TxnUnpackSnafu",119],[5,"TxnSubmitSnafu",119],[5,"BuilderAddressSnafu",119],[5,"Options",119],[8,"Version",7],[10,"Send",544],[10,"Sync",544],[10,"ReadState",553],[1,"tuple"],[6,"RequestError",554],[5,"ArgMatches",555],[8,"Error",556],[5,"Id",557],[5,"IndentedSection",558],[10,"Display",542],[10,"AcceptsTxnSubmits",472],[5,"RequestParams",554],[5,"TaggedBase64",559],[10,"TryFrom",532],[10,"BuilderDataSource",472],[8,"VidCommitment",560],[10,"Future",561],[5,"Box",562],[5,"Pin",563],[5,"BuilderCommitment",564],[5,"Vec",565],[5,"AvailableBlocksQueryData",479],[10,"Default",566],[8,"Version",512],[10,"BuilderDataSource",524],[15,"Error",461],[15,"Custom",462],[15,"BlockAvailable",462],[15,"BlockClaim",462],[15,"Request",462],[15,"TxnUnpack",462],[15,"TxnSubmit",462],[15,"BuilderAddress",462]],"b":[[286,"impl-Display-for-BuildError"],[287,"impl-Debug-for-BuildError"],[295,"impl-Display-for-Error"],[296,"impl-Debug-for-Error"],[310,"impl-From%3C(String,+StatusCode)%3E-for-Error"],[311,"impl-From%3CRequestError%3E-for-Error"]]}],\
["hotshot_example_types",{"doc":"","t":"CCCCCCFFNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNONNFFFFFFNNNNNNNNNONNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFIFFFFNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFEFNNNONNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNFFINNNNNONNNNNNNNONNONNNNNNNNNNNNONNNONNNNNNONNNONNNNNNNNNNONNPFGFPPPPGFKPNNNNNNNNNNNNNNNNNNNNNNNNONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNOONNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNN","n":["auction_results_provider_types","block_types","node_types","state_types","storage_types","testable_delay","TestAuctionResult","TestAuctionResultsProvider","__clone_box","__clone_box","borrow","borrow","borrow_mut","borrow_mut","broadcast_url","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fetch_auction_result","fmt","fmt","from","from","init","init","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","serialize","should_return_err","solver_results","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","urls","urls","vzip","vzip","TestBlockHeader","TestBlockPayload","TestMetadata","TestTransaction","TransactionTooLong","TransactionTooLongSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error_source","backtrace","block_number","block_number","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder_commitment","builder_commitment","builder_commitment","bytes","cause","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit","commit","compare","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","empty","encode","encode","encode","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_transactions","genesis","genesis","genesis","get_auction_results","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","in_current_span","init","init","init","init","init","init","into","into","into","into","into","into","into_bytes","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","metadata","new","new","new_legacy","new_marketplace","partial_cmp","payload_commitment","payload_commitment","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","run_delay_settings_from_config","serialize","serialize","serialize","serialize","source","tag","tag","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transactions","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","txn_count","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","CombinedImpl","Libp2pImpl","MarketplaceUpgradeTestVersions","MemoryImpl","PushCdnImpl","StaticMembership","TestConsecutiveLeaderTypes","TestTypes","TestVersions","WebImpl","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_type_phantom","all_nodes_with_stake","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","committee_nodes_with_stake","committee_nodes_without_stake","committee_topic","compare","compare","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fixed_leader_for_gpuvid","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","TestInstanceState","TestStateDelta","TestTypes","TestValidatedState","__clone_box","__clone_box","__clone_box","block_height","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","commit","create_random_transaction","default","default","default","delay_config","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_header","genesis","get_hash","get_hash","hash","hash","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","new","on_commit","pointer_metadata","pointer_metadata","pointer_metadata","prev_state_commitment","run_delay_settings_from_config","serialize","serialize","tag","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate_and_apply_header","vzip","vzip","vzip","TestStorage","TestStorageState","VidShares","__clone_box","__clone_box","append_da","append_proposal","append_vid","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","das","default","default","delay_config","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","high_qc","high_qc_cloned","init","init","inner","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","proposals","proposals_cloned","record_action","run_delay_settings_from_config","should_return_err","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_high_qc","update_undecided_state","vids","vzip","vzip","BlockHeader","DelayConfig","DelayOptions","DelaySettings","Fixed","None","Random","Storage","SupportedTraitTypesForAsyncDelay","SupportedTraitTypesForAsyncDelayIterator","TestableDelay","ValidatedState","__clone_box","__clone_box","__clone_box","__clone_box","add_setting","add_settings_for_all_types","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","default","default","delay_option","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fixed_time_in_milliseconds","fmt","fmt","fmt","fmt","from","from","from","from","from","get_hash","get_hash","get_hash","get_setting","handle_async_delay","hash","hash","hash","index","init","init","init","init","init","into","into","into","into","into","into_iter","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","max_time_in_milliseconds","min_time_in_milliseconds","new","new","next","par_bridge","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","run_delay_settings_from_config","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"hotshot_example_types"],[6,"hotshot_example_types::auction_results_provider_types"],[63,"hotshot_example_types::block_types"],[276,"hotshot_example_types::node_types"],[543,"hotshot_example_types::state_types"],[640,"hotshot_example_types::storage_types"],[702,"hotshot_example_types::testable_delay"],[853,"dyn_clone::sealed"],[854,"core::clone"],[855,"hotshot_types::traits::node_implementation"],[856,"core::default"],[857,"core::result"],[858,"serde::de"],[859,"rkyv::with"],[860,"core::future::future"],[861,"alloc::boxed"],[862,"core::pin"],[863,"core::fmt"],[864,"core::fmt"],[865,"core::alloc::layout"],[866,"core::any"],[867,"url"],[868,"alloc::vec"],[869,"core::error"],[870,"std::backtrace"],[871,"core::option"],[872,"hotshot_types::utils"],[873,"core::cmp"],[874,"committable"],[875,"alloc::sync"],[876,"core::iter::traits::collect"],[877,"core::marker"],[878,"hotshot_types::vid"],[879,"core::hash"],[880,"core::marker"],[881,"core::fmt"],[882,"hotshot_types::traits::block_contents"],[883,"hotshot_types::vid"],[884,"alloc::string"],[885,"core::iter::traits::iterator"],[886,"rand_core"],[887,"hotshot_types::data"],[888,"hotshot_types::data"],[889,"alloc::collections::btree::map"],[890,"hotshot_types::event"],[891,"hotshot_types::consensus"],[892,"hotshot_types::utils"],[893,"rayon::iter::par_bridge"]],"d":["auction types for solver-to-hotshot interactions","block types","node types","Implementations for testing/examples Implementations for …","storage types for hotshot storage","add a delay to async functions","A mock result for the auction solver. This type is just a …","The test auction results type is used to mimic the results …","","","","","","","The broadcast URL that the solver is running on. This type …","","","","","","","","","","","","","","","","","","","","","Mock fetching the auction results, with optional error …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","A canned type to ensure that an error is thrown in absence …","We intentionally allow for the results to be pre-cooked …","","","","","","","","","","The URL of the builder to reach out to.","","","A <code>BlockHeader</code> that commits to <code>TestBlockPayload</code>.","A <code>BlockPayload</code> that contains a list of <code>TestTransaction</code>.","","The transaction in a <code>TestBlockPayload</code>.","","SNAFU context selector for the <code>TransactionTooLong</code> error","","","","","","","","","","Block number.","","","","","","","","","","","","","Consume the selector and return the associated error","","","Fast commitment for builder verification","Get reference to raw bytes of transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encode a list of transactions into bytes.","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Create a genesis block payload with bytes <code>vec![0]</code>, to be …","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert transaction to raw vector of bytes","","","","","","","","","Construct a new transaction","","","","","","VID commitment to the payload.","","","","","","","","","","","","","","","Timestamp when this header was created.","","","","","","","","","List of transactions.","","","","","","","","","","","","","","Construct a new transaction. Returns <code>None</code> if <code>bytes.len()</code> &gt; …","","","","","","","","","","","","","","Combined Network implementation (libp2p + web sever)","Libp2p network implementation","","Memory network implementation","The Push CDN implementation","static committee type alias","filler struct to implement node type and allow us to …","filler struct to implement node type and allow us to …","","Web server network implementation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instance-level state implementation for testing purposes.","Application-specific state delta implementation for …","","Validated state implementation for testing purposes.","","","","the block height","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","the previous state commitment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","<code>should_return_err</code> is a testing utility to validate …","","","","","","","","","","","","","","","Settings for each type","What type of delay we want to apply to","Config for each supported type","","","","","Current implementations that are supported for testing …","Iterator to iterate over enum","Implement this method to add some delay to async call","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Add a delay from settings","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Look for settings in the config and run it","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,3,3,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,3,3,4,0,0,0,0,0,0,34,31,32,36,29,26,26,26,29,29,34,26,31,32,36,29,34,26,31,32,36,29,31,32,29,29,34,26,34,31,32,36,29,34,31,32,36,29,36,34,29,36,34,34,26,31,32,36,29,34,26,31,32,36,29,26,34,34,26,31,32,32,36,36,29,29,34,26,31,32,36,29,32,34,32,36,34,32,36,29,34,34,34,34,32,32,32,32,36,36,36,36,29,29,29,29,31,34,26,26,31,32,32,36,29,34,26,31,32,36,29,32,32,32,32,29,29,34,32,36,29,34,32,36,29,26,32,26,34,26,31,32,36,29,34,26,31,32,36,29,34,31,34,26,31,32,36,29,29,34,29,29,29,36,29,29,34,26,31,32,36,29,29,34,32,36,29,26,34,29,29,34,31,32,36,29,26,32,32,32,34,34,26,31,32,36,29,34,26,31,32,36,29,34,32,34,26,31,32,36,29,34,26,31,32,36,29,0,0,0,0,0,0,0,0,0,0,66,67,68,69,70,71,72,73,74,95,95,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,95,95,95,66,67,66,67,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,66,66,66,66,67,67,67,67,68,68,68,68,69,69,69,69,70,70,70,70,71,71,71,71,72,72,72,72,95,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,66,67,68,69,70,71,72,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,66,67,68,69,70,71,72,73,74,0,0,0,0,61,75,76,76,61,75,76,61,75,76,61,75,76,61,75,76,76,76,61,75,76,61,61,75,76,61,75,76,61,75,75,76,76,61,75,76,75,76,75,75,75,75,76,76,76,76,61,75,76,61,75,76,76,76,75,76,75,76,61,75,76,61,75,76,61,75,76,61,76,61,75,76,76,76,75,76,76,61,75,76,61,75,76,61,75,76,61,75,76,76,61,75,76,0,0,0,83,78,78,78,78,96,83,78,83,78,83,78,83,78,83,83,78,78,83,78,83,78,83,78,83,78,83,78,83,78,83,78,83,78,78,83,78,83,78,83,78,83,78,78,78,78,83,78,83,78,83,78,83,78,78,78,83,83,78,89,0,0,0,91,91,91,89,0,0,0,89,91,89,90,63,63,63,92,91,89,90,63,92,91,89,90,63,91,89,90,63,91,89,90,63,63,90,63,90,92,91,89,90,63,92,91,89,90,63,92,91,89,90,63,92,91,89,90,63,91,89,90,63,91,91,91,91,89,89,89,89,90,90,90,90,63,63,63,63,90,91,89,90,63,92,91,89,90,63,91,89,90,63,97,91,89,90,92,92,91,89,90,63,92,91,89,90,63,92,92,91,89,90,63,90,90,92,63,92,92,92,91,89,90,63,97,91,89,90,63,92,91,89,90,63,92,91,89,90,63,92,91,89,90,63,92,91,89,90,63],"f":"````````{{cb}d{}}0{ce{}{}}000`{ff}{{{h{c}}}{{h{c}}}{jl}}{{ce}d{}{}}0{{}f}{{}{{h{c}}}{nl}}{A`c{}}000{c{{Ab{f}}}Ad}{{ce}{{Ab{{Af{gi}}}}}{}{}{}{}}0{A`d}0{{ff}Ah}{{ce}Ah{}{}}000{{{h{c}}}{{An{{Al{Aj}}}}}l}{{fB`}Bb}{{{h{c}}B`}Bb{Bdl}}{cc{}}0{{}A`}0{ce{}{}}0{{}{{Ab{BfBh}}}}0{{}}0{{fc}AbBj}``33{c{{Ab{e}}}{}{}}000{cBl{}}0{f{{C`{Bn}}}}`66``````{{cb}d{}}0000{cCb{}}0{Cd{{Ch{Cf}}}}{CjCl}`::::::::::::{CnCd}{{D`c}Db{}}{CjDb}`{Dd{{C`{Df}}}}{Cd{{Ch{Cb}}}}{DdDd}{CnCn}{D`D`}{DhDh}{CjCj}{{ce}d{}{}}0000{{DhDh}Dj}{Dd{{Dl{Dd}}}}{Cj{{Dl{Cj}}}}{{ce}Dj{}{}}{{}Dd}{A`c{}}00000000000{CdDn}{{ce}{{Ab{{Af{gi}}}}}{}{}{}{}}{c{{Ab{Dd}}}Ad}111{c{{Ab{D`}}}Ad}2{c{{Ab{Dh}}}Ad}{c{{Ab{Cj}}}Ad}4{A`d}00000{{}{{E`{D`c}}}{}}{{{Eb{Dd}}}{{C`{Df}}}}{D`{{Ed{{Eb{Df}}}}}}{Dh{{Ed{{Eb{Df}}}}}}{{DdDd}Ah}{{D`D`}Ah}{{DhDh}Ah}{{CjCj}Ah}{{ce}Ah{}{}}000000000000000{Cn{{Ab{cCd}}}{}}{{DdB`}Bb}{{CdB`}Bb}0{{CnB`}Bb}{{D`B`}Bb}0{{DhB`}Bb}{{CjB`}Bb}{cc{}}00000{{{Eb{Df}}c}D`{}}{{egi}{{An{{Al{Aj}}}}}{}{{Eh{}{{Ef{c}}}}Ej}{}{}}{{}D`}0{{ElDb}Cj}{CjCh}{{ce}Cl{EnF`}Fb}000{{Ddc}dFd}{{D`c}dFd}{{Dhc}dFd}{{Cjc}dFd}{{ce}{{Ff{eg}}}{}{FhEjFj}{}}0{c{}{}}{{}A`}00000{ce{}{}}00000{Dd{{C`{Df}}}}{{Cnc}Cd{}}{{}{{Ab{BfBh}}}}00000{Cj}{{{C`{Df}}}Dd}{{{Fl{c}}ElDb}Cj{{l{}{{Fn{Cj}}}}}}{{{Fl{c}}ElDb{G`{c}}GbGd}{{Ab{Cje}}}{{l{}{{Fn{Cj}}{Gf{D`}}{Gh{Gj}}{Gl{f}}}}}{}}{{{Fl{c}}ElDb{C`{{G`{c}}}}GbChGd}{{Ab{Cje}}}{{l{}{{Fn{Cj}}{Gf{D`}}{Gh{Gj}}{Gl{f}}}}}{}}{{DhDh}{{Ch{Dj}}}}{CjEl}`{{}}00000{Gn{{An{{Al{Aj}}}}}}{{Ddc}AbBj}{{D`c}AbBj}{{Dhc}AbBj}{{Cjc}AbBj}{Cd{{Ch{Cb}}}}{{}H`}0`{ce{}{}}0000{cH`{}}0{{D`c}{{`{{Hb{}{{Ef{e}}}}}}}{}{}}`{{{C`{Df}}}{{Ab{Ddc}}}{}}{c{{Ab{e}}}{}{}}00000000000{{{C`{Df}}}{{Ch{Dd}}}}{D`Cl}{cBl{}}00000777777``````````{{cb}d{}}00000000``888888888888888888{HdHd}{HfHf}{HhHh}{HjHj}{HlHl}{HnHn}{I`I`}{IbIb}{IdId}{{ce}d{}{}}00000000{{HdHd}Dj}{{HfHf}Dj}```{{ce}Dj{}{}}0{{}Hd}{{}Hf}{A`c{}}00000000000000000{{ce}{{Ab{{Af{gi}}}}}{}{}{}{}}{c{{Ab{Hd}}}Ad}{c{{Ab{Hf}}}Ad}22{c{{Ab{Hh}}}Ad}{c{{Ab{Hj}}}Ad}44{c{{Ab{Hl}}}Ad}5{c{{Ab{Hn}}}Ad}6{c{{Ab{I`}}}Ad}77{A`d}00000000{{HdHd}Ah}{{HfHf}Ah}{{HhHh}Ah}{{HjHj}Ah}{{HlHl}Ah}{{HnHn}Ah}{{I`I`}Ah}{{ce}Ah{}{}}000000000000000000000000000`{{HdB`}Bb}{{HfB`}Bb}{{HhB`}Bb}{{HjB`}Bb}{{HlB`}Bb}{{HnB`}Bb}{{I`B`}Bb}{{IbB`}Bb}{{IdB`}Bb}{cc{}}00000000{{ce}Cl{EnF`}Fb}000000{{Hdc}dFd}{{Hfc}dFd}{{Hhc}dFd}{{Hjc}dFd}{{Hlc}dFd}{{Hnc}dFd}{{I`c}dFd}{{}A`}00000000{ce{}{}}00000000{{}{{Ab{BfBh}}}}00000000{{HdHd}{{Ch{Dj}}}}{{HfHf}{{Ch{Dj}}}}{{}}00000000{{Hdc}AbBj}{{Hfc}AbBj}{{Hhc}AbBj}{{Hjc}AbBj}{{Hlc}AbBj}{{Hnc}AbBj}{{I`c}AbBj};;;;;;;;;{c{{Ab{e}}}{}{}}00000000000000000{cBl{}}00000000=========````{{cb}d{}}00`>>>>>>{GjGj}{IfIf}{IhIh}{{ce}d{}{}}00{Ih{{Dl{Ih}}}}{{{Ch{Ih}}IjCl}}{{}Gj}{{}If}{{}Ih}`{A`c{}}00000{{ce}{{Ab{{Af{gi}}}}}{}{}{}{}}{c{{Ab{If}}}Ad}11{c{{Ab{Ih}}}Ad}{A`d}00{{IfIf}Ah}{{IhIh}Ah}{{ce}Ah{}{}}0000000{{GjB`}Bb}{{IfB`}Bb}{{IhB`}Bb}{cc{}}00<{c{{E`{Ihe}}}{}{}}{{ce}Cl{EnF`}Fb}0{{Ifc}dFd}{{Ihc}dFd}{{}A`}00{ce{}{}}00{{}{{Ab{BfBh}}}}00{GnGj}{Ihd}{{}}00`{Gn{{An{{Al{Aj}}}}}}{{Ifc}AbBj}{{Ihc}AbBj}{{}H`}888{c{{Ab{e}}}{}{}}00000{cBl{}}00{{Ihc{Fl{e}}GbGd}{{Ab{{E`{Ihg}}i}}}{}l{}{}};;;```{{cb}d{}}0{{{Il{c}}{J`{c{In{c}}}}}{{An{{Al{Aj}}}}}l}{{{Il{c}}{J`{c{Jb{c}}}}}{{An{{Al{Aj}}}}}l}{{{Il{c}}{J`{c{Jd{c}}}}}{{An{{Al{Aj}}}}}l}`????{{{Jf{c}}}{{Jf{c}}}{jl}}{{{Il{c}}}{{Il{c}}}{jl}}{{ce}d{}{}}0`{{}{{Jf{c}}}l}{{}{{Il{c}}}l}`{A`c{}}000{{ce}{{Ab{{Af{gi}}}}}{}{}{}{}}0{A`d}0{{{Jf{c}}B`}Bb{Bdl}}{{{Il{c}}B`}Bb{Bdl}}{cc{}}0`{{{Il{c}}}{{Ch{{Jh{c}}}}}l}{{}A`}0`{ce{}{}}0{{}{{Ab{BfBh}}}}0{{}}0`{{{Il{c}}}{{Jj{{J`{c{Jb{c}}}}}}}l}{{{Il{c}}Jl}{{An{{Al{Aj}}}}}l}{Gn{{An{{Al{Aj}}}}}}`55{c{{Ab{e}}}{}{}}000{cBl{}}0{{{Il{c}}{Jh{c}}}{{An{{Al{Aj}}}}}l}{{{Il{c}}{Jn{{Fl{c}}}}{Jj{{K`{c}}}}}{{An{{Al{Aj}}}}}l}`99````````````{{cb}d{}}000{{GnKbKd}d}{{GnKd}d}<<<<<<<<<<{KfKf}{KbKb}{KdKd}{GnGn}{{ce}d{}{}}000`{{}Kd}{{}Gn}`{A`c{}}000000000{{ce}{{Ab{{Af{gi}}}}}{}{}{}{}}0000{A`d}0000{{KfKf}Ah}{{KbKb}Ah}{{KdKd}Ah}{{GnGn}Ah}{{ce}Ah{}{}}000000000000000`{{KfB`}Bb}{{KbB`}Bb}{{KdB`}Bb}{{GnB`}Bb}{cc{}}0000{{ce}Cl{EnF`}Fb}00{{GnKb}{{Ch{Kd}}}}{Kd{{An{{Al{Aj}}}}}}{{Kfc}dFd}{{Kbc}dFd}{{Kdc}dFd}`{{}A`}0000{ce{}{}}00000{{}{{Ab{BfBh}}}}0000``{{}Kh}{{{Kj{KbKd}}}Gn}{Kh{{Ch{c}}}{}}{c{{Kl{e}}}{}{}}{{}}0000{Gn{{An{{Al{Aj}}}}}}7777{c{{Ab{e}}}{}{}}000000000{cBl{}}000099999","c":[],"p":[[5,"Private",853],[1,"unit"],[5,"TestAuctionResult",6],[5,"TestAuctionResultsProvider",6],[10,"Clone",854],[10,"NodeType",855],[10,"Default",856],[1,"usize"],[6,"Result",857],[10,"Deserializer",858],[5,"With",859],[1,"bool"],[10,"Future",860],[5,"Box",861],[5,"Pin",862],[5,"Formatter",863],[8,"Result",863],[10,"Debug",863],[5,"Layout",864],[5,"LayoutError",864],[10,"Serializer",865],[5,"TypeId",866],[5,"Url",867],[5,"Vec",868],[10,"Error",869],[5,"TransactionTooLong",63],[5,"Backtrace",870],[6,"Option",871],[5,"TestBlockHeader",63],[1,"u64"],[5,"TransactionTooLongSnafu",63],[5,"TestBlockPayload",63],[5,"BuilderCommitment",872],[5,"TestTransaction",63],[1,"u8"],[5,"TestMetadata",63],[6,"Ordering",873],[5,"Commitment",874],[1,"str"],[1,"tuple"],[1,"slice"],[5,"Arc",875],[17,"Item"],[10,"IntoIterator",876],[10,"Send",877],[8,"VidCommitment",878],[10,"Hash",879],[10,"Sized",877],[10,"BuildHasher",879],[10,"Hasher",879],[5,"IndentedSection",880],[10,"Display",863],[10,"Sync",877],[5,"Leaf",881],[17,"BlockHeader"],[5,"BuilderFee",882],[8,"VidCommon",878],[5,"Version",883],[17,"BlockPayload"],[17,"InstanceState"],[5,"TestInstanceState",543],[17,"AuctionResult"],[5,"DelayConfig",702],[5,"String",884],[10,"Iterator",885],[5,"TestTypes",276],[5,"TestConsecutiveLeaderTypes",276],[5,"PushCdnImpl",276],[5,"MemoryImpl",276],[5,"Libp2pImpl",276],[5,"WebImpl",276],[5,"CombinedImpl",276],[5,"TestVersions",276],[5,"MarketplaceUpgradeTestVersions",276],[5,"TestStateDelta",543],[5,"TestValidatedState",543],[10,"RngCore",886],[5,"TestStorage",640],[5,"DaProposal",881],[5,"Proposal",887],[5,"QuorumProposal",881],[5,"VidDisperseShare",881],[5,"TestStorageState",640],[8,"QuorumCertificate",888],[5,"BTreeMap",889],[6,"HotShotAction",890],[8,"CommitmentMap",891],[5,"View",872],[6,"SupportedTraitTypesForAsyncDelay",702],[5,"DelaySettings",702],[6,"DelayOptions",702],[5,"SupportedTraitTypesForAsyncDelayIterator",702],[5,"HashMap",892],[5,"IterBridge",893],[8,"StaticMembership",276],[8,"VidShares",640],[10,"TestableDelay",702]],"b":[[167,"impl-Debug-for-TransactionTooLong"],[168,"impl-Display-for-TransactionTooLong"],[170,"impl-Debug-for-TestBlockPayload"],[171,"impl-Display-for-TestBlockPayload"],[182,"impl-TestBlockPayload"],[183,"impl-TestableBlock%3CTYPES%3E-for-TestBlockPayload"]]}],\
["hotshot_fakeapi",{"doc":"Fake APIs","t":"CKGFPSPNONNNNNNHNNNNNNNNNONNNMNMNNNNNNNNNNNNNNNNNNNNN","n":["fake_solver","FakeSolverApi","FakeSolverFaultType","FakeSolverState","InternalServerFault","SOLVER_MAX_TIMEOUT_S","TimeoutFault","__clone_box","available_builders","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","define_api","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","dump_builders","error_pct","fmt","from","from","get_auction_results_non_permissioned","get_auction_results_non_permissioned","get_auction_results_permissioned","get_auction_results_permissioned","init","init","into","into","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","run","should_fault","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"hotshot_fakeapi"],[1,"hotshot_fakeapi::fake_solver"],[53,"dyn_clone::sealed"],[54,"tide_disco::error"],[55,"tide_disco::api"],[56,"tide_disco::api"],[57,"core::marker"],[58,"core::marker"],[59,"tide_disco::method"],[60,"rkyv::with"],[61,"core::result"],[62,"hotshot_example_types::auction_results_provider_types"],[63,"core::fmt"],[64,"core::fmt"],[65,"alloc::boxed"],[66,"core::pin"],[67,"core::alloc::layout"],[68,"core::alloc::layout"],[69,"url"],[70,"alloc::vec"],[71,"std::io::error"],[72,"core::any"]],"d":["Fake solver","The <code>FakeSolverApi</code> is a mock API which mimics the API …","The type of fake solver error","The state of the fake solver instance","A 500 error","The max time that HotShot will wait for the solver to …","An arbitrary timeout error","","The available builder list","","","","","","","Defines the API for the Fake solver.","","","","","","","","","Dumps back the builders with non deterministic error if …","The rate at which an error of any kind occurs","","Returns the argument unchanged.","Returns the argument unchanged.","Get the auction results without checking the signature.","Get the auction results without checking the signature.","Get the auction results with a valid signature.","Get the auction results with a valid signature.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Make a new <code>FakeSolverState</code> object","","","Runs the fake solver","If a random fault event happens, what fault should we send?","","","","","","","","",""],"i":[0,0,0,0,31,0,31,3,3,31,3,31,3,3,3,0,31,3,31,3,31,3,31,3,3,3,3,31,3,19,3,19,3,31,3,31,3,31,3,3,31,3,3,3,3,31,3,31,3,31,3,31,3],"f":"```````{{cb}d{}}`{ce{}{}}000{ff}{{ce}d{}{}}{{}{{n{{j{che}}l}}}{A`AbAdAf}Ah}{Ajc{}}000{{ce}{{An{{Al{gi}}}}}{}{}{}{}}0{Ajd}0{f{{n{B`h}}}}`{{fBb}Bd}{cc{}}0{{BfBh}{{Bn{{Bl{Bj}}}}}}{{fBh}{{Bn{{Bl{Bj}}}}}}10{{}Aj}0<<{{}{{An{C`Cb}}}}0{{{Cf{Cd}}{Cj{Ch}}}f}{{}}0{{fCh}{{Cl{d}}}}{f{{Cf{Cn}}}}{ce{}{}}{c{{An{e}}}{}{}}000{cD`{}}022","c":[],"p":[[5,"Private",53],[1,"unit"],[5,"FakeSolverState",1],[5,"ServerError",54],[5,"Api",55],[6,"ApiError",55],[8,"Result",56],[10,"Send",57],[10,"Sync",57],[10,"ReadState",58],[10,"WriteState",58],[10,"StaticVersionType",59],[1,"usize"],[5,"With",60],[6,"Result",61],[5,"TestAuctionResult",62],[5,"Formatter",63],[8,"Result",63],[10,"FakeSolverApi",1],[1,"u64"],[10,"Future",64],[5,"Box",65],[5,"Pin",66],[5,"Layout",67],[5,"LayoutError",67],[1,"f32"],[6,"Option",68],[5,"Url",69],[5,"Vec",70],[8,"Result",71],[6,"FakeSolverFaultType",1],[5,"TypeId",72]],"b":[]}],\
["hotshot_macros",{"doc":"Macros for use in testing.","t":"FFGFFGKPPPPNNNNNNNNNNNNNNNNNNNNNNNNQHNNNNNNNNNNNNNNNNNNNNNOOOONOONOONNNNNNNCNNOOOONQNNOOOOQMNNNNNNNNNNNNNNNNNNNOONNNNNNNOONOONOOFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["CrossTestData","CrossTestDataBuilder","CrossTestDataBuilderError","TestData","TestDataBuilder","TestDataBuilderError","ToLowerSnakeStr","UninitializedField","UninitializedField","ValidationError","ValidationError","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","create_empty","create_empty","cross_tests","cross_tests_internal","default","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","generate_test","ignore","ignore","ignore","ignore","ignore","ignore","impls","impls","impls","imply","imply","imply","into","into","into","into","into","into","is_ready","keywords","metadata","metadata","metadata","metadata","metadata","metadata","parse","run_test","test_name","test_name","test_name","test_name","test_name","test_name","test_scripts","to_lower_snake_str","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","types","types","types","version","version","version","versions","versions","versions","Ignore","Impls","Metadata","TestName","Types","Versions","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","display","display","display","display","display","display","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","peek","peek","peek","peek","peek","peek","span","span","span","span","span","span","span","span","span","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"hotshot_macros"],[128,"hotshot_macros::keywords"],[254,"core::result"],[255,"proc_macro"],[256,"core::fmt"],[257,"core::fmt"],[258,"alloc::string"],[259,"proc_macro2"],[260,"syn::lit"],[261,"syn::expr"],[262,"syn::expr"],[263,"syn::error"],[264,"proc_macro2"],[265,"syn::__private"],[266,"syn::__private"],[267,"syn::buffer"],[268,"proc_macro2"]],"d":["description of a crosstest","Builder for <code>CrossTestData</code>.","Error type for CrossTestDataBuilder","requisite data to generate a single test","Builder for <code>TestData</code>.","Error type for TestDataBuilder","trait make a string lower and snake case","Uninitialized field","Uninitialized field","Custom validation error","Custom validation error","","","","","","","","","","","","","Builds a new <code>CrossTestData</code>.","Builds a new <code>TestData</code>.","","","","","","","","","Create an empty builder, with all fields set to <code>None</code> or …","Create an empty builder, with all fields set to <code>None</code> or …","Generate a cartesian product of tests across all types …","Helper function to do the actual code gen allow panic …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","generate the code for a single test","whether or not to ignore","whether or not to ignore the test","whether or not to ignore","whether or not to ignore","whether or not to ignore the test","whether or not to ignore the test","imlementations","imlementations","imlementations","impl","impl","impl","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","if we’ve extracted all the metadata","macro specific custom keywords","test description/spec","test description","test description/spec","test description/spec","test description","test description","allow panic because this is a compiler error","Macro to run the test suite with <code>TaskState</code> scripts at once …","name of the test","name of test","name of the test","name of the test","name of test","name of test","Macro to test multiple <code>TaskState</code> scripts at once.","make a lower and snake case string","","","","","","","","","","","","","","","","","","","type","type","type","","","","","","","types","types","types","impl","impl","impl","versions","versions","versions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,7,3,7,2,1,3,6,5,7,2,1,3,6,5,7,1,5,2,1,6,5,2,1,6,5,1,5,0,0,1,5,2,3,3,6,7,7,2,1,3,3,3,6,5,7,7,7,6,1,5,2,1,6,5,1,2,1,5,6,5,2,1,3,6,5,7,1,0,1,5,2,1,6,5,2,0,1,5,2,1,6,5,0,23,2,1,6,5,3,7,2,1,3,6,5,7,2,1,3,6,5,7,5,6,5,2,1,3,6,5,7,1,2,1,5,6,5,1,2,1,0,0,0,0,0,0,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30,25,26,27,28,29,30],"f":"```````````{ce{}{}}00000000000{b{{h{df}}}}{j{{h{ln}}}}{dd}{bb}{ll}{jj}{{ce}A`{}{}}000{{}b}{{}j}`{dAb}21{{dAd}Af}{{fAd}Af}0{{lAd}Af}{{nAd}Af}0{cc{}}0{Ahf}{Ajf}222{Ajn}{Ahn}4{lAl}{{bAn}b}{{jAn}j}````{{bB`}b}``{{jBb}j}``{ce{}{}}00000{bBd}`{{bBf}b}{{jBf}j}````{Bh{{Bj{d}}}}`{{bBl}b}{{jBl}j}`````{BnAj}7777{cAj{}}0{c{{h{e}}}{}{}}00000000000:``{cC`{}}00000<``;``<````````::::::::::::{CbCb}{CdCd}{CfCf}{ChCh}{CjCj}{ClCl}{{ce}A`{}{}}00000{{}Cb}{{}Cd}{{}Cf}{{}Ch}{{}Cj}{{}Cl}{{}Cn}00000{{CbCb}D`}{{CdCd}D`}{{CfCf}D`}{{ChCh}D`}{{CjCj}D`}{{ClCl}D`}{{CbDb}Dd}{{CdDb}Dd}{{CfDb}Dd}{{ChDb}Dd}{{CjDb}Dd}{{ClDb}Dd}{cc{}}00000{{Cbc}A`Df}{{Cdc}A`Df}{{Cfc}A`Df}{{Chc}A`Df}{{Cjc}A`Df}{{Clc}A`Df}{ce{}{}}00000{Bh{{Bj{Cb}}}}{Bh{{Bj{Cd}}}}{Bh{{Bj{Cf}}}}{Bh{{Bj{Ch}}}}{Bh{{Bj{Cj}}}}{Bh{{Bj{Cl}}}}{DhBd}00000{cDj{}}00000``````888888{{CbDl}A`}{{CdDl}A`}{{CfDl}A`}{{ChDl}A`}{{CjDl}A`}{{ClDl}A`}{c{{h{e}}}{}{}}00000000000{cC`{}}00000","c":[],"p":[[5,"CrossTestDataBuilder",0],[5,"CrossTestData",0],[6,"CrossTestDataBuilderError",0],[6,"Result",254],[5,"TestDataBuilder",0],[5,"TestData",0],[6,"TestDataBuilderError",0],[1,"unit"],[5,"TokenStream",255],[5,"Formatter",256],[8,"Result",256],[5,"UninitializedFieldError",257],[5,"String",258],[5,"TokenStream",259],[5,"LitBool",260],[5,"ExprArray",261],[5,"ExprPath",261],[1,"bool"],[6,"Expr",261],[8,"ParseStream",262],[8,"Result",263],[5,"Ident",259],[10,"ToLowerSnakeStr",0],[5,"TypeId",264],[5,"Metadata",128],[5,"Ignore",128],[5,"TestName",128],[5,"Types",128],[5,"Impls",128],[5,"Versions",128],[1,"str"],[8,"bool",265],[8,"Formatter",265],[8,"FmtResult",265],[10,"Hasher",266],[5,"Cursor",267],[5,"Span",259],[8,"TokenStream2",265]],"b":[[40,"impl-Debug-for-CrossTestDataBuilderError"],[41,"impl-Display-for-CrossTestDataBuilderError"],[43,"impl-Debug-for-TestDataBuilderError"],[44,"impl-Display-for-TestDataBuilderError"],[47,"impl-From%3CUninitializedFieldError%3E-for-CrossTestDataBuilderError"],[48,"impl-From%3CString%3E-for-CrossTestDataBuilderError"],[52,"impl-From%3CString%3E-for-TestDataBuilderError"],[53,"impl-From%3CUninitializedFieldError%3E-for-TestDataBuilderError"]]}],\
["hotshot_orchestrator",{"doc":"Orchestrator for manipulating nodes and recording results …","t":"SSSKFINOONNOCNNCONHNNNNNNMNMNMNNNONHONOONMNONMNMNMNMNMNMNMNOMNHOONNNNNFFFFFNNNNOONNNNOONNNNNNNNNNOONNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOONOOOONNNNNNNNNONNOONNNNOOOOOOOOOONNNNNNNNNNNNNNNNNNNOONNNNNNNGFPPPPFFFFGFGSSSSPPFPPPFFFPNNNNNNNNNNNNNOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNOOOOOOONNNNNNHONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNOOOOOOOONNNNNNNNNNNOOOOOOOOOOOOOOOONNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNOONOONNNNNNNNNNNNNO","n":["ORCHESTRATOR_MAJOR_VERSION","ORCHESTRATOR_MINOR_VERSION","ORCHESTRATOR_VERSION","OrchestratorApi","OrchestratorState","OrchestratorVersion","__clone_box","accepting_new_keys","bench_results","borrow","borrow_mut","builders","client","clone","clone_into","config","config","default","define_api","deref","deref_mut","deserialize","drop","election_type","from","get_builders","get_builders","get_start","get_start","get_tmp_node_index","get_tmp_node_index","init","into","latest_index","layout_raw","libp2p_generate_indexed_identity","manual_start_allowed","new","nodes_connected","nodes_post_results","output_to_csv","peer_pub_ready","peer_pub_ready","peer_pub_ready","pointer_metadata","post_builder","post_builder","post_config_after_peer_collected","post_config_after_peer_collected","post_getconfig","post_getconfig","post_identity","post_identity","post_manual_start","post_manual_start","post_ready","post_ready","post_run_results","post_run_results","pub_posted","register_public_key","register_public_key","run_orchestrator","start","tmp_latest_index","to_owned","try_from","try_into","type_id","vzip","BenchResults","BenchResultsDownloadConfig","MultiValidatorArgs","OrchestratorClient","ValidatorArgs","__clone_box","__clone_box","__clone_box","__clone_box","advertise_address","advertise_address","augment_args","augment_args","augment_args_for_update","augment_args_for_update","avg_latency_in_sec","avg_latency_in_sec","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder_address","client","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","command","command","command_for_update","command_for_update","commit_sha","da_committee_size","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","failed_num_views","failed_num_views","fixed_leader_for_gpuvid","fmt","fmt","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_multi_args","get_builder_addresses","get_config_after_collection","get_config_without_peer","get_node_index_for_init_validator_config","group_id","group_id","init","init","init","init","init","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leader_election_type","maximum_latency_in_sec","maximum_latency_in_sec","minimum_latency_in_sec","minimum_latency_in_sec","network_config_file","network_config_file","new","num_latency","num_nodes","partial_results","partial_results","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","post_and_wait_all_public_keys","post_bench_results","post_builder_addresses","printout","rounds","serialize","serialize","throughput_bytes_per_sec","throughput_bytes_per_sec","to_owned","to_owned","to_owned","to_owned","total_nodes","total_num_views","total_num_views","total_time_elapsed_in_sec","total_time_elapsed_in_sec","total_transactions_committed","total_transactions_committed","transaction_size","transaction_size_in_bytes","transactions_per_round","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","url","url","vzip","vzip","vzip","vzip","vzip","wait_for_all_nodes_ready","wait_for_fn_from_orchestrator","BuilderType","CombinedNetworkConfig","DeserializeError","External","FailedToCreatePath","File","HotShotConfigFile","Libp2pConfig","Libp2pConfigFile","NetworkConfig","NetworkConfigError","NetworkConfigFile","NetworkConfigSource","ORCHESTRATOR_DEFAULT_NUM_ROUNDS","ORCHESTRATOR_DEFAULT_START_DELAY_SECONDS","ORCHESTRATOR_DEFAULT_TRANSACTIONS_PER_ROUND","ORCHESTRATOR_DEFAULT_TRANSACTION_SIZE","Orchestrator","Random","RandomBuilderConfig","ReadFromFileError","SerializeError","Simple","UpgradeConfig","ValidatorConfigFile","WebServerConfig","WriteToFileError","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error_source","blocks_per_second","bootstrap_mesh_n","bootstrap_mesh_n","bootstrap_mesh_n_high","bootstrap_mesh_n_high","bootstrap_mesh_n_low","bootstrap_mesh_n_low","bootstrap_mesh_outbound_min","bootstrap_mesh_outbound_min","bootstrap_nodes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","builder","builder_timeout","builder_timeout","builder_timeout","builder_urls","cdn_marshal_address","cdn_marshal_address","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combined_network_config","combined_network_config","commit_sha","config","config","data_request_delay","data_request_delay","default","default","default","default","default","default","default_builder_urls","delay_duration","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fixed_leader_for_gpuvid","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_file","from_file","from_file_or_orchestrator","generate_init_validator_config","get_complete_config","header","in_current_span","indexed_da","indexed_da","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","is_da","key_type_name","known_da_nodes","known_nodes_with_stake","known_nodes_without_stake","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","libp2p_config","libp2p_config","manual_start_password","manual_start_password","mesh_n","mesh_n","mesh_n_high","mesh_n_high","mesh_n_low","mesh_n_low","mesh_outbound_min","mesh_outbound_min","my_own_validator_config","next_view_timeout","next_view_timeout","next_view_timeout","node_id","node_index","node_index","node_index","non_staked_da_nodes","num_bootrap","num_bootstrap","num_nodes_with_stake","num_nodes_without_stake","num_txn_per_round","online_time","online_time","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","random_builder","random_builder","round_start_delay","rounds","rounds","seed","seed","seed","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","server_mode","server_mode","staked_da_nodes","start_delay","start_delay_seconds","start_delay_seconds","start_proposing_time","start_proposing_view","start_threshold","start_voting_time","start_voting_view","stop_proposing_time","stop_proposing_view","stop_voting_time","stop_voting_view","timeout_ratio","to_file","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_possible_value","to_string","transaction_size","transaction_size","transactions_per_round","transactions_per_round","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txn_in_block","txn_size","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","url","value_variants","view_sync_timeout","view_sync_timeout","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_between_polls"],"q":[[0,"hotshot_orchestrator"],[70,"hotshot_orchestrator::client"],[245,"hotshot_orchestrator::config"],[664,"dyn_clone::sealed"],[665,"core::clone"],[666,"hotshot_types::traits::signature_key"],[667,"core::default"],[668,"tide_disco::error"],[669,"tide_disco::api"],[670,"tide_disco::api"],[671,"core::marker"],[672,"core::marker"],[673,"tide_disco::method"],[674,"rkyv::with"],[675,"alloc::string"],[676,"url"],[677,"alloc::vec"],[678,"serde::ser"],[679,"core::alloc::layout"],[680,"core::alloc::layout"],[681,"multiaddr"],[682,"core::option"],[683,"libp2p_identity::peer_id"],[684,"std::io::error"],[685,"core::any"],[686,"clap_builder::builder::command"],[687,"serde::de"],[688,"core::fmt"],[689,"core::fmt"],[690,"clap_builder"],[691,"core::net::socket_addr"],[692,"anyhow"],[693,"clap_builder::util::id"],[694,"hotshot_types"],[695,"serde::ser"],[696,"surf_disco::client"],[697,"core::ops::function"],[698,"core::error"],[699,"vec1"],[700,"core::fmt"],[701,"core::fmt"]],"d":["Orchestrator is not, strictly speaking, bound to the …","Orchestrator Version (minor)","Orchestrator Version as a type-binding instance","An api exposed by the orchestrator","The state of the orchestrator","Orchestrator Version as a type","","Whether we are still accepting new keys for registration","The results of the benchmarks","","","Builder address pool","The orchestrator’s clients","","","Configuration for the orchestrator","The network configuration","","Sets up all API routes","","","","","get election type in use","Returns the argument unchanged.","get endpoints for builders","","get endpoint for whether or not the run has started","","get endpoint for the next available temporary node index","","","Calls <code>U::from(self)</code>.","Tracks the latest node index we have generated a …","","Generate an keypair based on a <code>seed</code> and an <code>index</code>","Whether the orchestrator can be started manually","create a new <code>OrchestratorState</code>","The total nodes that have posted they are ready to start","The number of nodes that have posted their results","Output the results to a csv file according to orchestrator …","post endpoint for whether or not all peers public keys are …","","Whether the network configuration has been updated with …","","post endpoint for registering a builder with the …","","get endpoint for the network config after all peers public …","","post endpoint for each node’s config","","Post an identity to the orchestrator. Takes in optional …","Post an identity to the orchestrator. Takes in optional …","post endpoint for manually starting the orchestrator","Manually start the network","post endpoint for whether or not all nodes are ready","","post endpoint for the results of the run","","A map from public keys to <code>(node_index, is_da)</code>.","post endpoint for each node’s public key","","Runs the orchestrator","Whether nodes should start their HotShot instances Will be …","Tracks the latest temporary index we have generated for …","","","","","","Struct describing a benchmark result","Struct describing a benchmark result needed for download, …","arguments to run multiple validators","Holds the client connection to the orchestrator","Arguments passed to the validator","","","","","The optional advertise address to use for Libp2p","The optional advertise address to use for Libp2p","","","","","The average latency of the transactions","The average latency of the transactions","","","","","","","","","","","Optional address to run builder on. Address must be …","the client","","","","","","","","","","","","","The commit this benchmark was run on","The size of the da committee","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of failed views during benchmarking","The number of failed views during benchmarking","The number of fixed_leader_for_gpuvid when we enable the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Constructs <code>ValidatorArgs</code> from <code>MultiValidatorArgs</code> and a …","Requests a builder URL from orchestrator","Requests the configuration from the orchestrator with the …","Get the config from the orchestrator. If the identity is …","Post to the orchestrator and get the latest <code>node_index</code> …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The type of leader election: static, fixed, random","The maximum latency of the transactions","The maximum latency of the transactions","The minimum latency of the transactions","The minimum latency of the transactions","An optional network config file to save to/load from …","An optional network config file to save to/load from …","Creates the client that will connect to the orchestrator","The number of transactions that were latency measured","Number of validators to run","Whether it’s partial collected results","Whether the results are partially collected “One” when …","","","","","","Sends my public key to the orchestrator so that it can …","Sends the benchmark metrics to the orchestrator","Registers a builder URL with the orchestrator","printout the results of one example run","The number of rounds","","","The throughput of the consensus protocol = number of …","The throughput of the consensus protocol = number of …","","","","","Total number of nodes","The total number of views during benchmarking","The total number of views during benchmarking","The total time elapsed for benchmarking","The total time elapsed for benchmarking","The number of transactions committed during benchmarking","The number of transactions committed during benchmarking","The size of each transaction in bytes","The size of each transaction in bytes","Number of transactions submitted per round","","","","","","","","","","","","","","","","","","","","The address the orchestrator runs on","The address the orchestrator runs on","","","","","","Tells the orchestrator this validator is ready to start …","Generic function that waits for the orchestrator to return …","configuration for builder type to use","configuration for combined network","Failed to deserialize loaded NetworkConfig","Use external builder, [config.builder_url] must be set to …","Failed to recursively create path to NetworkConfig","we source the network configuration from a config file on …","Holds configuration for a <code>HotShot</code>","Configuration describing a libp2p node","configuration serialized into a file","a network configuration","a network configuration error","a network config stored in a file","the source of the network config","default number of rounds to run","default delay before beginning consensus","default number of transactions per round","default size of transactions","we source the network configuration from the orchestrator","Random integrated builder will be started and used by each …","Options controlling how the random builder generates blocks","Failed to read NetworkConfig from file","Failed to serialize NetworkConfig","Simple integrated builder will be started and used by each …","Holds configuration for the upgrade task.","Holds configuration for a validator node","configuration for a web server","Failed to write NetworkConfig to file","","","","","","","","","","","","","","How many blocks to generate per second","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","corresponds to libp2p DHT parameter of the same name for …","bootstrap nodes (multiaddress, serialized public key)","","","","","","","","","","","","","","","","","","","","","","","","","","","builder to use","builder to use","The maximum amount of time a leader can wait to get a …","The maximum amount of time a leader can wait to get a …","The maximum amount of time a leader can wait to get a …","Builder API base URL","The address for the Push CDN’s “marshal”, A.K.A. …","The address of the Push CDN’s “marshal”, A.K.A. load …","","","","","","","","","","","","","","","","","","","","","","","combined network config","combined network config","the commit this run is based on","the hotshot config","the hotshot config file","time to wait until we request data associated with a …","Time to wait until we request data associated with a …","","","","","","","Default builder URL, used as placeholder","delay duration before sending a message through the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of fixed leaders for GPU VID","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads a <code>NetworkConfig</code> from a file.","read the validator config from a file","Asynchronously retrieves a <code>NetworkConfig</code> either from a …","Get a temporary node index for generating a validator …","Asynchronously retrieves a <code>NetworkConfig</code> from an …","","","whether DA membership is determined by index. if true, the …","number of views to run","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether or not we are DA","name of the key type (for debugging)","The known DA nodes’ public key and stake values","The known nodes’ public key and stake value","The known non-staking nodes’","","","","","","","","","","","","","","the libp2p config","the libp2p config","password to have the orchestrator start the network, …","password to have the orchestrator start the network, …","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","corresponds to libp2p DHT parameter of the same name","My own public key, secret key, stake value","timeout before starting the next view","timeout before starting the next view","Base duration for next-view timeout, in milliseconds","The validator’s index, which can be treated as another …","global index of node (for testing purposes a uid)","global index of node (for testing purposes a uid)","global index of node (for testing purposes a uid)","Number of non-staking DA nodes","number of bootstrap nodes","Number of network bootstrap nodes","Total number of staked nodes in the network","Total number of non-staked nodes in the network","number of transactions per view","time node has been running","time node has been running","","","","","","","","","","","","","","random builder config","random builder configuration","The delay a leader inserts before starting pre-commit, in …","number of views to run","number of views to run","unique seed (for randomness? TODO)","unique seed (for randomness? TODO)","The validator’s seed","","","","","","","","","","","","whether to start in libp2p::kad::Mode::Server mode","whether to start in libp2p::kad::Mode::Server mode","Number of staking DA nodes","Delay after init before starting consensus, in milliseconds","delay before beginning consensus","delay before beginning consensus","Unix time in seconds at which we start proposing an upgrade","View to start proposing an upgrade","The proportion of nodes required before the orchestrator …","Unix time in seconds at which we start voting on an upgrade","View to start voting on an upgrade","Unix time in seconds at which we stop proposing an …","View to stop proposing an upgrade. To prevent proposing an …","Unix time in seconds at which we stop voting on an …","View to stop voting on an upgrade. To prevent voting on an …","The exponential backoff ration for the next-view timeout","Serializes the <code>NetworkConfig</code> and writes it to a file.","","","","","","","","","","","","","","size of transactions","size of transactions","number of transactions per view","number of transactions per view","","","","","","","","","","","","","","","","","","","","","","","","","","","How many transactions to include in a block","Range of how big a transaction can be (in bytes)","","","","","","","","","","","","","","Upgrade config","the url to run on","","timeout before starting next view sync round","Duration for view sync round timeout","","","","","","","","","","","","","","the time to wait between polls"],"i":[0,0,0,0,0,0,3,3,3,3,3,3,0,3,3,0,3,3,0,3,3,3,3,3,3,19,3,19,3,19,3,3,3,3,3,0,3,3,3,3,3,19,3,3,3,19,3,19,3,19,3,19,3,19,3,19,3,19,3,3,19,3,0,3,3,3,3,3,3,3,0,0,0,0,0,35,40,41,42,41,42,41,42,41,42,35,40,48,35,40,41,42,48,35,40,41,42,41,48,35,40,41,42,35,40,41,42,41,42,41,42,40,40,35,40,48,35,40,41,42,48,35,40,41,42,48,35,35,40,40,41,42,48,35,40,41,42,35,40,35,40,40,35,40,41,42,48,35,40,41,42,41,42,41,42,41,48,48,48,48,41,42,48,35,40,41,42,48,35,40,41,42,48,35,40,41,42,40,35,40,35,40,41,42,48,35,42,35,40,48,35,40,41,42,48,48,48,35,40,35,40,35,40,35,40,41,42,40,35,40,35,40,35,40,40,35,40,48,35,40,41,42,48,35,40,41,42,48,35,40,41,42,41,42,41,42,41,42,48,35,40,41,42,48,48,0,0,71,64,71,74,0,0,0,0,0,0,0,0,0,0,0,74,64,0,71,71,64,0,0,0,71,60,61,62,63,64,65,31,66,67,68,69,71,71,65,60,61,60,61,60,61,60,61,60,74,60,61,62,63,71,64,65,31,66,67,68,69,74,60,61,62,63,71,64,65,31,66,67,68,69,31,66,60,31,67,67,31,66,60,61,62,63,64,65,31,66,67,68,69,60,61,62,63,64,65,31,66,67,68,69,31,66,31,31,66,31,67,64,65,31,67,68,69,0,63,74,60,61,62,63,71,64,65,31,66,67,68,69,74,60,61,62,63,71,64,65,31,66,67,68,69,74,60,60,61,61,62,62,63,63,71,64,64,65,65,31,31,66,66,67,67,68,68,69,69,74,60,61,62,63,71,64,65,31,66,67,68,69,67,60,61,62,63,71,71,64,65,31,66,67,68,69,74,60,61,62,63,71,64,65,31,31,66,67,68,69,31,69,31,31,31,71,71,31,66,74,60,61,62,63,71,64,65,31,66,67,68,69,74,60,61,62,63,71,64,65,31,66,67,68,69,69,31,67,67,67,74,60,61,62,63,71,64,65,31,66,67,68,69,31,66,31,66,60,61,60,61,60,61,60,61,67,60,31,67,69,60,31,66,67,31,67,67,67,60,60,61,74,60,61,62,63,71,64,65,31,66,67,68,69,31,66,67,31,66,31,66,69,60,61,62,63,64,65,31,66,67,68,69,60,61,67,67,31,66,68,68,67,68,68,68,68,68,68,67,31,60,61,62,63,64,65,31,66,67,68,69,64,71,31,66,31,66,74,60,61,62,63,71,64,65,31,66,67,68,69,74,60,61,62,63,71,64,65,31,66,67,68,69,65,65,74,60,61,62,63,71,64,65,31,66,67,68,69,67,62,64,31,67,74,60,61,62,63,71,64,65,31,66,67,68,69,62],"f":"``````{{cb}d{}}``{ce{}{}}0``{{{f{c}}}{{f{c}}}{hj}}{{ce}d{}{}}``{{}{{f{c}}}{lj}}{{}{{Ad{{A`{cne}}Ab}}}{AfAhAjAl}An}{B`c{}}0{{ce}{{Ad{{Bb{gi}}}}}{}{}{}{}}{B`d}{{}Bd}{cc{}}{Bf{{Ad{{Bj{Bh}}n}}}}{{{f{c}}}{{Ad{{Bj{Bh}}n}}}{Blhj}}{Bf{{Ad{Bnn}}}}{{{f{c}}}{{Ad{Bnn}}}{Blhj}}{Bf{{Ad{C`n}}}}{{{f{c}}}{{Ad{C`n}}}{Blhj}}{{}B`}{ce{}{}}`{{}{{Ad{CbCd}}}}{{{Ch{Cf}}Cj}Cl}`{{{Cn{c}}}{{f{c}}}j}``{{{f{c}}}dj}98`{{}}{{BfBh}{{Ad{dn}}}}{{{f{c}}Bh}{{Ad{dn}}}{Blhj}}{Bf{{Ad{{Cn{c}}n}}}j}{{{f{c}}}{{Ad{{Cn{c}}n}}}{Blhj}}{{BfC`}{{Ad{{Cn{c}}n}}}j}{{{f{c}}C`}{{Ad{{Cn{c}}n}}}{Blhj}}{{Bf{Db{D`}}{Db{Dd}}}{{Ad{C`n}}}}{{{f{c}}{Db{D`}}{Db{Dd}}}{{Ad{C`n}}}{Blhj}}{{Bf{Bj{Cf}}}{{Ad{dn}}}}{{{f{c}}{Bj{Cf}}}{{Ad{dn}}}{Blhj}}{Bf{{Ad{dn}}}}{{{f{c}}}{{Ad{dn}}}{Blhj}}{{BfDf}{{Ad{dn}}}}{{{f{c}}Df}{{Ad{dn}}}{Blhj}}`{{Bf{Bj{Cf}}Bn{Db{D`}}{Db{Dd}}}{{Ad{{Dh{CjBn}}n}}}}{{{f{c}}{Bj{Cf}}Bn{Db{D`}}{Db{Dd}}}{{Ad{{Dh{CjBn}}n}}}{Blhj}}{{{Cn{c}}Bh}{{Dj{d}}}{jBl}}``{ce{}{}}{c{{Ad{e}}}{}{}}0{cDl{}}2`````{{cb}d{}}000``{DnDn}000``4444444444``{DfDf}{E`E`}{EbEb}{EdEd}{{ce}d{}{}}000{{}Dn}000``{{}Df}{{}E`}{B`c{}}000000000{{ce}{{Ad{{Bb{gi}}}}}{}{}{}{}}{c{{Ad{Df}}}Ef}11{c{{Ad{E`}}}Ef}22{B`d}0000{{DfDf}Bn}{{E`E`}Bn}```{{DfEh}Ej}{{E`Eh}Ej}{{EbEh}Ej}{{EdEh}Ej}{cc{}}0000{El{{Ad{EbEn}}}}{El{{Ad{EdEn}}}}10{{EdC`}Eb}{F`{{Bj{Bh}}}}{F`{{Cn{c}}}j}{{F`{Db{Fb}}{Db{Dd}}}{{Fd{{Cn{c}}}}}j}{F`C`}{{}{{Db{Ff}}}}0{{}B`}0000{ce{}{}}0000{{}{{Ad{CbCd}}}}0000```````{EbF`}````{{}}0000{{F`{Fh{c}}{Db{Fb}}{Db{Dd}}}{{Cn{c}}}j}{{F`Df}d}{{F`{Bj{Bh}}}d}{Dfd}`{{Dfc}AdFj}{{E`c}AdFj}``9999``````````{c{{Ad{e}}}{}{}}000000000{cDl{}}0000{{EbEl}{{Ad{dEn}}}}{{EdEl}{{Ad{dEn}}}}10``====={{F`Cj}Bn}{{F`g}c{}{{Fn{}{{Fl{{Ad{cn}}}}}}}{{Gd{{Gb{nG`}}}{{Fl{e}}}}}}```````````````````````````{{cb}d{}}0000000000{cGf{}}0``````````{ce{}{}}0000000000000000000000000````````{GhGh}{GjGj}{GlGl}{GnGn}{H`H`}{HbHb}{{{Cn{c}}}{{Cn{c}}}{hj}}{{{Hd{c}}}{{Hd{c}}}{hj}}{{{Hf{c}}}{{Hf{c}}}{hj}}{HhHh}{HjHj}{{ce}d{}{}}0000000000```````{{}H`}{{}Hb}{{}{{Cn{c}}}j}{{}{{Hf{c}}}j}{{}Hh}{{}Hj}{{}{{Hl{Bh}}}}`{B`c{}}0000000000000000000000000{{ce}{{Ad{{Bb{gi}}}}}{}{}{}{}}0{c{{Ad{Gh}}}Ef}1{c{{Ad{Gj}}}Ef}{c{{Ad{Gl}}}Ef}3{c{{Ad{Gn}}}Ef}44{c{{Ad{H`}}}Ef}5{c{{Ad{Hb}}}Ef}66{c{{Ad{{Cn{e}}}}}Efj}7{c{{Ad{{Hd{e}}}}}Efj}8{c{{Ad{{Hf{e}}}}}Efj}9{c{{Ad{Hh}}}Ef}{c{{Ad{Hj}}}Ef};{B`d}000000000000`{{GhEh}Ej}{{GjEh}Ej}{{GlEh}Ej}{{GnEh}Ej}{{HnEh}Ej}0{{H`Eh}Ej}{{HbEh}Ej}{{{Cn{c}}Eh}Ej{I`j}}{{{Hd{c}}Eh}Ej{I`j}}{{{Hf{c}}Eh}Ej{I`j}}{{HhEh}Ej}{{HjEh}Ej}{cc{}}00000000{{{Hd{c}}}{{Cn{c}}}j}1111{Bd{{Ad{{Cn{c}}Hn}}}j}{IbHj}{{F`{Db{Bd}}{Db{Fb}}{Db{Dd}}}{{Fd{{Dh{{Cn{c}}Id}}}}}j}{{F`Bn}{{Fh{c}}}j}{{F`{Fh{c}}{Db{Fb}}{Db{Dd}}}{{Fd{{Dh{{Cn{c}}Id}}}}}j}{{ce}{{If{eg}}}{}{IhAfAh}{}}{c{}{}}``{{}B`}000000000000{ce{}{}}000000000000`````{{}{{Ad{CbCd}}}}000000000000````````````````````````````{{}}000000000000````````{{Ghc}AdFj}{{Gjc}AdFj}{{Glc}AdFj}{{Gnc}AdFj}{{H`c}AdFj}{{Hbc}AdFj}{{{Cn{c}}e}Ad{Blj}Fj}{{{Hd{c}}e}Ad{Blj}Fj}{{{Hf{c}}e}AdjFj}{{Hhc}AdFj}{{Hjc}AdFj}````````````````{{{Cn{c}}Bd}{{Ad{dHn}}}j}>>>>>>>>>>>{H`{{Db{Ij}}}}{cBd{}}````{c{{Ad{e}}}{}{}}0000000000000000000000000``{cDl{}}000000000000``{{}{{Il{H`}}}}``{ce{}{}}000000000000`","c":[],"p":[[5,"Private",664],[1,"unit"],[5,"OrchestratorState",0],[10,"Clone",665],[10,"SignatureKey",666],[10,"Default",667],[5,"ServerError",668],[5,"Api",669],[6,"ApiError",669],[6,"Result",670],[10,"Send",671],[10,"Sync",671],[10,"ReadState",672],[10,"WriteState",672],[10,"StaticVersionType",673],[1,"usize"],[5,"With",674],[5,"String",675],[10,"OrchestratorApi",0],[5,"Url",676],[5,"Vec",677],[10,"Serialize",678],[1,"bool"],[1,"u16"],[5,"Layout",679],[5,"LayoutError",679],[1,"u8"],[1,"array"],[1,"u64"],[5,"Keypair",680],[5,"NetworkConfig",245],[5,"Multiaddr",681],[6,"Option",682],[5,"PeerId",683],[5,"BenchResults",70],[1,"tuple"],[8,"Result",684],[5,"TypeId",685],[5,"Command",686],[5,"BenchResultsDownloadConfig",70],[5,"ValidatorArgs",70],[5,"MultiValidatorArgs",70],[10,"Deserializer",687],[5,"Formatter",688],[8,"Result",688],[5,"ArgMatches",689],[8,"Error",690],[5,"OrchestratorClient",70],[6,"SocketAddr",691],[8,"Result",692],[5,"Id",693],[5,"ValidatorConfig",694],[10,"Serializer",678],[17,"Output"],[10,"Future",695],[8,"OrchestratorVersion",0],[5,"Client",696],[10,"Fn",697],[10,"Error",698],[5,"Libp2pConfig",245],[5,"Libp2pConfigFile",245],[5,"WebServerConfig",245],[5,"CombinedNetworkConfig",245],[6,"BuilderType",245],[5,"RandomBuilderConfig",245],[5,"NetworkConfigFile",245],[5,"HotShotConfigFile",245],[5,"UpgradeConfig",245],[5,"ValidatorConfigFile",245],[5,"Vec1",699],[6,"NetworkConfigError",245],[10,"Debug",688],[1,"str"],[6,"NetworkConfigSource",245],[5,"IndentedSection",700],[10,"Display",688],[5,"PossibleValue",701],[1,"slice"]],"b":[[434,"impl-Debug-for-NetworkConfigError"],[435,"impl-Display-for-NetworkConfigError"]]}],\
["hotshot_stake_table",{"doc":"This crate contains some stake table implementations for …","t":"CCCCSFNNNNNNNCNNNNNNNONNNNNNNOONCNONNNNNONNNNNNNNNNNNNNNIISPPPFKPPFIGFGNNNNNNNNNNNNNNNONNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNONNNNNNNONNNNNNNNNNNNNNNONHNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNOOOOOOOOOOOTKMHFFNNNOONNNNONNNNNNCNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNOONNNNOOONNNNNNNNNNNNONNNONNNNNNNNNNNNNNIFINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["config","mt_based","utils","vec_based","STAKE_TABLE_CAPACITY","StakeTable","__clone_box","advance","borrow","borrow_mut","clone","clone_into","commitment","config","contains_key","deref","deref_mut","deregister","deserialize","deserialize","drop","epoch_start","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","head","height","init","internal","into","last_epoch_start","layout_raw","len","lookup","lookup_with_aux_and_proof","lookup_with_proof","mapping","new","pointer_metadata","register","root","sample","serialize","set_value","to_owned","total_stake","try_from","try_into","try_iter","type_id","update","vzip","Digest","FieldType","TREE_BRANCH","Branch","Branch","Empty","IntoIter","Key","Leaf","Leaf","MerkleCommitment","MerklePath","MerklePathEntry","MerkleProof","PersistentMerkleNode","__clone_box","__clone_box","__clone_box","__clone_box","batch_check","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","check","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comm","commitment","compute_root","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","digest","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_merkle_path","from_str","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","height","index","index","init","init","init","init","init","into","into","into","into","into","into_iter","into_iter","key","key_by_stake","key_value","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","len","lookup","multiunzip","multiunzip","new","new","next","num_keys","path","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","register","serialize","serialize","serialize","serialize","serialize_with_mode","serialized_size","set_value","simple_lookup","size","size","tag","to_merkle_path","to_owned","to_owned","to_owned","to_owned","to_string","total_stakes","tree_height","tree_height","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unvisited","update","value","verify","vzip","vzip","vzip","vzip","vzip","key","pos","siblings","value","children","comm","comm","key","num_keys","total_stakes","value","SIZE","ToFields","to_fields","u256_to_field","StakeTable","StakeTableSnapshot","__clone_box","__clone_box","advance","bls_keys","bls_mapping","borrow","borrow","borrow_mut","borrow_mut","capacity","clone","clone","clone_into","clone_into","commitment","compute_head_comm","config","contains_key","default","default","deref","deref","deref_mut","deref_mut","deregister","deserialize","deserialize","deserialize","deserialize","drop","drop","epoch_start","epoch_start_comm","epoch_start_total_stake","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","head","head_total_stake","init","init","into","into","last_epoch_start","last_epoch_start_comm","last_epoch_start_total_stake","layout_raw","layout_raw","len","lookup","lookup_pos","lookup_with_aux_and_proof","lookup_with_proof","new","pointer_metadata","pointer_metadata","register","sample","schnorr_keys","serialize","serialize","set_value","stake_amount","to_owned","to_owned","total_stake","try_from","try_from","try_into","try_into","try_iter","type_id","type_id","update","version","vzip","vzip","FieldType","QCVerKey","StateVerKey","__clone_box","assemble","batch_check","borrow","borrow_mut","check","check","clone","clone_into","cmp","compare","deref","deref_mut","deserialize","deserialize","deserialize","deserialize_with_mode","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_bytes","from_private","from_str","generated_from_seed_indexed","generated_from_seed_indexed","genesis_proposer_pk","get_hash","hash","header","init","internal","into","layout_raw","partial_cmp","pointer_metadata","public_key","public_parameter","serialize","serialize","serialize_with_mode","serialized_size","sig_proof","sign","sign_builder_message","stake_table_entry","tag","to_affine","to_bytes","to_fields","to_fields","to_fields","to_owned","to_string","try_from","try_from","try_from","try_into","type_id","validate","validate_builder_signature","verify","vzip","zeroize"],"q":[[0,"hotshot_stake_table"],[4,"hotshot_stake_table::config"],[5,"hotshot_stake_table::mt_based"],[56,"hotshot_stake_table::mt_based::config"],[59,"hotshot_stake_table::mt_based::internal"],[250,"hotshot_stake_table::mt_based::internal::MerklePathEntry"],[254,"hotshot_stake_table::mt_based::internal::PersistentMerkleNode"],[261,"hotshot_stake_table::utils"],[265,"hotshot_stake_table::vec_based"],[355,"hotshot_stake_table::vec_based::config"],[428,"dyn_clone::sealed"],[429,"core::clone"],[430,"hotshot_types::traits::stake_table"],[431,"hotshot_types::traits::stake_table"],[432,"rkyv::with"],[433,"serde::de"],[434,"core::cmp"],[435,"core::fmt"],[436,"core::fmt"],[437,"core::alloc::layout"],[438,"core::option"],[439,"rand_core"],[440,"rand_core"],[441,"primitive_types"],[442,"core::any"],[443,"ark_serialize::error"],[444,"core::iter::traits::iterator"],[445,"core::marker"],[446,"ark_bn254::fields::fq"],[447,"serde::de"],[448,"ark_serialize"],[449,"core::hash"],[450,"core::marker"],[451,"core::fmt"],[452,"alloc::vec"],[453,"tagged_base64"],[454,"ark_ff::fields"],[455,"ark_ff::fields::prime"],[456,"jf_rescue"],[457,"core::cmp"],[458,"bitvec::slice"],[459,"core::cmp"],[460,"core::fmt"],[461,"ark_ec::models::short_weierstrass::group"],[462,"bitvec::vec"],[463,"ark_ec::models::short_weierstrass::affine"],[464,"jf_signature::bls_over_bn254"],[465,"core::convert"]],"d":["Configuration file for stake table","A stake table implementation that’s based on Append-only …","Utilities to help building a stake table.","A vector based stake table implementation. The commitment …","Capacity of a stake table","Locally maintained stake table, generic over public key …","","Update the stake table when the epoch number advances, …","","","","","","Config file for stake table","","","","","","","","The snapshot of stake table at the beginning of the …","","","","","","","Returns the argument unchanged.","The most up-to-date stake table, where the incoming …","Height of the underlying merkle tree, determines the …","","Utilities and internals for maintaining a local stake table","Calls <code>U::from(self)</code>.","The stake table used for leader election.","","","","","","The mapping from public keys to their location in the …","Initiating an empty stake table. Overall capacity is …","","","returns the root of stake table at <code>version</code>","Almost uniformly samples a key weighted by its stake from …","","Set the stake withheld by <code>key</code> to be <code>value</code>. Return the …","","","","","","","","","Hash algorithm used in Merkle tree, using a RATE-3 rescue","Internal type of Merkle node value(commitment)","Branch of merkle tree. Set to 3 because we are currently …","A branch","A branch","Empty","An owning iterator over the (key, value) entries of a …","Common trait bounds for generic key type <code>K</code> for …","A leaf","A leaf","A succinct commitment for Merkle tree","Path from a Merkle root to a leaf","A compressed Merkle node for Merkle path","An existential proof","A persistent merkle tree tailored for the stake table. …","","","","","","","","","","","","","","","","","","","","","","","","","","Merkle tree digest","Returns the succinct commitment of this subtree","Compute the root of this Merkle proof.","","","","","","","","","","","","","","","","","","","","","Returns the digest of the tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a list of Merkle path branches back to an index","","","","","","","","","","","Height of a tree","Returns the index of the given key","Index for the given key","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the public key of the associated stake table …","Imagine that the keys in this subtree is sorted, returns …","Returns the associated stake table entry, if there’s any.","","","","","","","Returns a Merkle proof to the given location","","","create a new merkle tree iterator from a <code>root</code>. This …","Creates a new merkle commitment","","Returns the total number of keys in this subtree","A Merkle path for the given leaf","","","","","","Insert a new <code>key</code> into the Merkle tree","","","","","","","Set the stake of <code>key</code> to be <code>value</code>. Return the previous stake","Returns the stakes withhelded by a public key, None if the …","Returns the number of leaves","Number of leaves","","Convert an index to a list of Merkle path branches","","","","","","Returns the total stakes in this subtree","Returns the height of the tree","Returns the height of the tree","","","","","","","","","","","","","","","","","","The unvisited key values","Update the stake of the <code>key</code> with …","Returns the stake amount of the associated stake table …","Verify the Merkle proof against the provided Merkle …","","","","","","the key","Position in tree","Siblings","the value","children","field type","field type","the key","number of keys","total stake","the value","The number of field elements needed to represent the given …","A trait that converts into a field element.","Convert the given struct into a list of field elements.","convert a U256 to a field element.","Locally maintained stake table, generic over public key …","a snapshot of the stake table","","","Update the stake table when the epoch number advances, …","bls keys","The mapping from public keys to their location in the …","","","","","upper bound on table size","","","","","","Helper function to recompute the stake table commitment …","Config file for stake table","","","","","","","","","","","","","","","The snapshot of stake table at the beginning of the …","Commitment of the stake table snapshot version <code>EpochStart</code> …","Total stakes in the snapshot version <code>EpochStart</code>","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","The most up-to-date stake table, where the incoming …","Total stakes in the most update-to-date stake table","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The stake table used for leader election.","Commitment of the stake table snapshot version …","Total stakes in the snapshot version <code>LastEpochStart</code>","","","","","Return the index of a given key. Err if the key doesn’t …","","","Initiating an empty stake table.","","","","","schnorr","","","Set the stake withheld by <code>key</code> to be <code>value</code>. Return the …","amount of stake","","","","","","","","","","","","returns the snapshot version","","","Type for commitment","BLS verification key as indexing key Signature public …","Schnorr verification key as auxiliary information …","","","","","","","","","","","","","","Deserialize <code>Self</code> using <code>ark-serialize</code> (uncompressed)","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Get the internal of verifying key, namely a curve Point","Calls <code>U::from(self)</code>.","","","","","","Serialize <code>Self</code> using <code>ark-serialize</code> (uncompressed)","","","","","","","","","Convert the verification key into the affine form.","","","","","","","","","","","","","","Signature verification function","",""],"i":[0,0,0,0,0,0,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,20,33,20,0,0,20,33,0,0,0,0,0,20,33,34,30,30,50,20,33,34,30,50,20,33,34,30,80,30,20,33,34,30,20,33,34,30,30,20,34,50,20,33,34,30,50,20,33,34,30,50,20,20,33,33,34,34,30,30,30,30,50,20,33,34,30,20,33,34,30,20,20,20,20,33,33,33,33,34,34,34,34,30,30,30,30,20,33,34,30,30,50,20,33,34,30,0,30,20,33,34,30,20,33,34,30,30,30,34,34,50,20,33,34,30,50,20,33,34,30,50,20,34,20,34,50,20,33,34,30,80,20,50,50,50,30,50,20,34,50,20,33,34,30,20,20,33,34,30,30,30,20,20,30,30,30,0,20,33,34,30,30,20,34,30,50,20,33,34,30,30,30,50,20,33,34,30,50,20,33,34,30,50,20,34,34,50,20,33,34,30,81,82,82,81,83,83,84,84,83,83,84,56,0,56,0,0,0,63,59,59,63,59,63,59,63,59,59,63,59,63,59,59,59,0,59,63,59,63,59,63,59,59,63,63,59,59,63,59,59,59,59,63,59,63,63,63,63,59,59,59,59,63,59,63,59,59,59,63,59,63,59,59,59,59,63,59,59,59,59,59,59,59,63,59,59,59,63,63,59,59,63,63,59,59,63,59,63,59,59,63,59,59,59,63,59,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,75,65,65,65,65,65,65,65,65,65,65,65,65,65,65],"f":"``````{{cb}d{}}{{{f{c}}}dh}{ce{}{}}0{{{f{c}}}{{f{c}}}{jh}}{{ce}d{}{}}{{{f{c}}l}{{A`{en}}}h{}}`{{{f{c}}e}Abh{}}{Adc{}}0{{{f{c}}e}{{A`{dn}}}h{}}{{ce}{{A`{{Af{gi}}}}}{}{}{}{}}{c{{A`{{f{e}}}}}Ahh}{Add}`{{{f{c}}{f{c}}}Ab{Ajh}}{{ce}Ab{}{}}000{{{f{c}}Al}An{B`h}}{cc{}}``{{}Ad}`>`{{}{{A`{BbBd}}}}{{{f{c}}l}{{A`{Adn}}}h}{{{f{c}}lc}{{A`{en}}}h{}}{{{f{c}}le}{{A`{{Bf{gik}}n}}}h{}{}{}{}}{{{f{c}}le}{{A`{{Bf{gi}}n}}}h{}{}{}}`{Ad{{f{c}}}h}{{}}{{{f{c}}egi}{{A`{dn}}}h{}{}{}}{{{f{c}}l}{{A`{{Bj{{Bh{c}}}}n}}}h}{{{f{c}}e}{{Bl{{Bf{gi}}}}}h{BnC`}{}{}}{{{f{c}}e}A`hCb}{{{f{c}}cCd}{{A`{Cdn}}}h}{ce{}{}}{{{f{c}}l}{{A`{en}}}h{}}{c{{A`{e}}}{}{}}01{cCf{}}{{{f{c}}egAb}{{A`{gn}}}h{}{}}4```````````````{{cb}d{}}000{c{{A`{dCh}}}{{Cn{}{{Cj{Cl}}}}D`}}6666666666`{Cl{{A`{dCh}}}}{{{Bh{c}}}{{Bh{c}}}{jh}}{{{Db{c}}}{{Db{c}}}j}{{{Dd{c}}}{{Dd{c}}}j}{ClCl}{{ce}d{}{}}000`{{{Bh{c}}}Dfh}{{{Dd{c}}}{{A`{Dfn}}}h}{Adc{}}000000000{{ce}{{A`{{Af{gi}}}}}{}{}{}{}}{c{{A`{{Bh{e}}}}}Ahh}1{c{{A`{{Db{e}}}}}AhDh}2{c{{A`{{Dd{e}}}}}AhDh}3{c{{A`{Cl}}}Ah}4{{cDjDl}{{A`{ClCh}}}Dn}{ClDf}{Add}0000{{{Bh{c}}{Bh{c}}}Ab{Ajh}}{{{Db{c}}{Db{c}}}AbAj}{{{Dd{c}}{Dd{c}}}AbAj}{{ClCl}Ab}{{ce}Ab{}{}}000000000000000{{{Bh{c}}Al}An{B`h}}{{{Db{c}}Al}AnB`}{{{Dd{c}}Al}AnB`}{{ClAl}An}0{cc{}}0000{{{E`{Ad}}}Ad}{Eb{{A`{Clc}}}{}}{{ce}Ed{EfEh}Ej}000{{{Bh{c}}e}d{Efh}El}{{{Db{c}}e}dEfEl}{{{Dd{c}}e}dEfEl}{{Clc}dEl}{{ce}{{En{eg}}}{}{F`D`Fb}{}}`{{{Dd{c}}}Adh}`{{}Ad}0000{ce{}{}}00000{{{Bh{c}}}eh{}}{{{Dd{c}}}{{Bl{c}}}h}{{{Bh{c}}Cd}{{Bl{{Bf{cCd}}}}}h}{{{Dd{c}}}{{Bl{{Bf{cCd}}}}}h}{{}{{A`{BbBd}}}}0000`{{{Bh{c}}Ad{E`{Ad}}}{{A`{{Dd{c}}n}}}h}{c{{Bf{egi}}}{}{}{}{}}0{{{Bj{{Bh{c}}}}}{{Fd{c}}}h}{{DfAdAd}Cl}{{{Fd{c}}}{{Bl{e}}}h{}}{{{Bh{c}}}Adh}`{{}}0000{{{Bh{c}}Ad{E`{Ad}}cCd}{{A`{{Bj{{Bh{c}}}}n}}}h}{{{Bh{c}}e}A`hCb}{{{Db{c}}e}A`FfCb}{{{Dd{c}}e}A`FfCb}{{Clc}A`Cb}{{ClcDj}{{A`{dCh}}}Fh}{{ClDj}Ad}{{{Bh{c}}Ad{E`{Ad}}cCd}{{A`{{Bf{{Bj{{Bh{c}}}}Cd}}n}}}h}{{{Bh{c}}Ad{E`{Ad}}}{{A`{Cdn}}}h}{ClAd}`{{}Fj}{{AdAd}{{Fl{Ad}}}}{ce{}{}}000{cFj{}}{{{Bh{c}}}Cdh}{{{Dd{c}}}Adh}6{c{{A`{e}}}{}{}}000{Fn{{A`{Clc}}}{}}0111111{cCf{}}0000`{{{Bh{c}}Ad{E`{Ad}}cCdAb}{{A`{{Bf{{Bj{{Bh{c}}}}Cd}}n}}}h}{{{Dd{c}}}{{Bl{Cd}}}h}{{{Dd{c}}Cl}{{A`{dn}}}h}99999`````````````{G`{{Fl{c}}}Gb}{CdcGd}``{{cb}d{}}0{{{Gf{egc}}}dGh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}``====`{{{Gn{ce}}}{{Gn{ce}}}jj}{{{Gf{egc}}}{{Gf{egc}}}{Ghj}{GjEfj{G`{c}}j}{GjEfjGl{G`{c}}j}}{{ce}d{}{}}0{{{Gf{egc}}l}{{A`{in}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}}{{{Gf{egc}}}{{Bf{ccc}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}`{{{Gf{egc}}i}AbGh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}}{{}{{Gn{ce}}}{}{}}{{}{{Gf{egc}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}{Adc{}}000{{{Gf{egc}}i}{{A`{dn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}}{c{{A`{{Gn{eg}}}}}AhDhDh}{{ce}{{A`{{Af{gi}}}}}{}{}{}{}}0{c{{A`{{Gf{gie}}}}}Ah{GhDh}{GjEfj{G`{e}}DhGl}{GjEfjGl{G`{e}}Dh}}{Add}0```{{{Gn{ce}}{Gn{ce}}}AbAjAj}{{{Gf{egc}}{Gf{egc}}}Ab{GhAj}{GjEfj{G`{c}}Aj}{GjEfjGl{G`{c}}Aj}}{{ce}Ab{}{}}0000000{{{Gn{ce}}Al}AnB`B`}{{{Gf{egc}}Al}An{GhB`}{GjEfj{G`{c}}B`}{GjEfjGl{G`{c}}B`}}{cc{}}0``{{}Ad}0{ce{}{}}0```{{}{{A`{BbBd}}}}0{{{Gf{egc}}l}{{A`{Adn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}{{{Gf{egc}}li}{{A`{kn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}{}}{{{Gf{egc}}e}{{A`{Adn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}{{{Gf{egc}}li}{{A`{{Bf{kmo}}n}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}{}{}{}}{{{Gf{egc}}li}{{A`{{Bf{km}}n}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}{}{}}{Ad{{Gf{egc}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}{{}}0{{{Gf{egc}}ikm}{{A`{dn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}{}{}}{{{Gf{egc}}i}{{Bl{{Bf{km}}}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{BnC`}{}{}}`{{{Gn{ce}}g}A`FfFfCb}{{{Gf{egc}}i}A`{GhFf}{GjEfj{G`{c}}Ff}{GjEfjGl{G`{c}}Ff}Cb}{{{Gf{egc}}eCd}{{A`{Cdn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}`=={{{Gf{egc}}l}{{A`{in}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}}{c{{A`{e}}}{}{}}0001{cCf{}}0{{{Gf{egc}}ikAb}{{A`{kn}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}{}{}}{{{Gf{egc}}l}{{A`{{Gn{eg}}n}}}Gh{GjEfj{G`{c}}}{GjEfjGl{G`{c}}}}{ce{}{}}0```{{cb}d{}}{{H`E`}}{c{{A`{dCh}}}{{Cn{}{{Cj{Hb}}}}D`}}33{Hb{{A`{dCh}}}}{{{E`{Hd}}}Ab}{HbHb}{{ce}d{}{}}{{HbHb}Hf}{{ce}Hf{}{}}{Adc{}}0{{{E`{Hd}}}{{A`{HbHh}}}}{{ce}{{A`{{Af{gi}}}}}{}{}{}{}}{c{{A`{Hb}}}Ah}{{cDjDl}{{A`{HbCh}}}Dn}{Add}{{HbHb}Ab}{{ce}Ab{}{}}000{{HbAl}{{A`{dHj}}}}0{HlHb}{cc{}}{{{E`{Hd}}}{{A`{HbCh}}}}{{}Hb}{Eb{{A`{Hb}}}}{{{Hn{Hd}}Ed}{{Bf{Hb}}}}02{{ce}Ed{EfEh}Ej}{{Hbc}dEl}{{ce}{{En{eg}}}{}{F`D`Fb}{}}{{}Ad}{HbI`}{ce{}{}}{{}{{A`{BbBd}}}}{{HbHb}{{Bl{Hf}}}}{{}};{{FlCd}}{Hb{{A`{{Fl{Hd}}Hh}}}}{{Hbc}A`Cb}{{HbcDj}{{A`{dCh}}}Fh}{{HbDj}Ad}{{}{{Bf{Ib}}}}{{{E`{Hd}}}A`}0{{HbEd}}{{}Fj}{HbId}{Hb{{Fl{Hd}}}}{If{{Fl{Ih}}}}{Hb{{Fl{Df}}}}{Hb{{Fl{Ih}}}}{ce{}{}}{cFj{}}{c{{A`{e}}}{}{}}{Fn{{A`{Hb}}}}01{cCf{}}{{Hb{E`{Hd}}}Ab}0{{Hb{E`{Hd}}Ijc}{{A`{dIl}}}{{In{{E`{Hd}}}}}}6{Hbd}","c":[],"p":[[5,"Private",428],[1,"unit"],[5,"StakeTable",5],[10,"Key",59],[10,"Clone",429],[6,"SnapshotVersion",430],[6,"StakeTableError",430],[6,"Result",431],[1,"bool"],[1,"usize"],[5,"With",432],[10,"Deserializer",433],[10,"PartialEq",434],[5,"Formatter",435],[8,"Result",435],[10,"Debug",435],[5,"Layout",436],[5,"LayoutError",436],[1,"tuple"],[6,"PersistentMerkleNode",59],[5,"Arc",437],[6,"Option",438],[10,"SeedableRng",439],[10,"CryptoRngCore",439],[10,"Serializer",440],[5,"U256",441],[5,"TypeId",442],[6,"SerializationError",443],[17,"Item"],[5,"MerkleCommitment",59],[10,"Iterator",444],[10,"Send",445],[6,"MerklePathEntry",59],[5,"MerkleProof",59],[8,"Fq",446],[10,"Deserialize",433],[6,"Compress",447],[6,"Validate",447],[10,"Read",448],[1,"slice"],[1,"str"],[1,"u64"],[10,"Hash",449],[10,"Sized",445],[10,"BuildHasher",449],[10,"Hasher",449],[5,"IndentedSection",450],[10,"Display",435],[10,"Sync",445],[5,"IntoIter",59],[10,"Serialize",440],[10,"Write",448],[5,"String",451],[5,"Vec",452],[5,"TaggedBase64",453],[10,"ToFields",261],[10,"Field",454],[10,"PrimeField",455],[5,"StakeTable",265],[10,"RescueParameter",456],[10,"Eq",434],[10,"Default",457],[5,"StakeTableSnapshot",265],[5,"BitSlice",458],[5,"QCVerKey",355],[1,"u8"],[6,"Ordering",434],[5,"Error",459],[5,"Error",435],[5,"SignKey",460],[1,"array"],[5,"Projective",461],[5,"BitVec",462],[5,"Affine",463],[8,"StateVerKey",355],[8,"FieldType",355],[5,"Signature",460],[6,"SignatureError",464],[10,"AsRef",465],[8,"MerklePath",59],[15,"Leaf",250],[15,"Branch",250],[15,"Branch",254],[15,"Leaf",254]],"b":[[148,"impl-Display-for-MerkleCommitment"],[149,"impl-Debug-for-MerkleCommitment"],[228,"impl-TryFrom%3C%26TaggedBase64%3E-for-MerkleCommitment"],[229,"impl-TryFrom%3CTaggedBase64%3E-for-MerkleCommitment"],[363,"impl-Valid-for-VerKey"],[364,"impl-SignatureKey-for-VerKey"],[371,"impl-Serializable-for-VerKey"],[373,"impl-Deserialize%3C\'de%3E-for-VerKey"],[381,"impl-Debug-for-VerKey"],[382,"impl-Display-for-VerKey"],[388,"impl-SignatureKey-for-VerKey"],[389,"impl-BuilderSignatureKey-for-VerKey"],[402,"impl-Serializable-for-VerKey"],[403,"impl-Serialize-for-VerKey"],[414,"impl-ToFields%3CFp%3CMontBackend%3CFqConfig,+4%3E,+4%3E%3E-for-VerKey"],[415,"impl-ToFields%3CFp%3CMontBackend%3CFrConfig,+4%3E,+4%3E%3E-for-VerKey"],[419,"impl-TryFrom%3CTaggedBase64%3E-for-VerKey"],[420,"impl-TryFrom%3C%26TaggedBase64%3E-for-VerKey"]]}],\
["hotshot_task",{"doc":"Task primitives for <code>HotShot</code>","t":"CCCFKFFNNNNNNNNNNMNNNOOOONNNNNNNNNONNNNNNNNNNNFKRNNONOMNNNNNNFRFFKKNNNNNNNMNNNNNMONNNNNNNONNNNONNMOONNNNNNNNN","n":["dependency","dependency_task","task","AndDependency","Dependency","EventDependency","OrDependency","add_dep","add_dep","add_deps","and","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","completed","completed","completed","completed","completed_dependency","deps","deps","event_rx","from","from","from","from_deps","from_deps","into","into","into","mark_as_completed","match_fn","new","or","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","DependencyTask","HandleDepOutput","Output","borrow","borrow_mut","dep","from","handle","handle_dep_result","into","new","run","try_from","try_into","type_id","ConsensusTaskRegistry","Event","NetworkTaskRegistry","Task","TaskEvent","TaskState","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","boxed_state","cancel_subtasks","default","default","from","from","from","handle_event","handles","into","into","into","join_all","new","new","new","receiver","register","register","run","run_task","sender","shutdown","shutdown","shutdown_event","state","task_handles","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"hotshot_task"],[3,"hotshot_task::dependency"],[46,"hotshot_task::dependency_task"],[61,"hotshot_task::task"],[109,"core::clone"],[110,"core::marker"],[111,"core::marker"],[112,"core::future::future"],[113,"alloc::vec"],[114,"async_broadcast"],[115,"core::ops::function"],[116,"alloc::boxed"],[117,"core::result"],[118,"core::any"],[119,"async_std::task::join_handle"],[120,"core::pin"],[121,"core::default"],[122,"alloc::sync"],[123,"async_broadcast"]],"d":["Simple Dependency types","Task which can uses dependencies","Basic task types","Defines a dependency that completes when all of its deps …","Type which describes the idea of waiting for a dependency …","A dependency that listens on a channel for an event that …","Defines a dependency that completes when one of it’s …","Add another dependency","Add another dependency","Add multiple dependencies","Create an and dependency from this dependency and another","","","","","","","Complete will wait until it gets some value <code>T</code> then return …","Returns a vector of all of the results from it’s …","Returns the value of the first completed dependency","","The potentially externally completed dependency. If the …","Dependencies being combined","Dependencies being combined","Channel of incoming events","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create from a vec of deps","Creat an <code>OrDependency</code> from a vec of dependencies","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mark a dependency as completed.","Closure which returns true if the incoming <code>T</code> is the thing …","Create a new <code>EventDependency</code>","Create an or dependency from this dependency and another","","","","","","","","","","A task that runs until it’s dependency completes and it …","Defines a type that can handle the result of a dependency","Type we expect from completed dependency","","","Dependency this taks waits for","Returns the argument unchanged.","Handles the results returned from …","Called once when the Dependency completes handles the …","Calls <code>U::from(self)</code>.","Create a new <code>DependencyTask</code>","Spawn the dependency task","","","","A collection of tasks which can handle shutdown","Type of event sent and received by the task","A collection of tasks which can handle shutdown","A basic task which loops waiting for events to come from …","Trait for events that long-running tasks handle","Type for mutable task state that can be used as the state …","","","","","","","The state of the task, as a boxed dynamic trait object.","Joins all subtasks.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handles an event, providing direct access to the specific …","Tasks this registry controls","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Wait for the results of all the tasks registered","Create a new task","Create a new task registry","Create a new task registry","Receives events that are broadcast from any task, …","Add a task to the registry","Add a task to the registry","Spawn the task loop, consuming self.  Will continue until …","Take a task, run it, and register it","Sends events all tasks including itself","Try to cancel/abort the task this registry has","Shuts down all tasks managed by this instance.","The shutdown signal for this event type","The state of the task.  It is fed events from <code>receiver</code> and …","Tasks this registry controls","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,7,1,6,1,7,12,1,7,12,6,1,7,12,12,1,7,12,1,7,12,1,7,1,7,12,12,12,12,6,1,7,12,1,7,12,1,7,12,0,0,18,19,19,19,19,19,18,19,19,19,19,19,19,0,22,0,0,0,0,21,26,28,21,26,28,21,22,26,28,21,26,28,22,28,21,26,28,26,21,26,28,21,26,28,21,26,21,26,28,25,21,26,21,26,28,21,26,28,21,26,28],"f":"```````{{{b{c}}e}d{fhj}{{l{c}}h}}{{{n{c}}e}d{fhj}{{l{c}}h}}{{{b{c}}{b{c}}}d{fhj}}{{le}{{b{c}}}{hjf}{{l{c}}h}}{ce{}{}}00000{l{{`{{Ad{}{{A`{{Ab{c}}}}}}h}}}{}}{{{b{c}}}{{Ab{{Af{c}}}}}{fhj}}{{{n{c}}}{{Ab{c}}}{fhj}}{{{Ah{c}}}{{Ab{c}}}{fhj}}````{cc{}}00{{{Af{e}}}{{b{c}}}{fhj}{{l{c}}h}}{{{Af{e}}}{{n{c}}}{fhj}{{l{c}}h}}777{{{Ah{c}}c}d{fhj}}`{{{Aj{c}}{An{Al}}}{{Ah{c}}}{fhj}}{{le}{{n{c}}}{hjf}{{l{c}}h}}{c{{B`{e}}}{}{}}00000{cBb{}}00```<<`7`{{{Bd{}{{A`{c}}}}c}{{`{{Ad{}{{A`{d}}}}h}}}{hj}}={{ce}{{Bf{ce}}}{lh}{Bdh}}{{{Bf{ce}}}{{Bh{d}}}{lh}Bd}443``````??????{{{Bj{c}}}{{An{Bl}}}{Blh}}{{{Bl{}{{Bn{c}}}}}{{C`{{An{Ad}}}}}{Cbfhj}}{{}{{Cd{c}}}Cf}{{}Ch}>>>{{{Bl{}{{Bn{c}}}}{Cj{c}}{Cl{{Cj{c}}}}{Aj{{Cj{c}}}}}{{C`{{An{Ad}}}}}{Cbfhj}}`{ce{}{}}00{{{Cd{c}}}{{Af{{An{Bl}}}}}{hjfCb}}{{c{Cl{Cj}}{Aj{Cj}}}{{Bj{c}}}{Blh}}{{}{{Cd{c}}}{hjfCb}}5`{{{Cd{c}}{Bh{{An{Bl}}}}}d{hjfCb}}{{Ch{Bh{d}}}d}{{{Bj{c}}}{{Bh{{An{Bl}}}}}{Blh}}{{{Cd{c}}{Bj{e}}}d{hjfCb}{{Bl{}{{Bn{c}}}}h}}`{{{Cd{c}}}d{hjfCb}}{Chd}{{}Cb}``{c{{B`{e}}}{}{}}00000{cBb{}}00","c":[],"p":[[5,"AndDependency",3],[1,"unit"],[10,"Clone",109],[10,"Send",110],[10,"Sync",110],[10,"Dependency",3],[5,"OrDependency",3],[17,"Output"],[6,"Option",111],[10,"Future",112],[5,"Vec",113],[5,"EventDependency",3],[5,"Receiver",114],[10,"Fn",115],[5,"Box",116],[6,"Result",117],[5,"TypeId",118],[10,"HandleDepOutput",46],[5,"DependencyTask",46],[5,"JoinHandle",119],[5,"Task",61],[10,"TaskState",61],[17,"Event"],[5,"Pin",120],[10,"TaskEvent",61],[5,"ConsensusTaskRegistry",61],[10,"Default",121],[5,"NetworkTaskRegistry",61],[5,"Arc",122],[5,"Sender",114]],"b":[]}],\
["hotshot_task_impls",{"doc":"The consensus layer for hotshot. This currently implements …","t":"CCCCCCCCCCCCCCCCCCCPFFGPFNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNCCCNNNNOIIONNOIIEIONOFPPINNNNOOOOONNNNONNNCONONNOOONOOONOONOOOOOONNNONONFPPINNNOOOONNNNNNNCONONONOONOOOOOOOONNNOONHHHHFNNHONNNNOONHHNNNNOHHNNNHONFPPINNNOOONNNNNNNONNNOONOOOONNNONPPPPPPPPPPPGFPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNONNNFONNHNNNNONNNNNHNNNNKSFSNNHHHONNNNNMHNNONNNOOOOOHNNNNHHHNFFNNNNNNONNHNNNNNNNNOONNNNNNNNONNNNNONNHONNNNNNNHOHOHNNFNNNONNNNNNNONNNCONONONOONOOOOOOOOONNNNONPPGFPPPPNNNNONNNNNNNNNNONNNONNONNONNNNOONOOOONNNNNNOONNFNNNNOOONNNNNNNCONONNOONOOOOOOOOOONNNONHHPPFPGFNNNNNNNOONNONNNNNNNNNNNNNNNNNNNNCOONNNOONNNONNNOONNNOOOOOOOOOONNNNNNNNNNNNOOOONNNHFFSIFNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNOONNNNNNNNNHOONNNOOOOONNONNOONOOONNNNNNNNNONNNFSNNONNNNNNNNONNNNNNOOOONNHNNNNHNFNNNNNNNONNNONNNNNNNNSSSSSFSFONONNNNOONOONNNNNNNNOONNNNNNNNONNONNNNNNOOONONNOONONNNNNNONNNPPFINNNONNNNNNNONNNOONOOOOOOOOOOONNNONONFNNNOONNNNNNNONNNOONOONNNONPPPPIGFFNONNNNNNNNNNOOONNNNNNNNNNNNNNNNNOONNNNNNNNNNOONNNNNNONNNOOOOOOONNNNOOOOOOONOONNNNNNNNNNOONNNFKIKIIIIIIFNOOOOOOOONNNNHNNNNNNNNMNNNNNNNNNMNNNNNNNOOOOOOOOONNNNNNMMOOOOOOOOONNOOOOOOOOONNNNNNOOOOOOOOONN","n":["builder","consensus","consensus2","da","events","harness","helpers","network","quorum_proposal","quorum_proposal_recv","quorum_vote","request","response","rewind","transactions","upgrade","vid","view_sync","vote_collection","Api","ApiSnafu","BuilderClient","BuilderClientError","NotFound","NotFoundSnafu","__clone_box","__clone_box","_marker","as_error","as_error_source","available_blocks","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","bundle","cause","claim_block","claim_block_header_input","clone","clone","clone_into","clone_into","connect","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fail","fail","fmt","fmt","fmt","fmt","from","from","from","from","from","header","in_current_span","init","init","init","init","inner","into","into","into","into","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","message","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","v0_1","v0_2","v0_3","vzip","vzip","vzip","vzip","message","BuilderClient","Version","_marker","claim_block","claim_block_header_input","inner","Version","BuilderClient","BuilderClientError","Version","_marker","bundle","inner","ConsensusTaskState","None","Some","VoteCollectorOption","borrow","borrow_mut","cancel_subtasks","cancel_tasks","consensus","cur_view","cur_view_time","current_proposal","da_membership","deref","deref_mut","deserialize","drop","formed_upgrade_certificate","from","handle","handle_event","handlers","id","init","instance_state","into","layout_raw","network","output_event_stream","payload_commitment_and_metadata","pointer_metadata","private_key","proposal_cert","public_key","publish_proposal","quorum_membership","round_start_delay","spawn_vote_task","spawned_tasks","storage","timeout","timeout_membership","timeout_task","timeout_vote_collector","try_from","try_into","type_id","upgrade_lock","validate_disperse","vote_collector","vzip","Consensus2TaskState","None","Some","VoteCollectorOption","borrow","borrow_mut","cancel_subtasks","committee_membership","consensus","cur_view","cur_view_time","deref","deref_mut","deserialize","drop","from","handle","handle_event","handlers","id","init","instance_state","into","last_decided_view","layout_raw","network","output_event_stream","pointer_metadata","private_key","public_key","quorum_membership","storage","timeout","timeout_membership","timeout_task","timeout_vote_collector","try_from","try_into","type_id","upgrade_lock","vote_collector","vzip","handle_quorum_vote_recv","handle_timeout","handle_timeout_vote_recv","handle_view_change","VoteInfo","borrow","borrow_mut","create_and_send_proposal","da_membership","deref","deref_mut","deserialize","drop","event_receiver","event_sender","from","handle_quorum_proposal_recv","handle_quorum_proposal_validated","init","into","layout_raw","pointer_metadata","private_key","publish_proposal_from_commitment_and_metadata","publish_proposal_if_able","try_from","try_into","type_id","update_state_and_vote_if_able","upgrade_lock","vzip","DaTaskState","None","Some","VoteCollectorOption","borrow","borrow_mut","cancel_subtasks","consensus","cur_view","da_membership","deref","deref_mut","deserialize","drop","from","handle","handle_event","id","init","into","layout_raw","network","output_event_stream","pointer_metadata","private_key","public_key","quorum_membership","storage","try_from","try_into","type_id","vote_collector","vzip","BlockReady","BlockRecv","DaCertificateRecv","DaCertificateValidated","DaProposalRecv","DaProposalSend","DaProposalValidated","DaVoteRecv","DaVoteSend","DacSend","HighQcUpdated","HotShotEvent","HotShotTaskCompleted","LastDecidedViewUpdated","LeafDecided","LockedViewUpdated","ProposalMissing","QcFormed","QuorumProposalPreliminarilyValidated","QuorumProposalRecv","QuorumProposalRequestRecv","QuorumProposalRequestSend","QuorumProposalResponseRecv","QuorumProposalResponseSend","QuorumProposalSend","QuorumProposalValidated","QuorumVoteDependenciesValidated","QuorumVoteRecv","QuorumVoteSend","SendPayloadCommitmentAndMetadata","Shutdown","Timeout","TimeoutVoteRecv","TimeoutVoteSend","TransactionSend","TransactionsRecv","UpdateHighQc","UpgradeCertificateFormed","UpgradeProposalRecv","UpgradeProposalSend","UpgradeVoteRecv","UpgradeVoteSend","ValidatedStateUpdated","VidDisperseSend","VidShareRecv","VidShareValidated","ViewChange","ViewSyncCommitCertificate2Recv","ViewSyncCommitCertificate2Send","ViewSyncCommitVoteRecv","ViewSyncCommitVoteSend","ViewSyncFinalizeCertificate2Recv","ViewSyncFinalizeCertificate2Send","ViewSyncFinalizeVoteRecv","ViewSyncFinalizeVoteSend","ViewSyncPreCommitCertificate2Recv","ViewSyncPreCommitCertificate2Send","ViewSyncPreCommitVoteRecv","ViewSyncPreCommitVoteSend","ViewSyncTimeout","ViewSyncTrigger","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","header","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","response_chan","shutdown_event","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","view","vzip","vzip","vzip","TestHarnessState","allow_extra_output","borrow","borrow_mut","check_event","deref","deref_mut","deserialize","drop","expected_output","from","init","into","layout_raw","pointer_metadata","run_harness","try_from","try_into","type_id","vzip","AnyhowTracing","DONT_SEND_VIEW_CHANGE_EVENT","LeafChainTraversalOutcome","SEND_VIEW_CHANGE_EVENT","borrow","borrow_mut","broadcast_event","cancel_task","decide_from_proposal","decided_upgrade_cert","default","deref","deref_mut","deserialize","drop","err_as_debug","fetch_proposal","fmt","from","included_txns","init","into","layout_raw","leaf_views","leaves_decided","new_decide_qc","new_decided_view_number","new_locked_view_number","parent_leaf_and_state","pointer_metadata","try_from","try_into","type_id","update_view","validate_proposal_safety_and_liveness","validate_proposal_view_and_certs","vzip","NetworkEventTaskState","NetworkMessageTaskState","__clone_box","borrow","borrow","borrow_mut","borrow_mut","cancel_subtasks","channel","clone","clone_into","da_filter","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","external_event_stream","filter","from","from","handle","handle_event","handle_messages","handle_vid_disperse_proposal","init","init","internal_event_stream","into","into","layout_raw","layout_raw","maybe_record_action","membership","pointer_metadata","pointer_metadata","quorum_filter","storage","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upgrade_filter","upgrade_lock","vid_filter","view","view_sync_filter","vzip","vzip","QuorumProposalTaskState","borrow","borrow_mut","cancel_subtasks","consensus","create_and_complete_dependencies","create_dependency_task_if_new","create_event_dependency","deref","deref_mut","deserialize","drop","formed_upgrade_certificate","from","handle","handle_event","handlers","id","init","instance_state","into","latest_proposed_view","layout_raw","network","output_event_stream","pointer_metadata","private_key","proposal_dependencies","public_key","quorum_membership","round_start_delay","storage","timeout","timeout_membership","timeout_task","try_from","try_into","type_id","update_latest_proposed_view","upgrade_lock","vzip","PayloadAndMetadata","Proposal","ProposalDependency","ProposalDependencyHandle","Qc","TimeoutCert","VidShare","ViewSyncCert","borrow","borrow","borrow_mut","borrow_mut","consensus","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","fmt","formed_upgrade_certificate","from","from","handle_dep_result","id","init","init","instance_state","into","into","latest_proposed_view","layout_raw","layout_raw","pointer_metadata","pointer_metadata","private_key","public_key","publish_proposal","quorum_membership","receiver","round_start_delay","sender","try_from","try_from","try_into","try_into","type_id","type_id","upgrade_lock","view_number","vzip","vzip","QuorumProposalRecvTaskState","borrow","borrow_mut","cancel_subtasks","cancel_tasks","consensus","cur_view","cur_view_time","deref","deref_mut","deserialize","drop","from","handle","handle_event","handlers","id","init","instance_state","into","layout_raw","network","output_event_stream","pointer_metadata","private_key","proposal_cert","public_key","quorum_membership","round_start_delay","spawned_tasks","storage","timeout","timeout_membership","timeout_task","try_from","try_into","type_id","upgrade_lock","vzip","handle_quorum_proposal_recv","validate_proposal_liveness","Dac","QuorumProposal","QuorumVoteTaskState","Vid","VoteDependency","VoteDependencyHandle","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cancel_subtasks","consensus","consensus","create_dependency_task_if_new","create_event_dependency","da_membership","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","fmt","from","from","from","handle","handle_dep_result","handle_event","handlers","id","id","init","init","init","instance_state","instance_state","into","into","into","latest_voted_view","layout_raw","layout_raw","layout_raw","network","output_event_stream","pointer_metadata","pointer_metadata","pointer_metadata","private_key","private_key","public_key","public_key","quorum_membership","quorum_membership","receiver","sender","storage","storage","submit_vote","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_latest_voted_view","update_shared_state","upgrade_lock","upgrade_lock","view_number","vote_dependencies","vzip","vzip","vzip","handle_quorum_proposal_validated","DelayedRequester","NetworkRequestState","REQUEST_TIMEOUT","Signature","VidRequest","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_requests","cancel_subtasks","cancel_vid","da_membership","delay","delay","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","do_vid","drop","drop","drop","drop","from","from","from","handle_event","handle_response_message","id","id","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","make_vid","network","network","pointer_metadata","pointer_metadata","pointer_metadata","private_key","public_key","public_key","quorum_membership","recipients","run","run_delay","sender","serialize_and_sign","set_shutdown_flag","shutdown_flag","shutdown_flag","spawn_requests","spawned_tasks","state","state","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","view","vzip","vzip","vzip","NetworkResponseState","TXNS_TIMEOUT","borrow","borrow_mut","consensus","deref","deref_mut","deserialize","drop","from","get_or_calc_vid_share","handle_message","handle_request","id","init","into","layout_raw","make_msg","new","pointer_metadata","private_key","pub_key","quorum","receiver","respond_with_proposal","run_loop","run_response_task","try_from","try_into","type_id","valid_sender","valid_signature","vzip","RewindTaskState","borrow","borrow_mut","cancel_subtasks","deref","deref_mut","deserialize","drop","events","from","handle","handle_event","id","init","into","layout_raw","pointer_metadata","try_from","try_into","type_id","vzip","BUILDER_ADDITIONAL_TIME_MULTIPLIER","BUILDER_MAIN_BATCH_CUTOFF","BUILDER_MAIN_BATCH_THRESHOLD_DIVIDEND","BUILDER_MAIN_BATCH_THRESHOLD_DIVISOR","BUILDER_MINIMUM_QUERY_TIME","BuilderResponse","RETRY_DELAY","TransactionTaskState","auction_results_provider","block_from_builder","block_payload","borrow","borrow","borrow_mut","borrow_mut","builder_clients","builder_timeout","cancel_subtasks","consensus","cur_view","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fallback_builder_url","fee","from","from","get_available_blocks","handle","handle_event","handle_view_change","handle_view_change_legacy","handle_view_change_marketplace","id","init","init","instance_state","into","into","last_vid_commitment","last_vid_commitment_retry","layout_raw","layout_raw","membership","metadata","network","null_block","output_event_stream","pointer_metadata","pointer_metadata","precompute_data","private_key","produce_block_marketplace","public_key","try_from","try_from","try_into","try_into","type_id","type_id","upgrade_lock","vzip","vzip","wait_for_block","None","Some","UpgradeTaskState","VoteCollectorOption","borrow","borrow_mut","cancel_subtasks","cur_view","deref","deref_mut","deserialize","drop","from","handle","handle_event","id","init","into","layout_raw","network","output_event_stream","pointer_metadata","private_key","public_key","quorum_membership","start_proposing_time","start_proposing_view","start_voting_time","start_voting_view","stop_proposing_time","stop_proposing_view","stop_voting_time","stop_voting_view","try_from","try_into","type_id","upgrade_lock","upgraded","vote_collector","vzip","VidTaskState","borrow","borrow_mut","cancel_subtasks","consensus","cur_view","deref","deref_mut","deserialize","drop","from","handle","handle_event","id","init","into","layout_raw","membership","network","pointer_metadata","private_key","public_key","try_from","try_into","type_id","vote_collector","vzip","Commit","Finalize","None","PreCommit","RelayMap","ViewSyncPhase","ViewSyncReplicaTaskState","ViewSyncTaskState","__clone_box","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cancel_subtasks","cancel_subtasks","clone","clone_into","commit_relay_map","current_view","current_view","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","finalize_relay_map","finalized","fmt","from","from","from","get_hash","handle","handle","handle_event","handle_event","hash","id","id","init","init","init","into","into","into","last_garbage_collected_view","layout_raw","layout_raw","layout_raw","membership","membership","network","network","next_view","next_view","num_timeouts_tracked","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pre_commit_relay_map","private_key","private_key","public_key","public_key","relay","replica_task_map","send_to_or_create_replica","sent_view_change_event","timeout_task","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","view_sync_timeout","view_sync_timeout","vzip","vzip","vzip","AccumulatorInfo","AggregatableVote","DaVoteState","HandleVoteEvent","QuorumVoteState","TimeoutVoteState","UpgradeVoteState","ViewSyncCommitVoteState","ViewSyncFinalizeVoteState","ViewSyncPreCommitState","VoteCollectionTaskState","accumulate_vote","accumulator","accumulator","accumulator","accumulator","accumulator","accumulator","accumulator","accumulator","borrow","borrow","borrow_mut","borrow_mut","create_vote_accumulator","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","filter","filter","filter","filter","filter","filter","filter","filter","from","from","handle_vote_event","handle_vote_event","handle_vote_event","handle_vote_event","handle_vote_event","handle_vote_event","handle_vote_event","handle_vote_event","id","id","id","id","id","id","id","id","id","init","init","into","into","layout_raw","layout_raw","leader","make_cert_event","membership","membership","membership","membership","membership","membership","membership","membership","membership","pointer_metadata","pointer_metadata","public_key","public_key","public_key","public_key","public_key","public_key","public_key","public_key","public_key","try_from","try_from","try_into","try_into","type_id","type_id","view","view","view","view","view","view","view","view","view","vzip","vzip"],"q":[[0,"hotshot_task_impls"],[19,"hotshot_task_impls::builder"],[127,"hotshot_task_impls::builder::BuilderClientError"],[128,"hotshot_task_impls::builder::v0_1"],[134,"hotshot_task_impls::builder::v0_2"],[135,"hotshot_task_impls::builder::v0_3"],[141,"hotshot_task_impls::consensus"],[192,"hotshot_task_impls::consensus2"],[234,"hotshot_task_impls::consensus2::handlers"],[238,"hotshot_task_impls::consensus::handlers"],[265,"hotshot_task_impls::da"],[298,"hotshot_task_impls::events"],[440,"hotshot_task_impls::harness"],[460,"hotshot_task_impls::helpers"],[497,"hotshot_task_impls::network"],[552,"hotshot_task_impls::quorum_proposal"],[593,"hotshot_task_impls::quorum_proposal::handlers"],[648,"hotshot_task_impls::quorum_proposal_recv"],[687,"hotshot_task_impls::quorum_proposal_recv::handlers"],[689,"hotshot_task_impls::quorum_vote"],[776,"hotshot_task_impls::quorum_vote::handlers"],[777,"hotshot_task_impls::request"],[859,"hotshot_task_impls::response"],[892,"hotshot_task_impls::rewind"],[913,"hotshot_task_impls::transactions"],[982,"hotshot_task_impls::upgrade"],[1022,"hotshot_task_impls::vid"],[1049,"hotshot_task_impls::view_sync"],[1149,"hotshot_task_impls::vote_collection"],[1254,"dyn_clone::sealed"],[1255,"core::error"],[1256,"hotshot_types::vid"],[1257,"hotshot_builder_api::v0_1::block_info"],[1258,"alloc::vec"],[1259,"core::result"],[1260,"hotshot_types::traits::node_implementation"],[1261,"vbs::version"],[1262,"std::backtrace"],[1263,"core::option"],[1264,"alloc::string"],[1265,"core::convert"],[1266,"vbs::version"],[1267,"hotshot_types::utils"],[1268,"hotshot_builder_api::v0_1::block_info"],[1269,"core::time"],[1270,"rkyv::with"],[1271,"serde::de"],[1272,"core::fmt"],[1273,"core::fmt"],[1274,"color_eyre::section"],[1275,"core::fmt"],[1276,"core::marker"],[1277,"core::alloc::layout"],[1278,"serde::ser"],[1279,"core::any"],[1280,"core::future::future"],[1281,"alloc::boxed"],[1282,"core::pin"],[1283,"hotshot_types::traits::node_implementation"],[1284,"async_broadcast"],[1285,"async_broadcast"],[1286,"hotshot_types::data"],[1287,"hotshot_types::message"],[1288,"hotshot_types::simple_vote"],[1289,"hotshot_types::simple_vote"],[1290,"hotshot_types::consensus"],[1291,"hotshot_types::data"],[1292,"async_lock::rwlock"],[1293,"core::cmp"],[1294,"hotshot_task::task"],[1295,"core::default"],[1296,"hotshot_types::event"],[1297,"hotshot_types::traits::network"],[1298,"hotshot_types::traits::storage"],[1299,"hotshot_types::message"],[1300,"hotshot_task::dependency"],[1301,"hotshot_types::traits::network"],[1302,"hotshot_types::data"],[1303,"core::marker"],[1304,"hotshot_types::vote"]],"d":["Implementations for builder client Should contain builder …","the task which implements the main parts of consensus","The task which implements the core state logic of …","The task which implements the main parts of data …","Defines the events passed between tasks","Defines the types to run unit tests for a task.","Helper functions used by any task","The task which implements the network.","Task for handling logic for quorum proposals","Task for handling QuorumProposalRecv events","The task which handles the logic for the quorum vote.","Task for requesting the network for things","Task which responses to requests from the network","Task for storing and replaying all received tasks by a node","The task which implements all transaction handling","Task for handling upgrades","The task which implements verifiable information dispersal","The task which implements view synchronization","Generic task for collecting votes","Generic error while accessing the API, i.e. when API isn’…","SNAFU context selector for the <code>BuilderClientError::Api</code> …","Client for builder API","Represents errors than builder client may return","Block not found","SNAFU context selector for the <code>BuilderClientError::NotFound</code>…","","","Marker for <code>NodeType</code> used here","","","Query builder for available blocks","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Claim block","","Claim block","Claim block header input","","","","","Wait for server to become available Returns <code>false</code> if …","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Underlying surf_disco::Client","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Construct a new client from base url","","","","","","","","","","","","","","","","","","","","","","Version 0.1","Version 0.2. No changes in API","Version 0.3: marketplace. Bundles.","","","","","Underlying error","Client for builder API","","Marker for <code>NodeType</code> used here","Claim block","Claim block header input","Underlying surf_disco::Client","Builder API version","Client for builder API","","","Marker for <code>NodeType</code> used here","Claim block","Underlying surf_disco::Client","The state for the consensus task.  Contains all of the …","No value.","Some value of type <code>T</code>.","Alias for Optional type for Vote Collectors","","","","Cancel all tasks the consensus tasks has spawned before …","Reference to consensus. The replica will require a write …","View number this view is executing in.","Timestamp this view starts at.","The most recent proposal we have, will correspond to the …","Membership for DA committee Votes/certs","","","","","The most recent upgrade certificate this node formed. …","Returns the argument unchanged.","Handles a consensus event received on the event stream","","Helper functions to handle proposal-related functionality.","The node’s id","","Immutable instance state","Calls <code>U::from(self)</code>.","","The underlying network","Output events to application","The commitment to the current block payload and its …","","Our Private Key","last View Sync Certificate or Timeout Certificate this …","Our public key","Publishes a proposal","Membership for Quorum Certs/votes","Round start delay from config, in milliseconds.","Spawn a vote task for the given view.  Will try to vote …","Spawned tasks related to a specific view, so we can cancel …","This node’s storage ref","View timeout from config.","Membership for Timeout votes/certs","timeout task handle","Current timeout vote collection task with its view","","","","Lock for a decided upgrade","Validate the VID disperse is correctly signed and has the …","Current Vote collection task, with it’s view.","","Task state for the Consensus task.","No value.","Some value of type <code>T</code>.","Alias for Optional type for Vote Collectors","","","Joins all subtasks.","Membership for DA committee Votes/certs","A reference to the metrics trait.","The view number that this node is currently executing in.","Timestamp this view starts at.","","","","","Returns the argument unchanged.","Handles a consensus event received on the event stream","","Event handlers for use in the <code>handle</code> method.","The node’s id","","Immutable instance state","Calls <code>U::from(self)</code>.","The last decided view","","The underlying network","Output events to application","","Our Private Key","Our public key","Membership for Quorum Certs/votes","This node’s storage ref","View timeout from config.","Membership for Timeout votes/certs","Timeout task handle","Current timeout vote collection task with its view","","","","Lock for a decided upgrade","Current Vote collection task, with it’s view.","","Handle a <code>QuorumVoteRecv</code> event.","Handle a <code>Timeout</code> event.","Handle a <code>TimeoutVoteRecv</code> event.","Handle a <code>ViewChange</code> event.","Private key, latest decided upgrade certificate, committee …","","","Create the header for a proposal, build the proposal, and …","The DA Membership handle","","","","","The event receiver stream.","The event sending stream.","Returns the argument unchanged.","Handle the received quorum proposal.","Handle <code>QuorumProposalValidated</code> event content and submit a …","","Calls <code>U::from(self)</code>.","","","The private key of the voting node.","Send a proposal for the view <code>view</code> from the latest high_qc …","Publishes a proposal if there exists a value which we can …","","","","Check if we are able to vote, like whether the proposal is …","The locked upgrade of the voting node.","","Tracks state of a DA task","No value.","Some value of type <code>T</code>.","Alias for Optional type for Vote Collectors","","","","Reference to consensus. Leader will require a read lock on …","View number this view is executing in.","Membership for the DA committee","","","","","Returns the argument unchanged.","main task event handler","","This state’s ID","","Calls <code>U::from(self)</code>.","","The underlying network","Output events to application","","This Nodes private key","This Nodes public key","Membership for the quorum committee We need this only for …","This node’s storage ref","","","","The current vote collection task, if there is one.","","Event when the transactions task has a block formed","Event when the transactions task has sequenced …","A Data Availability Certificate (DAC) has been received by …","A DAC is validated.","A DA proposal has been received from the network; handled …","Send a DA proposal to the DA committee; emitted by the DA …","A DA proposal has been validated; handled by the DA task …","A DA vote has been received by the network; handled by the …","Send a DA vote to the DA leader; emitted by DA committee …","The DA leader has collected enough votes to form a DAC; …","A new high_qc has been updated in <code>Consensus</code>.","All of the possible events that can be passed between …","Marker that the task completed","A new anchor view has been successfully reached by this …","Event when consensus decided on a leaf","A new locked view has been created (2-chain)","Wrapper type for the event to notify tasks that a proposal …","The next leader has collected enough votes to form a QC; …","A quorum proposal has been preliminarily validated. The …","A quorum proposal has been received from the network; …","A quorum proposal was requested by a node for a view. Also …","A quorum proposal is missing for a view that we need. Also …","A quorum proposal was requested by a node for a view. Also …","A quorum proposal was missing for a view. As the leader, …","Send a quorum proposal to the network; emitted by the …","A quorum proposal with the given parent leaf is validated. …","All dependencies for the quorum vote are validated.","A quorum vote has been received from the network; handled …","Send a quorum vote to the next leader; emitted by a …","Event to send block payload commitment and metadata from …","Shutdown the task","A consensus view has timed out; emitted by a replica in …","A timeout vote received from the network; handled by …","Send a timeout vote to the network; emitted by consensus …","Send transactions to the network","Receive transactions from the network","A new high_qc has been reached by this node.","Upgrade certificate has been sent to the network","Upgrade proposal has been received from the network","Upgrade proposal has been sent to the network","Upgrade vote has been received from the network","Upgrade vote has been sent to the network","A undecided view has been created and added to the …","Send VID shares to VID storage nodes; emitted by the DA …","Vid disperse share has been received from the network; …","VID share data is validated.","The current view has changed; emitted by the replica in …","Receive a <code>ViewSyncCommitCertificate2</code> from the network; …","Send a <code>ViewSyncCommitCertificate2</code> from the network; …","Receive a <code>ViewSyncCommitVote</code> from the network; received by …","Send a <code>ViewSyncCommitVote</code> from the network; emitted by a …","Receive a <code>ViewSyncFinalizeCertificate2</code> from the network; …","Send a <code>ViewSyncFinalizeCertificate2</code> from the network; …","Receive a <code>ViewSyncFinalizeVote</code> from the network; received …","Send a <code>ViewSyncFinalizeVote</code> from the network; emitted by a …","Receive a <code>ViewSyncPreCommitCertificate2</code> from the network; …","Send a <code>ViewSyncPreCommitCertificate2</code> from the network; …","Receive a <code>ViewSyncPreCommitVote</code> from the network; received …","Send a <code>ViewSyncPreCommitVote</code> from the network; emitted by …","Timeout for the view sync protocol; emitted by a replica …","Trigger the start of the view sync protocol; emitted by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Channel to send the response back to","","","","","","","","","","","","","","","View of missing proposal","","","","The state for the test harness task. Keeps track of which …","If true we won’t fail the test if extra events come in","","","Handles an event for the Test Harness Task.  If the event …","","","","","The expected events we get from the test.  Maps an event …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Runs a test by building the task using <code>build_fn</code> and then …","","","","","Utilities to print anyhow logs.","Constant which tells <code>update_view</code> to not send a view change …","Helper type to give names and to the output values of the …","Constant which tells <code>update_view</code> to send a view change …","","","Helper function to send events and log errors","Cancel a task","Ascends the leaf chain by traversing through the parent …","The most recent upgrade certificate from one of the leaves.","The default method for this type is to set all of the …","","","","","Print logs as debug","Trigger a request to the network for a proposal for a view …","","Returns the argument unchanged.","The transactions in the block payload for each leaf.","","Calls <code>U::from(self)</code>.","","The decided leaves with corresponding validated state and …","The decided leaves.","The qc for the decided chain.","The new decided view obtained from a 3 chain starting from …","The new locked view obtained from a 2 chain starting from …","Gets the parent leaf and state from the parent of a …","","","","","Update the view if it actually changed, takes a mutable …","Validate the state and safety and liveness of a proposal …","Validates, from a given <code>proposal</code> that the view that it is …","","network event task state","the network message task state","","","","","","","comm channel","","","DA filter","","","","","","","","","Sender to send external events this task generates to the …","Filter which returns false for the events that this …","Returns the argument unchanged.","Returns the argument unchanged.","Handle the given event.","","Handle the message.","handle <code>VidDisperseSend</code>","","","Sender to send internal events this task generates to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Record <code>HotShotAction</code> if available","membership for the channel","","","quorum filter","Storage to store actionable events","","","","","","","","upgrade filter","Lock for a decided upgrade","vid filter","view number","view sync filter","","","The state for the quorum proposal task.","","","","Shared consensus task state","Creates the requisite dependencies for the Quorum Proposal …","Create and store an <code>AndDependency</code> combining <code>EventDependency</code>…","Create an event dependency","","","","","The most recent upgrade certificate this node formed. …","Returns the argument unchanged.","Handles a consensus event received on the event stream","","This module holds the dependency task for the …","The node’s id","","Immutable instance state","Calls <code>U::from(self)</code>.","Latest view number that has been proposed for.","","The underlying network","Output events to application","","Our Private Key","Table for the in-progress proposal dependency tasks.","Our public key","Membership for Quorum Certs/votes","Round start delay from config, in milliseconds.","This node’s storage ref","View timeout from config.","Membership for Timeout votes/certs","timeout task handle","","","","Update the latest proposed view number.","Lock for a decided upgrade","","For the <code>SendPayloadCommitmentAndMetadata</code> event.","For the <code>QuroumProposalRecv</code> event.","Proposal dependency types. These types represent events …","Handler for the proposal dependency","For the <code>QcFormed</code> event.","For the <code>QcFormed</code> event timeout branch.","For the <code>VidShareValidated</code> event.","For the <code>ViewSyncFinalizeCertificate2Recv</code> event.","","","","","Shared consensus task state","","","","","","","","","","","The most recent upgrade certificate this node formed. …","Returns the argument unchanged.","Returns the argument unchanged.","","The node’s id","","","Immutable instance state","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Latest view number that has been proposed for (proxy for …","","","","","Our Private Key","Our public key","Publishes a proposal given the <code>CommitmentAndMetadata</code>, …","Membership for Quorum Certs/votes","The event receiver.","Round start delay from config, in milliseconds.","The event sender.","","","","","","","Lock for a decided upgrade","The view number to propose for.","","","The state for the quorum proposal task. Contains all of …","","","","Cancel all tasks the consensus tasks has spawned before …","Reference to consensus. The replica will require a write …","View number this view is executing in.","Timestamp this view starts at.","","","","","Returns the argument unchanged.","Handles all consensus events relating to propose and …","","Event handlers for this task.","The node’s id","","Immutable instance state","Calls <code>U::from(self)</code>.","","The underlying network","Output events to application","","Our Private Key","last View Sync Certificate or Timeout Certificate this …","Our public key","Membership for Quorum Certs/votes","Round start delay from config, in milliseconds.","Spawned tasks related to a specific view, so we can cancel …","This node’s storage ref","View timeout from config.","Membership for Timeout votes/certs","timeout task handle","","","","Lock for a decided upgrade","","Handles the <code>QuorumProposalRecv</code> event by first validating …","Update states in the event that the parent state is not …","For the <code>DaCertificateRecv</code> event.","For the <code>QuroumProposalValidated</code> event after validating …","The state for the quorum vote task.","For the <code>VidShareRecv</code> event.","Vote dependency types.","Handler for the vote dependency.","","","","","","","","Reference to consensus. The replica will require a write …","Reference to consensus. The replica will require a write …","Create and store an <code>AndDependency</code> combining <code>EventDependency</code>…","Create an event dependency.","Membership for DA committee certs/votes.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handle a vote dependent event received on the event stream","","","Event handlers for <code>QuorumProposalValidated</code>.","The node’s id","The node’s id","","","","Immutable instance state","Immutable instance state","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Latest view number that has been voted for.","","","","The underlying network","Output events to application","","","","Private Key.","Private Key.","Public key.","Public key.","Membership for Quorum certs/votes.","Membership for Quorum certs/votes.","Event receiver.","Event sender.","Reference to the storage.","Reference to the storage.","Submits the <code>QuorumVoteSend</code> event if all the dependencies …","","","","","","","","","","Update the latest voted view number.","Updates the shared consensus state with the new voting …","Lock for a decided upgrade","Lock for a decided upgrade","View number to vote on.","Table for the in-progress dependency tasks.","","","","Handles the <code>QuorumProposalValidated</code> event.","A short lived task that waits a delay and starts trying …","Long running task which will request information after a …","Amount of time to try for a request before timing out.","Alias for a signature","Wrapper for the info in a VID request","","","","","","","Creates the request structures for all types that are …","","Returns true if we got the data we wanted, or the view has …","DA Membership","Delay before requesting peers","Duration to delay sending the first request","","","","","","","","","","Handle sending a VID Share request, runs the loop until …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Transform a response into a <code>HotShotEvent</code>","The node’s id","The node’s id","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Make a VID Request Message to send","Network to send requests over The underlying network","The underlying network to send requests on","","","","This nodes private/signing key, used to sign requests.","This nodes public key","our public key","Quorum Membership","The peers we will request in a random order","Wait the delay, then try to complete the request.  …","run a delayed request task for a request. The first …","Channel to send the event when we receive a response","Sign the serialized version of the request","Signals delayed requesters to finish","A flag indicating that <code>HotShotEvent::Shutdown</code> has been …","A flag indicating that <code>HotShotEvent::Shutdown</code> has been …","Spawns tasks for a given view to retrieve any data needed.","A flag indicating that <code>HotShotEvent::Shutdown</code> has been …","Consensus shared state so we can check if we’ve gotten …","Shared state to check if the data go populated","","","","","","","","","","Last seen view, we won’t request for proposals before …","","","","Task state for the Network Request Task. The task is …","Time to wait for txns before sending …","","","Locked consensus state","","","","","Returns the argument unchanged.","Get the VID share from consensus storage, or calculate it …","Handle an incoming message.  First validates the sender, …","Handle the request contained in the message. Returns the …","The node’s id","","Calls <code>U::from(self)</code>.","","Helper to turn a <code>ResponseMessage</code> into a <code>Message</code> by filling …","Create the network request state with the info it needs","","This replicas private key","This replicas public key","Quorum membership for checking if requesters have state","Receiver for requests","Lookup the proposal for the view and respond if it’s …","Run the request response loop until a …","Spawn the network response task to handle incoming request …","","","","Makes sure the sender is allowed to send a request.","Check the signature","","The task state for the <code>Rewind</code> task is used to capture all …","","","","","","","","All events received by this node since the beginning of …","Returns the argument unchanged.","Handles all events, storing them to the private state","","The id of this node","","Calls <code>U::from(self)</code>.","","","","","","","Multiplier for extra time to give to the second batch of …","Time the first batch of builders has to respond","Proportion of builders queried in first batch, dividend","Proportion of builders queried in the first batch, divisor","Minimum amount of time allotted to both batches, cannot be …","Builder Provided Responses","Delay between re-tries on unsuccessful calls","Tracks state of a Transaction task","auction results provider","Get a block from builder. Queries the sufficiently fast …","Block payload","","","","","Builder 0.1 API clients","The state’s api","","Reference to consensus. Leader will require a read lock on …","View number this view is executing in.","","","","","","","","","fallback builder url","Fee information","Returns the argument unchanged.","Returns the argument unchanged.","Query the builders for available blocks. Queries only …","main task event handler","","handle view change decide legacy or not","legacy view change handler","marketplace view change handler","This state’s ID","","","InstanceState","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get VID commitment for the last successful view before …","Get VID commitment for the last successful view before …","","","Membership for the quorum","Block metadata","The underlying network","Produce a null block","Output events to application","","","Optional precomputed commitment","Our Private Key","Produce a block by fetching auction results from the …","This Nodes Public Key","","","","","","","Lock for a decided upgrade","","","","No value.","Some value of type <code>T</code>.","Tracks state of a DA task","Alias for Optional type for Vote Collectors","","","","View number this view is executing in.","","","","","Returns the argument unchanged.","main task event handler","","This state’s ID","","Calls <code>U::from(self)</code>.","","The underlying network","Output events to application","","This Nodes private key","This Nodes public key","Membership for Quorum Certs/votes","Unix time in seconds at which we start proposing an upgrade","View to start proposing an upgrade","Unix time in seconds at which we start voting on an upgrade","View to start voting on an upgrade","Unix time in seconds at which we stop proposing an upgrade","View to stop proposing an upgrade","Unix time in seconds at which we stop voting on an upgrade","View to stop voting on an upgrade","","","","Lock for a decided upgrade","Check if we have decided on an upgrade certificate","The current vote collection task, if there is one.","","Tracks state of a VID task","","","","Reference to consensus. Leader will require a read lock on …","View number this view is executing in.","","","","","Returns the argument unchanged.","main task event handler","","This state’s ID","","Calls <code>U::from(self)</code>.","","Membership for the quorum","The underlying network","","Our Private Key","This Nodes Public Key","","","","The view and ID of the current vote collection task, if …","","Commit phase","Finalize phase","No phase; before the protocol has begun","PreCommit phase","Type alias for a map from View Number to Relay to Vote Task","Phases of view sync","State of a view sync replica task","Main view sync task state","","","","","","","","","","","","","Map of commit vote accumulates for the relay","View HotShot is currently in","Current round HotShot is in","","","","","","","","","","","","","","","","","","Map of finalize vote accumulates for the relay","Whether we have seen a finalized certificate","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Handles incoming events for the main view sync task","Handle incoming events for the view sync replica task","","","","Our node id; for logging","Our node id; for logging","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Last view we garbage collected old tasks","","","","Membership for the quorum","Membership for the quorum","The underlying network","The underlying network","View HotShot wishes to be in","Round HotShot wishes to be in","How many timeouts we’ve seen in a row; is reset upon a …","","","","","Map of pre-commit vote accumulates for the relay","Our Private Key","Our Private Key","This Nodes Public Key","This Nodes Public Key","The relay index we are currently on","Map of running replica tasks","Handles incoming events for the main view sync task","Whether we have already sent a view change event for …","Timeout task handle, when it expires we try the next relay","","","","","","","","","","","Timeout duration for view sync rounds","Timeout for view sync rounds","","","","Info needed to create a vote accumulator task","Describes the functions a vote must implement for it to be …","Alias for DA vote accumulator","Trait for types which will handle a vote event.","Alias for Quorum vote accumulator","Alias for Timeout vote accumulator","Alias for upgrade vote accumulator","Alias for View Sync Commit vote accumulator","Alias for View Sync Finalize vote accumulator","Alias for View Sync Pre Commit vote accumulator","Task state for collecting votes of one type and emitting a …","Take one vote and accumulate it. Returns either the cert …","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","accumulator handles aggregating the votes","","","","","Generic function for spawning a vote task.  Returns the …","","","","","","","","","Event filter to use for this event","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Handle a vote event","","","","","","","","Node id","This nodes id","Node id","Node id","Node id","Node id","Node id","Node id","Node id","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","return the leader for this votes","return the Hotshot event for the completion of this CERT","Membership for voting","Membership we are accumulation votes for","Membership for voting","Membership for voting","Membership for voting","Membership for voting","Membership for voting","Membership for voting","Membership for voting","","","Public key for this node.","This nodes Pub Key","Public key for this node.","Public key for this node.","Public key for this node.","Public key for this node.","Public key for this node.","Public key for this node.","Public key for this node.","","","","","","","The view which we are collecting votes for","View of the votes we are collecting","The view which we are collecting votes for","The view which we are collecting votes for","The view which we are collecting votes for","The view which we are collecting votes for","The view which we are collecting votes for","The view which we are collecting votes for","The view which we are collecting votes for","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,9,0,15,16,4,9,9,4,9,4,9,15,16,4,9,15,16,15,16,4,9,4,4,15,16,15,16,4,4,9,15,16,4,9,15,16,9,4,9,9,15,16,4,9,15,16,15,16,9,9,15,16,4,9,9,15,16,9,9,4,9,15,16,4,4,9,15,16,15,16,4,9,15,16,16,4,4,9,15,16,9,9,15,16,9,4,9,15,16,4,9,15,16,4,9,15,16,0,0,0,4,9,15,16,147,0,0,44,44,44,44,0,0,0,0,45,45,45,0,148,148,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,149,149,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,0,0,0,72,72,0,72,72,72,72,72,72,72,72,0,0,72,72,72,72,72,0,0,72,72,72,0,72,72,0,150,150,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,52,52,52,52,52,52,52,52,52,52,52,0,0,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,75,74,52,75,74,52,75,74,52,75,74,52,75,74,52,75,74,52,75,74,52,75,74,52,75,74,52,75,74,52,75,75,75,75,74,74,74,74,52,52,52,52,75,74,52,52,75,74,52,52,75,74,52,75,74,52,75,74,52,75,74,52,75,52,75,74,52,52,75,74,52,75,74,52,75,74,52,75,75,74,52,0,77,77,77,0,77,77,77,77,77,77,77,77,77,77,0,77,77,77,77,0,0,0,0,80,80,0,0,0,80,80,80,80,80,80,82,0,80,80,80,80,80,80,80,80,80,80,80,0,80,80,80,80,0,0,0,80,0,0,89,86,89,86,89,86,86,89,89,0,86,89,86,89,86,89,86,89,89,86,86,89,86,86,89,86,86,89,89,86,89,86,89,86,86,86,89,0,86,89,86,89,86,89,86,89,0,86,0,86,0,86,89,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,95,95,0,0,95,95,95,95,97,95,97,95,97,97,95,97,95,97,95,97,95,95,95,97,97,95,97,97,97,95,97,97,95,97,97,95,97,95,97,97,97,97,97,97,97,97,95,97,95,97,95,97,97,97,95,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,0,100,100,0,100,0,0,101,99,100,101,99,100,99,101,99,99,99,99,101,99,100,101,99,100,101,99,100,101,99,100,100,100,101,99,100,99,101,99,0,101,99,101,99,100,101,99,101,99,100,99,101,99,100,99,99,101,99,100,101,99,101,99,101,99,101,101,101,99,101,101,99,100,101,99,100,101,99,100,99,101,101,99,101,99,101,99,100,0,0,0,0,0,0,102,104,105,102,104,105,102,102,104,102,102,104,102,104,105,102,104,105,102,104,105,104,102,102,104,105,102,104,105,102,104,102,104,102,104,105,102,104,105,102,104,105,0,102,104,102,104,105,102,102,104,102,104,104,102,104,102,102,102,104,102,102,102,104,102,104,105,102,104,105,102,104,105,102,102,104,105,0,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,107,107,107,107,0,107,0,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,0,0,0,0,0,0,0,0,115,115,116,116,115,116,115,115,115,115,115,115,116,115,116,115,116,115,116,115,115,116,116,115,115,115,115,115,115,115,115,116,115,115,116,115,115,115,116,115,115,116,115,115,115,116,115,116,115,115,115,116,115,116,115,116,115,115,116,115,115,151,151,0,0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,123,123,123,123,0,0,0,0,123,152,121,122,123,121,122,123,121,122,123,123,121,121,122,121,122,123,121,122,123,121,122,123,121,122,123,123,123,123,123,123,121,122,123,121,122,123,123,121,122,121,122,123,121,122,121,122,123,121,122,123,121,121,122,123,121,122,121,122,121,122,121,123,121,122,123,121,121,122,121,122,122,121,121,122,122,123,121,122,123,121,122,123,121,122,123,121,122,121,122,123,0,0,0,0,0,0,0,0,0,0,0,129,129,153,154,155,156,157,158,159,129,130,129,130,0,129,130,129,130,129,130,129,130,135,129,129,129,129,129,129,129,129,130,135,129,129,129,129,129,129,129,129,130,153,154,155,156,157,158,159,129,130,129,130,129,130,132,132,129,130,153,154,155,156,157,158,159,129,130,129,130,153,154,155,156,157,158,159,129,130,129,130,129,130,129,130,153,154,155,156,157,158,159,129,130],"f":"`````````````````````````{{cb}d{}}0`{cf{}}0{{{h{ce}}jl}{{Ad{{A`{{n{c}}}}Ab}}}AfAh}{Ab{{Al{Aj}}}}{ce{}{}}0000000{AnAb}{{{B`{c}}}Ab{{Bd{Bb}}}}{{{h{cBf}}ljl}{{Ad{{Bh{c}}Ab}}}Af}{Ab{{Al{f}}}}{{{h{cBf}}Bjl}{{Ad{{Bl{c}}Ab}}}Af}{{{h{cBf}}Bjl}{{Ad{{Bn{c}}Ab}}}Af}{AnAn}{{{B`{c}}}{{B`{c}}}C`}{{ce}d{}{}}0{{{h{ce}}Cb}CdAfAh}{Cfc{}}0000000{AbCh}{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}0{c{{Ad{Ab}}}Cl}11{Cfd}000{An{{Ad{cAb}}}{}}{{{B`{c}}}{{Ad{eAb}}}{{Bd{Bb}}}{}}{{AbCn}D`}0{{AnCn}D`}{{{B`{c}}Cn}D`Db}{cc{}}{DdAb}111{{ce}{{Df{eg}}}{}{DhDjDl}{}}{c{}{}}{{}Cf}000`{ce{}{}}000{{Anc}Ab{}}{{{B`{c}}e}Ab{{Bd{Bb}}}{}}{{}{{Ad{DnE`}}}}000`{c{{h{eg}}}{{Bd{Eb}}}AfAh}{{}}000{{Abc}AdEd}{Ab{{Al{f}}}}77{cBb{}}{c{{Ad{e}}}{}{}}0000000{cEf{}}000```::::````{{{Eh{c}}Bjl}{{Ad{{Bl{c}}Ab}}}Af}{{{Eh{c}}Bjl}{{Ad{{Bn{c}}Ab}}}Af}``````{{{Ej{c}}ljl}{{Ad{{Bh{c}}Ab}}}Af}`````=={{{El{ceg}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff}{{{El{ceg}}}dAf{{Fd{c}}}Ff}`````{Cfc{}}0{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}{Cfd}`{cc{}}{{{El{ceg}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}{Fn{{Fj{{Fh{c}}}}}}}dAf{{Fd{c}}}Ff}{{{El{ceg}}{Fj{i}}{Fl{{Fj{i}}}}{Fn{{Fj{i}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff{}}``{{}Cf}`{ce{}{}}{{}{{Ad{DnE`}}}}```{{}}```{{{El{ceg}}{Fl{{Fj{{Fh{c}}}}}}{Fn{{Fj{{Fh{c}}}}}}}{{G`{d}}}Af{{Fd{c}}}Ff}``{{{El{ceg}}{Fl{{Fj{{Fh{c}}}}}}{Fn{{Fj{{Fh{c}}}}}}}dAf{{Fd{c}}}Ff}``````{c{{Ad{e}}}{}{}}0{cEf{}}`{{{El{ceg}}{Gd{c{Gb{c}}}}}CdAf{{Fd{c}}}Ff}`7````77{{{Gf{ceg}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff}````??>=<{{{Gf{ceg}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}dAf{{Fd{c}}}Ff}{{{Gf{ceg}}{Fj{i}}{Fl{{Fj{i}}}}{Fn{{Fj{i}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff{}}``;`:`9``8````````554``:{{{Gh{c}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}{Gf{ceg}}}{{G`{d}}}Af{{Fd{c}}}Ff}{{{Fl{{Fj{{Fh{c}}}}}}{Gf{ceg}}}{{G`{d}}}Af{{Fd{c}}}Ff}{{{Gj{c}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}{Gf{ceg}}}{{G`{d}}}Af{{Fd{c}}}Ff}1`=={{{Gl{c}}{Fl{{Fj{{Fh{c}}}}}}{Gn{c}}{H`{c}}Fj{Al{{Hb{c}}}}{Al{{Hd{c}}}}lFjHfl}{{G`{d}}}Af}`{Cfc{}}0{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}{Cfd}``{cc{}}{{{Gd{c{Hh{c}}}}{Fl{{Fj{{Fh{c}}}}}}{Fn{{Fj{{Fh{c}}}}}}{El{ceg}}}{{G`{{Al{{Hh{c}}}}}}}Af{{Fd{c}}}Ff}{{{Hh{c}}{Fl{{Fj{{Fh{c}}}}}}{Fn{{Fj{{Fh{c}}}}}}{El{ceg}}}{{G`{d}}}Af{{Fd{c}}}Ff}{{}Cf}{ce{}{}}{{}{{Ad{DnE`}}}}{{}}`{{{Fl{{Fj{{Fh{c}}}}}}{Fn{{Fj{{Fh{c}}}}}}Fj{Gl{c}}l{Al{{Hb{c}}}}{Hj{ce}}{Al{{Gn{c}}}}{Al{{Hd{c}}}}Fjl}{{G`{{Hl{d}}}}}AfFf}0{c{{Ad{e}}}{}{}}0{cEf{}}{{{Hh{c}}{Gl{c}}{Fj{Hn}}FjFj{I`{ce}}l}CdAfFf}`6````66{{{Ib{ce}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}}```>>=<;{{{Ib{ce}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Al{Id}}}Af{{Fd{c}}}}{{{Ib{ce}}{Fj{g}}{Fl{{Fj{g}}}}{Fn{{Fj{g}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}{}}`:98``7````554`9`````````````````````````````````````````````````````````````{{cb}d{}}00::::::{{{If{c}}}{{If{c}}}{C`Af}}{IdId}{{{Fh{c}}}{{Fh{c}}}{C`Af}}{{ce}d{}{}}00{Cfc{}}00000{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}00{Cfd}00{{{If{c}}{If{c}}}CdAf}{{IdId}Cd}{{{Fh{c}}{Fh{c}}}Cd{IhAf}}{{ce}Cd{}{}}00000000000{{{If{c}}Cn}D`{DbAf}}{{IdCn}D`}{{{Fh{c}}Cn}D`Af}{{{Fh{c}}Cn}D`{DbAf}}{cc{}}00{{ce}{{Df{eg}}}{}{DhDjDl}{}}{{}Cf}00{ce{}{}}00{{}{{Ad{DnE`}}}}00{{}}00`{{}{{Fh{c}}}Af}333{cBb{}}{c{{Ad{e}}}{}{}}00000{cEf{}}00`666``66{{{Fj{{Fh{c}}}}{Ij{c}}}{{Al{Id}}}Af}{Cfc{}}0{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}{Cfd}`=;:98{{{A`{{Fh{c}}}}{A`{{Fh{c}}}}eCd}dAf{{In{}{{Il{{Fh{c}}}}}}Dj}}665;````;;{{c{Fl{c}}}d{C`Db}}{{{Hl{c}}}d{}}{{{Hh{c}}{Gl{c}}{Fj{{Hn{{Al{{Hb{c}}}}}}}}}{{J`{c}}}Af}`{{}{{J`{c}}}{AfJb}}7765{Jdd}{{{Fl{{Fj{{Fh{c}}}}}}{Fn{{Fj{{Fh{c}}}}}}Fj{Gl{c}}}{{G`{{H`{c}}}}}Af}{{{J`{c}}Cn}D`{DbAf}}{cc{}}`{{}Cf}{ce{}{}}{{}{{Ad{DnE`}}}}`````{{{Fl{{Fj{{Fh{c}}}}}}{Fn{{Fj{{Fh{c}}}}}}Fj{Gl{c}}}{{G`{{Jf{{H`{c}}Fj}}}}}Af}{{}}{c{{Ad{e}}}{}{}}0{cEf{}}{{{Fl{{Fj{{Fh{c}}}}}}l{Gl{c}}Jh{Hl{d}}{Fl{{Jj{c}}}}CdCd}{{G`{d}}}Af}{{{Gd{c{Hh{c}}}}{H`{c}}{Gl{c}}{Fj{{Hn{{Al{{Hb{c}}}}}}}}Fj{Fl{{Fj{{Fh{c}}}}}}{Fl{{Jj{c}}}}l}{{G`{d}}}Af}{{{Gd{c{Hh{c}}}}FjFj}{{G`{d}}}Af}8``{{cb}d{}}9999{{{Jl{cegi}}}{{Fb{{F`{En}}}}}AfFfJn{{K`{c}}}}`{{{Kb{c}}}{{Kb{c}}}{C`Af}}{{ce}d{}{}}{{{Fj{{Fh{c}}}}}CdAf}{Cfc{}}000{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}0{Cfd}0``{cc{}}0{{{Jl{cegi}}{Fj{{Fh{c}}}}}dAfFfJn{{K`{c}}}}{{{Jl{cegi}}{Fj{k}}{Fl{{Fj{k}}}}{Fn{{Fj{k}}}}}{{Fb{{F`{En}}}}}AfFfJn{{K`{c}}}{}}{{{Kb{c}}{A`{{Kd{c}}}}}dAf}{{{Jl{cegi}}{Gd{c{Kf{c}}}}}{{Al{Id}}}AfFfJn{{K`{c}}}}{{}Cf}0`{ce{}{}}0{{}{{Ad{DnE`}}}}0{{{Al{Kh}}{Fj{{Hn{e}}}}}{{G`{dd}}}Af{{K`{c}}}}`{{}}0=`3{c{{Ad{e}}}{}{}}000{cEf{}}0?`?`?55`55{{{Kj{ceg}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff}`{{{Kj{ceg}}{Fn{{Fj{{Fh{c}}}}}}{Fj{{Fh{c}}}}}{{Kl{{A`{{A`{{Fj{{Fh{c}}}}}}}}}}}Af{{Fd{c}}}Ff}{{{Kj{ceg}}{Fn{{Fj{{Fh{c}}}}}}{Fl{{Fj{{Fh{c}}}}}}{Fj{{Fh{c}}}}}dAf{{Fd{c}}}Ff}{{{Kj{ceg}}Kn{Fn{{Fj{{Fh{c}}}}}}}{{L`{{Fj{{Fh{c}}}}}}}Af{{Fd{c}}}Ff}{Cfc{}}0{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}{Cfd}`{cc{}}{{{Kj{ceg}}{Fj{{Fh{c}}}}{Fn{{Fj{{Fh{c}}}}}}{Fl{{Fj{{Fh{c}}}}}}}dAf{{Fd{c}}}Ff}{{{Kj{ceg}}{Fj{i}}{Fl{{Fj{i}}}}{Fn{{Fj{i}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff{}}``{{}Cf}`{ce{}{}}`{{}{{Ad{DnE`}}}}``?`````````>>={{{Kj{ceg}}}CdAf{{Fd{c}}}Ff}`2````````2222`99998877{{KnKn}Cd}{{KnCn}D`}`88{{{Lb{ce}}g}dAfFf{}}`66`55`44{{}}0``{{{Lb{ce}}{Gn{c}}{Gd{c{Kf{c}}}}{Al{{Hd{c}}}}{Al{{Hb{c}}}}{Fj{{Hn{{Al{{Hb{c}}}}}}}}}{{G`{d}}}AfFf}````{c{{Ad{e}}}{}{}}000{cEf{}}0``99`99{{{Ld{ceg}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff}{{{Ld{ceg}}}dAf{{Fd{c}}}Ff}```{Cfc{}}0{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}{Cfd}{cc{}}{{{Ld{ceg}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}{Fn{{Fj{{Fh{c}}}}}}}dAf{{Fd{c}}}Ff}{{{Ld{ceg}}{Fj{i}}{Fl{{Fj{i}}}}{Fn{{Fj{i}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff{}}``{{}Cf}`{ce{}{}}{{}{{Ad{DnE`}}}}``>``````````<<;`1{{{Gd{c{Hh{c}}}}{Fl{{Fj{{Fh{c}}}}}}{Fn{{Fj{{Fh{c}}}}}}{Ld{ceg}}}{{G`{d}}}Af{{Fd{c}}}Ff}{{{Gd{c{Hh{c}}}}{Fl{{Fj{{Fh{c}}}}}}{Ld{ceg}}}{{G`{d}}}Af{{Fd{c}}}Ff}``````333333{{{Lf{ceg}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff}``{{{Lf{ceg}}{Fn{{Fj{{Fh{c}}}}}}{Fl{{Fj{{Fh{c}}}}}}{Al{{Fj{{Fh{c}}}}}}}dAf{{Fd{c}}}Ff}{{{Lf{ceg}}Lh{Fn{{Fj{{Fh{c}}}}}}}{{L`{{Fj{{Fh{c}}}}}}}Af{{Fd{c}}}Ff}`======<<<;;;{{LhLh}Cd}{{LhCn}D`}<<<{{{Lf{ceg}}{Fj{{Fh{c}}}}{Fn{{Fj{{Fh{c}}}}}}{Fl{{Fj{{Fh{c}}}}}}}dAf{{Fd{c}}}Ff}{{{Lj{ceg}}i}dAf{{Fd{c}}}Ff{}}{{{Lf{ceg}}{Fj{i}}{Fl{{Fj{i}}}}{Fn{{Fj{i}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff{}}```<<<``;;;`:::``{{}}00``````````{{{Lj{ceg}}{H`{c}}{Gd{c{Gb{c}}}}}{{G`{d}}}Af{{Fd{c}}}Ff}{c{{Ad{e}}}{}{}}00000{cEf{}}00{{{Lf{ceg}}}CdAf{{Fd{c}}}Ff}3````{ce{}{}}00{{{Hh{c}}{Fl{{Fj{{Fh{c}}}}}}{Lf{ceg}}}{{G`{d}}}Af{{Fd{c}}}Ff}`````111111{{{Ll{ce}}}{{A`{{Ln{c}}}}}Af{{Fd{c}}}}{{{Ll{ce}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}}{{{M`{ce}}{Mb{c}}}CdAf{{Fd{c}}}}```{Cfc{}}00000{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}00{{{M`{ce}}{Mb{c}}}dAf{{Fd{c}}}}{Cfd}{{{Ll{ce}}}dAf{{Fd{c}}}}11{cc{}}00{{{Ll{ce}}{Fj{g}}{Fl{{Fj{g}}}}{Fn{{Fj{g}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}{}}{{{M`{ce}}{Md{c}}}dAf{{Fd{c}}}}``{{}Cf}00==={{}{{Ad{DnE`}}}}00{{{Mb{c}}}{{Kd{c}}}Af}``{{}}00`````{{{M`{ce}}{Ln{c}}}dAf{{Fd{c}}}}{{{Ll{ce}}{Ln{c}}{Fl{{Fj{{Fh{c}}}}}}}dAf{{Fd{c}}}}`{{{Ll{ce}}{Ln{c}}}AlAf{{Fd{c}}}}:``{{{Ll{ce}}{Fl{{Fj{{Fh{c}}}}}}}dAf{{Fd{c}}}}```{c{{Ad{e}}}{}{}}00000{cEf{}}00`{ce{}{}}00``00`{Cfc{}}0{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}{Cfd}{cc{}}{{{Mf{c}}}{{Al{{Gd{c{Gb{c}}}}}}}Af}{{{Mf{c}}{A`{Mh}}{Mj{{A`{Mh}}}}}dAf}{{{Mf{c}}{Ml{c}}}{{Kd{c}}}Af}`{{}Cf}8{{}{{Ad{DnE`}}}}{{{Mf{c}}{Mn{c}}}{{Kd{c}}}Af}{{{N`{c}}NbFjl}{{Mf{c}}}Af}{{}}````{{{Mf{c}}}{{Mn{c}}}Af}{{{Mf{c}}{L`{{Fj{{Fh{c}}}}}}}dAf}{{{Mf{c}}{Fn{{Fj{{Fh{c}}}}}}}{{Hl{d}}}Af}{c{{Ad{e}}}{}{}}0{cEf{}}{{{Mf{c}}}CdAf}{{{Ml{c}}}CdAf}{ce{}{}}`00{{{Nd{c}}}{{Fb{{F`{En}}}}}Af}{Cfc{}}0{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}{Cfd}`{cc{}}{{{Nd{c}}{Fj{{Fh{c}}}}}dAf}{{{Nd{c}}{Fj{e}}{Fl{{Fj{e}}}}{Fn{{Fj{e}}}}}{{Fb{{F`{En}}}}}Af{}}`{{}Cf}8{{}{{Ad{DnE`}}}}{{}}>>=:`````````{{{Nf{ceg}}j}{{G`{{Nh{c}}}}}Af{{Fd{c}}}Ff}`;;;;``{{{Nf{ceg}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff}``::::9988``77{{{Nf{ceg}}j}{{A`{{Jf{{n{c}}Cf}}}}}Af{{Fd{c}}}Ff}{{{Nf{ceg}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Al{Id}}}Af{{Fd{c}}}Ff}{{{Nf{ceg}}{Fj{i}}{Fl{{Fj{i}}}}{Fn{{Fj{i}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff{}}{{{Nf{ceg}}{Fl{{Fj{{Fh{c}}}}}}}{{Al{Id}}}Af{{Fd{c}}}Ff}00`88`{ce{}{}}0{{{Nf{ceg}}}{{G`{{Jf{j}}}}}Af{{Fd{c}}}Ff}{{{Nf{ceg}}Nj}{{G`{{Jf{j}}}}}Af{{Fd{c}}}Ff}::```{{{Nf{ceg}}Hf}{{Al{{Nl{c}}}}}Af{{Fd{c}}}Ff}`::``{{{Nf{ceg}}Nj}{{G`{{Nl{c}}}}}Af{{Fd{c}}}Ff}`{c{{Ad{e}}}{}{}}000{cEf{}}0`66{{{Nf{ceg}}}{{Al{{Nh{c}}}}}Af{{Fd{c}}}Ff}````77{{{Nn{ceg}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff}`{Cfc{}}0{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}{Cfd}{cc{}}{{{Nn{ceg}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Al{Id}}}Af{{Fd{c}}}Ff}{{{Nn{ceg}}{Fj{i}}{Fl{{Fj{i}}}}{Fn{{Fj{i}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}Ff{}}`{{}Cf}?{{}{{Ad{DnE`}}}}``{{}}```````````<<;`{{{Nn{ceg}}}CdAf{{Fd{c}}}Ff}`{ce{}{}}`00{{{O`{ce}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}}``;;:98{{{O`{ce}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Al{Id}}}Af{{Fd{c}}}}{{{O`{ce}}{Fj{g}}{Fl{{Fj{g}}}}{Fn{{Fj{g}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}{}}`736``5``{c{{Ad{e}}}{}{}}0{cEf{}}`5````````{{cb}d{}}`666666{{{Ob{ce}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}}{{{Od{ce}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}}{OfOf}{{ce}d{}{}}```{Cfc{}}00000{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}00{Cfd}00{{OfOf}Cd}{{ce}Cd{}{}}000``{{OfCn}D`}{cc{}}00{{ce}l{OhOj}Ol}{{{Ob{ce}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}dAf{{Fd{c}}}}{{{Od{ce}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Al{Id}}}Af{{Fd{c}}}}{{{Ob{ce}}{Fj{g}}{Fl{{Fj{g}}}}{Fn{{Fj{g}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}{}}{{{Od{ce}}{Fj{g}}{Fl{{Fj{g}}}}{Fn{{Fj{g}}}}}{{Fb{{F`{En}}}}}Af{{Fd{c}}}{}}{{Ofc}dOn}``{{}Cf}00{ce{}{}}00`{{}{{Ad{DnE`}}}}00```````{{OfOf}{{Al{A`}}}}{{}}00```````9``3{c{{Ad{e}}}{}{}}00000{cEf{}}00``555```````````{{{Ab{ceg}}e{Fl{{Fj{{Fh{c}}}}}}}{{Al{Id}}}Af{}{}}````````6666{{{Ad{c}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Al{{Ab{ceg}}}}}Af{AfAhDjDl}{{Al{}{{Aj{}}}}DbDjDl}}{Cfc{}}000{{ce}{{Ad{{Cj{gi}}}}}{}{}{}{}}0{Cfd}0{{{Fj{{Fh{c}}}}}CdAf}0000000{cc{}}0{{An{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Fb{{F`{En}}}}}Af}{{{Ab{c{Gj{c}}{AA`{c}}}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Fb{{F`{En}}}}}Af}{{{Ab{c{AAb{c}}{AAd{c}}}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Fb{{F`{En}}}}}Af}{{{Ab{c{AAf{c}}{AAh{c}}}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Fb{{F`{En}}}}}Af}{{{Ab{c{AAj{c}}{Hb{c}}}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Fb{{F`{En}}}}}Af}{{{Ab{c{AAl{c}}{AAn{c}}}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Fb{{F`{En}}}}}Af}{{{Ab{c{AB`{c}}{ABb{c}}}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Fb{{F`{En}}}}}Af}{{{Ab{c{Gh{c}}{ABd{c}}}}{Fj{{Fh{c}}}}{Fl{{Fj{{Fh{c}}}}}}}{{Fb{{F`{En}}}}}Af}`````````{{}Cf}0{ce{}{}}0{{}{{Ad{DnE`}}}}0{Ah}{e{{Fh{c}}}Af{{Al{c}{{Aj{}}}}}}`````````{{}}0`````````{c{{Ad{e}}}{}{}}000{cEf{}}0`````````66","c":[],"p":[[5,"Private",1254],[1,"unit"],[10,"Error",1255],[5,"BuilderClient",19],[8,"VidCommitment",1256],[1,"u64"],[5,"AvailableBlockInfo",1257],[5,"Vec",1258],[6,"BuilderClientError",19],[6,"Result",1259],[10,"NodeType",1260],[10,"StaticVersionType",1261],[5,"Backtrace",1262],[6,"Option",1263],[5,"NotFoundSnafu",19],[5,"ApiSnafu",19],[5,"String",1264],[10,"Into",1265],[5,"StaticVersion",1261],[5,"Bundle",1266],[5,"BuilderCommitment",1267],[5,"AvailableBlockData",1257],[5,"AvailableBlockHeaderInput",1257],[10,"Clone",1268],[5,"Duration",1269],[1,"bool"],[1,"usize"],[1,"str"],[5,"With",1270],[10,"Deserializer",1271],[5,"Formatter",1272],[8,"Result",1272],[10,"Debug",1272],[6,"Error",1273],[5,"IndentedSection",1274],[10,"Display",1272],[10,"Send",1275],[10,"Sync",1275],[5,"Layout",1276],[5,"LayoutError",1276],[5,"Url",1277],[10,"Serializer",1278],[5,"TypeId",1279],[8,"BuilderClient",128],[8,"BuilderClient",135],[5,"ConsensusTaskState",141],[10,"Future",1280],[5,"Box",1281],[5,"Pin",1282],[10,"NodeImplementation",1260],[10,"Versions",1260],[6,"HotShotEvent",298],[5,"Arc",1283],[5,"Sender",1284],[5,"Receiver",1284],[8,"Result",1285],[5,"VidDisperseShare",1286],[5,"Proposal",1287],[5,"Consensus2TaskState",192],[8,"QuorumVote",1288],[8,"TimeoutVote",1288],[5,"OuterConsensus",1289],[5,"CommitmentAndMetadata",1289],[5,"Leaf",1286],[8,"UpgradeCertificate",1290],[6,"ViewChangeEvidence",1286],[5,"Version",1261],[5,"QuorumProposal",1286],[5,"UpgradeLock",1287],[5,"JoinHandle",1291],[5,"RwLock",1292],[5,"VoteInfo",238],[5,"DaTaskState",265],[5,"HotShotTaskCompleted",298],[5,"ProposalMissing",298],[10,"PartialEq",1293],[5,"TestHarnessState",440],[17,"Event"],[10,"TaskState",1294],[5,"LeafChainTraversalOutcome",460],[10,"Default",1295],[10,"AnyhowTracing",460],[1,"tuple"],[1,"i64"],[5,"Event",1296],[5,"NetworkEventTaskState",497],[10,"ConnectedNetwork",1297],[10,"Storage",1298],[5,"NetworkMessageTaskState",497],[5,"Message",1287],[5,"VidDisperse",1286],[6,"HotShotAction",1296],[5,"QuorumProposalTaskState",552],[5,"AndDependency",1299],[6,"ProposalDependency",593],[5,"EventDependency",1299],[5,"ProposalDependencyHandle",593],[5,"QuorumProposalRecvTaskState",648],[5,"QuorumVoteTaskState",689],[6,"VoteDependency",689],[5,"VoteDependencyHandle",689],[5,"NetworkRequestState",777],[6,"RequestKind",1297],[5,"DelayedRequester",777],[5,"VidRequest",777],[6,"SequencingMessage",1287],[5,"NetworkResponseState",859],[1,"u8"],[5,"NetworkMsgResponseChannel",1300],[5,"DataRequest",1297],[6,"ResponseMessage",1297],[8,"LockedConsensusState",1289],[8,"RequestReceiver",1300],[5,"RewindTaskState",892],[5,"TransactionTaskState",913],[5,"BuilderResponse",913],[5,"Instant",1301],[5,"PackedBundle",1286],[5,"UpgradeTaskState",982],[5,"VidTaskState",1022],[5,"ViewSyncTaskState",1049],[5,"ViewSyncReplicaTaskState",1049],[6,"ViewSyncPhase",1049],[10,"Hash",1302],[10,"Sized",1275],[10,"BuildHasher",1302],[10,"Hasher",1302],[6,"Ordering",1293],[5,"VoteCollectionTaskState",1149],[5,"AccumulatorInfo",1149],[10,"Vote",1303],[10,"AggregatableVote",1149],[17,"Voteable"],[10,"Certificate",1303],[10,"HandleVoteEvent",1149],[8,"TimeoutCertificate",1290],[8,"ViewSyncFinalizeVote",1288],[8,"ViewSyncFinalizeCertificate2",1290],[8,"ViewSyncPreCommitVote",1288],[8,"ViewSyncPreCommitCertificate2",1290],[8,"UpgradeVote",1288],[8,"DaVote",1288],[8,"DaCertificate",1290],[8,"ViewSyncCommitVote",1288],[8,"ViewSyncCommitCertificate2",1290],[8,"QuorumCertificate",1290],[15,"Api",127],[8,"VoteCollectorOption",141],[8,"VoteCollectorOption",192],[8,"VoteCollectorOption",265],[8,"VoteCollectorOption",982],[8,"RelayMap",1049],[8,"QuorumVoteState",1149],[8,"DaVoteState",1149],[8,"TimeoutVoteState",1149],[8,"UpgradeVoteState",1149],[8,"ViewSyncPreCommitState",1149],[8,"ViewSyncCommitVoteState",1149],[8,"ViewSyncFinalizeVoteState",1149]],"b":[[71,"impl-Display-for-BuilderClientError"],[72,"impl-Debug-for-BuilderClientError"],[403,"impl-Display-for-HotShotEvent%3CTYPES%3E"],[404,"impl-Debug-for-HotShotEvent%3CTYPES%3E"],[1183,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E,+OneHonestThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E,+OneHonestThreshold%3E%3E"],[1184,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+TimeoutData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+TimeoutData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+TimeoutData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+TimeoutData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1185,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+UpgradeProposalData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+UpgradeProposalData%3CTYPES%3E,+UpgradeThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+UpgradeProposalData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+UpgradeProposalData%3CTYPES%3E,+UpgradeThreshold%3E%3E"],[1186,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncCommitData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncCommitData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1187,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1188,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+QuorumData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+QuorumData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+QuorumData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+QuorumData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1189,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+DaData%3E,+SimpleCertificate%3CTYPES,+DaData,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+DaData%3E,+SimpleCertificate%3CTYPES,+DaData,+SuccessThreshold%3E%3E"],[1193,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+TimeoutData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+TimeoutData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+TimeoutData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+TimeoutData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1194,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncFinalizeData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1195,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E,+OneHonestThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncPreCommitData%3CTYPES%3E,+OneHonestThreshold%3E%3E"],[1196,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+UpgradeProposalData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+UpgradeProposalData%3CTYPES%3E,+UpgradeThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+UpgradeProposalData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+UpgradeProposalData%3CTYPES%3E,+UpgradeThreshold%3E%3E"],[1197,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+DaData%3E,+SimpleCertificate%3CTYPES,+DaData,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+DaData%3E,+SimpleCertificate%3CTYPES,+DaData,+SuccessThreshold%3E%3E"],[1198,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncCommitData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+ViewSyncCommitData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+ViewSyncCommitData%3CTYPES%3E,+SuccessThreshold%3E%3E"],[1199,"impl-HandleVoteEvent%3CTYPES,+SimpleVote%3CTYPES,+QuorumData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+QuorumData%3CTYPES%3E,+SuccessThreshold%3E%3E-for-VoteCollectionTaskState%3CTYPES,+SimpleVote%3CTYPES,+QuorumData%3CTYPES%3E%3E,+SimpleCertificate%3CTYPES,+QuorumData%3CTYPES%3E,+SuccessThreshold%3E%3E"]]}],\
["hotshot_testing",{"doc":"Testing infrastructure for <code>HotShot</code>","t":"QCCCCCCQCQCCCCCCCCFKREEKNNNHNNNNNNNNONNNOONCHCMMNNNNNFFFNNOONNNNNNNNOONNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNONNNOOONONNNNNNNNNNNNNNNFFFFNNNNOONNNNNNNNNOONNONNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNOONNOONNNNNOOONNNNNNNNNNNNNNNNFGFFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNONNNNNNNNNNNFIIIIIIOOOOOOOOOOOONNNONNNNONNNNHNOOOOOONOOOOOOOHHHNNNNHNHHHHHHHHHHHHHHHPPPPFPFPFPFPFPFPFPFFGFFIPFGNNNNNNNNNNNONNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNNNOONOOOOONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOPPPKGNNNNNNNNNNNNNNMCNNNMNNNNNNNNCNIFFHHONNNNONNNNNNNNNNHNNNNONNOONNNNNNHONNOHHHHHHNNNNNNHHHHHNNIIFONNOOOOOOHNNNNNNONONONONNOHOOONOOOOOOOOOOOONNNOONFGPPFNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNOHHNNNOOONNNNNNNNNHHNNNFPPPPFFFFIPGNNNNNNONNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNNNNNNNNNNNNNOOONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNGGFPPPPFPFFPNNNNNOONNNNNNNNNNNNOOONNNNNNNNNNOHOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNOOOOOOOOONNNNNNNNNNNNNNNNNONNNNNNOOOONNNNNNIIFFONNNNOONNNNNNNNNNNNNNNNNOONONNOOONNNNNNNNPGFFFPKFPONNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNOONNNNNOOOOOOONNNNNNOONNNNNNNNNNNNNNNNNNNNRPPPGGFKNHNNNNNNMNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNONOONNNNNNNNNNNNNPPFGFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNONNNNNNNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNOOOOONNNNNNNNONNNNNNNNNNNOONNNNNNOOOONONNNNNNOOOOONNPPGPFGFFPNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["all_predicates","block_builder","completion_task","consistency_task","helpers","overall_safety_task","predicates","random","script","serial","spinning_task","test_builder","test_launcher","test_runner","test_task","txn_task","view_generator","view_sync_task","BlockEntry","BuilderTask","Config","RandomBuilderImplementation","SimpleBuilderImplementation","TestBuilderImplementation","__clone_box","borrow","borrow_mut","build_block","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","from","header_input","init","into","layout_raw","metadata","payload","pointer_metadata","random","run_builder_source","simple","start","start","to_owned","try_from","try_into","type_id","vzip","RandomBuilderImplementation","RandomBuilderSource","RandomBuilderTask","__clone_box","available_blocks","blocks","blocks","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_blocks","builder_address","change_sender","changes","claim_block","claim_block_header_input","clone","clone_into","config","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","from","from","from","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","new","num_storage_nodes","pointer_metadata","pointer_metadata","pointer_metadata","priv_key","pub_key","pub_key","read","should_fail_claims","start","start","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","SimpleBuilderImplementation","SimpleBuilderSource","SimpleBuilderTask","SubmittedTransaction","__clone_box","__clone_box","__clone_box","available_blocks","blocks","blocks","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder_address","change_sender","changes","claim_block","claim_block_header_input","claimed","clone","clone","clone","clone_into","clone_into","clone_into","create","decided_transactions","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","num_storage_nodes","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","priv_key","pub_key","read","run","should_fail_claims","should_fail_claims","start","start","to_owned","to_owned","to_owned","transaction","transactions","transactions","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CompletionTask","CompletionTaskDescription","CompletionTaskErr","CompletionTaskErrSnafu","TimeBasedCompletionTaskBuilder","TimeBasedCompletionTaskDescription","__clone_box","__clone_box","__clone_box","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","duration","duration","fail","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","handles","header","in_current_span","init","init","init","init","init","into","into","into","into","into","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","run","rx","source","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tx","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","wait_for_shutdown","ConsistencyTask","NetworkMap","NetworkMapSanitized","NodeMap","NodeMapSanitized","ViewMap","ViewMapSanitized","_marker","_marker","_marker","_marker","_marker","_marker","alloc","alloc","alloc","alloc","alloc","alloc","borrow","borrow_mut","check","consensus_leaves","deref","deref_mut","deserialize","drop","ensure_upgrade","from","handle_event","init","into","invert_network_map","layout_raw","length","length","length","length","length","length","pointer_metadata","root","root","root","root","root","root","safety_properties","sanitize_network_map","sanitize_node_map","sanitize_view_map","try_from","try_into","type_id","validate","validate_node_map","vzip","build_assembled_sig","build_cert","build_da_certificate","build_fake_view_with_leaf","build_fake_view_with_leaf_and_state","build_payload_commitment","build_system_handle","build_vid_proposal","build_vote","da_payload_commitment","key_pair_for_id","permute_input_with_index_order","vid_payload_commitment","vid_scheme_from_view_number","vid_share","Err","Failed","InProgress","InconsistentBlocks","InconsistentBlocksSnafu","InconsistentFailedViews","InconsistentFailedViewsSnafu","InconsistentStates","InconsistentStatesSnafu","InconsistentTxnsNum","InconsistentTxnsNumSnafu","MismatchedLeaf","MismatchedLeafSnafu","NotEnoughDecides","NotEnoughDecidesSnafu","NotEnoughFailures","NotEnoughFailuresSnafu","Ok","OverallSafetyPropertiesDescription","OverallSafetyTask","OverallSafetyTaskErr","RoundCtx","RoundResult","StateAndBlock","TooManyFailures","TooManyFailuresSnafu","ViewStatus","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","actual_failed_views","as_error","as_error_source","backtrace","block_map","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","build","build","cause","check","check_block","check_if_failed","check_leaf","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","ctx","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","error","expected","expected","expected_failed_views","expected_views_to_fail","fail","fail","fail","fail","fail","fail","fail","fail","failed_nodes","failed_views","failed_views","failed_views","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_leaves","got","handle_event","handle_view_failure","handles","header","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert_error_to_context","insert_into_result","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaf_map","map","num_failed_views","num_successful_views","num_txns_map","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","properties","round_results","source","status","success_nodes","successful_views","test_sender","threshold_calculator","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transaction_threshold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_status","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","actual_failed_views","expected","expected","expected_failed_views","failed_views","failed_views","got","map","Fail","Incomplete","Pass","Predicate","PredicateResult","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","evaluate","event","fmt","from","from","info","init","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upgrade_with_consensus","vzip","EventCallback","EventPredicate","TestPredicate","all","all_predicates","alloc","borrow","borrow","borrow_mut","borrow_mut","check","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","evaluate","evaluate","exact","fmt","fmt","from","from","function","info","info","info","info","init","init","into","into","layout_raw","layout_raw","leaf_decided","phantom","pointer_metadata","pointer_metadata","ptr","quorum_proposal_send","quorum_proposal_send_with_null_block","quorum_proposal_send_with_upgrade_certificate","quorum_proposal_validated","quorum_vote_send","timeout_vote_send","try_from","try_from","try_into","try_into","type_id","type_id","upgrade_certificate_formed","validated_state_updated","view_change","view_sync_precommit_vote_send","view_sync_timeout","vzip","vzip","ConsensusTaskTestState","UpgradeCertCallback","UpgradeCertPredicate","alloc","borrow","borrow_mut","check","consensus","cur_view","cur_view_time","current_proposal","da_membership","decided_upgrade_certificate","deref","deref_mut","deserialize","drop","evaluate","fmt","formed_upgrade_certificate","from","id","info","info","init","instance_state","into","layout_raw","network","no_decided_upgrade_certificate","output_event_stream","payload_commitment_and_metadata","phantom","pointer_metadata","private_key","proposal_cert","ptr","public_key","quorum_membership","round_start_delay","spawned_tasks","storage","timeout","timeout_membership","timeout_task","timeout_vote_collector","try_from","try_into","type_id","upgrade_lock","vote_collector","vzip","Expectations","InputOrder","Random","Serial","TaskScript","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","expectations","from","from","from","from_outputs","from_outputs_and_task_states","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","output_asserts","panic_extra_output_in_script","panic_missing_output_in_script","pointer_metadata","pointer_metadata","pointer_metadata","state","task_state_asserts","timeout","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate_output_or_panic_in_script","validate_task_state_or_panic_in_script","vzip","vzip","vzip","ChangeNode","Down","NetworkDown","NetworkUp","Restart","SpinningTask","SpinningTaskDescription","SpinningTaskErr","SpinningTaskErrSnafu","StateAndBlock","Up","UpDown","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error_source","async_delay_config","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","changes","check","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","fail","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","handle_event","handles","header","high_qc","idx","in_current_span","init","init","init","init","init","init","into","into","into","into","into","into","into_error","last_decided_leaf","late_start","latest_view","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","node_changes","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","source","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","updown","vzip","vzip","vzip","vzip","vzip","vzip","Behaviour","BuilderChange","BuilderDescription","Byzantine","ByzantineTwins","Down","FailClaims","FakeSolverApiDescription","Standard","TestDescription","TimingData","Up","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","async_delay_config","behaviour","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder_timeout","builders","changes","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","completion_task_description","create_test_handle","da_non_staked_committee_size","da_staked_committee_size","data_request_delay","default","default","default_more_nodes","default_multiple_rounds","default_stress","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","error_pct","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","gen_launcher","init","init","init","init","init","init","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","next_view_timeout","num_bootstrap_nodes","num_nodes_with_stake","num_nodes_without_stake","overall_safety_properties","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","round_start_delay","secondary_network_delay","skip_late","solver","spinning_properties","start_delay","start_nodes","timeout_ratio","timing_data","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","txn_description","type_id","type_id","type_id","type_id","type_id","type_id","unreliable_network","upgrade_view","view_sync_properties","view_sync_timeout","vzip","vzip","vzip","vzip","vzip","vzip","Generator","Network","ResourceGenerators","TestLauncher","alloc","borrow","borrow","borrow_mut","borrow_mut","channel_generator","config","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","launch","layout_raw","layout_raw","marketplace_config","metadata","modify_default_config","phantom","pointer_metadata","pointer_metadata","ptr","resource_generator","storage","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","InitializedContext","LateNodeContext","LateNodeContextParameters","LateStartNode","Node","Restart","TaskErr","TestRunner","UninitializedContext","_pd","add_node_with_config","add_node_with_config_and_channels","add_nodes","add_servers","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","config","context","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","from","from","from","from","from","handle","init","init","init","init","init","init_builders","into","into","into","into","into","late_start","launcher","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","marketplace_config","memberships","network","network","next_node_id","node_id","nodes","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","run_test","solver_server","storage","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Event","Fail","Pass","Shutdown","TestEvent","TestResult","TestTask","TestTaskState","__clone_box","add_network_message_test_task","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","from","from","from","handle_event","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","pointer_metadata","receivers","run","state","test_receiver","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","DistributionBased","RoundRobinTimeBased","TxnTask","TxnTaskDescription","TxnTaskErr","TxnTaskErrSnafu","__clone_box","__clone_box","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","duration","fail","fmt","fmt","fmt","fmt","from","from","from","from","handles","header","in_current_span","init","init","init","init","into","into","into","into","into_error","layout_raw","layout_raw","layout_raw","layout_raw","next_node_idx","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","run","shutdown_chan","source","submit_tx","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","TestView","TestViewGenerator","__clone_box","add_timeout","add_transactions","add_upgrade","add_view_sync_finalize","advance_view_number_by","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_da_vote","create_quorum_vote","create_upgrade_vote","current_view","da_certificate","da_membership","da_membership","da_proposal","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","formed_upgrade_certificate","from","from","generate","genesis","init","init","into","into","into_stream","layout_raw","layout_raw","leader_public_key","leaf","next_from_anscestor_view","next_view","next_view_from_ancestor","pointer_metadata","pointer_metadata","poll_next","quorum_membership","quorum_membership","quorum_proposal","timeout_cert_data","to_owned","transactions","try_from","try_from","try_into","try_into","type_id","type_id","upgrade_data","vid_disperse","vid_proposal","view_number","view_sync_finalize_data","vzip","vzip","Ignore","No","ShouldHitViewSync","Threshold","ViewSyncTask","ViewSyncTaskDescription","ViewSyncTaskErr","ViewSyncTaskErrSnafu","Yes","__clone_box","__clone_box","__clone_box","__clone_box","_pd","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","check","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fail","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","handle_event","header","hit_view_sync","hit_view_sync","hit_view_sync","in_current_span","init","init","init","init","init","into","into","into","into","into","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","source","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"hotshot_testing"],[18,"hotshot_testing::block_builder"],[53,"hotshot_testing::block_builder::random"],[126,"hotshot_testing::block_builder::simple"],[227,"hotshot_testing::completion_task"],[344,"hotshot_testing::consistency_task"],[401,"hotshot_testing::helpers"],[416,"hotshot_testing::overall_safety_task"],[784,"hotshot_testing::overall_safety_task::OverallSafetyTaskErr"],[792,"hotshot_testing::predicates"],[827,"hotshot_testing::predicates::event"],[888,"hotshot_testing::predicates::upgrade_with_consensus"],[940,"hotshot_testing::script"],[1001,"hotshot_testing::spinning_task"],[1149,"hotshot_testing::test_builder"],[1312,"hotshot_testing::test_launcher"],[1357,"hotshot_testing::test_runner"],[1462,"hotshot_testing::test_task"],[1528,"hotshot_testing::txn_task"],[1624,"hotshot_testing::view_generator"],[1693,"hotshot_testing::view_sync_task"],[1817,"dyn_clone::sealed"],[1818,"alloc::vec"],[1819,"hotshot_types::traits::node_implementation"],[1820,"core::clone"],[1821,"rkyv::with"],[1822,"core::result"],[1823,"core::fmt"],[1824,"core::fmt"],[1825,"core::alloc::layout"],[1826,"async_broadcast"],[1827,"core::marker"],[1828,"core::marker"],[1829,"alloc::boxed"],[1830,"futures_core::stream"],[1831,"std::collections::hash::map"],[1832,"core::future::future"],[1833,"core::pin"],[1834,"core::any"],[1835,"hotshot_types::vid"],[1836,"hotshot_orchestrator::config"],[1837,"hotshot_types::utils"],[1838,"lru"],[1839,"async_lock::rwlock"],[1840,"alloc::sync"],[1841,"hotshot_example_types::block_types"],[1842,"async_broadcast"],[1843,"core::ops::function"],[1844,"core::error"],[1845,"std::backtrace"],[1846,"core::option"],[1847,"color_eyre::section"],[1848,"core::fmt"],[1849,"hotshot_types::traits::node_implementation"],[1850,"anyhow"],[1851,"committable"],[1852,"core::cmp"],[1853,"core::hash"],[1854,"serde::ser"],[1855,"hotshot_types::signature_key"],[1856,"hotshot_types::vote"],[1857,"hotshot_types::data"],[1858,"hotshot_example_types::node_types"],[1859,"hotshot_types::simple_certificate"],[1860,"hotshot_types::data"],[1861,"hotshot::types::handle"],[1862,"hotshot_task_impls::events"],[1863,"hotshot_example_types::state_types"],[1864,"hotshot_example_types::auction_results_provider_types"],[1865,"hotshot_types::traits::node_implementation"],[1866,"hotshot_types::data"],[1867,"std::collections::hash::set"],[1868,"hotshot_types::error"],[1869,"hotshot_types::event"],[1870,"hotshot_types::simple_certificate"],[1871,"hotshot_types::traits::network"],[1872,"hotshot"],[1873,"hotshot_types"],[1874,"hotshot"],[1875,"hotshot_types::simple_vote"],[1876,"core::task::poll"]],"d":["","Test implementation of block builder","task that decides when things are complete","task that checks leaves received across all nodes from …","Helpers for initializing system context handle and …","task that’s consuming events and asserting safety","predicates to use in tests","","scripting harness for tests","","task to spin nodes up and down","builder","launcher","runner","the <code>TestTask</code> struct and associated trait/functions","task that’s submitting transactions to the stream","view generator for tests","task for checking if view sync got activated","Entry for a built block","","","","","","","","","Helper function to construct all builder data structures …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","Construct a tide disco app that mocks the builder API.","","","","","","","","","","A mock implementation of the builder data source. Builds …","","","","","Built blocks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create new <code>RandomBuilderSource</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Completion task state","Description for a completion task.","the idea here is to run as long as we want Completion Task …","SNAFU context selector for the <code>CompletionTaskErr</code> error","Time-based completion task.","Description for a time-based completion task.","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Duration of the task.","Duration of the task.","Consume the selector and return a <code>Result</code> with the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","handles to the nodes in the test","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Data availability task state","A map from node ids to <code>NodeMap</code>s; note that the latter may …","A map from node ids to <code>NodeMapSanitized</code>s; the latter has …","Map from views to leaves for a single node, allowing …","A sanitized map from views to leaves for a single node, …","","A view map, sanitized to have exactly one leaf per view.","","","","","","","","","","","","","","","","A map from node ids to (leaves keyed on view number)","","","","","whether we should have seen an upgrade certificate or not","Returns the argument unchanged.","Handles an event from one of multiple receivers.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","safety task requirements","Validate that each node has only produced one unique leaf …","Validate that the <code>NodeMap</code> only has a single leaf per view.","","","","","","For a NodeMapSanitized, we validate that each leaf extends …","","create signature","create certificate","","This function will create a fake <code>View</code> from a provided <code>Leaf</code>.","This function will create a fake <code>View</code> from a provided <code>Leaf</code> …","","create the <code>SystemContextHandle</code> from a node id","TODO: …","","","get the keypair for a node id","This function permutes the provided input vector <code>inputs</code>, …","","initialize VID","","safety violation","failure","in progress","mismatched blocks for a view","SNAFU context selector for the …","mismatched expected failed view vs actual failed view","SNAFU context selector for the …","mismatched states for a view","SNAFU context selector for the …","inconsistent txn nums","SNAFU context selector for the …","mismatched leaves for a view","SNAFU context selector for the …","not enough decides","SNAFU context selector for the …","not enough failures. this likely means there is an issue …","SNAFU context selector for the …","success","cross node safety properties","Data availability task state","possible errors","context for a round TODO eventually we want these to just …","Result of running a round of consensus","convenience type alias for state and block","too many failed  views","SNAFU context selector for the …","the status of a view","","","","","","","","","","","","","","","","block -&gt; # entries decided on that block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","whether or not to check the block","check if the test failed due to not enough nodes getting …","whether or not to check the leaf","","","","","","","","","","","","","","","","","","","","","","","ctx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","error","","","","pass in the views that we expect to fail","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Nodes that failed to commit this round","","","during the run view refactor","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generate leaves","","Handles an event from one of multiple receivers.","","handles","","","","","","","","","","","","","","","","","inserts an error into the context","insert into round result","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","NOTE: technically a map is not needed left one anyway for …","","num of total rounds allowed to fail","required number of successful views","number of transactions -&gt; number of nodes reporting that …","","","","","","","","","","","","","","","configure properties","results from previous rounds view number -&gt; round result","","whether or not the round succeeded (for a custom defn of …","Transactions that were submitted Nodes that committed this …","successful views","sender to test event channel","threshold calculator. Given number of live and total …","","","","","","","","","","","","","whether or not to check that we have threshold amounts of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","determines whether or not the round passes also do a …","","","","","","","","","","","","","","","","expected number of decides","","","vec of failed views","","actual number of decides","number of transactions -&gt; number of nodes reporting that …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reference to consensus. The replica will require a write …","View number this view is executing in.","Timestamp this view starts at.","The most recent proposal we have, will correspond to the …","Membership for DA committee Votes/certs","","","","","","","","The most recent upgrade certificate this node formed. …","Returns the argument unchanged.","The node’s id","","","","Immutable instance state","Calls <code>U::from(self)</code>.","","The underlying network","","Output events to application","The commitment to the current block payload and its …","","","Our Private Key","last View Sync Certificate or Timeout Certificate this …","","Our public key","Membership for Quorum Certs/votes","Round start delay from config, in milliseconds.","Spawned tasks related to a specific view, so we can cancel …","This node’s storage ref","View timeout from config.","Membership for Timeout votes/certs","timeout task handle","Current timeout vote collection task with its view","","","","Lock for a decided upgrade","Current Vote collection task, with it’s view.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The time to wait on the receiver for this script.","","","","","","","","","","","","","","","denotes a change in node state","spin the node down","spin the node’s network down","spin the node’s network up","restart the node","Spinning task state","description of the spinning task (used to build a spinning …","error for the spinning task","SNAFU context selector for the <code>SpinningTaskErr</code> error","convience type for state and block","spin the node up","Spin the node up or down","","","","","","","Add specified delay to async calls","","","","","","","","","","","","","","Consume the selector and return the associated error","","time based changes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","handle to the nodes","","Highest qc seen in the test for restarting nodes","the index of the node","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Last decided leaf that can be used as the anchor leaf to …","late start nodes","most recent view seen by spinning task","","","","","","","the changes in node status, time -&gt; changes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin the node or node’s network up or down","","","","","","","","Describes a possible change to builder status during test","Metadata describing builder behaviour during a test","","","","","","","metadata describing a test","data describing how a round should be timed.","","","","","","","Delay config if any to add delays to asynchronous calls","nodes with byzantine behaviour","","","","","","","","","","","","","The maximum amount of time a leader can wait to get a …","description of builders to run","view number -&gt; change to builder status","","","","","","","","","","","completion task","","Size of the non-staked DA committee for the test","Size of the staked DA committee for the test","time to wait until we request data associated with a …","","by default, just a single round","Default setting with 20 nodes and 8 views of successful …","the default metadata for multiple rounds","the default metadata for a stress test","","","","","","","","","","","","","","","","","","","","","","","","","The rate at which errors occur in the mock solver API","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","turn a description of a test (e.g. a <code>TestDescription</code>) into …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Base duration for next-view timeout, in milliseconds","number of bootstrap nodes (libp2p usage only)","Total number of staked nodes in the test","Total number of non-staked nodes in the test","overall safety property description","","","","","","","The delay a leader inserts before starting pre-commit, in …","Delay before sending through the secondary network in …","Whether to skip initializing nodes that will start late, …","description of the solver to run","spinning properties","Delay after init before starting consensus, in milliseconds","nodes available at start","The exponential backoff ration for the next-view timeout","timing data","","","","","","","","","","","","","","","","","","txns timing","","","","","","","unrelabile networking metadata","view in which to propose an upgrade","view sync check task","view sync timeout","","","","","","","Wrapper for a function that takes a <code>node_id</code> and returns an …","A type alias to help readability","generators for resources used by each node","test launcher","","","","","","generate channels","configuration used to generate each hotshot node","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","launch the test","","","generate a new marketplace config for each node","metadata used for tasks","Modifies the config used when generating nodes with <code>f</code>","","","","","generator for resources","generate new storage for each node","","","","","","","","","The system context that we’re passing directly to the …","The late node context dictates how we’re building a node …","This type combines all of the paramters needed to build …","A yet-to-be-started node that participates in tests","a node participating in a test","The node is to be restarted so we will build the context …","","The runner of a test network spin up and down nodes, …","The system context that we’re passing to the node when …","Phantom for N","add a specific node with a config","add a specific node with a config","Add nodes.","Add servers.","","","","","","","","","","","The config associted with this node.","Either the context to which we will use to launch HotShot …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The handle to the node’s internals","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","nodes with a late start","test launcher, contains a bunch of useful metadata and …","","","","","","The marketplace config for this node.","The memberships of this particular node.","The underlying network belonging to the node","The underlying network belonging to the node","the next node unique identifier","The node’s unique identifier","nodes in the test","","","","","","execute test","the solver server running in the test","The storage trait for Sequencer persistence.","","","","","","","","","","","","","","","","","","","","","Type of event sent and received by the task","the test task failed with an error","the test task passed","","","enum describing how the tasks completed","A basic task which loops waiting for events to come from …","Type for mutable task state that can be used as the state …","","Add the network task to handle messages and publish events.","","","","","","","Check the result of the test.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handles an event from one of multiple receivers.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new task","","","","Receives events that are broadcast from any task, …","Spawn the task loop, consuming self.  Will continue until …","The state of the task.  It is fed events from <code>event_sender</code> …","Receiver for test events, used for communication between …","","","","","","","","","","","","","","TODO","submit transactions in a round robin style using every …","state of task that decides when things are completed","build the transaction task","Data Availability task error","SNAFU context selector for the <code>TxnTaskErr</code> error","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","time to wait between txns","Consume the selector and return a <code>Result</code> with the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handles for all nodes.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Optional index of the next node.","","","","","","Receiver for the shutdown signal from the testing harness","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Advances to the next view by skipping the current view and …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Moves the generator to the next view by referencing an …","","","","","","","","","","","","","","","","","","","","","","","don’t care if the node should hit view sync","the node should not hit view sync","enum desecribing whether a node should hit view sync","(min, max) number nodes that may hit view sync, inclusive","<code>ViewSync</code> task state","Description for a view sync task.","<code>ViewSync</code> Task error","SNAFU context selector for the <code>ViewSyncTaskErr</code> error","the node should hit view sync","","","","","Phantom data for TYPES and I","","","","","","","","","","","","","","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","properties of task","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handles an event from one of multiple receivers.","","nodes that hit view sync","set of node ids that hit view sync","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,21,180,5,5,5,5,5,0,0,0,29,29,39,29,181,39,29,181,39,29,39,29,39,39,29,29,29,29,39,181,181,39,29,181,39,29,181,39,29,181,39,29,29,181,39,29,181,39,29,181,39,29,181,39,29,29,39,181,39,29,39,39,29,29,29,181,39,29,181,39,29,181,39,29,181,39,29,181,39,29,0,0,0,0,44,45,46,44,44,46,182,44,45,46,182,44,45,46,44,46,46,44,44,45,44,45,46,44,45,46,182,46,182,44,45,46,182,44,45,46,182,44,45,46,182,44,45,46,44,45,182,44,45,46,182,44,45,46,182,44,45,46,182,44,45,46,44,182,44,45,46,44,44,44,44,44,46,182,46,44,45,46,45,44,46,182,44,45,46,182,44,45,46,182,44,45,46,182,44,45,46,0,0,0,0,53,0,51,52,53,48,48,48,57,48,51,52,53,57,48,51,52,53,51,48,51,52,53,51,52,53,57,48,51,52,53,57,48,51,52,53,48,57,48,51,52,53,57,48,51,52,53,57,52,51,48,48,51,52,53,57,48,51,52,53,57,48,48,57,48,51,52,53,57,48,51,52,53,51,57,48,51,52,53,57,48,51,52,53,57,57,48,51,52,53,48,57,48,51,52,53,57,48,51,52,53,57,57,48,51,52,53,57,48,51,52,53,57,0,0,0,0,0,0,0,68,69,67,64,65,70,68,69,67,64,65,70,62,62,62,62,62,62,62,62,62,62,62,62,62,0,62,68,69,67,64,65,70,62,68,69,67,64,65,70,62,0,0,0,62,62,62,62,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,117,117,103,0,103,0,103,0,103,0,103,0,103,0,103,0,117,0,0,0,0,0,0,103,0,0,117,103,104,106,108,109,110,111,112,113,118,113,103,103,103,115,114,117,103,104,106,108,109,110,111,112,113,115,119,118,114,117,103,104,106,108,109,110,111,112,113,115,119,118,104,106,108,109,110,111,112,113,103,114,118,115,118,117,103,104,106,108,109,110,111,112,113,118,117,103,104,106,108,109,110,111,112,113,118,114,115,119,118,114,117,103,104,106,108,109,110,111,112,113,115,119,118,114,117,103,104,106,108,109,110,111,112,113,115,119,118,103,114,117,103,104,106,108,109,110,111,112,113,115,119,118,114,117,103,104,106,108,109,110,111,112,113,115,119,118,114,108,112,113,118,104,106,108,109,110,111,112,113,115,106,112,119,117,103,103,104,106,108,109,110,111,112,113,115,119,118,114,117,103,104,106,108,109,110,111,112,113,115,119,118,115,108,114,114,114,103,103,114,117,103,104,106,108,109,110,111,112,113,115,119,118,119,115,114,117,103,104,106,108,109,110,111,112,113,115,119,118,104,106,108,109,110,111,112,113,114,117,103,104,106,108,109,110,111,112,113,115,119,118,115,104,118,118,115,114,117,103,104,106,108,109,110,111,112,113,115,119,118,114,119,103,115,115,119,114,118,117,103,104,106,108,109,110,111,112,113,118,103,118,114,117,103,104,106,108,109,110,111,112,113,115,119,118,114,117,103,104,106,108,109,110,111,112,113,115,119,118,114,117,103,104,106,108,109,110,111,112,113,115,119,118,115,114,117,103,104,106,108,109,110,111,112,113,115,119,118,183,184,185,183,186,185,184,187,123,123,123,0,0,123,123,123,123,123,123,123,123,123,123,123,123,123,123,124,0,123,123,123,124,123,123,123,123,123,123,123,123,0,123,0,0,0,0,0,188,126,125,126,125,126,126,125,126,125,126,125,126,125,126,125,0,126,125,126,125,125,126,125,126,125,126,125,126,125,126,125,0,188,126,125,188,0,0,0,0,0,0,126,125,126,125,126,125,0,0,0,0,0,126,125,0,0,0,189,127,127,127,190,190,190,190,190,0,127,127,127,127,127,127,190,127,190,127,127,127,190,127,127,190,0,190,190,189,127,190,190,189,190,190,190,190,190,190,190,190,190,127,127,127,190,190,127,0,0,191,191,0,191,192,129,191,192,129,191,192,129,191,192,129,191,192,129,191,192,129,192,191,192,129,129,129,191,192,129,191,192,129,191,192,129,129,0,0,191,192,129,192,129,192,191,192,129,191,192,129,191,192,129,0,0,191,192,129,0,136,136,136,136,0,0,0,0,0,136,0,131,136,137,138,130,130,132,130,132,130,131,136,137,138,132,130,131,136,137,138,131,130,132,132,131,136,137,138,131,136,137,138,132,130,131,136,137,138,132,130,131,136,137,138,130,132,130,131,136,137,138,132,130,131,136,137,138,131,130,130,131,136,137,138,132,130,131,136,137,138,132,132,130,132,137,130,132,130,131,136,137,138,132,130,131,136,137,138,131,132,132,132,132,130,131,136,137,138,138,132,130,131,136,137,138,130,131,136,137,138,130,132,130,131,136,137,138,132,130,131,136,137,138,132,130,131,136,137,138,137,132,130,131,136,137,138,0,0,0,147,147,16,16,0,147,0,0,16,139,140,16,141,142,140,140,139,140,147,16,141,142,139,140,147,16,141,142,139,140,141,139,140,16,141,142,139,140,16,141,142,140,0,140,140,139,139,140,140,140,140,139,140,147,16,141,142,139,140,147,16,141,142,139,140,147,16,141,142,139,140,147,16,141,142,142,139,147,16,141,142,139,140,147,16,141,142,140,139,140,147,16,141,142,139,140,147,16,141,142,139,140,147,16,141,142,139,140,140,140,140,139,140,147,16,141,142,139,139,140,140,140,139,140,139,140,139,140,16,141,142,139,140,147,16,141,142,139,140,147,16,141,142,140,139,140,147,16,141,142,140,140,140,139,139,140,147,16,141,142,0,0,0,0,143,193,148,193,148,193,193,193,148,193,148,193,148,193,148,193,148,193,148,193,148,148,193,148,193,148,148,143,193,148,143,148,193,193,148,193,148,193,148,193,148,194,0,0,0,0,194,0,0,194,149,149,149,149,149,195,196,194,197,149,195,196,194,197,149,196,197,195,196,194,197,149,195,196,194,197,149,195,196,194,197,149,195,196,194,197,149,195,196,194,197,149,195,195,196,194,197,149,149,195,196,194,197,149,149,149,195,196,194,197,149,196,196,195,197,149,195,149,195,196,194,197,149,149,149,196,195,196,194,197,149,195,196,194,197,149,195,196,194,197,149,195,196,194,197,149,157,63,63,158,0,0,0,0,158,0,63,159,158,63,159,158,157,158,158,63,159,158,63,159,158,63,159,158,63,159,158,158,63,159,158,157,63,159,158,63,159,158,63,159,158,159,63,159,158,159,159,159,159,158,63,159,158,63,159,158,63,159,158,63,159,158,162,162,0,0,0,0,161,162,160,160,160,163,160,161,162,163,160,161,162,161,160,161,162,161,162,163,160,161,162,163,160,161,162,160,163,160,161,162,163,160,161,162,163,161,160,160,161,162,163,160,161,162,163,160,160,163,160,161,162,163,160,161,162,161,163,160,161,162,163,163,160,161,162,163,163,160,163,161,162,160,163,160,161,162,163,160,161,162,163,160,161,162,163,160,161,162,0,0,168,164,164,164,164,164,164,168,164,168,168,168,168,168,168,164,168,164,168,168,164,168,164,168,164,168,164,168,168,164,168,164,168,164,168,164,168,164,164,168,168,168,164,168,168,164,168,164,164,168,168,168,168,168,164,168,164,168,164,168,168,168,168,168,168,164,168,178,178,0,179,0,0,0,0,178,175,176,178,179,177,175,175,175,177,175,176,178,179,177,175,176,178,179,176,175,177,175,176,178,179,175,176,178,179,177,175,176,178,179,177,175,176,178,179,175,177,177,175,176,178,179,177,175,176,178,179,176,175,175,176,178,179,177,175,176,178,179,177,175,177,175,176,175,177,175,176,178,179,177,175,176,178,179,176,177,175,176,178,179,177,175,176,178,179,175,175,176,178,179,175,177,175,176,178,179,177,175,176,178,179,177,175,176,178,179,177,175,176,178,179],"f":"````````````````````````{{cb}d{}}{ce{}{}}0{{fh}{{j{c}}}l}{{{j{c}}}{{j{c}}}{nl}}{{ce}d{}{}}{hc{}}0{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}{hd}{{{j{c}}Ad}Af{Ahl}}{cc{}}`{{}h}9{{}{{Ab{AjAl}}}}``{{}}`{{An{Bb{B`}}c}d{nBdBfBh}}`{{{Bl{Bj}}{Bl{Bn}}}d}{{hAnc{Cb{C`B`}}}{{Cf{{Bl{Cd}}}}}{}}>{c{{Ab{e}}}{}{}}0{cCh{}}{ce{}{}}```{{cb}d{}}{{{Cj{c}}ClC`}{{Cf{{Bl{Cd}}}}}l}``222222{{Cnh{Df{{Dd{{Db{D`{j{c}}}}}}}}}d{{l{}{{Dh{Dj}}}}}}{{{Cj{c}}}{{Cf{{Bl{Cd}}}}}l}``{{{Cj{c}}D`C`}{{Cf{{Bl{Cd}}}}}l}0{{{Cj{c}}}{{Cj{c}}}{nl}}{{ce}d{}{}}`{{hCn{Cb{C`B`}}{Dl{B`}}}{{E`{{Dn{c}}{Cj{c}}}}}{{l{}{{Dh{Dj}}}}}}{hc{}}00000{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}00{hd}00{{{Cj{c}}Ad}Af{Ahl}}{cc{}}00{{}h}00>>>{{}{{Ab{AjAl}}}}00{{}{{Cj{c}}}{{l{}{{Dh{Dj}}}}}}`{{}}00```{{{Cj{c}}i}{{Cf{{Bl{Cd}}}}}l{}{}{Bd{Ef{e}{{Eb{{Ed{g}}}}}}}}`{{hAnCn{Cb{C`B`}}}{{Cf{{Bl{Cd}}}}}}{{{Bl{{Dn{c}}}}{Bl{Bn}}}d{{l{}{{Dh{Dj}}}}}}{ce{}{}}{c{{Ab{e}}}{}{}}00000{cCh{}}00222````{{cb}d{}}00{{{Eh{c}}ClC`}{{Cf{{Bl{Cd}}}}}l}``44444444{{{Eh{c}}}{{Cf{{Bl{Cd}}}}}l}``{{{Eh{c}}D`C`}{{Cf{{Bl{Cd}}}}}l}0`{{{Eh{c}}}{{Eh{c}}}{nl}}{{{Ej{c}}}{{Ej{c}}}{nl}}{{{El{c}}}{{El{c}}}{nl}}{{ce}d{}{}}00{{h{Cb{C`B`}}{Dl{B`}}}{{E`{{Eh{c}}{El{c}}}}}l}`{hc{}}0000000{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}000{hd}000{{{Eh{c}}Ad}Af{Ahl}}{{{Ej{c}}Ad}Af{Ahl}}{cc{}}000{{}h}000{ce{}{}}000{{}{{Ab{AjAl}}}}000`{{}}000``{{{Eh{c}}i}{{Cf{{Bl{Cd}}}}}l{}{}{Bd{Ef{e}{{Eb{{Ed{g}}}}}}}}{{{Eh{c}}An}dl}``{{hAnc{Cb{C`B`}}}{{Cf{{Bl{Cd}}}}}{}}{{{Bl{{El{c}}}}{Bl{Bn}}}dl}666```{c{{Ab{e}}}{}{}}0000000{cCh{}}0008888``````{{cb}d{}}00{cEn{}}0{F`{{Fd{Fb}}}};;;;;;;;;;{FfF`}{F`{{Fd{En}}}}{FfFf}{FhFh}{FjFj}{{ce}d{}{}}00{hc{}}000000000{F`Fl}{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}0000{hd}0000``{Ff{{Ab{cF`}}}{}}{{F`Ad}Af}0{{FfAd}Af}{{FhAd}Af}{{FjAd}Af}{cc{}}0000`{{ce}{{Fn{eg}}}{}{G`BdBf}{}}{c{}{}}{{}h}0000{ce{}{}}0000{{Ffc}F`{}}{{}{{Ab{AjAl}}}}0000{{}}0000{{{Gb{ceg}}}{{Gd{d}}}l{{Gf{c}}}Gh}`{F`{{Fd{En}}}}555{cGj{}}{c{{Ab{e}}}{}{}}000000000`{cCh{}}000088888{{{Gb{ceg}}}dl{{Gf{c}}}Gh}```````````````````99{{{Gl{c}}}Gnl}`{hc{}}0{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}{hd}`{cc{}}{{{Gl{c}}{E`{eh}}}{{Cf{{Bl{Cd}}}}}l{}}{{}h}{ce{}{}}{{{H`{c}}}{{Hd{{Hb{c}}}}}l}{{}{{Ab{AjAl}}}}``````{{}}```````{{{Hf{c}}}{{Hd{{H`{c}}}}}l}{{{Hh{c}}}{{Hd{{Hj{c}}}}}l}{{{Hb{c}}}{{Hd{{Hl{c}}}}}l}{c{{Ab{e}}}{}{}}0{cCh{}}{{{Gl{c}}}{{Hd{d}}}l}{{{Hj{c}}}{{Hd{d}}}l}:{c{}{HnnI`IbIdAh}}{cg{HnnI`IbIdAh}{{l{}{{If{Ih}}}}}{{Il{e}{{Ij{}}}}}}{{In{f{Dj}}}{{Jb{J`}}}}{{{Jd{J`}}}{{Jf{J`}}}}{{{Jd{J`}}Jh}{{Jf{J`}}}}{In}{C`{{E`{{Jj{ceg}}{Dl{{Df{{Jl{c}}}}}}{Bb{{Df{{Jl{c}}}}}}}}}{{l{}{{Jn{K`}}}}}{{Kj{c}{{Kb{{Kd{c}}}}{Kf{{Kh{c}}}}}}{Gf{c}}}Gh}{{In{f{Dj}}}{{E`{{Kn{J`{Kl{J`}}}}{f{{Kn{J`{L`{J`}}}}}}}}}}{{{Jj{J`LbLd}}{Lf{J`}}}{{Lh{J`}}}}{{{f{Dj}}}Cl}{C`{{E`{Ih}}}}{{{f{c}}{f{h}}}{{f{c}}}n}{{In{f{Dj}}}Cl}{{}Lj}{{{Ll{{Kn{c{L`{c}}}}}}}{{Kn{c{L`{c}}}}}l}```````````````````````````{{cb}d{}}0000000000`{cEn{}}0{{{Ln{c}}}{{Fd{Fb}}}l}`{ce{}{}}000000000000000000000000000{{{M`{c}}}{{Ln{e}}}{{Mb{{Cb{C`h}}}}}l}{{{Md{c}}}{{Ln{e}}}{{Mb{Mf}}}l}{{{Mh{ce}}}{{Ln{g}}}{{Mb{h}}}{{Mb{h}}}l}{Mj{{Ln{c}}}l}{Ml{{Ln{c}}}l}{Mn{{Ln{c}}}l}{{{N`{ce}}}{{Ln{g}}}{{Mb{h}}}{{Mb{Mf}}}l}{{{Nb{ce}}}{{Ln{g}}}{{Mb{Mf}}}{{Mb{Mf}}}l}{{{Ln{c}}}{{Fd{En}}}l}{{{Nd{ceg}}}Gnl{{Gf{c}}}Gh}`{{{Nf{c}}hh}Nhl}`{{{Nj{c}}}{{Nj{c}}}{nl}}{{{Ln{c}}}{{Ln{c}}}{nl}}{{{M`{c}}}{{M`{c}}}n}{{{Md{c}}}{{Md{c}}}n}{{{Mh{ce}}}{{Mh{ce}}}nn}{MjMj}{MlMl}{MnMn}{{{N`{ce}}}{{N`{ce}}}nn}{{{Nb{ce}}}{{Nb{ce}}}nn}{{{Nl{c}}}{{Nl{c}}}{nl}}{{ce}d{}{}}0000000000`{{}{{Nf{c}}}l}{{}{{Nn{c}}}l}{{}{{Nl{c}}}l}{hc{}}000000000000000000000000000{{{Ln{c}}}Fll}{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}0000000000000{hd}0000000000000`````{{{M`{c}}}{{Ab{e{Ln{g}}}}}{{Mb{{Cb{C`h}}}}}{}l}{{{Md{c}}}{{Ab{e{Ln{g}}}}}{{Mb{Mf}}}{}l}{{{Mh{ce}}}{{Ab{g{Ln{i}}}}}{{Mb{h}}}{{Mb{h}}}{}l}{Mj{{Ab{c{Ln{e}}}}}{}l}{Ml{{Ab{c{Ln{e}}}}}{}l}{Mn{{Ab{c{Ln{e}}}}}{}l}{{{N`{ce}}}{{Ab{g{Ln{i}}}}}{{Mb{h}}}{{Mb{Mf}}}{}l}{{{Nb{ce}}}{{Ab{g{Ln{i}}}}}{{Mb{Mf}}}{{Mb{Mf}}}{}l}````{{{Nj{c}}Ad}Af{Ahl}}{{{Ln{c}}Ad}Af{Ahl}}{{{Ln{c}}Ad}Afl}{{{M`{c}}Ad}AfAh}{{{Md{c}}Ad}AfAh}{{{Mh{ce}}Ad}AfAhAh}{{MjAd}Af}{{MlAd}Af}{{MnAd}Af}{{{N`{ce}}Ad}AfAhAh}{{{Nb{ce}}Ad}AfAhAh}{{{Nf{c}}Ad}Af{Ahl}}{{{Nn{c}}Ad}Af{Ahl}}{{{Nl{c}}Ad}Afl}{cc{}}0000000000000{{{Nf{c}}}{{Cb{{Jd{c}}h}}}l}`{{{Nd{ceg}}{E`{ih}}}{{Cf{{Bl{Cd}}}}}l{{Gf{c}}}Gh{}}{{{Nd{ceg}}h}dl{{Gf{c}}}Gh}`{{ce}{{Fn{eg}}}{}{G`BdBf}{}}{c{}{}}{{}h}0000000000000{{{Nn{c}}h{Df{{O`{c}}}}}dl}{{{Nf{c}}h{E`{{Ob{c}}{Od{c}}}}{Fd{C`}}}{{Fd{{Jd{c}}}}}l}{ce{}{}}0000000000000{{{M`{c}}e}{{Ln{g}}}{{Mb{{Cb{C`h}}}}}{}l}{{{Md{c}}e}{{Ln{g}}}{{Mb{Mf}}}{}l}{{{Mh{ce}}g}{{Ln{i}}}{{Mb{h}}}{{Mb{h}}}{}l}{{Mjc}{{Ln{e}}}{}l}{{Mlc}{{Ln{e}}}{}l}{{Mnc}{{Ln{e}}}{}l}{{{N`{ce}}g}{{Ln{i}}}{{Mb{h}}}{{Mb{Mf}}}{}l}{{{Nb{ce}}g}{{Ln{i}}}{{Mb{Mf}}}{{Mb{Mf}}}{}l}{{}{{Ab{AjAl}}}}0000000000000`````{{}}0000000000000``{{{Ln{c}}}{{Fd{En}}}l}`````;;;;;;;;;;;{cGj{}}`{c{{Ab{e}}}{}{}}000000000000000000000000000{cCh{}}0000000000000{{{Nf{c}}hh{Jd{c}}NhNhC`}dl}??????????????`````````````{{cb}d{}}{ce{}{}}0{OfOf}{{ce}d{}{}}{hc{}}0{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}{hd}{{OfOf}Nh}{{ce}Nh{}{}}000{{Ohc}{{Cf{{Bl{Cd}}}}}{}}`{{OfAd}Af}{NhOf}{cc{}}{Oh{{Cf{{Bl{Cd}}}}}}{{}h}={{}{{Ab{AjAl}}}}{{}}?{c{{Ab{e}}}{}{}}0{cCh{}}`{ce{}{}}```{{{f{{Jl{c}}}}}{{Bl{{Oj{{Df{{Jl{c}}}}}}}}}l}{{{f{{Bl{{Ol{c}}}}}}}{{Bl{{Oj{{Df{{Jl{c}}}}}}}}}l}`2222`{hc{}}000{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}0{hd}0{{{Ol{c}}{Df{{Jl{c}}}}}{{Cf{{Bl{Cd}}}}}{lBdBf}}{{{Oj{c}}c}{{Cf{{Bl{Cd}}}}}{BdBf}}{{{Jl{c}}}{{Bl{{Ol{c}}}}}l}{{{Ol{c}}Ad}Afl}{{{Oj{c}}Ad}Af{}}{cc{}}0`{{{Ol{c}}}{{Cf{{Bl{Cd}}}}}{lBdBf}}{{{Oj{c}}}{{Cf{{Bl{Cd}}}}}{BdBf}}``{{}h}0>>{{}{{Ab{AjAl}}}}0{{}{{Bl{{Ol{c}}}}}l}`{{}}0`1{h{{Bl{{Ol{c}}}}}l}2222{c{{Ab{e}}}{}{}}000{cCh{}}044444{ce{}{}}0````00``````{{}{{Bl{On}}}}{hc{}}0{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}{hd}{{On{A`{J`LbLd}}}{{Cf{{Bl{Cd}}}}}}{{OnAd}Af}`{cc{}}`{On{{Cf{{Bl{Cd}}}}}}`?`8>`7```<````````````::9``8`````888888666666555444`111{{{f{{Bl{Oh}}}}}{{Ab{ce}}}l{}}{{{f{{Bl{Oh}}}}{f{{Bl{Oh}}}}}{{Ab{ce}}}l{}}{{}h}00;;;{{}{{Ab{AjAl}}}}00`{{hGjc}dAh}0{{}}00```{c{{Ab{e}}}{}{}}00000{cCh{}}00{{hGjcOh}OfAh}{{hGjcOh}d{}}{ce{}{}}00````````````{{cb}d{}}000{cEn{}}0`{Ad{{Fd{Fb}}}}333333333333{AfAd}{Ad{{Fd{En}}}}`{{{Ah{cgi}}}Gn{{l{}{{Jn{K`}}{Aj{Jh}}}}}Al{{Gf{c}}{Kj{c}{{An{e}}{Kb{{Kd{c}}}}{Kf{{Kh{c}}}}}}}Gh}{AfAf}{AA`AA`}{AAbAAb}{AAdAAd}{{ce}d{}{}}000{hc{}}00000000000{AdFl}{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}00000{hd}00000{Af{{Ab{cAd}}}{}}{{AdAd}Af}0{{AfAd}Af}{{AA`Ad}Af}{{AAbAd}Af}{{AAdAd}Af}{cc{}}00000{{{Ah{cgi}}{E`{kh}}}{{Cf{{Bl{Cd}}}}}{{l{}{{Jn{K`}}{Aj{Jh}}}}}Al{{Gf{c}}{Kj{c}{{An{e}}{Kb{{Kd{c}}}}{Kf{{Kh{c}}}}}}}Gh{}}`{{ce}{{Fn{eg}}}{}{G`BdBf}{}}``{c{}{}}{{}h}00000{ce{}{}}00000{{Afc}Ad{}}```{{}{{Ab{AjAl}}}}00000`{{}}00000{Ad{{Fd{En}}}}4444{cGj{}}{c{{Ab{e}}}{}{}}00000000000{cCh{}}00000`777777````````````{{cb}d{}}0000``888888888888```{AAfAAf}{{{AAh{ceg}}}{{AAh{ceg}}}{nl}{n{Kj{c}}}{nGh}}{B`B`}{AAjAAj}{AAlAAl}{{ce}d{}{}}0000`{{{AAh{ceg}}C`{AAn{ce}}{AB`{c}}ABb{ABd{ce}}}{{Jj{ceg}}}{{l{}{{Jn{K`}}}}}{{Kj{c}}}Gh}```{{}AAf}{{}{{AAh{ceg}}}l{{Kj{c}}}Gh}000{hc{}}00000000000{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}00000{hd}00000`{{AAfAd}Af}{{{ABf{ceg}}Ad}Af{Ahl}{Ah{Kj{c}}}{AhGh}}{{B`Ad}Af}{{AAjAd}Af}{{AAlAd}Af}{cc{}}00000{{{AAh{ceg}}C`}{{ABh{ceg}}}{{l{}{{Jn{K`}}}}}{{Kj{c}{{Kf{{Kh{c}}}}}}{Gf{c}}}Gh}{{}h}00000{ce{}{}}00000{{}{{Ab{AjAl}}}}00000`````{{}}00000`````````22222{c{{Ab{e}}}{}{}}00000000000`{cCh{}}00000````444444`````4444``????>>==775544{{{ABh{ceg}}}{{ABj{cegi}}}l{{Gf{c}}}GhAl}44``{{{ABh{ceg}}i}{{ABh{ceg}}}l{{Gf{c}}}Gh{{ABl{ABb}}}}`44```33332266``````````{{C`{AAn{cg}}{AB`{c}}{ABn{c}}ABbAC`{ABd{cg}}}{{Df{{ACb{cgi}}}}}{{l{}{{Jn{K`}}{Aj{Jh}}}}}Al{{Gf{c}}{Kj{c}{{An{e}}{Kb{{Kd{c}}}}{Kf{{Kh{c}}}}}}}Gh}{{C`{AAn{cg}}{AB`{c}}{ABn{c}}ABbAC`{ABd{cg}}{E`{{Dl{{Df{{Jl{c}}}}}}{Bb{{Df{{Jl{c}}}}}}}}{E`{{Dl{{ACd{c}}}}{Bb{{ACd{c}}}}}}}{{Df{{ACb{cgi}}}}}{{l{}{{Jn{K`}}{Aj{Jh}}}}}Al{{Gf{c}}{Kj{c}{{An{e}}{Kb{{Kd{c}}}}{Kf{{Kh{c}}}}}}}Gh}{{{ABj{cgie}}h{Mf{C`}}{Mf{C`}}}{{f{C`}}}{{l{}{{Jn{K`}}{Aj{Jh}}}}}Al{{Gf{c}}{Kj{c}{{An{e}}{Kb{{Kd{c}}}}{Kf{{Kh{c}}}}}}}Gh}{{{ABj{cgie}}{f{An}}}d{{l{}{{Jn{K`}}{Aj{Jh}}}}}Al{{Gf{c}}{Kj{c}{{An{e}}{Kb{{Kd{c}}}}{Kf{{Kh{c}}}}}}}Gh}::::::::::``{hc{}}000000000{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}0000{hd}0000{cc{}}0000`?????{{{ABj{cgie}}}{{E`{{f{{Bl{Bj}}}}{f{An}}}}}{{l{}{{Jn{K`}}{Aj{Jh}}}}}Al{{Gf{c}}{Kj{c}{{An{e}}{Kb{{Kd{c}}}}{Kf{{Kh{c}}}}}}}Gh}?????``>>>>>```````====={{{ABj{cgie}}}d{{l{}{{Jn{K`}}{Aj{Jh}}}}}Al{{Gf{c}}{Kj{c}{{An{e}}{Kb{{Kd{c}}}}{Kf{{Kh{c}}}}}}}Gh}``==========<<<<<{ce{}{}}0000````````{{cb}d{}}{{{Dl{{Df{{Jl{c}}}}}}{Dl{{ACd{c}}}}{ACf{ce}}{Df{g}}}{{Gd{d}}}lGhAl}222222{{{ACj{}{{ACh{c}}}}}Gn{nBdBf}}{AClACl}{{ce}d{}{}};;;;;;:::999{{AClAd}Af}999{{{ACj{}{{ACh{c}}}}{E`{ch}}}{{Cf{{Bl{Cd}}}}}{nBdBf}}{{}h}00888{{}{{Ab{AjAl}}}}00{{c{f{Bb}}{Bb{ACl}}}{{ACn{c}}}{ACjBd}}{{}}00`{{{ACn{c}}}{{Gd{Gn}}}{ACjBd}}``<{c{{Ab{e}}}{}{}}00000{cCh{}}00>>>``````=={cEn{}}0{AD`{{Fd{Fb}}}}{ce{}{}}0000000{ADbAD`}{AD`{{Fd{En}}}}{ADbADb}{ADdADd}{{ce}d{}{}}0{hc{}}0000000{AD`Fl}{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}000{hd}000`{ADb{{Ab{cAD`}}}{}}{{AD`Ad}Af}0{{ADbAd}Af}{{ADdAd}Af}{cc{}}000`{{ce}{{Fn{eg}}}{}{G`BdBf}{}}{c{}{}}{{}h}000{ce{}{}}000{{ADbc}AD`{}}{{}{{Ab{AjAl}}}}000`{{}}000{{{ADf{ceg}}}{{Gd{d}}}l{{Gf{c}}}Gh}`{AD`{{Fd{En}}}}{{{ADf{ceg}}}dl{{Gf{c}}}Gh}66{cGj{}}{c{{Ab{e}}}{}{}}0000000{cCh{}}0009999``{{cb}d{}}{{ADh{ADj{J`}}}d}{{ADh{f{Dj}}}d}{{ADh{ADl{J`}}}d}{{ADh{ADn{J`}}}d}{{ADhC`}d}????{AE`AE`}{{ce}d{}{}}{{AE`AEb{Jj{J`LbLd}}}{{AEd{J`}}}}{{AE`{Jj{J`LbLd}}}{{AEf{J`}}}}{{AE`{ADl{J`}}{Jj{J`LbLd}}}{{AEh{J`}}}}`````{hc{}}000{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}0{hd}0`{cc{}}0{{}ADh}{{}AE`}{{}h}0{ce{}{}}00{{}{{Ab{AjAl}}}}0``{{ADhAE`}d}>{{AE`AE`}AE`}{{}}0{{{Cf{ADh}}AEj}{{AEl{{Fd{c}}}}}{}}````5`{c{{Ab{e}}}{}{}}000{cCh{}}0`````77`````````{{cb}d{}}000`{cEn{}}0{AEn{{Fd{Fb}}}}::::::::::{{{AF`{c}}}AEn{{Mb{{Mf{h}}}}}}{AEn{{Fd{En}}}}{{{AFb{ce}}}Gnl{{Gf{c}}}}{AEnAEn}{{{AF`{c}}}{{AF`{c}}}n}{AFdAFd}{AFfAFf}{{ce}d{}{}}000{hc{}}000000000{AEnFl}`{{ce}{{Ab{{A`{gi}}}}}{}{}{}{}}0000{hd}0000{{{AF`{c}}}{{Ab{eAEn}}}{{Mb{{Mf{h}}}}}{}}{{AEnAd}Af}0{{{AF`{c}}Ad}AfAh}{{AFdAd}Af}{{AFfAd}Af}{cc{}}0000{{{AFb{ce}}{E`{gh}}}{{Cf{{Bl{Cd}}}}}l{{Gf{c}}}{}}{{ce}{{Fn{eg}}}{}{G`BdBf}{}}```{c{}{}}{{}h}0000{ce{}{}}0000{{{AF`{c}}e}AEn{{Mb{{Mf{h}}}}}{}}{{}{{Ab{AjAl}}}}0000{{}}0000{AEn{{Fd{En}}}}4444{cGj{}}{c{{Ab{e}}}{}{}}000000000{cCh{}}000077777","c":[],"p":[[5,"Private",1817],[1,"unit"],[5,"Vec",1818],[1,"usize"],[5,"BlockEntry",18],[10,"NodeType",1819],[10,"Clone",1820],[5,"With",1821],[6,"Result",1822],[5,"Formatter",1823],[8,"Result",1823],[10,"Debug",1823],[5,"Layout",1824],[5,"LayoutError",1824],[5,"Url",1825],[6,"BuilderChange",1149],[5,"Receiver",1826],[10,"Send",1827],[10,"Sync",1827],[10,"ReadState",1828],[10,"BuilderTask",18],[5,"Box",1829],[10,"Stream",1830],[1,"u64"],[5,"HashMap",1831],[10,"Future",1832],[5,"Pin",1833],[5,"TypeId",1834],[5,"RandomBuilderSource",53],[8,"VidCommitment",1835],[5,"RandomBuilderConfig",1836],[5,"BuilderCommitment",1837],[5,"LruCache",1838],[5,"RwLock",1839],[5,"Arc",1840],[17,"Transaction"],[5,"TestTransaction",1841],[5,"Sender",1826],[5,"RandomBuilderTask",53],[1,"tuple"],[17,"Output"],[8,"BoxFuture",1842],[10,"FnOnce",1843],[5,"SimpleBuilderSource",126],[5,"SubmittedTransaction",126],[5,"SimpleBuilderTask",126],[10,"Error",1844],[5,"CompletionTaskErr",227],[5,"Backtrace",1845],[6,"Option",1846],[5,"CompletionTaskErrSnafu",227],[5,"TimeBasedCompletionTaskDescription",227],[6,"CompletionTaskDescription",227],[1,"str"],[5,"IndentedSection",1847],[10,"Display",1823],[5,"CompletionTask",227],[5,"JoinHandle",1848],[10,"TestableNodeImplementation",1819],[10,"Versions",1819],[5,"String",1849],[5,"ConsistencyTask",344],[6,"TestResult",1462],[8,"NetworkMapSanitized",344],[8,"ViewMap",344],[8,"Result",1850],[8,"NetworkMap",344],[8,"NodeMap",344],[8,"NodeMapSanitized",344],[8,"ViewMapSanitized",344],[10,"Committable",1851],[10,"Eq",1852],[10,"Hash",1853],[10,"Serialize",1854],[17,"SignatureKey"],[8,"BLSPubKey",1855],[17,"Voteable"],[10,"Certificate",1856],[5,"ViewNumber",1857],[5,"TestTypes",1858],[8,"DaCertificate",1859],[5,"Leaf",1857],[5,"View",1837],[5,"TestValidatedState",1860],[5,"SystemContextHandle",1861],[6,"HotShotEvent",1862],[17,"InstanceState"],[5,"TestInstanceState",1860],[17,"Storage"],[5,"TestStorage",1863],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",1864],[10,"NodeImplementation",1819],[5,"VidDisperse",1857],[5,"Proposal",1865],[5,"VidDisperseShare",1857],[5,"MemoryImpl",1858],[5,"TestVersions",1858],[5,"QuorumProposal",1857],[6,"GeneralConsensusMessage",1865],[5,"VidSchemeType",1835],[1,"slice"],[6,"OverallSafetyTaskErr",416],[5,"InconsistentTxnsNumSnafu",416],[10,"Into",1866],[5,"TooManyFailuresSnafu",416],[5,"HashSet",1867],[5,"NotEnoughDecidesSnafu",416],[5,"MismatchedLeafSnafu",416],[5,"InconsistentStatesSnafu",416],[5,"InconsistentBlocksSnafu",416],[5,"NotEnoughFailuresSnafu",416],[5,"InconsistentFailedViewsSnafu",416],[5,"OverallSafetyTask",416],[5,"RoundResult",416],[1,"bool"],[6,"ViewStatus",416],[5,"OverallSafetyPropertiesDescription",416],[5,"RoundCtx",416],[6,"HotShotError",1868],[8,"LeafChain",1869],[8,"QuorumCertificate",1859],[6,"PredicateResult",792],[10,"Predicate",792],[5,"TestPredicate",827],[5,"EventPredicate",827],[5,"UpgradeCertPredicate",888],[5,"ConsensusTaskState",1870],[5,"Expectations",940],[5,"SpinningTaskErr",1001],[5,"SpinningTaskErrSnafu",1001],[5,"SpinningTask",1001],[17,"ValidatedState"],[10,"ConnectedNetwork",1871],[17,"Network"],[6,"UpDown",1001],[5,"ChangeNode",1001],[5,"SpinningTaskDescription",1001],[5,"TimingData",1149],[5,"TestDescription",1149],[5,"BuilderDescription",1149],[5,"FakeSolverApiDescription",1149],[8,"Network",1312],[5,"Memberships",1872],[5,"HotShotConfig",1873],[5,"MarketplaceConfig",1872],[6,"Behaviour",1149],[5,"TestLauncher",1312],[5,"TestRunner",1357],[10,"FnMut",1843],[5,"HotShotInitializer",1872],[5,"ValidatorConfig",1873],[5,"SystemContext",1872],[5,"Event",1869],[5,"UpgradeLock",1865],[17,"Event"],[10,"TestTaskState",1462],[6,"TestEvent",1462],[5,"TestTask",1462],[5,"TxnTaskErr",1528],[5,"TxnTaskErrSnafu",1528],[6,"TxnTaskDescription",1528],[5,"TxnTask",1528],[5,"TestViewGenerator",1624],[5,"TimeoutData",1874],[5,"UpgradeProposalData",1874],[5,"ViewSyncFinalizeData",1874],[5,"TestView",1624],[5,"DaData",1874],[8,"DaVote",1874],[8,"QuorumVote",1874],[8,"UpgradeVote",1874],[5,"Context",1875],[6,"Poll",1876],[5,"ViewSyncTaskErr",1693],[5,"ViewSyncTaskErrSnafu",1693],[5,"ViewSyncTask",1693],[6,"ShouldHitViewSync",1693],[6,"ViewSyncTaskDescription",1693],[10,"TestBuilderImplementation",18],[5,"RandomBuilderImplementation",53],[5,"SimpleBuilderImplementation",126],[15,"InconsistentFailedViews",784],[15,"NotEnoughDecides",784],[15,"NotEnoughFailures",784],[15,"TooManyFailures",784],[15,"InconsistentTxnsNum",784],[8,"EventCallback",827],[8,"UpgradeCertCallback",888],[8,"ConsensusTaskTestState",888],[6,"InputOrder",940],[5,"TaskScript",940],[5,"ResourceGenerators",1312],[6,"LateNodeContext",1357],[5,"Node",1357],[5,"LateNodeContextParameters",1357],[5,"LateStartNode",1357]],"b":[[281,"impl-Debug-for-CompletionTaskErr"],[282,"impl-Display-for-CompletionTaskErr"],[601,"impl-Debug-for-OverallSafetyTaskErr%3CTYPES%3E"],[602,"impl-Display-for-OverallSafetyTaskErr%3CTYPES%3E"],[1071,"impl-Debug-for-SpinningTaskErr"],[1072,"impl-Display-for-SpinningTaskErr"],[1572,"impl-Display-for-TxnTaskErr"],[1573,"impl-Debug-for-TxnTaskErr"],[1754,"impl-Display-for-ViewSyncTaskErr"],[1755,"impl-Debug-for-ViewSyncTaskErr"]]}],\
["hotshot_types",{"doc":"Types and Traits for the <code>HotShot</code> consensus module","t":"IPGFPFFSNNNNHNNNNNNNNHOOCNNNNNNNNCCOOCONNNNNNNNNNNNNNNNNNNNNNNNNNNCCOONNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNCCOOOOONNNNONOCCONNNNNCCCCOOOOOOOOOOOOOOONNNNNNNCNNNNNNNNNNNNCCOCNNNNFNNNNNNNNNNNNNNNNONONONNNNFIFFFFFIFIEESNNNNOOOOOONNNNNNNNNNNNNNONNNNNNNNNNONOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNONNNNNNNONNNNNNNOONOONOONNNNNNNOOOONOOONNNNNNOOOOOOOONNNNNNNONONONONONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNNNNNNNNSSSSSSSSSSSSSSSSGFPFPFPFFRFFKPFFFGFPSSSSNNNNNNNNNNNNNNNNONNNOONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNOONNCNONNOONNNNNNNNNNNNNOHOONNNNNNNNNHNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNOOOOOOONNNNNNNNNNNNNFONNHHNNNNNNNNNHHNNNNNPFPFPFPFPFGPFPFPPPPPPFPFPFPPPPGPPFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNOOOOOOOOOOOPPPPPPFGPGIFPPPPPPPPPPPNNNNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNNNNNNNCONNNNNNNNNNNNNNNNNNNNOONNNNNNNNNONNNNNNNNNNNNNNNNOONNNNOOOOOOOOOOOOOOHHIFFIIOFIIFIFINNNNNONNNNNOONOONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNONNNNNNNNOONNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNPPPPGPPPPGPPPPGPPPPFGGFFPPPPGPPFPPPPPPPPPPPPPPPPNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNFFIFINNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNONNNONNONNNNNNNNNNNNNNIIIINNNNNNNNNNNNNNNNIFIFFKIIFIIINNNNOOOOOOOONNNNNNNNNNNNNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOONNMNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOONNNNFIFIFFIFIFFIFIFIKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOONNNNNNNNNOOOOOOCNNNNNNNNNNOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOHNOOOOOOOONNNNNNNNNKFNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNEEECCCCCCCCCCCCKMKKFKRRSRRKKRRNMNNMMNNNNNNNMMNNNNNOOONNMMMMMNNNNNMMMNMNHNNNMNNMNHNKMMMMMGPFKPFNNNNNNNNNNNNNNNNNNMMMNNNNNNNNNNNNNNNMNNNNNNNMNNNNNNNNNNNNNMMNNNNMMMNNNMNNNNNNNNNMNNNMKKKKKKKKFKNMNMNNNNNNMNMNNNNMNMNMNMNNNNNNNNMNMNNNNNMNMNMNNNNNMNNIFPGPGFPFFKPFPPPFPPPFPFPFPFPPKPPFFPGFPFGGKKPFPFPFPPPPPFPFFFPPGFGGPFPFFKPFGGPFPFPPKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNONNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNMOOONMNNNNNNNNNNNNNNNNNNNNMONNNNONOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOOOOOOORRRRRRKKRRRRKKRRKRRTRRKMMNMMMMMMRRRRKRMMNMRRKRRRRRRKRKHHMMMMMMMMMMMNMNNMMMMNMNNRRPRPPPPRRPPRPPPPGPGKPNNNNNNNNNMMNNNNMNNNNNNNNNNNNNNNNMMMMNNMMNMNNNNMNNMNNRRRKKKRKMMMMMKMMMMMMFPPPPPIFIIGFGNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNOOOOIIIFFFIIIFINNOONNNNNNNNOONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNONNOHNNNNNNNNNNNNNNNHHONNNNKRKIRKFIRNOONNMMMMMNNNNNNNMNONMOMMNNNMON","n":["BoxSyncFuture","Continuous","ExecutionType","HotShotConfig","Incremental","PeerConfig","ValidatorConfig","_DERIVE_core_fmt_Debug_FOR_HotShotConfig","__clone_box","__clone_box","__clone_box","__clone_box","assert_future","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed_sync","builder_timeout","builder_urls","bundle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","consensus","constants","da_non_staked_committee_size","da_staked_committee_size","data","data_request_delay","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","error","event","execution_type","fixed_leader_for_gpuvid","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bytes","generated_from_seed_indexed","get_hash","hash","header","header","init","init","init","init","into","into","into","into","is_da","known_da_nodes","known_nodes_with_stake","known_nodes_without_stake","layout_raw","layout_raw","layout_raw","layout_raw","light_client","message","my_own_validator_config","next_view_timeout","num_bootstrap","num_nodes_with_stake","num_nodes_without_stake","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","private_key","public_config","public_key","qc","request_response","round_start_delay","serialize","serialize","serialize","serialize","set_view_upgrade","signature_key","simple_certificate","simple_vote","stake_table","stake_table_entry","stake_value","start_delay","start_proposing_time","start_proposing_view","start_threshold","start_voting_time","start_voting_view","state_key_pair","state_ver_key","stop_proposing_time","stop_proposing_view","stop_voting_time","stop_voting_view","timeout_ratio","to_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","traits","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","utils","vid","view_sync_timeout","vote","vzip","vzip","vzip","vzip","Bundle","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","fmt","from","init","into","layout_raw","pointer_metadata","sequencing_fee","serialize","signature","to_owned","transactions","try_from","try_into","type_id","vzip","CommitmentAndMetadata","CommitmentMap","Consensus","ConsensusMetricsValue","ConsensusReadLockGuard","ConsensusUpgradableReadLockGuard","ConsensusWriteLockGuard","LockedConsensusState","OuterConsensus","VidShares","View","ViewInner","_DERIVE_core_fmt_Debug_FOR_Consensus","__clone_box","__clone_box","__clone_box","__clone_box","_marker","alloc","alloc","auction_result","base","block_view","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder_commitment","calculate_and_update_vid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","collect_garbage","commitment","cur_view","cur_view","current_view","decided_leaf","decided_state","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fees","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_hash","hash","high_qc","high_qc","init","init","init","init","init","init","init","inner_consensus","into","into","into","into","into","into","into","invalid_qc","last_decided_time","last_decided_view","last_decided_view","last_decided_view","last_proposals","last_proposals","last_synced_block_height","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","length","lock_guard","lock_guard","lock_guard","locked_view","locked_view","metadata","metrics","new","new","new","new","new","new","number_of_empty_blocks_proposed","number_of_timeouts","number_of_timeouts_as_leader","number_of_views_per_decide_event","number_of_views_since_last_decide","outstanding_transactions","outstanding_transactions_memory_size","phantom","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","ptr","read","root","saved_da_certs","saved_da_certs","saved_leaves","saved_leaves","saved_payloads","saved_payloads","state","state_and_delta","taken","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_high_qc","update_last_decided_view","update_last_proposed_view","update_locked_view","update_saved_da_certs","update_saved_leaves","update_saved_payloads","update_validated_state_map","update_vid_shares","update_view","upgradable_read","upgrade","validated_state_map","validated_state_map","vid_shares","vid_shares","view_duration_as_leader","visit_leaf_ancestors","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","AUCTION_RESULTS_FETCH_TIMEOUT","BUNDLE_FETCH_TIMEOUT","COMBINED_NETWORK_CACHE_SIZE","COMBINED_NETWORK_DELAY_DURATION","COMBINED_NETWORK_MIN_PRIMARY_FAILURES","COMBINED_NETWORK_PRIMARY_CHECK_INTERVAL","EVENT_CHANNEL_SIZE","EXTERNAL_EVENT_CHANNEL_SIZE","KAD_DEFAULT_REPUB_INTERVAL_SEC","LOOK_AHEAD","REQUEST_DATA_DELAY","SRS_DEGREE","UPGRADE_BEGIN_OFFSET","UPGRADE_DECIDE_BY_OFFSET","UPGRADE_FINISH_OFFSET","UPGRADE_PROPOSE_OFFSET","BlockError","DaProposal","InconsistentPayloadCommitment","InconsistentPayloadCommitmentSnafu","InvalidBlockHeader","InvalidBlockHeaderSnafu","InvalidTransactionLength","InvalidTransactionLengthSnafu","Leaf","NodeType","PackedBundle","QuorumProposal","TestableLeaf","Timeout","UpgradeProposal","VidDisperse","VidDisperseShare","ViewChangeEvidence","ViewNumber","ViewSync","_DERIVE_core_fmt_Debug_FOR_DaProposal","_DERIVE_core_fmt_Debug_FOR_QuorumProposal","_DERIVE_core_fmt_Debug_FOR_UpgradeProposal","_DERIVE_core_fmt_Debug_FOR_ViewChangeEvidence","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","add_assign","as_error","as_error_source","auction_result","backtrace","batch_check","block_header","block_header","block_header","block_header_mut","block_payload","block_payload","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","calculate_vid_disperse","cause","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit","commit","common","common","compare","create_random_transaction","create_random_transaction","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encoded_transactions","encoded_transactions","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extends_upgrade","fail","fail","fail","fake_commitment","fill_block_payload","fill_block_payload_unchecked","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_membership","from_quorum_proposal","from_vid_disperse","genesis","genesis","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","header","header","height","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","is_valid_for_view","justify_qc","justify_qc","justify_qc","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","metadata","metadata","new","new","null_block","parent_commitment","parent_commitment","partial_cmp","payload_commitment","payload_commitment","payload_commitment","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proposal_certificate","random_commitment","recipient_key","sequencing_fees","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize_signature2","serialize_with_mode","serialized_size","share","shares","source","sub","temp_extends_upgrade","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_proposal","to_string","to_string","to_vid_disperse","to_vid_share_proposals","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u64","upgrade_certificate","upgrade_certificate","upgrade_certificate","upgrade_proposal","vid_precompute","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","MEMOIZED_MAPPING_COMMITMENT","__private_field","borrow","borrow_mut","builder_fee","commitment","deref","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","memoized_flush_commitment","memoized_original_commitment","pointer_metadata","try_from","try_into","type_id","vzip","BlockError","BlockSnafu","Continue","ContinueSnafu","FailedToBroadcast","FailedToBroadcastSnafu","FailedToMessageLeader","FailedToMessageLeaderSnafu","FailedToSerialize","FailedToSerializeSnafu","HotShotError","InsufficientValidSignatures","InsufficientValidSignaturesSnafu","InvalidState","InvalidStateSnafu","LeaderMinRoundTimeNotReached","LeaderWaitingForCommitVotes","LeaderWaitingForHighQC","LeaderWaitingForPreCommitVotes","LeaderWaitingForPrepareVotes","LeafNotFound","LeafNotFoundSnafu","Misc","MiscSnafu","NetworkFault","NetworkFaultSnafu","ReplicaWaitingForCommit","ReplicaWaitingForDecide","ReplicaWaitingForPreCommit","ReplicaWaitingForPrepare","RoundTimedoutState","TestCollectRoundEventsTimedOut","TimeoutError","TimeoutSnafu","ViewTimeoutError","ViewTimeoutSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","context","context","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fail","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","num_valid_signatures","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","source","state","threshold","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","context","context","num_valid_signatures","source","source","source","source","source","state","threshold","view_number","DaCert","DaProposal","DaPropose","DaVote","Decide","Error","Event","EventType","ExternalMessageReceived","HotShotAction","LeafChain","LeafInfo","Propose","QuorumProposal","ReplicaViewTimeout","Transactions","UpgradeProposal","UpgradePropose","UpgradeVote","VidDisperse","ViewFinished","ViewTimeout","Vote","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","delta","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","error_adaptor","event","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","leaf","len","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","state","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vid_share","view_number","vzip","vzip","vzip","vzip","block_size","error","leaf_chain","proposal","proposal","proposal","qc","sender","sender","sender","transactions","view_number","view_number","view_number","deserialize","serialize","CircuitField","GenericLightClientState","GenericPublicInput","LightClientState","PublicInput","R","StateKeyPair","StateSignKey","StateSignature","StateSignatureRequestBody","StateSignatureScheme","StateSignaturesBundle","StateVerKey","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","accumulated_weight","as_bits","as_ref","batch_check","batch_check","block_comm_root","block_comm_root","block_comm_root","block_height","block_height","block_height","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","curve_param","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","deserialize_with_mode","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","fee_ledger_comm","fee_ledger_comm","fee_ledger_comm","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_sign_key","from_str","generate","generate_from_seed","generate_from_seed_indexed","get_hash","hash","header","init","init","init","init","init","into","into","into","into","into","key","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","qc_key_comm","s","serialize","serialize","serialize","serialize","serialize_with_mode","serialize_with_mode","serialized_size","serialized_size","signature","signatures","stake_amount_comm","stake_table_comm","stake_table_comm","stake_table_comm","state","state","state_key_comm","tag","threshold","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","view_number","view_number","view_number","vzip","vzip","vzip","vzip","vzip","Consensus","Da","DaCertificate","DaCertificate","DaConsensusMessage","DaProposal","DaVote","Data","Data","DataMessage","DataResponse","External","External","General","GeneralConsensusMessage","Internal","LatestProposal","LatestViewSyncCertificate","LeaderProposalAvailable","Message","MessageKind","MessagePurpose","Messages","Proposal","Proposal","Proposal","ProposalRequested","RequestData","SequencingMessage","SubmitTransaction","TimeoutVote","UpgradeLock","UpgradeProposal","UpgradeProposal","UpgradeVote","UpgradeVote","VidDisperse","VidDisperseMsg","ViewSyncCertificate","ViewSyncCommitCertificate","ViewSyncCommitVote","ViewSyncFinalizeCertificate","ViewSyncFinalizeVote","ViewSyncPreCommitCertificate","ViewSyncPreCommitVote","ViewSyncVote","Vote","Vote","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_pd","_pd","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","decided_upgrade_certificate","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_consensus_message","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","kind","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","purpose","purpose","sender","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_signature","version","view_number","view_number","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BitVectorQc","QcParams","__clone_box","agg_sig_pp","assemble","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","fmt","from","from","get_hash","hash","init","init","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","serialize","serialize","sign","stake_entries","threshold","to_owned","trace","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","NetworkMsgResponseChannel","Request","RequestReceiver","Response","TakeReceiver","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","init","init","init","inner","into","into","into","layout_raw","layout_raw","layout_raw","lock_ops","pointer_metadata","pointer_metadata","pointer_metadata","sender","serialize","serialize","state","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BLSPrivKey","BLSPubKey","BLSPublicParam","BuilderKey","assemble","check","from_bytes","from_private","generated_from_seed_indexed","generated_from_seed_indexed","genesis_proposer_pk","public_key","public_parameter","sig_proof","sign","sign_builder_message","stake_table_entry","to_bytes","validate","validate_builder_signature","DaCertificate","OneHonestThreshold","QuorumCertificate","SimpleCertificate","SuccessThreshold","Threshold","TimeoutCertificate","UpgradeCertificate","UpgradeThreshold","ViewSyncCommitCertificate2","ViewSyncFinalizeCertificate2","ViewSyncPreCommitCertificate2","__clone_box","__clone_box","__clone_box","__clone_box","_pd","_pd","_pd","_pd","_pd","_pd","_pd","_pd","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","commit","create_signed_certificate","data","data","data","data","data","data","data","data","date","date_commitment","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","genesis","genesis","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","init","init","init","init","into","into","into","into","is_relevant","is_relevant","is_valid_cert","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","signatures","signatures","signatures","signatures","signatures","signatures","signatures","signatures","temp_is_relevant","temp_is_relevant","threshold","threshold","threshold","threshold","threshold","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upgrading_in","upgrading_in","validate","validate","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","vote_commitment","vote_commitment","vote_commitment","vote_commitment","vote_commitment","vote_commitment","vote_commitment","vote_commitment","vzip","vzip","vzip","vzip","DaData","DaVote","QuorumData","QuorumVote","SimpleVote","TimeoutData","TimeoutVote","UpgradeProposalData","UpgradeVote","VidData","ViewSyncCommitData","ViewSyncCommitVote","ViewSyncFinalizeData","ViewSyncFinalizeVote","ViewSyncPreCommitData","ViewSyncPreCommitVote","Voteable","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","commit","commit","commit","commit","commit","commit","commit","create_signed_vote","data","data","data","data","data","data","data","data","date","date_commitment","decide_by","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaf_commit","new_version","new_version_first_view","new_version_hash","old_version","old_version_last_view","payload_commit","payload_commit","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","relay","relay","relay","round","round","round","sealed","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","signature","signature","signature","signature","signature","signature","signature","signature","signing_key","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view","view_and_relay_commit","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Sealed","StakeTableEntry","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","key","layout_raw","pointer_metadata","serialize","stake","stake_amount","stake_key","to_owned","try_from","try_into","type_id","vzip","BlockPayload","EncodeBytes","ValidatedState","auction_results_provider","block_contents","consensus_api","election","metrics","network","node_implementation","qc","signature_key","stake_table","states","storage","AuctionResultsProvider","fetch_auction_result","BlockHeader","BlockPayload","BuilderFee","EncodeBytes","Error","Error","GENESIS_VID_NUM_STORAGE_NODES","Instance","Metadata","TestableBlock","Transaction","Transaction","ValidatedState","__clone_box","block_number","borrow","borrow_mut","builder_commitment","builder_commitment","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","empty","encode","eq","equivalent","equivalent","equivalent","equivalent","fee_account","fee_amount","fee_signature","fmt","from","from_bytes","from_transactions","genesis","genesis","get_auction_results","get_hash","hash","init","into","layout_raw","metadata","new_legacy","new_marketplace","num_transactions","payload_commitment","pointer_metadata","precompute_vid_commitment","serialize","to_owned","transaction_commitments","transactions","try_from","try_into","txn_count","type_id","vid_commitment","vzip","ConsensusApi","builder_timeout","private_key","public_key","send_event","total_nodes","ElectionError","MathError","MathSnafu","Membership","StubError","StubSnafu","__clone_box","__clone_box","as_error","as_error_source","backtrace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build","cause","clone","clone","clone_into","clone_into","committee_qc_stake_table","committee_topic","create_election","deref","deref","deref","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","drop","drop","drop","fail","fail","failure_threshold","fmt","fmt","fmt","fmt","from","from","from","has_stake","header","in_current_span","init","init","init","into","into","into","into_error","into_error","layout_raw","layout_raw","layout_raw","leader","non_staked_committee","pointer_metadata","pointer_metadata","pointer_metadata","source","stake","staked_committee","success_threshold","to_owned","to_owned","to_string","total_nodes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upgrade_threshold","vzip","vzip","vzip","whole_committee","Counter","CounterFamily","Gauge","GaugeFamily","Histogram","HistogramFamily","Metrics","MetricsFamily","NoMetrics","TextFamily","__clone_box","add","add","add_point","add_point","borrow","borrow_mut","boxed","clone","clone_into","counter_family","counter_family","create","create","create","create","create","create_counter","create_counter","create_gauge","create_gauge","create_histogram","create_histogram","create_text","create_text","default","deref","deref_mut","deserialize","drop","fmt","from","gauge_family","gauge_family","histogram_family","histogram_family","init","into","layout_raw","pointer_metadata","set","set","subgroup","subgroup","text_family","text_family","to_owned","try_from","try_into","type_id","update","update","vzip","AsyncGenerator","AsynchronousNetwork","Broadcast","BroadcastDelay","CentralizedServer","CentralizedServerNetworkError","CentralizedServerSnafu","ChannelSend","ChannelSendSnafu","ChaosNetwork","ConnectedNetwork","CouldNotDeliver","CouldNotDeliverSnafu","Da","DaCommitteeBroadcast","DaProposal","DataRequest","Denied","Direct","FailedToDeserialize","FailedToDeserializeSnafu","FailedToReceive","FailedToReceiveSnafu","FailedToSend","FailedToSendSnafu","FailedToSerialize","FailedToSerializeSnafu","Found","Global","Id","Libp2p","Libp2pMulti","Libp2pMultiSnafu","Libp2pSnafu","MemoryNetwork","MemoryNetworkError","MemoryNetworkSnafu","MultipleErrors","MultipleErrorsSnafu","NetworkChange","NetworkError","NetworkMsg","NetworkReliability","NoBootstrapNodesSpecified","NoBootstrapNodesSpecifiedSnafu","NoMessagesInQueue","NoMessagesInQueueSnafu","NoSuchNode","NoSuchNodeSnafu","NodeConnected","NodeDisconnected","None","NotFound","NotFound","NotFoundSnafu","NotReady","NotReadySnafu","PartiallySynchronousNetwork","PerfectNetwork","Proposal","PushCdnNetwork","PushCdnNetworkError","PushCdnNetworkSnafu","RequestKind","ResponseMessage","ShutDown","ShutDownSnafu","Stub","StubSnafu","SynchronousNetwork","TestableNetworkingImplementation","Timeout","TimeoutSnafu","Topic","TransmitType","UnableToCancel","UnableToCancelSnafu","UnimplementedFeature","UnimplementedFeatureSnafu","Vid","View","ViewMessage","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error","as_error","as_error","as_error_source","as_error_source","as_error_source","as_error_source","asynchronous","backtrace","backtrace","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","cause","cause","cause","cause","chaos_send_msg","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","da_broadcast_message","default","default","default","default","delay_high_ms","delay_high_ms","delay_high_ms","delay_low_ms","delay_low_ms","delay_low_ms","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","description","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","direct_message","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generator","get_hash","get_hash","get_hash","get_hash","gst","hash","hash","hash","hash","header","header","header","header","header","in_current_span","in_current_span","in_current_span","in_current_span","in_flight_message_count","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","is_primary_down","keep_denominator","keep_denominator","keep_numerator","keep_numerator","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new","new","new","pause","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","purpose","queue_node_lookup","recv_msgs","repeat_high","repeat_low","request","request_data","resume","sample_delay","sample_delay","sample_delay","sample_delay","sample_delay","sample_keep","sample_keep","sample_keep","sample_keep","sample_keep","sample_repeat","sample_repeat","scramble","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shut_down","signature","source","source","source","source","sources","spawn_request_receiver_task","start","synchronous","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_view","vid_broadcast_message","view","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_ready","errors","source","source","source","source","source","source","source","sources","AuctionResult","AuctionResultsProvider","Base","BlockHeader","BlockPayload","BuilderSignatureKey","ConsensusTime","HasUrls","InstanceState","Marketplace","Membership","Network","NodeImplementation","NodeType","SignatureKey","Storage","TestableNodeImplementation","Time","Transaction","UPGRADE_HASH","Upgrade","ValidatedState","Versions","block_genesis","gen_networks","genesis","leaf_create_random_transaction","new","state_create_random_transaction","txn_count","u64","urls","MessageLength","Qc","QcProverParams","QcVerifierParams","QuorumCertificateScheme","QuorumSize","assemble","check","sign","trace","BuilderPrivateKey","BuilderSignature","BuilderSignatureKey","PrivateKey","PureAssembledSignatureType","QcParams","QcType","SignError","SignError","SignatureKey","StakeTableEntry","StakeTableEntryType","aggregate_block_info_data","aggregate_fee_data","assemble","check","from_bytes","from_private","generated_from_seed_indexed","generated_from_seed_indexed","genesis_proposer_pk","public_key","public_parameter","sig_proof","sign","sign_block_info","sign_builder_message","sign_fee","sign_sequencing_fee_marketplace","stake","stake_table_entry","to_bytes","validate","validate_block_info_signature","validate_builder_signature","validate_fee_signature","validate_sequencing_fee_signature_marketplace","Amount","Aux","BlockNum","Commitment","EpochStart","ExistingKey","Head","InsufficientFund","IntoIter","Key","KeyNotFound","LastEpochStart","LookupProof","MalformedProof","MismatchedKey","RescueError","SnapshotUnsupported","SnapshotVersion","StakeOverflow","StakeTableError","StakeTableScheme","VerificationError","as_error","as_error_source","batch_deregister","batch_register","batch_update","borrow","borrow","borrow_mut","borrow_mut","commitment","contains_key","deref","deref","deref_mut","deref_mut","deregister","deserialize","deserialize","drop","drop","fmt","fmt","from","from","header","in_current_span","init","init","into","into","layout_raw","layout_raw","len","lookup","lookup_with_aux_and_proof","lookup_with_proof","pointer_metadata","pointer_metadata","register","sample","to_string","total_stake","try_from","try_from","try_into","try_into","try_iter","type_id","type_id","update","vzip","vzip","Delta","Error","Instance","InstanceState","StateDelta","TestableState","Time","ValidatedState","create_random_transaction","from_header","genesis","on_commit","validate_and_apply_header","Storage","append_da","append_proposal","append_vid","record_action","update_high_qc","update_undecided_state","BuilderCommitment","Da","Exclusive","Failed","Inclusive","Leaf","LeafCommitment","RoundFinishedEvent","Sha256Digest","StateAndDelta","Terminator","View","ViewInner","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_ref","batch_check","bincode_opts","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_with_mode","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bytes","from_raw_digest","from_str","get_hash","hash","header","init","init","init","init","init","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaf_and_state","leaf_commitment","payload_commitment","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize_with_mode","serialized_size","state","state_and_delta","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","view_inner","view_number","vzip","vzip","vzip","vzip","vzip","delta","leaf","payload_commitment","state","Advz","E","H","KZG_SRS","LargeRangeProofType","SmallRangeProofType","VidCommitment","VidCommon","VidPrecomputeData","VidSchemeType","VidShare","__clone_box","__clone_box","__private_field","_pd","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","ck","clone","clone","clone_into","clone_into","commit_only","commit_only_precompute","core","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","disperse","disperse_precompute","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval_domain","fmt","fmt","from","from","from","from","get_multiplicity","get_num_storage_nodes","get_payload_byte_len","init","init","init","init","into","into","into","into","is_consistent","layout_raw","layout_raw","layout_raw","layout_raw","multi_open_domain","multiplicity","num_storage_nodes","payload_proof","payload_proof","payload_verify","payload_verify","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","recover_payload","recovery_threshold","serialize","serialize","srs_on_gpu_and_cuda_stream","stmt_conversion","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify_share","vid_disperse_conversion","vid_scheme","vk","vzip","vzip","vzip","vzip","Certificate","Commitment","HasViewNumber","SignersMap","Threshold","Vote","VoteAccumulator","VoteMap2","Voteable","accumulate","base","base","borrow","borrow_mut","create_signed_certificate","date","date","date_commitment","date_commitment","deref","deref_mut","deserialize","drop","from","init","into","is_valid_cert","layout_raw","phantom","pointer_metadata","signature","signers","signing_key","threshold","try_from","try_into","type_id","view_number","vote_outcomes","vzip"],"q":[[0,"hotshot_types"],[171,"hotshot_types::bundle"],[197,"hotshot_types::consensus"],[432,"hotshot_types::constants"],[448,"hotshot_types::data"],[911,"hotshot_types::data::null_block"],[933,"hotshot_types::error"],[1289,"hotshot_types::error::HotShotError"],[1300,"hotshot_types::event"],[1421,"hotshot_types::event::EventType"],[1435,"hotshot_types::event::error_adaptor"],[1437,"hotshot_types::light_client"],[1624,"hotshot_types::message"],[1953,"hotshot_types::qc"],[2004,"hotshot_types::request_response"],[2083,"hotshot_types::signature_key"],[2103,"hotshot_types::simple_certificate"],[2295,"hotshot_types::simple_vote"],[2629,"hotshot_types::simple_vote::sealed"],[2630,"hotshot_types::stake_table"],[2664,"hotshot_types::traits"],[2679,"hotshot_types::traits::auction_results_provider"],[2681,"hotshot_types::traits::block_contents"],[2746,"hotshot_types::traits::consensus_api"],[2752,"hotshot_types::traits::election"],[2843,"hotshot_types::traits::metrics"],[2906,"hotshot_types::traits::network"],[3930,"hotshot_types::traits::network::NetworkError"],[3939,"hotshot_types::traits::node_implementation"],[3971,"hotshot_types::traits::qc"],[3981,"hotshot_types::traits::signature_key"],[4018,"hotshot_types::traits::stake_table"],[4092,"hotshot_types::traits::states"],[4105,"hotshot_types::traits::storage"],[4112,"hotshot_types::utils"],[4272,"hotshot_types::utils::ViewInner"],[4276,"hotshot_types::vid"],[4401,"hotshot_types::vote"],[4441,"dyn_clone::sealed"],[4442,"core::future::future"],[4443,"core::marker"],[4444,"core::marker"],[4445,"rkyv::with"],[4446,"core::result"],[4447,"serde::de"],[4448,"core::cmp"],[4449,"core::fmt"],[4450,"core::fmt"],[4451,"core::hash"],[4452,"core::hash"],[4453,"core::fmt"],[4454,"core::alloc::layout"],[4455,"serde::ser"],[4456,"alloc::string"],[4457,"core::any"],[4458,"alloc::sync"],[4459,"alloc::collections::btree::map"],[4460,"async_lock::rwlock"],[4461,"async_lock::rwlock"],[4462,"anyhow"],[4463,"core::ops::function"],[4464,"core::error"],[4465,"std::backtrace"],[4466,"ark_serialize::error"],[4467,"core::iter::traits::iterator"],[4468,"core::cmp"],[4469,"rand_core"],[4470,"ark_serialize"],[4471,"ark_serialize"],[4472,"async_lock::rwlock"],[4473,"vec1"],[4474,"std::io"],[4475,"lru"],[4476,"std::sync::mutex"],[4477,"core::convert"],[4478,"core::num::nonzero"],[4479,"bitvec::slice"],[4480,"bitvec::order"],[4481,"ark_ff::fields::prime"],[4482,"core::cmp"],[4483,"ark_ed_on_bn254::curves"],[4484,"jf_signature::schnorr"],[4485,"core::cmp"],[4486,"tagged_base64"],[4487,"serde::de"],[4488,"generic_array"],[4489,"jf_signature"],[4490,"bitvec::vec"],[4491,"alloc::boxed"],[4492,"core::pin"],[4493,"core::cmp"],[4494,"core::time"],[4495,"core::num::nonzero"],[4496,"async_channel"],[4497,"url"],[4498,"core::convert"],[4499,"bincode::config::limit"],[4500,"bincode::config"],[4501,"bincode::config"],[4502,"bincode::config"],[4503,"bincode::config"],[4504,"jf_pcs::univariate_kzg::srs"],[4505,"core::ops::range"],[4506,"jf_vid::payload_prover"],[4507,"sha2"],[4508,"jf_vid::advz"],[4509,"either"]],"d":["Pinned future that is Send and Sync","constantly increment view as soon as view finishes","the type of consensus to run. Either: wait for a signal to …","Holds configuration for a <code>HotShot</code>","wait for a signal","structure of peers’ config, including public key, stake …","config for validator, including public key, private key, …","","","","","","yoinked from futures crate","","","","","","","","","yoinked from futures crate, adds sync bound that we need","The maximum amount of time a leader can wait to get a …","Builder API base URL","This module provides the <code>Bundle</code> type","","","","","","","","","Provides the core consensus types","configurable constants for hotshot","List of DA committee nodes (non-staking)nodes for static …","List of DA committee (staking)nodes for static DA committee","Provides types useful for representing <code>HotShot</code>’s data …","time to wait until we request data associated with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error type for <code>HotShot</code>","Events that a <code>HotShot</code> instance can emit","Whether to run one view or continuous views","Number of fixed leaders for GPU VID, normally it will be …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a peer’s config from bytes","generate validator config from input seed, index, stake …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether or not this validator is DA","All public keys known to be DA nodes","List of known node’s public keys and stake value for …","List of known non-staking nodes’ public keys","","","","","Types and structs associated with light client state","Network message types","My own validator config, including my public key, private …","Base duration for next-view timeout, in milliseconds","Number of network bootstrap nodes","Total number of nodes in the network","Number of nodes without stake","","","","","The validator’s private key, should be in the mempool, …","get the public config of the validator","The validator’s public key and stake value","Implementation for <code>BitVectorQc</code> that uses BLS signature + …","Types for the request/response implementations. This …","The delay a leader inserts before starting pre-commit, in …","","","","","Update a hotshot config to have a view-based upgrade.","Types and structs for the hotshot signature keys","Implementations of the simple certificate type.  Used for …","Implementations of the simple vote types.","Types and structs related to the stake table","The peer’s public key and stake value","The validator’s stake","Delay after init before starting consensus, in milliseconds","Unix time in seconds at which we start proposing an upgrade","View to start proposing an upgrade","The proportion of nodes required before the orchestrator …","Unix time in seconds at which we start voting on an upgrade","View to start voting on an upgrade","the validator’s key pairs for state signing/verification","the peer’s state public key","Unix time in seconds at which we stop proposing an …","View to stop proposing an upgrade. To prevent proposing an …","Unix time in seconds at which we stop voting on an …","View to stop voting on an upgrade. To prevent voting on an …","The exponential backoff ration for the next-view timeout","Serialize a peer’s config to bytes","","","","","","","Common traits for the <code>HotShot</code> protocol","","","","","","","","","","","","","Utility functions, type aliases, helper structs and enum …","This module provides:","Duration of view sync round timeouts","Vote, Accumulator, and Certificate Types","","","","","The Bundle for a portion of a block, provided by a …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","The fee for sequencing","","The signature over the bundle.","","The bundle transactions sent by the builder.","","","","","Alias for the block payload commitment and the associated …","A type alias for <code>HashMap&lt;Commitment&lt;T&gt;, T&gt;</code>","A reference to the consensus algorithm","Contains several <code>ConsensusMetrics</code> that we’re interested …","A thin wrapper around <code>RwLockReadGuard</code> for <code>Consensus</code> that …","A thin wrapper around <code>RwLockUpgradableReadGuard</code> for …","A thin wrapper around <code>RwLockWriteGuard</code> for <code>Consensus</code> that …","Type alias for consensus state wrapped in a lock.","A thin wrapper around <code>LockedConsensusState</code> that helps …","A type alias for …","","","","","","","","","","","auction result that the block was produced from, if any","","View number this block is for","","","","","","","","","","","","","","","Builder Commitment","Associated helper function: Takes <code>LockedConsensusState</code> …","","","","","","","","","Garbage collects based on state change right now, this …","Vid Commitment","Get the current view.","View number that is currently on.","The current view","Gets the last decided leaf.","Gets the last decided validated state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builder fee data","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Get the high QC.","the highqc per spec","","","","","","","","Inner <code>LockedConsensusState</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Number of invalid QCs we’ve seen since the last commit.","Number of timestamp for the last decided time","Get the last decided view.","last view had a successful decide event","The number of last decided view","Get the map of our recent proposals","Last proposals we sent out, None if we haven’t proposed …","The number of last synced block height","","","","","","","","","Inner <code>RwLockReadGuard</code>","Inner <code>RwLockWriteGuard</code>","Inner <code>RwLockUpgradableReadGuard</code>","Get the locked view.","The <code>locked_qc</code> view number","Metadata for the block payload","A reference to the metrics trait","Creates a new instance of <code>ConsensusReadLockGuard</code> with the …","Creates a new instance of <code>ConsensusWriteLockGuard</code> with the …","Creates a new instance of <code>ConsensusUpgradableReadLockGuard</code> …","Create a new instance of <code>OuterConsensus</code>, hopefully …","Constructor.","Create a new instance of this <code>ConsensusMetricsValue</code> …","The number of empty blocks that have been proposed","Number of views that timed out","Number of views that timed out as leader","Number of views that are in-flight since the last anchor …","Number of views that are in-flight since the last decided …","Number of outstanding transactions","Memory size in bytes of the serialized transactions still …","","","","","","","","","","Locks inner consensus for reading and leaves debug traces","","Get the saved DA certs.","All the DA certs we’ve received for current and future …","Get the saved leaves.","Map of leaf hash -&gt; leaf","Get the saved payloads.","Saved payloads.","Gets the validated state with the given view number, if in …","Gets the validated state and state delta with the given …","A helper bool to indicate whether inner lock has been …","","","","","","","","","","","","","","","","","","","Tries to acquire read lock on inner consensus and leaves …","Tries to acquire write lock on inner consensus and leaves …","","","","","","","","Update the high QC if given a newer one.","Update the last decided view.","Update the last proposal.","Update the locked view.","Add a new entry to the da_certs map.","Update the saved leaves with a new leaf.","Update the saved payloads with a new encoded transaction.","Update the validated state map with a new view_number/view …","Add a new entry to the vid_shares map.","Update the current view.","Acquires upgradable read lock on inner consensus and …","Upgrades the inner <code>RwLockUpgradableReadGuard</code> and leaves …","Get the validated state map.","The validated states that are currently loaded in memory.","Get the vid shares.","All the VID shares we’ve received for current and future …","Duration of views as leader","gather information from the parent chain of leaves","","","","","","","","Locks inner consensus for writing and leaves debug traces","timeout for fetching auction results from the solver","timeout for fetching bundles from builders","the number of messages to cache in the combined network","the default delay duration value in milliseconds of …","the number of messages to attempt to send over the primary …","the number of messages to send over the secondary network …","Default channel size for consensus event sharing","Default channel size for HotShot -&gt; application …","the default kademlia record republication interval (in …","the number of views to gather information for ahead of time","The default network data request delay in milliseconds","For <code>STAKE_TABLE_CAPACITY=200</code>, the light client prover …","The offset for how far in the future the upgrade actually …","The offset for how far in the future the upgrade …","The offset for how far in the future the upgrade ends.","The offset for how far in the future we will send out a …","The error type for block and its transactions.","A proposal to start providing data availability for a …","Inconsistent payload commitment.","SNAFU context selector for the …","Invalid block header.","SNAFU context selector for the …","Invalid transaction length.","SNAFU context selector for the …","This is the consensus-internal analogous concept to a …","Type of nodes participating in the network.","A packed bundle constructed from a sequence of bundles.","Proposal to append a block.","Additional functions required to use a <code>Leaf</code> with …","Holds a timeout certificate.","A proposal to upgrade the network","VID dispersal data","VID share and associated metadata for a single node","Helper type to encapsulate the various ways that proposal …","Type-safe wrapper around <code>u64</code> so we know the thing we’re …","Holds a view sync finalized certificate.","","","","","","","","","","","","","","","","","","","","","The auction results for the block, if it was produced as …","","","The block header contained in this leaf.","The block header to append","Block header.","Get a mutable reference to the block header contained in …","Optional block payload.","Optional block payload.","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Calculate the vid disperse information from the payload …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","VID common data sent to all storage nodes","VID common data sent to all storage nodes","","Create a transaction that can be added to the block …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encoded transactions in the block to be applied.","The combined transactions as bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Validate that a leaf has the right upgrade certificate to …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Fake the thing a genesis block points to. Needed to avoid …","Fill this leaf with the block payload.","Fill this leaf with the block payload, without checking …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create VID dispersal from a specified membership Uses the …","Constructs a leaf from a given quorum proposal.","Create a vector of <code>VidDisperseShare</code> from <code>VidDisperse</code>","Create a genesis view number (0)","Create a new leaf from its components.","","","","","","","","","","","","","","","","","","","Height of this leaf in the chain.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Check that the given ViewChangeEvidence is relevant to the …","The QC linking this leaf to its parent in the chain.","Per spec, justification","Per spec, justification","","","","","","","","","","","","","","Metadata of the block to be applied.","The metadata of the block.","Create a new <code>ViewNumber</code> with the given value.","Create a new <code>PackedBundle</code>.","","Commitment to this leaf’s parent.","The hash of the parent <code>Leaf</code> So we can ask if it extends","","A commitment to the block payload contained in this leaf.","Block payload commitment","Block payload commitment","","","","","","","","","","","","","","Possible timeout or view sync certificate.","create a random commitment","a public key of the share recipient","The sequencing fee for submitting bundles.","","","","","","","","","","Serialization for the QC assembled signature","","","A storage node’s key and its corresponding VID share","A storage node’s key and its corresponding VID share","","","Validate that a leaf has the right upgrade certificate to …","","","","","","","","","","","","","Consume <code>self</code> and return a <code>Proposal</code>","","","Create <code>VidDisperse</code> out of an iterator to <code>VidDisperseShare</code>s","Split a VID share proposal into a proposal for each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returen the u64 format","The QC linking this leaf to its parent in the chain.","Possible upgrade certificate, which the leader may …","Optional upgrade certificate, if one was attached to the …","The information about which version we are upgrading to.","The Vid precompute for the block.","","","","","","Time when this leaf was created.","View this proposal applies to","View this proposal applies to","The view number for which this VID data is intended","The view number for which this VID data is intended","CurView from leader when proposing leaf","CurView from leader when proposing leaf","The view number that this block is associated with.","","","","","","","","","","","","","","","","","","Builder fee data for a null block payload","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","The commitment for a null block payload.","","","","","","Failure in the block.","SNAFU context selector for the <code>HotShotError::BlockError</code> …","Internal value used to drive the state machine","SNAFU context selector for the <code>HotShotError::Continue</code> …","Failed to broadcast a message on the network","SNAFU context selector for the …","Failed to Message the leader in the given stage","SNAFU context selector for the …","Failed to serialize message","SNAFU context selector for the …","Error type for <code>HotShot</code>","Not enough valid signatures for a quorum","SNAFU context selector for the …","Error accessing storage Invalid state machine state","SNAFU context selector for the <code>HotShotError::InvalidState</code> …","Leader is in a Prepare phase and timed out before the …","Leader is waiting for commit votes","Leader is in a Prepare phase and is waiting for a HighQC","Leader is waiting for precommit votes","Leader is waiting for prepare votes","Item was not present in storage","SNAFU context selector for the <code>HotShotError::LeafNotFound</code> …","Miscellaneous error TODO fix this with #181 …","SNAFU context selector for the <code>HotShotError::Misc</code> variant","Failure in networking layer","SNAFU context selector for the <code>HotShotError::NetworkFault</code> …","Replica is waiting for a commit message","Replica is waiting for a decide message","Replica is waiting for a pre-commit message","Replica is waiting for a prepare message","Contains information about what the state of the …","HotShot-testing tried to collect round events, but it …","HotShot timed out waiting for msgs","SNAFU context selector for the <code>HotShotError::TimeoutError</code> …","HotShot timed out during round","SNAFU context selector for the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","source of error","Context","Number of valid signatures","source of error","The underlying network fault","The underlying network fault","The underlying block error.","Underlying network fault","The state that the round was in when it timed out","Threshold of signatures needed for a quorum","view number","DA certificate was sent","DA proposal was received from the network or submitted to …","DA proposal was sent","DA vote was sent","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","A message destined for external listeners was received","A list of actions that we track for nodes","The chain of decided leaves with its corresponding state …","Decided leaf with the corresponding state and VID info.","A quorum proposal was sent","Quorum proposal was received from the network or submitted …","A replica task was canceled by a timeout interrupt","New transactions were received from the network or …","Upgrade proposal was received from the network or …","An upgrade proposal was sent","An upgrade vote was sent","VID shares were sent","The view has finished.  If values were decided on, a <code>Decide</code>…","The view timed out","A quorum vote was sent","","","","","","","","","","","","","","","","","","","","","","Optional application-specific state delta.","","","","","","","","","","","","","","","","","","","","","Utilities for converting between HotShotError and a string.","The underlying event","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Decided leaf.","","Constructor.","","","","","","","","","Validated state.","","","","","","","","","","","","","","","","","Optional VID share data.","The view number that this event originates from","","","","","Optional information of the number of transactions in the …","The underlying error","The chain of Leafs that were committed by this decision","Contents of the proposal","Contents of the proposal","Contents of the proposal","The QC signing the most recent leaf in <code>leaf_chain</code>.","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","Public key of the leader submitting the proposal","The list of transactions","The view that timed out","The view number that has just finished","The view that timed out","Convert a string into a HotShotError","Convert a HotShotError into a string","Base field in the prover circuit","A light client state","Public input to the light client state prover service","Concrete type for light client state","Concrete for circuit’s public input","","Key pairs for signing/verifying a light client state","Signing key for signing a light client state","Signatures","Request body to send to the state relay server","Signature scheme","The state signatures bundle is a light client state and …","Verification key for verifying state signatures","","","","","","Total stakes associated with the signer","","","","","Return the block commitment root of the light client state","Root of the block commitment tree","Root of the block commitment tree","Return the block height of the light client state","Current block height","Current block height","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the fee ledger commitment of the light client state","Commitment for fee ledger","Commitment for fee ledger","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Generate key pairs from private signing keys","","Generate key pairs from <code>thread_rng()</code>","Generate key pairs from seed","Generate key pairs from an index and a seed","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The public key associated with this request","","","","","","","","","","","","Return the qc key commitment of the light client state","","","","","","","","","","The associated signature of the light client state","The collected signatures","Return the stake amount commitment of the light client …","Return the stake table commitment of the light client state","Commitment for the stake table","Commitment for the stake table","The associated light client state","The state for this signatures bundle","Return the state key commitment of the light client state","","Return the threshold","","","","","","","","","","","","","","","","","","","","","","","","","Return the view number of the light client state","Current view number","Current view number","","","","","","Messages related to the consensus protocol","Messages related to the sequencing consensus protocol for …","Message with a DAC.","Certificate data is available","Messages related to the sequencing consensus protocol for …","Proposal for data availability committee","vote for data availability committee","Data message","Messages relating to sharing data between nodes","TODO: Put <code>DataResponse</code> content in a <code>Box</code> to make enum …","A response to a data request","A message to be passed through to external listeners","A (still serialized) message to be passed through to …","Messages related to validating and sequencing consensus","Messages related to both validating and sequencing …","Message for internal use","Message with most recent [quorum/DA] proposal the server …","Message with most recent view sync certificate the server …","The leader has responded with a valid proposal.","Incoming message","Enum representation of any message type","A message type agnostic description of a message’s …","A wrapper type for implementing <code>PassType</code> on a vector of …","Prepare qc from the leader","Message with a [quorum/DA] proposal.","Message with a quorum proposal.","A peer node needs a proposal from the leader.","A request for data","Messages for sequencing consensus.","Contains a transaction to be submitted TODO rethink this …","Message with a Timeout vote","A lock for an upgrade certificate decided by HotShot, …","Message with an upgrade proposal.","Message with an upgrade proposal","Upgrade vote.","Message with an upgrade vote","VID disperse, like <code>Proposal</code>.","Initiate VID dispersal.","Message with a view sync certificate.","Message with a view sync commit certificate","Message with a view sync commit vote","Message with a view sync finalize certificate","Message with a view sync finalize vote","Message with a view sync pre-commit certificate","Message with a view sync pre-commit vote","Message with a view sync vote.","Message with a quorum vote.","Message with a quorum vote.","","","","","","","","","","","Phantom for TYPES","phantom data for the <code>Versions</code> trait","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The data being proposed.","a shared lock to an upgrade certificate decided by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deserialize a message with a version number, using …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a <code>MessageKind</code> from <code>SequencingMessage</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The message kind","","","","","","","","","","","Create a new <code>UpgradeLock</code> for a fresh instance of HotShot","","","","","","","","","","","","Get the message purpos","The sender of this message","","","","","","","","Serialize a message with a version number, using …","The proposal must be signed by the view leader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that the signature of the quorum proposal is valid.","Calculate the version applied in a view, based on the …","get the view number out of a message","","Get the view number this message relates to","","","","","","","","","","","An implementation of QC using BLS signature and a …","Public parameters of <code>BitVectorQc</code>","","public parameter for the aggregated signature scheme","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Sign a message with the signing key","the stake table (snapshot) this QC is verified against","threshold for the accumulated “weight” of votes to …","","","","","","","","","","","Wraps a oneshot channel for responding to requests. This …","Request for Consenus data","Type alias for the channel that we receive requests from …","Response for some VID data that we already collected","Locked Option of a receiver for moving the value out of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","underlying sender for this channel","","","","","","","","","","","","","","","","","","BLS private key used to sign a message","BLS public key used to verify a signature","Public parameters for BLS signature scheme","Builder signature key","","","","","","","","","","","","","","","","","Type alias for a DA certificate over <code>DaData</code>","Defines a threshold which is f + 1 (i.e at least one of …","Type alias for a <code>QuorumCertificate</code>, which is a …","A certificate which can be created by aggregating many …","Defines a threshold which is 2f + 1 (Amount needed for …","Trait which allows use to inject different threshold …","Type alias for a Timeout certificate over a view number","Type alias for a <code>UpgradeCertificate</code>, which is a …","Defines a threshold which is 0.9n + 1 (i.e. over 90% of …","Type alias for a <code>ViewSyncCommit</code> certificate over a view …","Type alias for a <code>ViewSyncFinalize</code> certificate over a view …","Type alias for a <code>ViewSyncPreCommit</code> certificate over a view …","","","","","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","phantom data for <code>THRESHOLD</code> and <code>TYPES</code>","","","","","","","","","","","","","","","","","","","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","The data this certificate is for.  I.e the thing that was …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creat the Genesis certificate","Creat the Genesis certificate","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines whether or not a certificate is relevant (i.e. …","Determines whether or not a certificate is relevant (i.e. …","","","","","","","","","","","","","","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","assembled signature for certificate aggregation","Determines whether or not a certificate is relevant (i.e. …","Determines whether or not a certificate is relevant (i.e. …","Calculate a threshold based on the membership","","","","","","","","","","","","","","","","","","","","","","Given an upgrade certificate and a view, tests whether the …","Given an upgrade certificate and a view, tests whether the …","Validate an upgrade certificate.","Validate an upgrade certificate.","","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","Which view this QC relates to","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","commitment of all the votes this cert should be signed over","","","","","Data used for a DA vote.","DA vote type alias","Data used for a yes vote.","Quorum vote Alias","A simple yes vote over some votable type.","Data used for a timeout vote.","Timeout Vote type alias","Data used for a Upgrade vote.","Upgrade proposal vote","Data used for a VID vote.","Data used for a Commit vote.","View Sync Commit Vote type alias","Data used for a Finalize vote.","View Sync Finalize Vote type alias","Data used for a Pre Commit vote.","View Sync Pre Commit Vote type alias","Marker trait for data or commitments that can be voted on. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates and signs a simple vote","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","The leaf commitment being voted on.","","","The last view in which we are allowed to reach a decide on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Commitment to the leaf","The new version that we are upgrading to.","The first block for which the new version will be in …","A unique identifier for the specific protocol being voted …","The old version that we are upgrading from.","The last block for which the old version will be in effect.","Commitment to a block payload","Commitment to the block payload the VID vote is on.","","","","","","","","","","The relay this vote is intended for","The relay this vote is intended for","The relay this vote is intended for","The view number we are trying to sync on","The view number we are trying to sync on","The view number we are trying to sync on","Sealed is used to make sure no other files can implement …","","","","","","","","","","","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","The signature share associated with this vote","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","View the timeout is for","This implements commit for all the types which contain a …","","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","The view this vote was cast for","","","","","","","","","","Only structs in this file can impl <code>Sealed</code>","Stake table entry","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Get the public key","","","","Get the stake amount","The associated stake amount","The public key","","","","","","","","","This module defines the interaction layer with the Solver …","Abstraction over the contents of a block","Contains the <code>ConsensusApi</code> trait.","The election trait, used to decide which node is the …","The <code>Metrics</code> trait is used to collect information from …","Network access compatibility","Composite trait for node behavior","The quorum certificate (QC) trait is a certificate of a …","Minimal compatibility over public key signatures","Trait for stake table data structures","Abstractions over the immutable instance-level state and …","Abstract storage type for storing DA proposals and VID …","The AuctionResultsProvider trait is the sole source of …","Fetches the auction result for a view. Does not cache the …","Header of a block, which commits to a <code>BlockPayload</code>.","Abstraction over the full contents of a block","Information about builder fee for proposed block","Trait for structures that need to be unambiguously encoded …","Error type for this type of block header","The error type for this type of block","The number of storage nodes to use when computing the …","The type of the instance-level state this state is …","Data created during block building which feeds into the …","extra functions required on block to be usable by …","Abstraction over any type of transaction. Used by …","The type of the transitions we are applying","Validated State","","Get the block number.","","","Get the builder commitment","Generate commitment that builders use to sign block …","","","","","","","","Build the payload and metadata for genesis/null block.","Encode <code>&amp;self</code>","","","","","","Account authorizing the fee.","Proposed fee amount","Signature over fee amount by <code>fee_account</code>.","","Returns the argument unchanged.","Build a payload with the encoded transaction bytes, …","Build a payload and associated metadata with the …","generate a genesis block","Build the genesis header, payload, and metadata.","Get the results of the auction for this Header. Only used …","","","","Calls <code>U::from(self)</code>.","","Get the metadata.","Build a header with the parent validate state, …","Build a header with the parent validate state, …","Number of transactions in the block.","Get the payload commitment.","","Compute the VID payload commitment along with precompute …","","","List of transaction commitments.","Get the transactions in the payload.","","","the number of transactions in this block","","Compute the VID payload commitment. TODO(Gus) delete this …","","The API that tasks use to talk to the system TODO we plan …","The maximum amount of time a leader can wait to get a …","Get a reference to the private key.","Get a reference to the public key.","Notify the system of an event within <code>hotshot-consensus</code>.","Total number of nodes in the network. Also known as <code>n</code>.","Error for election problems","Math error doing something NOTE: it would be better to …","SNAFU context selector for the <code>ElectionError::MathError</code> …","A protocol for determining membership in and participating …","stub error to be filled in","SNAFU context selector for the <code>ElectionError::StubError</code> …","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","Clone the public key and corresponding stake table for …","Get the network topic for the committee","create an election TODO may want to move this to a …","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Returns the threshold for a specific <code>Membership</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Check if a key has stake","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The leader of the committee for view <code>view_number</code>.","The non-staked members of the committee for view …","","","","","Get the stake table entry for a public key, returns <code>None</code> …","The staked members of the committee for view <code>view_number</code>.","Returns the threshold for a specific <code>Membership</code> …","","","","Returns the number of total nodes in the committee","","","","","","","","","","Returns the threshold required to upgrade the network …","","","","Get whole (staked + non-staked) committee for view …","An ever-incrementing counter","A family of related counters, partitioned by their label …","A gauge that stores the latest value.","A family of related gauges, partitioned by their label …","A histogram which will record a series of points.","A family of related histograms, partitioned by their label …","The metrics type.","A family of related metrics, partitioned by their label …","Use this if you’re not planning to use any metrics. All …","A family of related text metrics, partitioned by their …","","Add a value to the counter","","Add a point to this histogram.","","","","Create a new <code>Box&lt;dyn Metrics&gt;</code> with this <code>NoMetrics</code>","","","Create a family of related counters, partitioned by their …","","Instantiate a metric in this family with a specific label …","","","","","Create a <code>Counter</code> with an optional <code>unit_label</code>.","","Create a <code>Gauge</code> with an optional <code>unit_label</code>.","","Create a <code>Histogram</code> with an optional <code>unit_label</code>.","","Create a text metric.","","","","","","","","Returns the argument unchanged.","Create a family of related gauges, partitioned by their …","","Create a family of related histograms, partitioned by …","","","Calls <code>U::from(self)</code>.","","","Set the gauge value","","Create a subgroup with a specified prefix.","","Create a family of related text metricx, partitioned by …","","","","","","Update the guage value","","","A channel generator for types that need asynchronous …","An asynchronous network. Packets may be dropped entirely …","broadcast the message to all","When a message should be broadcast to the network.","Centralized server specific errors","Centralized server specific errors","SNAFU context selector for the …","Error sending output to consumer of …","SNAFU context selector for the <code>NetworkError::ChannelSend</code> …","A chaotic network using all the networking calls","represents a networking implmentration exposes low level …","Could not deliver a message to a specified recipient","SNAFU context selector for the …","The <code>Da</code> topic goes out to only the DA committee","broadcast to DA committee","Request a DA proposal for a certain view","A request for some data that the consensus layer is asking …","The Request was denied","directly transmit","Failed to deserealize a network message","SNAFU context selector for the …","Failed to receive a message from the server","SNAFU context selector for the …","Failed to send a message to the server","SNAFU context selector for the …","Failed to serialize a network message","SNAFU context selector for the …","Peer returned us some data","The <code>Global</code> topic goes out to all nodes","Trait that bundles what we need from a request ID","Libp2p specific errors","collection of libp2p specific errors","SNAFU context selector for the <code>NetworkError::Libp2pMulti</code> …","SNAFU context selector for the <code>NetworkError::Libp2p</code> variant","memory network specific errors","for any errors we decide to add to memory network","SNAFU context selector for the <code>NetworkError::MemoryNetwork</code> …","Multiple errors","SNAFU context selector for the <code>NetworkError::MultipleErrors</code>…","Changes that can occur in the network","Error type for networking","common traits we would like our network messages to …","interface describing how reliable the network is","No bootstrap nodes were specified on network creation","SNAFU context selector for the …","The centralized server could not find a specific message.","SNAFU context selector for the …","Attempted to deliver a message to an unknown node","SNAFU context selector for the <code>NetworkError::NoSuchNode</code> …","A node is connected","A node is disconnected","Broadcast the message immediately","The requested data was not found","Peer failed to get us data","SNAFU context selector for the <code>NetworkError::NotFound</code> …","The network is not ready yet","SNAFU context selector for the <code>NetworkError::NotReady</code> …","An partially synchronous network. Behaves asynchronously …","ideal network","Request for quorum proposal for a view","Push CDN network-specific errors","Centralized server specific errors","SNAFU context selector for the <code>NetworkError::PushCdnNetwork</code>…","Underlying data request","A response for a request.  <code>SequencingMessage</code> is the same …","The underlying connection has been shut down","SNAFU context selector for the <code>NetworkError::ShutDown</code> …","stub","SNAFU context selector for the <code>MemoryNetworkError::Stub</code> …","A synchronous network. Packets may be delayed, but are …","Describes additional functionality needed by the test …","A timeout occurred","SNAFU context selector for the <code>NetworkError::Timeout</code> …","Used when broadcasting messages","the type of transmission","unable to cancel a request, the request has already been …","SNAFU context selector for the <code>NetworkError::UnableToCancel</code>…","unimplemented functionality","SNAFU context selector for the …","Request VID data by our key and the VID commitment","Delay the broadcast to a given view.","a message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","asynchronous portion of network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","broadcast message to some subset of nodes blocking","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","given a message and a way to send the message, decide …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","broadcast a message only to a DA committee blocking","","","","","Max value in milliseconds that a packet may be delayed","highest value in milliseconds that a packet may be delayed","highest value in milliseconds that a packet may be delayed","Lowest value in milliseconds that a packet may be delayed","lowest value in milliseconds that a packet may be delayed","lowest value in milliseconds that a packet may be delayed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sends a direct message to a specific node blocking","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generates a network given an expected node count","","","","","time when GST occurs","","","","","","","","","","","","","","Get the number of messages in-flight.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Is primary network down? Makes sense only for combined …","denominator for probability of keeping packets","denominator for probability of keeping packets","numerator for probability of keeping packets","numerator for probability of keeping packets","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create new <code>SynchronousNetwork</code>","create new <code>AsynchronousNetwork</code>","create new <code>PartiallySynchronousNetwork</code>","Pauses the underlying network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","get the purpose of the message","queues lookup of a node","Receive one or many messages from the underlying network.","highest value of repeats for a message","lowest value of repeats for a message","Request","Ask request the network for some data.  Returns the …","Resumes the underlying network","sample from uniform distribution to decide whether or not …","","","","","Sample from bernoulli distribution to decide whether or …","never drop a packet","","never drop a packet","","number of times to repeat the packet","","scramble the packet","","","","","","","","Blocks until the network is shut down","signature of the Sha256 hash of the data so outsiders can…","","","","","","Spawn a request task in the given network layer.  If it …","when the network was started","synchronous portion of network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update view can be used for any reason, but mostly it’s …","send messages with vid shares to its recipients blocking","View this message is for","get the view out of the message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blocks until the network is successfully initialized","vec of errors","source of error","source of error","source of error","source of error","Originating bincode error","originating bincode error","Source of error","sources of errors","The AuctionSolverResult is a type that holds the data …","The auction results type for Solver interactions","The base version of HotShot this node is instantiated with.","The block header type that this hotshot setup is using.","The block type that this hotshot setup is using.","The type builder uses to sign its messages","Trait for time compatibility needed for reward collection","This trait guarantees that a particular type has urls that …","The instance-level state type that this hotshot setup is …","The version at which to switch over to marketplace logic","Membership used for this implementation","The underlying network type","Node implementation aggregate trait","Trait with all the type definitions that are used in the …","The signature key that this hotshot setup is using.","Storage for DA layer interactions","extra functions required on a node implementation to be …","The time type that this hotshot setup is using.","The transaction type that this hotshot setup is using.","The hash for the upgrade.","The version of HotShot this node may be upgraded to. Set …","The validated state type that this hotshot setup is using.","Version information for HotShot","generate a genesis block","Generate the communication channels for testing","Create a new instance of this time unit at time number 0","Creates random transaction if possible otherwise panics …","Create a new instance of this time unit","Creates random transaction if possible otherwise panics …","the number of transactions in a block","Get the u64 format of time","Returns the builer url associated with the datatype","Allows to fix the size of the message at compilation time.","Type of the actual quorum certificate object","Public parameters for generating the QC E.g: snark …","Public parameters for validating the QC E.g: verifying …","Trait for validating a QC built from different signatures …","Type of the quorum size (e.g. number of votes or …","Computes an aggregated signature from a set of partial …","Checks an aggregated signature over some message provided …","Produces a partial signature on a message with a single …","Trace the list of signers given a qc.","The type of the keys builder would use to sign its messages","The type of the signature builder would use to sign its …","Builder Signature Key trait with minimal requirements","The private key type for this signature algorithm","The type of the assembled signature, without <code>BitVec</code>","The type of the quorum certificate parameters used for …","The type of the assembled qc: assembled signature + <code>BitVec</code>","Type of error that can occur when signing data","Type of error that can occur when signing data","Trait for abstracting public key signatures Self is the …","The type of the entry that contain both public key and …","Type representing stake table entries in a <code>StakeTable</code>","Aggregate all inputs used for signature over block info","Aggregate all inputs used for signature over fee data","assemble the signature from the partial signature and the …","check the quorum certificate for the assembled signature","Deserialize a public key from bytes","Produce a public key from a private key","Generate a new key pair","Generate a new key pair","generates the genesis public key. Meant to be dummy/filler","only get the public key from the stake table entry","get the public parameter for the assembled signature …","get the assembled signature and the <code>BitVec</code> separately from …","Produce a signature","sign information about offered block","sign the message with the builder’s private key","sign sequencing fee offer for proposed payload","sign fee offer for proposed payload (marketplace version)","Get the stake value","get the stake table entry from the public key and stake …","Serialize a public key to bytes","Validate a signature","validate signature over block information with the builder…","validate the message with the builder’s public key","validate signature over sequencing fee information with …","validate signature over sequencing fee information with …","type for the staked amount","Auxiliary information associated with the key","at arbitrary block height","type for the commitment to the current stake table","marks the snapshot at the beginning of the current epoch","Key already exists","the latest “Head” where all new changes are applied to","Insufficient fund: the number of stake cannot be negative","type for the iterator over (key, value) entries","type for stake key","Key not found","marks the beginning of the last epoch","type for the proof associated with the lookup result (if …","Malformed Merkle proof","Key mismatched","Internal error caused by Rescue","The historical snapshot requested is not supported.","Snapshots of the stake table","The number of stake exceed U256","Error type for <code>StakeTableScheme</code>","Common interfaces required for a stake table used in …","Verification Error","","","Batch deregister a list of keys. A default implementation …","Batch register a list of new keys. A default …","Batch update the stake balance of <code>keys</code>. Read documentation …","","","","","Returns the commitment to the <code>version</code> of stake table.","Returns true if <code>key</code> is currently registered, else returns …","","","","","Deregister an existing key from the stake table. Returns …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the number of keys in the <code>version</code> of the table.","Returns the stakes withhelded by a public key.","Return the associated stake amount and auxiliary …","Returns the stakes withhelded by a public key along with a …","","","Register a new key into the stake table.","Randomly sample a (key, stake amount) pair proportional to …","","Returns the accumulated stakes of all registered keys of …","","","","","Returns an iterator over all (key, value) entries of the …","","","Update the stake of the <code>key</code> with …","","","The type of the state delta this state is associated with.","The error type for this particular type of ledger state","The type of the instance-level state this state is …","Instance-level state, which allows us to fetch missing …","Application-specific state delta, which will be used to …","extra functions required on state to be usable by …","Time compatibility needed for reward collection","Abstraction over the state that blocks modify","Creates random transaction if possible otherwise panics …","Construct the state with the given block header.","Construct a genesis validated state.","Gets called to notify the persistence backend that this …","Check if the proposed block header is valid and apply it …","Abstraction for storing a variety of consensus payload …","Add a proposal to the stored DA proposals.","Add a proposal we sent to the store","Add a proposal to the stored VID proposals.","Record a HotShotAction taken.","Update the current high QC in storage.","Update the currently undecided state of consensus.  This …","Commitment that builders use to sign block options. A thin …","A pending view with an available block but not leaf …","Stop right before this view number","Leaf has failed","Stop including this view number","Undecided view","The hash of a leaf.","A struct containing information about a finished round.","Type alias for byte array of SHA256 digest length","Optional validated state and state delta.","Whether or not to stop inclusively or exclusively when …","This exists so we can perform state transitions mutably","A view’s state","","","","","","","","For the wire format, we use bincode with the following …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create new commitment for <code>data</code>","Create a new commitment from a raw Sha256 digest","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Return the underlying undecide leaf commitment and …","return the underlying leaf hash if it exists","return the underlying block paylod commitment if it exists","","","","","","","","","","","return the underlying validated state if it exists","Return the underlying validated state and state delta if …","","","","","","","","","","","","","","","","","","","","","","","","","The view data. Wrapped in a struct so we can mutate","The round that finished","","","","","","Optional state delta.","Proposed leaf","Payload commitment to the available block.","Validated state.","Internal Jellyfish VID scheme","Private type alias for the EC pairing type parameter for …","Private type alias for the hash type parameter for <code>Advz</code>.","SRS comment","Newtype wrapper for a large payload range proof.","Newtype wrapper for a small payload range proof.","VID commitment type","VID common type","VID PrecomputeData type","Newtype wrapper for a VID scheme type that impls <code>VidScheme</code>…","VID share type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Convert a [<code>Statement&lt;&#39;_, VidSchemeType&gt;</code>] to a […","","","","","","","","","","","","","","","","Convert a <code>VidDisperse&lt;Advz&gt;</code> to a <code>VidDisperse&lt;VidSchemeType&gt;</code>…","VID scheme constructor.","","","","","","The certificate formed from the collection of signatures a …","Type of data commitment this vote uses.","Any type that is associated with a view","Mapping of vote commitment to signatures and bitvec","Threshold Functions","A simple vote that has a signer and commitment to the data …","Accumulates votes until a certificate is formed.  This …","Mapping of commitments to vote tokens by key.","The data commitment this certificate certifies.","Add a vote to the total accumulated votes.  Returns the …","","","","","Build a certificate from the data commitment and the …","Gets the data which was voted on by this vote","Get the commitment which was voted on","Gets the Data commitment of the vote","Get the vote commitment which the votes commit to","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Checks if the cert is valid","","Phantom data to specify the types this accumulator is for","","Get the signature of the vote sender","A bitvec to indicate which node is active and send out a …","Gets the public signature key of the votes creator/sender","Returns the amount of stake needed to create this …","","","","Returns the view number the type refers to.","Map of all signatures accumulated so far",""],"if":"````````{{cb}d{}}000{ee{}{{h{}{{f{c}}}}}}{ce{}{}}0000000{cj{hlnA`}}```{AbAb}{{{Ad{c}}}{{Ad{c}}}{AfAh}}{{{Aj{c}}}{{Aj{c}}}{AfAh}}{{{Al{c}}}{{Al{c}}}{AfAh}}{{ce}d{}{}}000``````{{}{{Ad{c}}}Ah}{{}{{Aj{c}}}Ah}{Anc{}}0000000{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{Ab}}}Bd}{c{{Bb{{Ad{e}}}}}BdAh}22{c{{Bb{{Aj{e}}}}}BdAh}3{c{{Bb{{Al{e}}}}}BdAh}{And}000{{{Aj{c}}{Aj{c}}}Bf{BhAh}}{{ce}Bf{}{}}000````{{AbBj}Bl}{{{Ad{c}}Bj}BlAh}0{{{Aj{c}}Bj}BlAh}{{{Aj{c}}Bj}Bl{BnAh}}{{{Al{c}}Bj}BlAh}{cc{}}000{{{Cb{C`}}}{{Cd{{Aj{c}}}}}Ah}{{{Cf{C`}}ChChBf}{{Ad{c}}}Ah}{{ce}Ch{Cjl}Cl}{{{Aj{c}}e}d{CjAh}Cn}{{ce}{{D`{eg}}}{}{DbnA`}{}}0{{}An}000{ce{}{}}000````{{}{{Bb{DdDf}}}}000```````{{}}000`{{{Ad{c}}}{{Aj{c}}}Ah}````{{Abc}BbDh}{{{Ad{c}}e}Bb{DjAh}Dh}{{{Aj{c}}e}BbAhDh}{{{Al{c}}e}Bb{DjAh}Dh}{{{Al{c}}Ch}dAh}```````````````````{{{Aj{c}}}{{Dl{C`}}}Ah}9999{cDn{}}0`{c{{Bb{e}}}{}{}}0000000{cE`{}}000````<<<<`{{cb}d{}}=={{{Eb{c}}}{{Eb{c}}}{AfEd}}{{ce}d{}{}}{Anc{}}0{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{{Eb{e}}}}}BdEd}{And}{{{Eb{c}}Bj}Bl{BnEd}}{cc{}}{{}An}{ce{}{}}{{}{{Bb{DdDf}}}}{{}}`{{{Eb{c}}e}BbEdDh}`3`??>3`````````````====``````33333333333333`{{{Ef{c}}Eh}{{Cd{d}}}Ed}{{{Ef{c}}}{{Ef{c}}}{AfEd}}{{{Ej{c}}}{{Ej{c}}}{AfEd}}{ElEl}{{{En{c}}}{{En{c}}}{AfEd}}{{ce}d{}{}}000{{{Ej{c}}}dEd}`{{{Ej{c}}}{}Ed}``{{{Ej{c}}}{{F`{c}}}Ed}{{{Ej{c}}}EhEd}{{}El}{Anc{}}{{{Fb{c}}}eEd{}}1{{{Fd{c}}}eEd{}}2{{{Ff{c}}}eEd{}}333333133333{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}000000{{{Fb{c}}}dEd}{And}{{{Fd{c}}}dEd}1{{{Ff{c}}}dEd}22222{{{En{c}}{En{c}}}Bf{BhEd}}{{ce}Bf{}{}}000`{{{Ef{c}}Bj}Bl{BnEd}}{{{Ej{c}}Bj}BlEd}{{ElBj}Bl}{{{En{c}}Bj}Bl{BnEd}}{cc{}}000000{{ce}Ch{Cjl}Cl}{{{En{c}}e}d{CjEd}Cn}{{{Ej{c}}}{{Fh{c}}}Ed}`{{}An}000000`{ce{}{}}000000``{{{Ej{c}}}{}Ed}``{{{Ej{c}}}{{Fn{{Fl{c{Fj{c}}}}}}}Ed}``{{}{{Bb{DdDf}}}}000000````2```{{{G`{{Ej{c}}}}}{{Fb{c}}}Ed}{{{Gb{{Ej{c}}}}}{{Fd{c}}}Ed}{{{Gd{{Ej{c}}}}}{{Ff{c}}}Ed}{{{Gf{c}}}{{Ef{c}}}Ed}{{{Fn{{Gh{c}}}}{Fn{{Fl{c{Fj{c}}}}}}{Gj{{F`{c}}}}{Fn{{Eh{{Cb{C`}}}}}}{Fh{c}}{Eh{El}}}{{Ej{c}}}Ed}{GlEl}````````{{}}000000`{{{Ef{c}}}{{Fb{c}}}Ed}`{{{Ej{c}}}{{H`{{Gn{c}}}}}Ed}`{{{Ej{c}}}{{Gj{{F`{c}}}}}Ed}`{{{Ej{c}}}{{Fn{{Eh{{Cb{C`}}}}}}}Ed}`{{{Ej{c}}}{{Cd{Eh}}}Ed}{{{Ej{c}}}{{Hb{c}}}Ed}`{ce{}{}}000{c{{Bb{e}}}{}{}}0000000000000{{{Ef{c}}}{{Cd{{Fb{c}}}}}Ed}{{{Ef{c}}}{{Cd{{Fd{c}}}}}Ed}{cE`{}}000000{{{Ej{c}}{Fh{c}}}{{Hd{d}}}Ed}{{{Ej{c}}}{{Hd{d}}}Ed}{{{Ej{c}}{Fl{c{Fj{c}}}}}{{Hd{d}}}Ed}1{{{Ej{c}}{Gn{c}}}dEd}{{{Ej{c}}{F`{c}}}dEd}{{{Ej{c}}{Eh{{Cb{C`}}}}}{{Hd{d}}}Ed}{{{Ej{c}}{Gh{c}}}{{Hd{d}}}Ed}{{{Ej{c}}{Fl{c{Hf{c}}}}}dEd}6{{{Ef{c}}}{{Ff{c}}}Ed}{{{Ff{c}}}{{Fd{c}}}Ed}{{{Ej{c}}}{{Fn{{Gh{c}}}}}Ed}`{{{Ej{c}}}{{Hh{c}}}Ed}``{{{Ej{c}}HjBfe}{{Hd{d{Hl{c}}}}}Ed{{Hn{{F`{c}}Eh{Cd{Eh}}}{{f{Bf}}}}}}{ce{}{}}000000{{{Ef{c}}}{{Fd{c}}}Ed}````````````````````````````````````````{{cb}d{}}00000000000{{I`Ch}c{}}{{I`Ch}d}{cIb{}}0`{Id{{Cd{If}}}}{c{{Hd{dIh}}}{{Il{}{{Ij{I`}}}}n}}{{{F`{c}}}{}Ed}``0{{{F`{c}}}CdEd}`99999999999999999999999999{InId}{J`Id}{JbId}{{{Eh{{Cb{C`}}}}Eh{Cd{Jd}}}{{Jf{c}}}Ed}{Id{{Cd{Ib}}}}{I`{{Hd{dIh}}}}{I`I`}{{{Jh{c}}}{{Jh{c}}}{AfEd}}{{{Jj{c}}}{{Jj{c}}}{EdAf}}{{{Jf{c}}}{{Jf{c}}}{AfEd}}{{{Jl{c}}}{{Jl{c}}}{AfEd}}{{{Hf{c}}}{{Hf{c}}}{AfEd}}{{{Fj{c}}}{{Fj{c}}}{AfEd}}{InIn}{J`J`}{JbJb}{{{F`{c}}}{{F`{c}}}{AfEd}}{{{Jn{c}}}{{Jn{c}}}{AfEd}}{{ce}d{}{}}00000000000{{I`I`}K`}{I`{{Kb{I`}}}}{{{F`{c}}}{{Kb{{F`{c}}}}}Ed}``{{ce}K`{}{}}{{{Kf{}{{Kd{c}}}}KhCh}{}Ed}{{{F`{c}}KhCh}{}Ed}{I`c{}}{Anc{}}0000000000000000000000000{IdKj}{c{{Bb{I`}}}Bd}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}0{c{{Bb{{Jh{e}}}}}BdEd}1{c{{Bb{{Jj{e}}}}}BdEd}{c{{Bb{{Jf{e}}}}}BdEd}3{c{{Bb{{Jl{e}}}}}BdEd}44{c{{Bb{{Hf{e}}}}}BdEd}5{c{{Bb{{Fj{e}}}}}BdEd}{c{{Bb{Id}}}Bd}7777{c{{Bb{{F`{e}}}}}BdEd}88{{cKlKn}{{Hd{I`Ih}}}L`}{And}000000000000``{{I`I`}Bf}{{{Jh{c}}{Jh{c}}}Bf{BhEd}}{{{Jj{c}}{Jj{c}}}Bf{EdBh}}{{{Jf{c}}{Jf{c}}}Bf{BhEd}}{{{Jl{c}}{Jl{c}}}Bf{BhEd}}{{{Hf{c}}{Hf{c}}}Bf{BhEd}}{{{Fj{c}}{Fj{c}}}Bf{BhEd}}{{{F`{c}}{F`{c}}}BfEd}{{{Jn{c}}{Jn{c}}}Bf{BhEd}}{{ce}Bf{}{}}00000000000000000000000000000000000{{{F`{c}}{F`{c}}{Eh{{Ld{{Cd{{Lb{c}}}}}}}}}{{Hd{d}}}Ed}{In{{Bb{cId}}}{}}{J`{{Bb{cId}}}{}}{Jb{{Bb{cId}}}{}}{{}{{Kb{c}}}Lf}{{{F`{c}}An}{{Hd{dId}}}Ed}{{{F`{c}}}dEd}{{I`Bj}Bl}{{{Jh{c}}Bj}BlEd}{{{Jj{c}}Bj}BlEd}{{{Jf{c}}Bj}Bl{BnEd}}{{{Jl{c}}Bj}BlEd}{{{Hf{c}}Bj}Bl{BnEd}}{{{Fj{c}}Bj}BlEd}{{IdBj}Bl}0{{InBj}Bl}{{J`Bj}Bl}{{JbBj}Bl}{{{F`{c}}Bj}BlEd}{{{F`{c}}Bj}Bl{BnEd}}{{{Jn{c}}Bj}Bl{BnEd}}{cc{}}000000000000{{{Lj{Lh}}}{{Jf{c}}}Ed}{{{Fj{c}}}{{F`{c}}}Ed}{{{Jf{c}}}{{Dl{{Hf{c}}}}}Ed}{{}I`}{{}{{F`{c}}}Ed}{{ce}Ch{Cjl}Cl}0000000{{I`c}dCn}{{{Jh{c}}e}d{CjEd}Cn}{{{Jj{c}}e}d{EdCj}Cn}{{{Jf{c}}e}d{CjEd}Cn}{{{Jl{c}}e}d{CjEd}Cn}{{{Hf{c}}e}d{CjEd}Cn}{{{Fj{c}}e}d{CjEd}Cn}{{{F`{c}}e}dEdCn}{{ce}{{D`{eg}}}{}{DbnA`}{}}0{{{F`{c}}}ChEd}{c{}{}}{{}An}000000000000{ce{}{}}000000000000{{Inc}Id{}}{{J`c}Id{}}{{Jbc}Id{}}{{{Jl{c}}}BfEd}{{{F`{c}}}{{Fh{c}}}Ed}``{{}{{Bb{DdDf}}}}000000000000``{ChI`}{{{Eh{{Cb{C`}}}}{Ln{{Ll{c}}}}{Cd{Jd}}Cd}{{Jn{c}}}Ed}`{{{F`{c}}}{{Kb{{F`{c}}}}}Ed}`{{I`I`}{{Cd{K`}}}}{{{F`{c}}}M`Ed}``{{}}000000000000`{Kh{{Kb{c}}}Lf}``{{I`c}BbDh}{{{Jh{c}}e}BbEdDh}{{{Jj{c}}e}BbEdDh}{{{Jf{c}}e}BbEdDh}{{{Jl{c}}e}Bb{DjEd}Dh}{{{Hf{c}}e}BbEdDh}{{{Fj{c}}e}Bb{DjEd}Dh}{{Idc}BbDh}{{{F`{c}}e}Bb{DjEd}Dh}{{}{{Dl{C`}}}}{{I`cKl}{{Hd{dIh}}}Mb}{{I`Kl}An}``{Id{{Cd{Ib}}}}{{I`Ch}c{}}{{{F`{c}}{F`{c}}{Cd{{Lb{c}}}}}{{Hd{d}}}Ed}{ce{}{}}00000000000{{{Hf{c}}}{{Cd{{Fl{c{Hf{c}}}}}}}Ed}{cDn{}}0{e{{Cd{{Jf{c}}}}}Ed{{Il{}{{Ij{{Hf{c}}}}}}}}{{{Fl{c{Jf{c}}}}}{{Dl{{Fl{c{Hf{c}}}}}}}Ed}{c{{Bb{e}}}{}{}}0000000000000000000000000{cE`{}}000000000000{I`Ch}{{{F`{c}}}{{Cd{{Lb{c}}}}}Ed}````{{{Jh{c}}}{}Ed}{{{Jj{c}}}{}Ed}{{{Jf{c}}}{}Ed}{{{Hf{c}}}{}Ed}{{{Fj{c}}}{}Ed}{{{F`{c}}}{}Ed}```````>>>>>>>>>>>>>``>>{{AnMd}{{Cd{{Ll{c}}}}}Ed}{An{{Cd{M`}}}}{Anc{}}{Mf{{Mj{{Mh{An{Cd{M`}}}}}}}}1{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{And}{cc{}}{{}An}{ce{}{}}{{}{{Bb{DdDf}}}}{{}d}9{{}}{c{{Bb{e}}}{}{}}0{cE`{}}5````````````````````````````````````{{cb}d{}}000000000000{cIb{}}0{{{Hl{c}}}{{Cd{If}}}Ed}8888888888888888888888888888{Ml{{Hl{c}}}Ed}{{{Mn{c}}}{{Hl{e}}}{{N`{Dn}}}Ed}{{{Nb{ce}}}{{Hl{g}}}N`{{N`{Nd}}}Ed}{{{Nf{ce}}}{{Hl{g}}}{{N`{An}}}{{N`{Nh}}}Ed}{{{Nj{c}}}{{Hl{e}}}{{N`{Dn}}}Ed}{Nl{{Hl{c}}}Ed}{Nn{{Hl{c}}}Ed}{{{Hl{c}}}{{Cd{Ib}}}Ed}{O`O`}{ObOb}{OdOd}{OfOf}{MlMl}{{{Mn{c}}}{{Mn{c}}}Af}{OhOh}{{{Nb{ce}}}{{Nb{ce}}}AfAf}{{{Nf{ce}}}{{Nf{ce}}}AfAf}{{{Nj{c}}}{{Nj{c}}}Af}{NlNl}{NnNn}{NdNd}{{ce}d{}{}}000000000000``{Anc{}}000000000000000000000000000{{{Hl{c}}}KjEd}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}000000000000{c{{Bb{Nd}}}Bd}1{And}0000000000000{Ml{{Bb{c{Hl{e}}}}}{}Ed}{{{Mn{c}}}{{Bb{e{Hl{g}}}}}{{N`{Dn}}}{}Ed}{{{Nb{ce}}}{{Bb{g{Hl{i}}}}}N`{{N`{Nd}}}{}Ed}{{{Nf{ce}}}{{Bb{g{Hl{i}}}}}{{N`{An}}}{{N`{Nh}}}{}Ed}{{{Nj{c}}}{{Bb{e{Hl{g}}}}}{{N`{Dn}}}{}Ed}{Nl{{Bb{c{Hl{e}}}}}{}Ed}{Nn{{Bb{c{Hl{e}}}}}{}Ed}{{O`Bj}Bl}{{ObBj}Bl}{{OdBj}Bl}{{OfBj}Bl}{{MlBj}Bl}{{{Mn{c}}Bj}BlBn}{{OhBj}Bl}{{{Nb{ce}}Bj}BlBnBn}{{{Nf{ce}}Bj}BlBnBn}{{{Nj{c}}Bj}BlBn}{{NlBj}Bl}{{NnBj}Bl}{{{Hl{c}}Bj}Bl{BnEd}}{{{Hl{c}}Bj}BlEd}{{NdBj}Bl}{cc{}}0000000000000{{ce}{{D`{eg}}}{}{DbnA`}{}}{c{}{}}{{}An}0000000000000{ce{}{}}0000000000000{{O`c}{{Hl{e}}}{}Ed}{{Obc}{{Hl{e}}}{}Ed}{{Odc}{{Hl{e}}}{}Ed}{{Ofc}{{Hl{e}}}{}Ed}{{Mlc}{{Hl{e}}}{}Ed}{{{Mn{c}}e}{{Hl{g}}}{{N`{Dn}}}{}Ed}{{Ohc}{{Hl{e}}}{}Ed}{{{Nb{ce}}g}{{Hl{i}}}N`{{N`{Nd}}}{}Ed}{{{Nf{ce}}g}{{Hl{i}}}{{N`{An}}}{{N`{Nh}}}{}Ed}{{{Nj{c}}e}{{Hl{g}}}{{N`{Dn}}}{}Ed}{{Nlc}{{Hl{e}}}{}Ed}{{Nnc}{{Hl{e}}}{}Ed}{{}{{Bb{DdDf}}}}0000000000000`{{}}0000000000000{{Ndc}BbDh}{{{Hl{c}}}{{Cd{Ib}}}Ed}``{ce{}{}}000000000000{cDn{}}{c{{Bb{e}}}{}{}}000000000000000000000000000{cE`{}}0000000000000`33333333333333``````````````````````````````````{{cb}d{}}00044444444`{{{Oj{c}}}{{Oj{c}}}{AfEd}}{{{Ol{c}}}{{Ol{c}}}{AfEd}}{{{On{c}}}{{On{c}}}{AfEd}}{A`A`}{{ce}d{}{}}000`{Anc{}}0000000{c{{Bb{{Oj{e}}}}}BdEd}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{{Ol{e}}}}}BdEd}1{c{{Bb{{On{e}}}}}BdEd}2{c{{Bb{A`}}}Bd}3{And}000``{{{Oj{c}}Bj}Bl{BnEd}}{{{Ol{c}}Bj}Bl{BnEd}}{{{On{c}}Bj}Bl{BnEd}}{{A`Bj}Bl}{cc{}}000{{}An}000{ce{}{}}000{{}{{Bb{DdDf}}}}000``{{{F`{c}}Eh{Cd{Eh}}{Cd{{Hf{c}}}}}{{Ol{c}}}Ed}{{}}000{{{Oj{c}}e}Bb{DjEd}Dh}{{{Ol{c}}e}Bb{DjEd}Dh}{{{On{c}}e}Bb{DjEd}Dh}{{A`c}BbDh}`7777{c{{Bb{e}}}{}{}}0000000{cE`{}}000``9999``````````````{c{{Bb{{Eh{{Hl{e}}}}}}}BdEd}{{{Eh{{Hl{c}}}}e}BbEdDh}`````````````{{cb}d{}}0000`{c{{Ab{eg}}}{}{}Ad}{{{Af{c}}}{{Cb{c}}}Ah}{c{{Bb{dIh}}}{{Il{}{{Ij{Aj}}}}n}}{e{{Bb{dIh}}}Ah{{Il{}{{Ij{{Al{c}}}}}}n}}{{{Af{c}}}cAh}``0``{ce{}{}}000000000{Aj{{Bb{dIh}}}}{{{Al{c}}}{{Bb{dIh}}}Ah}{AnAn}{AjAj}{AA`AA`}{{{Al{c}}}{{Al{c}}}{AfAh}}{{{Af{c}}}{{Af{c}}}{AfAh}}{{ce}d{}{}}0000{{{Al{c}}{Al{c}}}K`{AAbAh}}{{ce}K`{}{}}`{{}An}{{}{{Al{c}}}{AAdAh}}{Anc{}}{Anc{}}000000000{c{{Bb{An}}}Bd}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{Aj}}}Bd}1{c{{Bb{AA`}}}Bd}22{c{{Bb{{Al{e}}}}}BdAh}3{{cKlKn}{{Bb{AjIh}}}L`}{{cKlKn}{{Bb{{Al{e}}Ih}}}L`Ah}{And}0000{{{Al{c}}{Al{c}}}Bf{BhAh}}{{ce}Bf{}{}}000{{{Af{c}}}cAh}``{{AnBj}Bl}{{AjBj}Bl}{{AA`Bj}Bl}{{{Al{c}}Bj}Bl{BnAh}}{{{Al{c}}Bj}BlAh}{{{Af{c}}Bj}Bl{BnAh}}{cc{}}{{{AAh{AAf}}}An}111{{{Dl{c}}}{{Af{c}}}Ah}2{AAjAn}{Kj{{Bb{{Al{c}}e}}}Ah{}}{{}An}{{{Cf{C`}}}An}{{{Cf{C`}}Ch}An}{{ce}Ch{Cjl}Cl}{{{Al{c}}e}d{CjAh}Cn}{{ce}{{D`{eg}}}{}{DbnA`}{}}{{}An}0000{ce{}{}}0000`{{}{{Bb{DdDf}}}}0000{{{Al{c}}{Al{c}}}{{Cd{K`}}}{AAlAh}}{{}}0000{{{Af{c}}}cAh}`{{Anc}BbDh}{{Ajc}BbDh}{{AA`c}BbDh}{{{Al{c}}e}BbAhDh}{{AjcKl}{{Bb{dIh}}}Mb}{{{Al{c}}eKl}{{Bb{dIh}}}AhMb}{{AjKl}An}{{{Al{c}}Kl}AnAh}``8{{{Af{c}}}{{AAn{ccc}}}Ah}````9{{}Dn}:>>>>>{cDn{}}{c{{Bb{{Ab{eg}}{AB`{e}}}}}{}{}Ad}{c{{Bb{e}}}{}{}}00{ABb{{Bb{{Al{c}}e}}}Ah{}}01111111{cE`{}}0000?``{ce{}{}}0000````````````````````````````````````````````````{{cb}d{}}000000000``11111111111111111111{{{ABd{c}}}{{ABd{c}}}{AfEd}}{{{ABf{c}}}{{ABf{c}}}{AfEd}}{ABhABh}{{{ABj{c}}}{{ABj{c}}}{AfEd}}{{{ABl{c}}}{{ABl{c}}}{AfEd}}{{{ABn{c}}}{{ABn{c}}}{AfEd}}{{{AC`{c}}}{{AC`{c}}}{AfEd}}{{{ACb{c}}}{{ACb{c}}}{AfEd}}{{{Fl{ce}}}{{Fl{ce}}}{AfEd}{Af{ACd{c}}ACf}}{{{ACh{ce}}}{{ACh{ce}}}{AfEd}{AfACj}}{{ce}d{}{}}000000000``{Anc{}}0000000000000000000{c{{Bb{{ABd{e}}}}}BdEd}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}00{c{{Bb{{ABj{e}}}}}BdEd}11{c{{Bb{{ABl{e}}}}}BdEd}2{c{{Bb{{ABn{e}}}}}BdEd}{c{{Bb{{AC`{e}}}}}BdEd}44{c{{Bb{{ACb{e}}}}}BdEd}{c{{Bb{{Fl{eg}}}}}BdEd{{ACd{e}}ACf}}6{{{ACh{ce}}{Cb{C`}}}{{Hd{g}}}EdACj{{ACd{c}}ACl}}7{And}000000000{{{ABd{c}}{ABd{c}}}Bf{BhEd}}{{ABhABh}Bf}{{{ABj{c}}{ABj{c}}}Bf{BhEd}}{{{ABl{c}}{ABl{c}}}Bf{BhEd}}{{{ABn{c}}{ABn{c}}}Bf{BhEd}}{{{AC`{c}}{AC`{c}}}Bf{BhEd}}{{{ACb{c}}{ACb{c}}}Bf{BhEd}}{{{Fl{ce}}{Fl{ce}}}Bf{BhEd}{Bh{ACd{c}}ACf}}{{ce}Bf{}{}}000000000000000000000000000{{{ABd{c}}Bj}BlEd}{{{ABf{c}}Bj}Bl{BnEd}}{{{ABj{c}}Bj}Bl{BnEd}}{{{ABl{c}}Bj}Bl{BnEd}}{{{ABn{c}}Bj}Bl{BnEd}}{{{AC`{c}}Bj}Bl{BnEd}}{{{ACb{c}}Bj}Bl{BnEd}}{{{Fl{ce}}Bj}Bl{BnEd}{Bn{ACd{c}}ACf}}{cc{}}00{{{ACb{c}}}{{ABj{c}}}Ed}1111111{{{AC`{c}}}{{ABj{c}}}Ed}{{ce}Ch{Cjl}Cl}000000{{{ABd{c}}e}d{CjEd}Cn}{{{ABj{c}}e}d{CjEd}Cn}{{{ABl{c}}e}d{CjEd}Cn}{{{ABn{c}}e}d{CjEd}Cn}{{{AC`{c}}e}d{CjEd}Cn}{{{ACb{c}}e}d{CjEd}Cn}{{{Fl{ce}}g}d{CjEd}{Cj{ACd{c}}ACf}Cn}{{}An}000000000{ce{}{}}000000000`{{}{{Bb{DdDf}}}}000000000{{}{{ACh{ce}}}EdACj}{{}}000000000{{{ABj{c}}}ABhEd}{{{AC`{c}}}ABhEd}`{{{ABd{c}}e}BbEdDh}{{{ABj{c}}e}BbEdDh}{{{ABl{c}}e}BbEdDh}{{{ABn{c}}e}BbEdDh}{{{AC`{c}}e}BbEdDh}{{{ACb{c}}e}Bb{DjEd}Dh}{{{Fl{ce}}g}BbEd{Dj{ACd{c}}ACf}Dh}{{{ACh{ce}}g}{{Hd{{Dl{C`}}}}}EdACj{{ACd{c}}Dj}}`=========={c{{Bb{e}}}{}{}}0000000000000000000{cE`{}}000000000{{{Fl{c{Fj{c}}}}}{{Hd{d}}}Ed}{{{ACh{ce}}}{{Hd{Md}}}EdACj}{{{ABd{c}}}{}Ed}{{{ABj{c}}}{}Ed}{{{AC`{c}}}{}Ed}{ce{}{}}000000000``{{cb}d{}}`{{cAbCb}{{Bb{eACn}}}{}{}}2222{{c{AD`{e}}g}{{Bb{iACn}}}{}{}{}{}}{{{ADb{ce}}}{{ADb{ce}}}{AfAh}{AfACl}}{{ce}d{}{}}{Anc{}}000{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{{ADd{e}}}}}Bd{ADfDjACl}}{c{{Bb{{ADb{eg}}}}}BdAhACl}2{And}0{{{ADb{ce}}{ADb{ce}}}Bf{BhAh}{BhACl}}{{{ADb{ce}}Bj}Bl{BnAh}{BnACl}}{cc{}}0{{ce}Ch{Cjl}Cl}{{{ADb{ce}}g}d{CjAh}{CjACl}Cn}{{}An}0{ce{}{}}0{{}{{Bb{DdDf}}}}0{{}}0{{{ADd{c}}e}Bb{ADfDjACl}Dh}{{{ADb{ce}}g}Bb{DjAh}{DjACl}Dh}{{ce}{{Bb{ACn}}}{{ADh{Cb}}}{ADjKh}}``5{{c{AD`{e}}g}{{Bb{DlACn}}}{}{}{}}{c{{Bb{e}}}{}{}}000{cE`{}}088`````{{cb}d{}}0999999{ADlADl}{ADnADn}{{ce}d{}{}}0`{Anc{}}00000{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}0{c{{Bb{ADl}}}Bd}{c{{Bb{ADn}}}Bd}2{And}00{{ADlADl}Bf}{{ADnADn}Bf}{{ce}Bf{}{}}0000000{{ADlBj}Bl}{{ADnBj}Bl}{cc{}}00{{}An}00`{ce{}{}}00{{}{{Bb{DdDf}}}}00`{{}}00`{{ADlc}BbDh}{{ADnc}BbDh}`44{c{{Bb{e}}}{}{}}00000{cE`{}}00666````{{cAb{Cb{e}}}g{}{}{}}{{c{Cb{C`}}e}Bf{}{}}{{{Cb{C`}}}{{Bb{AE`Ih}}}}{cAE`{}}{{{Cf{C`}}Ch}{{AAn{AE`c}}}{}}{{{Cf{C`}}Ch}{{AAn{AEbc}}}{}}{{}AE`}3{{{Dl{c}}AEd}e{}{}}{c{{AAn{eAEf}}}{}{}}{{c{Cb{C`}}}{{Bb{eg}}}{}{}{}}0{{AE`Ch}c{}}{AE`{{Dl{C`}}}}{{AE`c{Cb{C`}}}Bf{}}{{AEbc{Cb{C`}}}Bf{}}````````````{{cb}d{}}000````````{ce{}{}}0000000{AEhAEh}{AEjAEj}{AElAEl}{{{AEn{ceg}}}{{AEn{ceg}}}{AfEd}{AfAF`}{Af{AFb{c}}}}{{ce}d{}{}}000{{{AEn{ceg}}}{{Kb{{AEn{ceg}}}}}Ed{AF`Lf}{{AFb{c}}}}{{{Kb{c}}e}{{AEn{gci}}}AF`{}Ed{{AFb{g}}}}````````{{{AEn{ceg}}}iEdAF`{{AFb{c}}}{}}{{{AEn{ceg}}}{{Kb{i}}}EdAF`{{AFb{c}}}{}}{Anc{}}0000000{c{{Bb{AEh}}}Bd}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{AEj}}}Bd}11{c{{Bb{AEl}}}Bd}2{c{{Bb{{AEn{egi}}}}}BdEd{AClAF`}{{AFb{e}}}}{And}000{{AEhAEh}Bf}{{AEjAEj}Bf}{{AElAEl}Bf}{{{AEn{ceg}}{AEn{ceg}}}Bf{BhEd}{BhAF`}{Bh{AFb{c}}}}{{ce}Bf{}{}}000000000000000{{{Fh{c}}Bj}BlEd}{{AEhBj}Bl}{{AEjBj}Bl}{{AElBj}Bl}{{{AEn{ceg}}Bj}Bl{BnEd}{BnAF`}{Bn{AFb{c}}}}{cc{}}000{{}{{Fh{c}}}Ed}{{}{{AEn{c{AFd{c}}AEh}}}Ed}{{ce}Ch{Cjl}Cl}000{{AEhc}dCn}{{AEjc}dCn}{{AElc}dCn}{{{AEn{ceg}}i}d{CjEd}{CjAF`}{Cj{AFb{c}}}Cn}{{ce}{{D`{eg}}}{}{DbnA`}{}}{{}An}000{ce{}{}}000{{{Lb{c}}{Eh{{Ld{{Cd{{Lb{c}}}}}}}}}{{Hd{d}}}Ed}{{{AEn{c{AFf{c}}AEl}}{Eh{{Ld{{Cd{{AEn{c{AFf{c}}AEl}}}}}}}}}{{Hd{d}}}Ed}{{{AEn{ceg}}i}BfEdAF`{{AFb{c}}}{{AFh{c}}}}{{}{{Bb{DdDf}}}}000{{}}000{{AEhc}BbDh}{{AEjc}BbDh}{{AElc}BbDh}{{{AEn{ceg}}i}BbEd{DjAF`}{{AFb{c}}}Dh}````````{{{Lb{c}}{Cd{{Lb{c}}}}}{{Hd{d}}}Ed}{{{AEn{c{AFf{c}}AEl}}{Cd{{AEn{c{AFf{c}}AEl}}}}}{{Hd{d}}}Ed}{eChEd{{AFh{c}}}}0000<<<<{cDn{}}{c{{Bb{e}}}{}{}}0000000{cE`{}}000{{{Lb{c}}}BfEd}{{{AEn{c{AFf{c}}AEl}}}BfEd}{{{Cd{{Lb{c}}}}}{{Hd{d}}}Ed}{{{Cd{{AEn{c{AFf{c}}AEl}}}}}{{Hd{d}}}Ed}{{{AEn{ceg}}}{}EdAF`{{AFb{c}}}}````````````````{ce{}{}}000`````````````````{{cb}d{}}00000000111111111111111111{{{AFd{c}}}{{AFd{c}}}{AfEd}}{AFjAFj}{{{AFl{c}}}{{AFl{c}}}{AfEd}}{AFnAFn}{{{AG`{c}}}{{AG`{c}}}{AfEd}}{{{AGb{c}}}{{AGb{c}}}{AfEd}}{{{AGd{c}}}{{AGd{c}}}{AfEd}}{{{AFf{c}}}{{AFf{c}}}{AfEdACf}}{{{AGf{ce}}}{{AGf{ce}}}{AfEd}{AfAF`}}{{ce}d{}{}}00000000{{{AFd{c}}}{{Kb{{AFd{c}}}}}Ed}{AFj{{Kb{AFj}}}}{{{AFl{c}}}{{Kb{{AFl{c}}}}}Ed}{AFn{{Kb{AFn}}}}{{{AG`{c}}}{{Kb{{AG`{c}}}}}Ed}{{{AGb{c}}}{{Kb{{AGb{c}}}}}Ed}{{{AGd{c}}}{{Kb{{AGd{c}}}}}Ed}{{{AFf{c}}}{{Kb{{AFf{c}}}}}Ed}{c{{Bb{{AGf{ec}}}}}AF`Ed}````````{{{AGf{ce}}}eEdAF`}{{{AGf{ce}}}{{Kb{e}}}EdAF`}`{Anc{}}00000000000000000{c{{Bb{{AFd{e}}}}}BdEd}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{AFj}}}Bd}1{c{{Bb{{AFl{e}}}}}BdEd}22{c{{Bb{AFn}}}Bd}3{c{{Bb{{AG`{e}}}}}BdEd}{c{{Bb{{AGb{e}}}}}BdEd}55{c{{Bb{{AGd{e}}}}}BdEd}{c{{Bb{{AFf{e}}}}}Bd{EdACf}}7{c{{Bb{{AGf{eg}}}}}BdEd{AClAF`}}8{And}00000000{{{AFd{c}}{AFd{c}}}Bf{BhEd}}{{AFjAFj}Bf}{{{AFl{c}}{AFl{c}}}Bf{BhEd}}{{AFnAFn}Bf}{{{AG`{c}}{AG`{c}}}Bf{BhEd}}{{{AGb{c}}{AGb{c}}}Bf{BhEd}}{{{AGd{c}}{AGd{c}}}Bf{BhEd}}{{{AFf{c}}{AFf{c}}}Bf{BhEdACf}}{{{AGf{ce}}{AGf{ce}}}Bf{BhEd}{BhAF`}}{{ce}Bf{}{}}00000000000000000000000000000000000{{{AFd{c}}Bj}Bl{BnEd}}{{AFjBj}Bl}{{{AFl{c}}Bj}Bl{BnEd}}{{AFnBj}Bl}{{{AG`{c}}Bj}Bl{BnEd}}{{{AGb{c}}Bj}Bl{BnEd}}{{{AGd{c}}Bj}Bl{BnEd}}{{{AFf{c}}Bj}Bl{BnEdACf}}{{{AGf{ce}}Bj}Bl{BnEd}{BnAF`}}{cc{}}00000000{{ce}Ch{Cjl}Cl}00000000{{{AFd{c}}e}d{CjEd}Cn}{{AFjc}dCn}{{{AFl{c}}e}d{CjEd}Cn}{{AFnc}dCn}{{{AG`{c}}e}d{CjEd}Cn}{{{AGb{c}}e}d{CjEd}Cn}{{{AGd{c}}e}d{CjEd}Cn}{{{AFf{c}}e}d{CjEdACf}Cn}{{{AGf{ce}}g}d{CjEd}{CjAF`}Cn}{{}An}00000000{ce{}{}}00000000{{}{{Bb{DdDf}}}}00000000````````{{}}00000000```````{{{AFd{c}}e}Bb{DjEd}Dh}{{AFjc}BbDh}{{{AFl{c}}e}BbEdDh}{{AFnc}BbDh}{{{AG`{c}}e}BbEdDh}{{{AGb{c}}e}BbEdDh}{{{AGd{c}}e}BbEdDh}{{{AFf{c}}e}Bb{EdACf}Dh}{{{AGf{ce}}g}BbEd{DjAF`}Dh}{{{AGf{ce}}}{}EdAF`}````````0<<<<<<<<<{c{{Bb{e}}}{}{}}00000000000000000{cE`{}}00000000`{{ChKj}{{Kb{c}}}Lf}3````````?????????``{{cb}d{}}{ce{}{}}0{{{AGh{c}}}{{AGh{c}}}{AfAh}}{{ce}d{}{}}{Anc{}}0{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{{AGh{e}}}}}BdAh}{And}{{{AGh{c}}{AGh{c}}}Bf{BhAh}}{{ce}Bf{}{}}000{{{AGh{c}}Bj}Bl{BnAh}}{cc{}}{{ce}Ch{Cjl}Cl}{{{AGh{c}}e}d{CjAh}Cn}{{}An}={{{AGh{c}}}cAh}{{}{{Bb{DdDf}}}}{{}}{{{AGh{c}}e}Bb{DjAh}Dh}{{{AGh{c}}}AEdAh}``{ce{}{}}{c{{Bb{e}}}{}{}}0{cE`{}}2````````````````{AGj{{AGn{{AGl{h}}}}}}`````````````{{cb}d{}}{{{AHb{}{{AH`{c}}}}}Ch{IbBnnA`}}55{{{AHb{}{{AH`{c}}}}}AHd{IbBnnA`}}{{{AHn{}{{AH`{c}}{AHf{e}}{AHh{g}}{AHj{i}}{AHl{m}}}}m}AHd{IbBnnA`DjACf}AI`{AIbDjACf}{{AId{k}}}Ed{AfBnACfAIfCjnA`DjAIh}}{{{Ll{c}}}{{Ll{c}}}{AfEd}}{{ce}d{}{}}{Anc{}}0{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{{Ll{e}}}}}BdEd}{And}{{}{{AAn{{AHn{}{{AH`{c}}{AHf{e}}{AHh{g}}{AHj{i}}{AHl{m}}}}m}}}{IbBnnA`DjACf}AI`{AIbDjACf}{{AId{k}}}Ed{AfBnACfAIfCjnA`DjAIh}}{AIh{{Eh{{Cb{C`}}}}}}{{{Ll{c}}{Ll{c}}}Bf{BhEd}}{{ce}Bf{}{}}000```{{{Ll{c}}Bj}Bl{BnEd}}{cc{}}{{{Cb{C`}}c}{{AHn{}{{AH`{e}}{AHf{g}}{AHh{i}}{AHj{k}}{AHl{c}}}}}{AfBnACfAIfCjnA`DjAIh}{IbBnnA`DjACf}AI`{AIbDjACf}{{AId{m}}}Ed}{{egi}{{AGn{{AGl{h}}}}}{}{{AIj{}{{Ij{c}}}}n}{}{}}{{}AIl}{{M`AHd}{{AHb{}{{AH`{c}}}}}{IbBnnA`}}{{{AHb{}{{AH`{c}}}}}Cd{IbBnnA`}}{{ce}Ch{Cjl}Cl}{{{Ll{c}}e}d{CjEd}Cn}{{}An}{ce{}{}}{{}{{Bb{DdDf}}}}{{{AHb{}{{AH`{c}}}}}{}{IbBnnA`}}{{{F`{c}}M`AHd{Ll{c}}AInMd}{{`{{h{}{{f{{Bb{{AHb{}{{AH`{e}}}}e}}}}}}n}}}Ed{IbBnnA`}}{{{F`{c}}M`AHd{Dl{{Ll{c}}}}AInCdMd}{{`{{h{}{{f{{Bb{{AHb{}{{AH`{e}}}}e}}}}}}n}}}Ed{IbBnnA`}}{{{AHn{}{{AH`{c}}{AHf{e}}{AHh{g}}{AHj{i}}{AHl{m}}}}m}An{IbBnnA`DjACf}AI`{AIbDjACf}{{AId{k}}}Ed{AfBnACfAIfCjnA`DjAIh}}{{{AHb{}{{AH`{c}}}}}M`{IbBnnA`}}{{}}{{{Cb{C`}}An}AAn}{{{Ll{c}}e}BbEdDh}9{{{AHn{}{{AH`{c}}{AHf{e}}{AHh{g}}{AHj{i}}{AHl{m}}}}m}{{Dl{{Kb{g}}}}}{IbBnnA`DjACf}AI`{AIbDjACf}{{AId{k}}}Ed{AfBnACfAIfCjnA`DjAIh}}{{{AHn{}{{AH`{c}}{AHf{e}}{AHh{g}}{AHj{i}}{AHl{m}}}}m}{{`{{Il{}{{Ij{g}}}}}}}{IbBnnA`DjACf}AI`{AIbDjACf}{{AId{k}}}Ed{AfBnACfAIfCjnA`DjAIh}}{c{{Bb{e}}}{}{}}0{AIlCh}{cE`{}}{{{Cb{C`}}An}}?`{AJ`AJb}{AJ`}0{{AJ`{Oj{c}}}{{AGn{{AGl{h}}}}}Ed}{AJ`AJd}``````{{cb}d{}}0{cIb{}}0{AJf{{Cd{If}}}}{ce{}{}}00000{AJhAJf}{AJjAJf}{AJf{{Cd{Ib}}}}{AJhAJh}{AJjAJj}{{ce}d{}{}}0{AFhDl}{AFhAJl}{{{Dl{Aj}}{Dl{Aj}}AJlAn}AFh}{Anc{}}00000{AJfKj}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}00{And}00{AJh{{Bb{cAJf}}}{}}{AJj{{Bb{cAJf}}}{}}{AFhNh}{{AJfBj}Bl}0{{AJhBj}Bl}{{AJjBj}Bl}{cc{}}00{AFhBf}{{ce}{{D`{eg}}}{}{DbnA`}{}}{c{}{}}{{}An}00{ce{}{}}00{{AJhc}AJf{}}{{AJjc}AJf{}}{{}{{Bb{DdDf}}}}00{AFh}{AFhAJn}{{}}00{AJf{{Cd{Ib}}}}{AFhCd}3{AFhNh}99{cDn{}}{AFhAn}{c{{Bb{e}}}{}{}}00000{cE`{}}004===8``````````{{cb}d{}}{{AK`An}d}{{AKbAn}d}{{AKdAKf}d}{{AKbAKf}d}{ce{}{}}0{{}{{AGl{Gl}}}}{AKbAKb}{{ce}d{}{}}{{GlDn{Dl{Dn}}}{{AGl{AKh}}}}{{AKbDn{Dl{Dn}}}{{AGl{AKh}}}}{{AKj{Dl{Dn}}}c{}}{{AKb{Dl{Dn}}}{{AGl{AK`}}}}{{AKb{Dl{Dn}}}d}{{AKb{Dl{Dn}}}{{AGl{AKl}}}}{{AKb{Dl{Dn}}}{{AGl{AKd}}}}{{GlDn{Cd{Dn}}}{{AGl{AK`}}}}{{AKbDn{Cd{Dn}}}{{AGl{AK`}}}}{{GlDn{Cd{Dn}}}{{AGl{AKl}}}}{{AKbDn{Cd{Dn}}}{{AGl{AKl}}}}{{GlDn{Cd{Dn}}}{{AGl{AKd}}}}{{AKbDn{Cd{Dn}}}{{AGl{AKd}}}}{{GlDn}d}{{AKbDn}d}{{}AKb}{Anc{}}0{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{And}{{AKbBj}Bl}{cc{}}{{GlDn{Dl{Dn}}}{{AGl{AKn}}}}{{AKbDn{Dl{Dn}}}{{AGl{AKn}}}}{{GlDn{Dl{Dn}}}{{AGl{AL`}}}}{{AKbDn{Dl{Dn}}}{{AGl{AL`}}}}{{}An}{ce{}{}}{{}{{Bb{DdDf}}}}{{}}{{AKlAn}d}{{AKbAn}d}{{GlDn}{{AGl{Gl}}}}{{AKbDn}{{AGl{Gl}}}}{{GlDn{Dl{Dn}}}{{AGl{ALb}}}}{{AKbDn{Dl{Dn}}}{{AGl{ALb}}}}8{c{{Bb{e}}}{}{}}0{cE`{}}{{AKlALd}d}{{AKbALd}d}<``````````````````````````````````````````````````````````````````````````````````{{cb}d{}}00000000000000000000000000000000{cIb{}}0000000`{ALf{{Cd{If}}}}{ALh{{Cd{If}}}}{ALj{{Cd{If}}}}{ALl{{Cd{If}}}}{ce{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000{{ALn{Dl{C`}}AJlAM`}{{AGn{{AGl{h}}}}}}{AMbALf}{AMdALh}{AMfALj}{AMhALj}{{{AMj{c}}}ALl{{N`{{Dl{{AGl{Ib}}}}}}}}{AMlALl}{AMnALl}{AN`ALl}{ANbALl}{ANdALl}{ANfALl}{ANhALl}{ANjALl}{{{ANl{c}}}ALl{{N`{{Dl{{AGl{ALl}}}}}}}}{ANnALl}{ALf{{Cd{Ib}}}}{ALh{{Cd{Ib}}}}{ALj{{Cd{Ib}}}}{ALl{{Cd{Ib}}}}{{AO`{Dl{C`}}{Eh{n}}}{{j{d}}}}{AMbAMb}{AMdAMd}{AMfAMf}{AMhAMh}{{{AOb{c}}}{{AOb{c}}}{AfEd}}{AOdAOd}{{{AMj{c}}}{{AMj{c}}}Af}{AOfAOf}{AOhAOh}{AOjAOj}{AMlAMl}{AMnAMn}{AN`AN`}{ANbANb}{AOlAOl}{AOnAOn}{B`B`}{ANdANd}{ANfANf}{ANhANh}{ANjANj}{{{ANl{c}}}{{ANl{c}}}Af}{ANnANn}{{{Bb{c}}}{{Bb{c}}}{AfEd}}{{{Bd{c}}}{{Bd{c}}}{AfEd}}{{{Bf{c}}}{{Bf{c}}}{AfEd}}{AM`AM`}{BhBh}{BjBj}{BlBl}{BnBn}{BA`BA`}{AJlAJl}{{ce}d{}{}}00000000000000000000000000000000{{ALn{Dl{C`}}{AJn{c}}AM`}{{AGn{{AGl{h}}}}}Ah}{{}Bh}{{}Bj}{{}Bl}{{}Bn}``````{Anc{}}000000000000000000000000000000000000000000000000000000000000000000000000000{ALfKj}{ALhKj}{ALjKj}{ALlKj}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{c{{Bb{ALf}}}Bd}11{c{{Bb{ALh}}}Bd}222{c{{Bb{ALj}}}Bd}33{c{{Bb{{AOb{e}}}}}BdEd}4444444444444444444{c{{Bb{{Bb{e}}}}}BdEd}55{c{{Bb{{Bd{e}}}}}BdEd}6{c{{Bb{{Bf{e}}}}}BdEd}77777777{{ALn{Dl{C`}}c}{{AGn{{AGl{h}}}}}Ah}{And}0000000000000000000000000000000000000{{{Bb{c}}{Bb{c}}}Bf{BhEd}}{{{Bd{c}}{Bd{c}}}Bf{BhEd}}{{{Bf{c}}{Bf{c}}}Bf{BhEd}}{{AM`AM`}Bf}{{AJlAJl}Bf}{{ce}Bf{}{}}0000000000000000000`{AMb{{Bb{cALf}}}{}}{AMd{{Bb{cALh}}}{}}{AMf{{Bb{cALj}}}{}}{AMh{{Bb{cALj}}}{}}{{{AMj{c}}}{{Bb{eALl}}}{{N`{{Dl{{AGl{Ib}}}}}}}{}}{AMl{{Bb{cALl}}}{}}{AMn{{Bb{cALl}}}{}}{AN`{{Bb{cALl}}}{}}{ANb{{Bb{cALl}}}{}}{ANd{{Bb{cALl}}}{}}{ANf{{Bb{cALl}}}{}}{ANh{{Bb{cALl}}}{}}{ANj{{Bb{cALl}}}{}}{{{ANl{c}}}{{Bb{eALl}}}{{N`{{Dl{{AGl{ALl}}}}}}}{}}{ANn{{Bb{cALl}}}{}}{{AMbBj}Bl}{{ALfBj}Bl}0{{AMdBj}Bl}{{ALhBj}Bl}0{{AMfBj}Bl}{{AMhBj}Bl}{{ALjBj}Bl}0{{{AOb{c}}Bj}Bl{BnEd}}{{AOdBj}Bl}{{{AMj{c}}Bj}BlBn}{{AOfBj}Bl}{{AOhBj}Bl}{{AOjBj}Bl}{{AMlBj}Bl}{{AMnBj}Bl}{{AN`Bj}Bl}{{ANbBj}Bl}{{AOlBj}Bl}{{AOnBj}Bl}{{B`Bj}Bl}{{ANdBj}Bl}{{ANfBj}Bl}{{ANhBj}Bl}{{ANjBj}Bl}{{{ANl{c}}Bj}BlBn}{{ANnBj}Bl}{{ALlBj}Bl}0{{{Bb{c}}Bj}Bl{BnEd}}{{{Bd{c}}Bj}Bl{BnEd}}{{{Bf{c}}Bj}Bl{BnEd}}{{AM`Bj}Bl}{{{BAb{c}}Bj}Bl{BnAh}}{{BhBj}Bl}{{BjBj}Bl}{{BlBj}Bl}{{BnBj}Bl}{{BA`Bj}Bl}{{AJlBj}Bl}0{cc{}}0000000000000000000000000000000000000{{AnAnAnAnBf{Cd{{AGl{AO`}}}}AJb}{{BAf{{Eh{BAd}}}}}}{{ce}Ch{Cjl}Cl}000`{{{Bb{c}}e}d{CjEd}Cn}{{{Bd{c}}e}d{CjEd}Cn}{{{Bf{c}}e}d{CjEd}Cn}{{AJlc}dCn}{{ce}{{D`{eg}}}{}{DbnA`}{}}0000{c{}{}}000{BAd{{Cd{An}}}}{{}An}0000000000000000000000000000000000000{ce{}{}}0000000000000000000000000000000000000{{AMbc}ALf{}}{{AMdc}ALh{}}{{AMfc}ALj{}}{{AMhc}ALj{}}{{AOdc}ALl{}}{{{AMj{c}}e}ALl{{N`{{Dl{{AGl{Ib}}}}}}}{}}{{AOfc}ALl{}}{{AOhc}ALl{}}{{AOjc}ALl{}}{{AMlc}ALl{}}{{AMnc}ALl{}}{{AN`c}ALl{}}{{ANbc}ALl{}}{{AOlc}ALl{}}{{AOnc}ALl{}}{{B`c}ALl{}}{{ANdc}ALl{}}{{ANfc}ALl{}}{{ANhc}ALl{}}{{ANjc}ALl{}}{{{ANl{c}}e}ALl{{N`{{Dl{{AGl{ALl}}}}}}}{}}{{ANnc}ALl{}}{ALnBf}````{{}{{Bb{DdDf}}}}0000000000000000000000000000000000000{{ChCh}Bj}{{BAhBAhChCh}Bl}{{BlBjAJb}Bn}{ALnd}{{}}0000000000000000000000000000000000000{BAjABh}{{ALnI`c}{{Bb{d{BAl{{Cd{{AAn{I`c}}}}}}}}}Ah}{ALn{{AGn{{AGl{h}}}}}}```{{ALn{Dl{C`}}c}{{AGn{{AGl{h}}}}}Ah}5{AO`AJb}{BjAJb}{BlAJb}{BnAJb}{BA`AJb}{AO`Bf}{BjBf}{BlBf}{BnBf}{BA`Bf}{AO`An}{BA`An}{{AO`{Dl{C`}}}{{Dl{C`}}}}{{ALfc}BbDh}{{ALhc}BbDh}{{ALjc}BbDh}{{{AOb{c}}e}BbEdDh}{{{Bb{c}}e}Bb{DjEd}Dh}{{{Bd{c}}e}BbEdDh}{{{Bf{c}}e}Bb{DjEd}Dh}{ALn{{j{d}}}}`{ALf{{Cd{Ib}}}}{ALh{{Cd{Ib}}}}{ALj{{Cd{Ib}}}}{ALl{{Cd{Ib}}}}`{ALn{{AGn{{AGl{h}}}}}}``{ce{}{}}00000000000000000000000000000000{cDn{}}0000{c{{Bb{e}}}{}{}}000000000000000000000000000000000000000000000000000000000000000000000000000{cE`{}}0000000000000000000000000000000000000{{ALnCh}{{AGn{{AGl{h}}}}}}{{ALn{H`{c{Dl{C`}}}}}{{AGn{{AGl{h}}}}}Ah}`{BAj}666666666666666666666666666666666666667````````````````````````````````{{}}{{AnAnAn{Cd{{AGl{AO`}}}}AJb}{{BAf{{Eh{c}}}}}{}}{{}BAn}{{{F`{c}}KhCh}{}Ed}{ChBAn}{{CdKhCh}}{{}Ch}{BAnCh}{BB`{{Dl{BBb}}}}``````{{cAbCb}{{Bb{eACn}}}{}{}}{{c{AD`{e}}g}{{Bb{iACn}}}{}{}{}{}}{{ce}{{Bb{ACn}}}{{ADh{Cb}}}{ADjKh}}{{c{AD`{e}}g}{{Bb{DlACn}}}{}{}{}}````````````{{ChChAHd}{{Dl{C`}}}}{{Chc}{{Dl{C`}}}AIh}{{cAb{Cb{e}}}g{}{}{}}{{c{Cb{C`}}e}Bf{}{}}{{{Cb{C`}}}{{Bb{{Ah{}{{BBd{c}}{BBf{e}}{BBh{g}}{BBj{i}}{BBl{k}}{BBn{m}}}}Ih}}}{nA`lAfBnAIfDjAClCj}{BC`nA`lAfBnCjAIfDjACl}{nA`lAfBnCj}{nA`lAfBnCjBhAIfDjACl{N`{ABb}}{BCb{ABb}}}{nA`lAfBnCjBhAIfDjACl}{IbnA`}}{c{{Ah{}{{BBd{c}}{BBf{e}}{BBh{g}}{BBj{i}}{BBl{k}}{BBn{m}}}}}{nA`lAfBnAIfDjAClCj}{BC`nA`lAfBnCjAIfDjACl}{nA`lAfBnCj}{nA`lAfBnCjBhAIfDjACl{N`{ABb}}{BCb{ABb}}}{nA`lAfBnCjBhAIfDjACl}{IbnA`}}{{{Cf{C`}}Ch}{{AAn{{Ah{}{{BBd{c}}{BBf{e}}{BBh{g}}{BBj{i}}{BBl{k}}{BBn{m}}}}c}}}{nA`lAfBnAIfDjAClCj}{BC`nA`lAfBnCjAIfDjACl}{nA`lAfBnCj}{nA`lAfBnCjBhAIfDjACl{N`{ABb}}{BCb{ABb}}}{nA`lAfBnCjBhAIfDjACl}{IbnA`}}{{{Cf{C`}}Ch}{{AAn{{BCh{}{{BCd{c}}{BCf{e}}{BBn{g}}}}c}}}{nA`lAfBnAIfDjAClCj}{nA`lAfBnAIfDjAClCj}{IbnA`}}{{}{{Ah{}{{BBd{c}}{BBf{e}}{BBh{g}}{BBj{i}}{BBl{k}}{BBn{m}}}}}{nA`lAfBnAIfDjAClCj}{BC`nA`lAfBnCjAIfDjACl}{nA`lAfBnCj}{nA`lAfBnCjBhAIfDjACl{N`{ABb}}{BCb{ABb}}}{nA`lAfBnCjBhAIfDjACl}{IbnA`}}{c{{Ah{}{{BBd{e}}{BBf{c}}{BBh{g}}{BBj{i}}{BBl{k}}{BBn{m}}}}}{BC`nA`lAfBnCjAIfDjACl}{nA`lAfBnAIfDjAClCj}{nA`lAfBnCj}{nA`lAfBnCjBhAIfDjACl{N`{ABb}}{BCb{ABb}}}{nA`lAfBnCjBhAIfDjACl}{IbnA`}}{{{Dl{c}}AEd}e{}{}}{c{{AAn{eAEf}}}{}{}}{{c{Cb{C`}}}{{Bb{eg}}}{}{}{}}{{cChChAHd}{{Bb{eg}}}{}{}{}}1{{cChe}{{Bb{gi}}}{}AIh{}{}}{{cCh}{{Bb{eg}}}{}{}{}}{BC`AEd}{{{Ah{}{{BBd{c}}{BBf{e}}{BBh{g}}{BBj{i}}{BBl{k}}{BBn{m}}}}Ch}e{nA`lAfBnAIfDjAClCj}{BC`nA`lAfBnCjAIfDjACl}{nA`lAfBnCj}{nA`lAfBnCjBhAIfDjACl{N`{ABb}}{BCb{ABb}}}{nA`lAfBnCjBhAIfDjACl}{IbnA`}}{{{Ah{}{{BBd{c}}{BBf{e}}{BBh{g}}{BBj{i}}{BBl{k}}{BBn{m}}}}}{{Dl{C`}}}{nA`lAfBnAIfDjAClCj}{BC`nA`lAfBnCjAIfDjACl}{nA`lAfBnCj}{nA`lAfBnCjBhAIfDjACl{N`{ABb}}{BCb{ABb}}}{nA`lAfBnCjBhAIfDjACl}{IbnA`}}{{{Ah{}{{BBd{c}}{BBf{e}}{BBh{g}}{BBj{i}}{BBl{k}}{BBn{m}}}}i{Cb{C`}}}Bf{nA`lAfBnAIfDjAClCj}{BC`nA`lAfBnCjAIfDjACl}{nA`lAfBnCj}{nA`lAfBnCjBhAIfDjACl{N`{ABb}}{BCb{ABb}}}{nA`lAfBnCjBhAIfDjACl}{IbnA`}}{{{BCh{}{{BCd{c}}{BCf{e}}{BBn{g}}}}eChChAHd}Bf{nA`lAfBnAIfDjAClCj}{nA`lAfBnAIfDjAClCj}{IbnA`}}{{{BCh{}{{BCd{c}}{BCf{e}}{BBn{g}}}}e{Cb{C`}}}Bf{nA`lAfBnAIfDjAClCj}{nA`lAfBnAIfDjAClCj}{IbnA`}}{{{BCh{}{{BCd{c}}{BCf{e}}{BBn{g}}}}eChi}Bf{nA`lAfBnAIfDjAClCj}{nA`lAfBnAIfDjAClCj}{IbnA`}AIh}{{{BCh{}{{BCd{c}}{BCf{e}}{BBn{g}}}}eCh}Bf{nA`lAfBnAIfDjAClCj}{nA`lAfBnAIfDjAClCj}{IbnA`}}``````````````````````{cIb{}}0{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}o}{{Bb{dBDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af{{AIj{}{{Ij{c}}}}}}{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}oAaAc}{{Bb{dBDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af{{AIj{}{{Ij{c}}}}}{{AIj{}{{Ij{e}}}}}{{AIj{}{{Ij{m}}}}}}{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}{Cb{c}}{Cb{e}}{Dl{Bf}}}{{Bb{{Dl{e}}BDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{ce{}{}}000{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}BDl}{{Bb{gBDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}c}BfAf{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{Anc{}}000{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}c}{{Bb{dBDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}0{And}0{{BDhBj}Bl}0{cc{}}0{{ce}{{D`{eg}}}{}{DbnA`}{}}{c{}{}}{{}An}0;;{{}{{Bb{DdDf}}}}0{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}BDl}{{Bb{AnBDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}BDlc}{{Bb{eBDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}BDlc}{{Bb{{AAn{emi}}BDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}BDlc}{{Bb{{AAn{ei}}BDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{{}}0{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}cem}{{Bb{dBDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}o}{{Cd{{AAn{ce}}}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af{BDnBE`}}{cDn{}}{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}BDl}{{Bb{eBDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{c{{Bb{e}}}{}{}}000{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}BDl}{{Bb{kBDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{cE`{}}0{{{BDf{}{{BCj{c}}{BCl{e}}{BCn{g}}{BD`{i}}{BDb{k}}{BDd{m}}}}ceBf}{{Bb{eBDh}}}Af{AfBDj}{}{}{{Il{}{{Ij{{AAn{cem}}}}}}}Af}{ce{}{}}0````````{{{Cd{BEb}}KhCh}}{{}{{AId{}{{AH`{c}}{AHf{e}}{BEd{g}}{BEf{i}}}}}{IbBnnA`}AI`BEhBAn}{c{{AAn{{AId{}{{AH`{e}}{AHf{c}}{BEd{g}}{BEf{i}}}}g}}}AI`{IbBnnA`}BEhBAn}{{{AId{}{{AH`{c}}{AHf{e}}{BEd{g}}{BEf{i}}}}}d{IbBnnA`}AI`BEhBAn}{{{AId{}{{AH`{c}}{AHf{e}}{BEd{g}}{BEf{i}}}}e{F`{k}}AInMd}{{`{{h{}{{f{{Bb{{AAn{{AId{}{{AH`{c}}{AHf{e}}{BEd{g}}{BEf{i}}}}g}}c}}}}}}n}}}{IbBnnA`}AI`BEhBAnEd}`{{BEj{Fl{c{Jh{c}}}}}{{AGn{{AGl{h}}}}}Ed}{{BEj{Fl{c{Fj{c}}}}}{{AGn{{AGl{h}}}}}Ed}{{BEj{Fl{c{Hf{c}}}}}{{AGn{{AGl{h}}}}}Ed}{{BEjA`}{{AGn{{AGl{h}}}}}}{{BEj{Fh{c}}}{{AGn{{AGl{h}}}}}Ed}{{BEj{Gj{{F`{c}}}}{Fn{{Gh{c}}}}}{{AGn{{AGl{h}}}}}Ed}`````````````{{cb}d{}}0000{AHd{{Cf{C`}}}}{c{{Bb{dIh}}}{{Il{}{{Ij{AHd}}}}n}}{{}{{BFl{{BFh{{BFd{{BF`{BElBEn}}BFb}}BFf}}BFj}}}}??????????{AHd{{Bb{dIh}}}}{{{BFn{c}}}{{BFn{c}}}Ed}{{{Gh{c}}}{{Gh{c}}}{AfEd}}{{{BG`{c}}}{{BG`{c}}}{AfEd}}{{{Hj{c}}}{{Hj{c}}}Af}{AHdAHd}{{ce}d{}{}}0000{Anc{}}{{{Gh{c}}}eEd{}}111111111{c{{Bb{{BFn{e}}}}}BdEd}{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}0{c{{Bb{{Gh{e}}}}}BdEd}11{c{{Bb{AHd}}}Bd}2{{cKlKn}{{Bb{AHdIh}}}L`}{And}0000{{{BFn{c}}{BFn{c}}}Bf{BhEd}}{{{Gh{c}}{Gh{c}}}Bf{BhEd}}{{AHdAHd}Bf}{{ce}Bf{}{}}00000000000{{{BFn{c}}Bj}Bl{BnEd}}{{{Gh{c}}Bj}Bl{BnEd}}{{{BG`{c}}Bj}Bl{BnEd}}{{{Hj{c}}Bj}BlBn}{{AHdBj}Bl}0{cc{}}0000{cAHd{{ADh{{Cb{C`}}}}}}{cAHd{{N`{{Cf{C`}}}}}}{Kj{{Bb{AHdc}}}{}}{{ce}Ch{Cjl}Cl}{{AHdc}dCn}{{ce}{{D`{eg}}}{}{DbnA`}{}}{{}An}0000{ce{}{}}0000{{}{{Bb{DdDf}}}}0000{{{BFn{c}}}{{Cd{{AAn{{Kb{{F`{c}}}}Eh}}}}}Ed}{{{BFn{c}}}{{Cd{{Kb{{F`{c}}}}}}}Ed}{{{BFn{c}}}{{Cd{M`}}}Ed}{{}}0000{{{BFn{c}}e}BbEdDh}{{{Gh{c}}e}BbEdDh}{{AHdc}BbDh}{{AHdcKl}{{Bb{dIh}}}Mb}{{AHdKl}An}{{{BFn{c}}}{{Cd{Eh}}}Ed}{{{BFn{c}}}{{Hb{c}}}Ed}{{}Dn}====={cDn{}}{c{{Bb{e}}}{}{}}000{ABb{{Bb{AHdc}}}{}}1011111{cE`{}}0000``{ce{}{}}0000```````````````{{cb}d{}}0``11111111``{BGbBGb}{BGdBGd}{{ce}d{}{}}0{{Lhc}{{BGf{e}}}{{ADh{{Cb{C`}}}}}{}}{{Lhc}{{BGf{{AAn{eg}}}}}{{ADh{{Cb{C`}}}}}{}{}}`{Anc{}}000{BGh{{BGl{BGj}}}}1111{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}0{c{{Bb{BGb}}}Bd}1{c{{Bb{BGd}}}Bd}2{{Lhc}{{BGf{{Lj{Lh}}}}}{{ADh{{Cb{C`}}}}}}{{Lhce}{{BGf{{Lj{Lh}}}}}{{ADh{{Cb{C`}}}}}{}}{And}000{{BGbBGb}Bf}{{BGdBGd}Bf}{{ce}Bf{}{}}0000000`{{BGbBj}Bl}{{BGdBj}Bl}{cc{}}000{cBAh{}}00{{}An}000{ce{}{}}000{{ce}{{BGf{d}}}{}{}}{{}{{Bb{DdDf}}}}000```{{Lhc{BGn{An}}}{{BGf{BGd}}}{{ADh{{Cb{C`}}}}}}{{Lhc{BGn{An}}}{{BGf{BGb}}}{{ADh{{Cb{C`}}}}}}{{Lh{BH`{Lh}}BGd}{{BGf{{Bb{dd}}}}}}{{Lh{BH`{Lh}}BGb}{{BGf{{Bb{dd}}}}}}{{}}000{{Lh{Cb{c}}e}{{BGf{{Dl{C`}}}}}{}{}}`{{BGbc}BbDh}{{BGdc}BbDh}`{{{BH`{Lh}}}{{BH`{{BHd{BGjBHb}}}}}};;{c{{Bb{e}}}{}{}}0000000{cE`{}}000{{Lhceg}{{BGf{{Bb{dd}}}}}{}{}{}}{{{Lj{{BHd{BGjBHb}}}}}{{Lj{Lh}}}}{AnLh}`{ce{}{}}000`````````{{{BHf{ceg}}e}{{BHh{dg}}}Ed{{BHj{c}}}{{BHn{c}{{BHl{}}}}}}``11{{{Kb{c}}c}{{BHn{}{{BHl{c}}{BI`{e}}}}}AF`{{AFb{g}}}Ed}{{{BHj{}{{BCn{c}}}}}cAF`}{{{BHn{}{{BHl{c}}{BI`{e}}}}}cAF`{{AFb{g}}}Ed}{{{BHj{}{{BCn{c}}}}}{{Kb{c}}}AF`}{{{BHn{}{{BHl{c}}{BI`{e}}}}}{{Kb{c}}}AF`{{AFb{g}}}Ed}{Anc{}}0{{ce}{{Bb{{B`{gi}}}}}{}{}{}{}}{And}{cc{}}{{}An};{{{BHn{}{{BHl{c}}{BI`{e}}}}i}BfAF`{{AFb{g}}}Ed{{AFh{g}}}}{{}{{Bb{DdDf}}}}`{{}}{{{BHj{}{{BCn{c}}}}}{}AF`}`0{eChEd{{AFh{c}}}}{c{{Bb{e}}}{}{}}0{cE`{}}{ACd}`{ce{}{}}","c":[],"p":[[5,"Private",4441],[1,"unit"],[17,"Output"],[10,"Future",4442],[8,"BoxSyncFuture",0],[10,"Sized",4443],[10,"Send",4443],[10,"Sync",4443],[6,"ExecutionType",0],[5,"ValidatorConfig",0],[10,"Clone",4444],[10,"SignatureKey",3981],[5,"PeerConfig",0],[5,"HotShotConfig",0],[1,"usize"],[5,"With",4445],[6,"Result",4446],[10,"Deserializer",4447],[1,"bool"],[10,"PartialEq",4448],[5,"Formatter",4449],[8,"Result",4449],[10,"Debug",4449],[1,"u8"],[1,"slice"],[6,"Option",4450],[1,"array"],[1,"u64"],[10,"Hash",4451],[10,"BuildHasher",4451],[10,"Hasher",4451],[5,"IndentedSection",4452],[10,"Display",4449],[5,"Layout",4453],[5,"LayoutError",4453],[10,"Serializer",4454],[10,"Serialize",4454],[5,"Vec",4455],[5,"String",4456],[5,"TypeId",4457],[5,"Bundle",171],[10,"NodeType",3939],[5,"OuterConsensus",197],[5,"Arc",4458],[5,"Consensus",197],[5,"ConsensusMetricsValue",197],[5,"CommitmentAndMetadata",197],[5,"Leaf",448],[5,"ConsensusReadLockGuard",197],[5,"ConsensusWriteLockGuard",197],[5,"ConsensusUpgradableReadLockGuard",197],[8,"QuorumCertificate",2103],[5,"QuorumProposal",448],[5,"Proposal",1624],[5,"BTreeMap",4459],[5,"RwLockReadGuard",4460],[5,"RwLockWriteGuard",4460],[5,"RwLockUpgradableReadGuard",4460],[8,"LockedConsensusState",197],[5,"View",4112],[8,"CommitmentMap",197],[10,"Metrics",2843],[8,"DaCertificate",2103],[5,"HashMap",4461],[8,"StateAndDelta",4112],[8,"Result",4462],[5,"VidDisperseShare",448],[8,"VidShares",197],[6,"Terminator",4112],[6,"HotShotError",933],[10,"FnMut",4463],[5,"ViewNumber",448],[10,"Error",4464],[6,"BlockError",448],[5,"Backtrace",4465],[6,"SerializationError",4466],[17,"Item"],[10,"Iterator",4467],[5,"InvalidBlockHeaderSnafu",448],[5,"InvalidTransactionLengthSnafu",448],[5,"InconsistentPayloadCommitmentSnafu",448],[8,"VidPrecomputeData",4276],[5,"VidDisperse",448],[5,"DaProposal",448],[5,"UpgradeProposal",448],[6,"ViewChangeEvidence",448],[5,"PackedBundle",448],[6,"Ordering",4448],[5,"Commitment",4468],[17,"NodeType"],[10,"TestableLeaf",448],[10,"RngCore",4469],[1,"str"],[6,"Compress",4470],[6,"Validate",4470],[10,"Read",4471],[8,"UpgradeCertificate",2103],[5,"RwLock",4460],[10,"Committable",4468],[5,"VidSchemeType",4276],[5,"VidDisperse",4472],[5,"BuilderFee",2681],[5,"Vec1",4473],[8,"VidCommitment",4276],[10,"Write",4471],[5,"Version",4474],[5,"MEMOIZED_MAPPING_COMMITMENT",911],[5,"LruCache",4475],[5,"Mutex",4476],[5,"LeafNotFoundSnafu",933],[5,"InvalidStateSnafu",933],[10,"Into",4477],[5,"ViewTimeoutSnafu",933],[6,"RoundTimedoutState",933],[5,"InsufficientValidSignaturesSnafu",933],[8,"NonZeroU64",4478],[5,"MiscSnafu",933],[5,"FailedToSerializeSnafu",933],[5,"ContinueSnafu",933],[5,"FailedToMessageLeaderSnafu",933],[5,"FailedToBroadcastSnafu",933],[5,"BlockSnafu",933],[5,"NetworkFaultSnafu",933],[5,"TimeoutSnafu",933],[5,"Event",1300],[5,"LeafInfo",1300],[6,"EventType",1300],[6,"HotShotAction",1300],[5,"BitSlice",4479],[10,"BitOrder",4480],[5,"GenericPublicInput",1437],[10,"PrimeField",4481],[5,"StateSignatureRequestBody",1437],[5,"GenericLightClientState",1437],[5,"StateKeyPair",1437],[5,"StateSignaturesBundle",1437],[10,"Ord",4448],[10,"Default",4482],[5,"EdwardsConfig",4483],[5,"KeyPair",4484],[8,"StateSignKey",1437],[10,"PartialOrd",4448],[1,"tuple"],[6,"BitSpanError",4485],[5,"TaggedBase64",4486],[5,"Message",1624],[5,"Messages",1624],[6,"MessagePurpose",1624],[6,"MessageKind",1624],[6,"GeneralConsensusMessage",1624],[6,"DaConsensusMessage",1624],[6,"SequencingMessage",1624],[6,"DataMessage",1624],[10,"HasViewNumber",4401],[10,"DeserializeOwned",4447],[5,"UpgradeLock",1624],[10,"Versions",3939],[10,"Deserialize",4447],[6,"SignatureError",4487],[5,"GenericArray",4488],[5,"QcParams",1953],[5,"BitVectorQc",1953],[10,"AggregateableSignatureSchemes",4487],[10,"AsRef",4477],[10,"CryptoRng",4469],[5,"Request",2004],[5,"Response",2004],[8,"BLSPubKey",2083],[8,"BuilderKey",2083],[5,"U256",4489],[5,"BitVec",4490],[5,"SuccessThreshold",2103],[5,"OneHonestThreshold",2103],[5,"UpgradeThreshold",2103],[5,"SimpleCertificate",2103],[10,"Voteable",2295],[10,"Threshold",2103],[5,"QuorumData",2295],[5,"UpgradeProposalData",2295],[10,"Membership",2752],[5,"DaData",2295],[5,"TimeoutData",2295],[5,"VidData",2295],[5,"ViewSyncPreCommitData",2295],[5,"ViewSyncCommitData",2295],[5,"ViewSyncFinalizeData",2295],[5,"SimpleVote",2295],[5,"StakeTableEntry",2630],[10,"AuctionResultsProvider",2679],[5,"Box",4491],[5,"Pin",4492],[17,"Error"],[10,"BlockHeader",2681],[5,"BuilderCommitment",4112],[17,"Instance"],[17,"Transaction"],[17,"ValidatedState"],[17,"Metadata"],[10,"BlockPayload",2681],[10,"InstanceState",4092],[10,"Transaction",2681],[10,"ValidatedState",4092],[10,"Eq",4448],[10,"EncodeBytes",2681],[10,"IntoIterator",4493],[10,"TestableBlock",2681],[8,"VidCommon",4276],[10,"ConsensusApi",2746],[5,"Duration",4494],[8,"NonZeroUsize",4478],[6,"ElectionError",2752],[5,"StubSnafu",2752],[5,"MathSnafu",2752],[6,"Topic",2906],[5,"BTreeSet",4495],[10,"Counter",2843],[5,"NoMetrics",2843],[10,"Histogram",2843],[1,"f64"],[10,"CounterFamily",2843],[10,"MetricsFamily",2843],[10,"Gauge",2843],[10,"GaugeFamily",2843],[10,"HistogramFamily",2843],[10,"TextFamily",2843],[1,"i64"],[6,"MemoryNetworkError",2906],[6,"CentralizedServerNetworkError",2906],[6,"PushCdnNetworkError",2906],[6,"NetworkError",2906],[10,"ConnectedNetwork",2906],[6,"BroadcastDelay",2906],[5,"StubSnafu",2906],[5,"NoMessagesInQueueSnafu",2906],[5,"FailedToReceiveSnafu",2906],[5,"FailedToSendSnafu",2906],[5,"Libp2pMultiSnafu",2906],[5,"UnimplementedFeatureSnafu",2906],[5,"CouldNotDeliverSnafu",2906],[5,"NoSuchNodeSnafu",2906],[5,"NoBootstrapNodesSpecifiedSnafu",2906],[5,"ChannelSendSnafu",2906],[5,"ShutDownSnafu",2906],[5,"UnableToCancelSnafu",2906],[5,"NotFoundSnafu",2906],[5,"MultipleErrorsSnafu",2906],[5,"NotReadySnafu",2906],[10,"NetworkReliability",2906],[6,"TransmitType",2906],[5,"Libp2pSnafu",2906],[5,"MemoryNetworkSnafu",2906],[5,"PushCdnNetworkSnafu",2906],[5,"CentralizedServerSnafu",2906],[5,"FailedToSerializeSnafu",2906],[5,"FailedToDeserializeSnafu",2906],[5,"TimeoutSnafu",2906],[5,"DataRequest",2906],[6,"RequestKind",2906],[6,"ResponseMessage",2906],[5,"PerfectNetwork",2906],[5,"SynchronousNetwork",2906],[5,"AsynchronousNetwork",2906],[5,"PartiallySynchronousNetwork",2906],[5,"ChaosNetwork",2906],[6,"NetworkChange",2906],[10,"TestableNetworkingImplementation",2906],[8,"AsyncGenerator",2906],[1,"u32"],[10,"ViewMessage",2906],[6,"TrySendError",4496],[10,"ConsensusTime",3939],[10,"HasUrls",3939],[5,"Url",4497],[17,"PrivateKey"],[17,"StakeTableEntry"],[17,"QcParams"],[17,"PureAssembledSignatureType"],[17,"QcType"],[17,"SignError"],[10,"StakeTableEntryType",3981],[10,"TryFrom",4477],[17,"BuilderPrivateKey"],[17,"BuilderSignature"],[10,"BuilderSignatureKey",3981],[17,"Key"],[17,"Amount"],[17,"Commitment"],[17,"LookupProof"],[17,"IntoIter"],[17,"Aux"],[10,"StakeTableScheme",4018],[6,"StakeTableError",4018],[10,"Copy",4443],[6,"SnapshotVersion",4018],[10,"SeedableRng",4469],[10,"CryptoRngCore",4469],[10,"TestableState",4092],[17,"Delta"],[17,"Time"],[10,"StateDelta",4092],[10,"Storage",4105],[5,"DefaultOptions",4498],[5,"Infinite",4499],[5,"WithOtherLimit",4498],[5,"LittleEndian",4500],[5,"WithOtherEndian",4498],[5,"FixintEncoding",4501],[5,"WithOtherIntEncoding",4498],[5,"RejectTrailing",4502],[5,"WithOtherTrailing",4498],[6,"ViewInner",4112],[5,"RoundFinishedEvent",4112],[5,"LargeRangeProofType",4276],[5,"SmallRangeProofType",4276],[8,"VidResult",4472],[5,"KZG_SRS",4276],[8,"Bn254",4503],[5,"UnivariateUniversalParams",4504],[5,"Range",4505],[5,"Statement",4506],[8,"Sha256",4507],[8,"Advz",4508],[5,"VoteAccumulator",4401],[6,"Either",4509],[10,"Vote",4401],[17,"Voteable"],[10,"Certificate",4401],[17,"Threshold"],[15,"Misc",1289],[15,"InvalidState",1289],[15,"InsufficientValidSignatures",1289],[15,"TimeoutError",1289],[15,"FailedToMessageLeader",1289],[15,"FailedToBroadcast",1289],[15,"BlockError",1289],[15,"NetworkFault",1289],[15,"ViewTimeoutError",1289],[8,"LeafChain",1300],[15,"Decide",1421],[15,"Error",1421],[15,"DaProposal",1421],[15,"QuorumProposal",1421],[15,"UpgradeProposal",1421],[15,"Transactions",1421],[15,"ReplicaViewTimeout",1421],[15,"ViewFinished",1421],[15,"ViewTimeout",1421],[8,"StateSignature",1437],[8,"LightClientState",1437],[8,"StateSignatureScheme",1437],[5,"NetworkMsgResponseChannel",2004],[8,"TakeReceiver",2004],[8,"RequestReceiver",2004],[8,"TimeoutCertificate",2103],[8,"ViewSyncPreCommitCertificate2",2103],[8,"ViewSyncCommitCertificate2",2103],[8,"ViewSyncFinalizeCertificate2",2103],[8,"QuorumVote",2295],[8,"DaVote",2295],[8,"TimeoutVote",2295],[8,"ViewSyncCommitVote",2295],[8,"ViewSyncPreCommitVote",2295],[8,"ViewSyncFinalizeVote",2295],[8,"UpgradeVote",2295],[15,"MultipleErrors",3930],[15,"Libp2p",3930],[15,"MemoryNetwork",3930],[15,"PushCdnNetwork",3930],[15,"CentralizedServer",3930],[15,"FailedToSerialize",3930],[15,"FailedToDeserialize",3930],[15,"Timeout",3930],[15,"Libp2pMulti",3930],[10,"NodeImplementation",3939],[10,"TestableNodeImplementation",3939],[10,"QuorumCertificateScheme",3971],[15,"Leaf",4272],[15,"Da",4272],[8,"Advz",4276],[8,"H",4276],[8,"SignersMap",4401],[8,"VoteMap2",4401]],"b":[[71,"impl-Debug-for-ValidatorConfig%3CKEY%3E"],[72,"impl-Display-for-ValidatorConfig%3CKEY%3E"],[73,"impl-Display-for-PeerConfig%3CKEY%3E"],[74,"impl-Debug-for-PeerConfig%3CKEY%3E"],[686,"impl-Debug-for-BlockError"],[687,"impl-Display-for-BlockError"],[691,"impl-Display-for-Leaf%3CTYPES%3E"],[692,"impl-Debug-for-Leaf%3CTYPES%3E"],[1126,"impl-Debug-for-HotShotError%3CTYPES%3E"],[1127,"impl-Display-for-HotShotError%3CTYPES%3E"],[1531,"impl-Debug-for-GenericLightClientState%3CF%3E"],[1532,"impl-Display-for-GenericLightClientState%3CF%3E"],[1602,"impl-TryFrom%3CTaggedBase64%3E-for-GenericLightClientState%3CF%3E"],[1603,"impl-TryFrom%3C%26TaggedBase64%3E-for-GenericLightClientState%3CF%3E"],[2795,"impl-Debug-for-ElectionError"],[2796,"impl-Display-for-ElectionError"],[2866,"impl-MetricsFamily%3CBox%3Cdyn+Counter%3E%3E-for-NoMetrics"],[2867,"impl-MetricsFamily%3C()%3E-for-NoMetrics"],[2868,"impl-MetricsFamily%3CBox%3Cdyn+Gauge%3E%3E-for-NoMetrics"],[2869,"impl-MetricsFamily%3CBox%3Cdyn+Histogram%3E%3E-for-NoMetrics"],[3414,"impl-Debug-for-MemoryNetworkError"],[3415,"impl-Display-for-MemoryNetworkError"],[3417,"impl-Debug-for-CentralizedServerNetworkError"],[3418,"impl-Display-for-CentralizedServerNetworkError"],[3421,"impl-Display-for-PushCdnNetworkError"],[3422,"impl-Debug-for-PushCdnNetworkError"],[3442,"impl-Debug-for-NetworkError"],[3443,"impl-Display-for-NetworkError"],[3454,"impl-Debug-for-Topic"],[3455,"impl-Display-for-Topic"],[4060,"impl-Display-for-StakeTableError"],[4061,"impl-Debug-for-StakeTableError"],[4198,"impl-Display-for-BuilderCommitment"],[4199,"impl-Debug-for-BuilderCommitment"],[4252,"impl-TryFrom%3CTaggedBase64%3E-for-BuilderCommitment"],[4254,"impl-TryFrom%3C%26TaggedBase64%3E-for-BuilderCommitment"],[4365,"impl-PayloadProver%3CSmallRangeProofType%3E-for-VidSchemeType"],[4366,"impl-PayloadProver%3CLargeRangeProofType%3E-for-VidSchemeType"],[4367,"impl-PayloadProver%3CSmallRangeProofType%3E-for-VidSchemeType"],[4368,"impl-PayloadProver%3CLargeRangeProofType%3E-for-VidSchemeType"]]}],\
["libp2p_networking",{"doc":"Library for p2p communication","t":"CCPPPPIPGPPPSPPPPPPPPPPPPPPPPPPPPPPPPFFEPGGFFFGFGFGPPPPPPPPPPPPPPPPPNOOOCONNNNNNNNOONNOCNNNNNNNNNNNNNNOOOONNNNNNNNNCNNNNNNNNNNNNNNNHHOOOOOONNNNONNNNNNNNOOOOOOOOOCCOOOOOONNNNOOOOOOOOOONOOHOOOOONCNNNNNNNNOONNNNNNNNOOOOOOOOOOOOOOOOOOOOOOCCCCFFGGPPFFFSPPPGNNNNOOOOCOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNOONNNNNNNNNOOOOOONNNNNNNNNOONCONOONNONNOCNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNPFGPPNNNNNNNNNNNNNNNONNNNNNONNNNONNNNNNNNPGFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNONNNNNNHNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNONNNNNNNONNNNFGFPPNONNNNNNONNNNNNNNNNNNNNNNNNNNONNNNNNNNNONNNONNNNNNNNNNNNFNONNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNNNNFNNNNNNNNNNNNNNNONNNNFSNNNONNNNNOONNNONNNNONNNNNNNNNONNNNNNPFGPFPFPPFGPFPFGPFPFPFPFPFPPFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOFFFFFFESSSEFEEEEEESNONNCONNNNOONNNCNNONNNOENNONONNOONENONNNNSFFFGPPSNNNNNNOONNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNOOOONOONOONNNNNOONOONOONOONOONNNNNNNNNNNNNOONNNNNNNNPFPFPFPFPFPFPFPFGFFPFPFPFPFPFPFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNOCNONONNNNNNNNNNNNNNNNNNNNNNONONNONNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOEEEEEESKFSFINNMMONNNNNNNHNNNNNNNNNNNNNNNNONNNNNNOONNNNNOHNNOONNNNNNNNNNNHFFFNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["network","reexport","AddKnownPeers","AutonatEvent","BeginBootstrap","Bootstrap","BoxedTransport","CantKillTwice","ClientRequest","Conductor","ConnectTimeout","ConnectedPeersUpdate","DEFAULT_REPLICATION_FACTOR","DHTError","DHTEvent","DMEvent","DataRequest","DataResponse","DeserializationError","DirectRequest","DirectRequest","DirectResponse","DirectResponse","FailedToDeserialize","FailedToVerify","GetConnectedPeerNum","GetConnectedPeers","GetDHT","GetRoutingTable","GossipEvent","GossipMsg","GossipMsg","IdentifyEvent","IgnorePeers","IsBootstrapped","Killed","LookupPeer","MeshParams","NetworkDef","NetworkError","NetworkError","NetworkEvent","NetworkEventInternal","NetworkNode","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeReceiver","NetworkNodeType","NoSuchTopic","NodeConfigError","Prune","PutDHT","ReceiverEnded","RecvError","Regular","RequestResponseEvent","ResponseRequested","SendError","SerializationError","Shutdown","Subscribe","TimeoutError","UninitializedField","Unsubscribe","ValidationError","__clone_box","auth_message","auth_message","autonat","behaviours","bootstrap_tx","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","clone","clone_into","config","def","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","dht","dht_handler","direct_message","direct_message_state","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","error","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","gen_multiaddr","gen_transport","gossipsub","id","identify","identity","identity","identity","init","init","init","init","inner","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","listen_addr","listener_id","mesh_n","mesh_n_high","mesh_n_low","mesh_outbound_min","mesh_params","mesh_params","network_config","network_node_handle_error","node","node_type","node_type","pd","pd","peer_id","peer_id","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","receiver","recv_kill","replication_factor","replication_factor","republication_interval","republication_interval","request_response","request_response_state","resend_tx","send_network","serialize","server_mode","server_mode","spawn_network_node","stake_table","stake_table","swarm","to_connect_addrs","to_connect_addrs","to_owned","transport","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","ttl","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","chan","chan","contents","key","key","notify","notify","peer","pid","request","response","retry_count","retry_count","value","source","source","source","source","source","source","source","source","dht","direct_message","exponential_backoff","request_response","Bootstrap","DHTBehaviour","DHTEvent","DHTProgress","InProgress","IsBootstrapped","KadGetQuery","KadPutQuery","MAX_DHT_QUERY_SIZE","NUM_REPLICATED_TO_TRUST","NotStarted","NotStarted","Started","State","__clone_box","__clone_box","__clone_box","__clone_box","__private_field","backoff","backoff","backoff","bootstrap","bootstrap_state","bootstrap_tx","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dht_handle_event","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finish_bootstrap","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_hash","get_record","handle_get_query","handle_put_query","hash","in_progress_get_closest_peers","in_progress_put_record_queries","in_progress_record_queries","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","key","key","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new","notify","notify","num_replicas","outstanding_dht_query_keys","peer_id","phantom","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","print_routing_table","progress","progress","put_record","record","records","replication_factor","replication_factor","retry_count","retry_get","retry_put","retry_tx","set_bootstrap_sender","set_retry","state","store","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BootstrapFinished","DHTBootstrapTask","InputEvent","ShutdownBootstrap","StartBootstrap","bootstrap","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","in_progress","init","init","into","into","layout_raw","layout_raw","network_tx","pointer_metadata","pointer_metadata","run","run_loop","rx","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Lookup","Namespace","RecordKey","RecordValue","Signed","Unsigned","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","from","from","from","init","init","init","into","into","into","key","layout_raw","layout_raw","layout_raw","namespace","new","new","new_signed","pointer_metadata","pointer_metadata","pointer_metadata","requires_authentication","serialize","serialize","to_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from_bytes","try_into","try_into","try_into","type_id","type_id","type_id","validate","value","vzip","vzip","vzip","ValidatedStore","add_provider","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","get","init","into","layout_raw","new","phantom","pointer_metadata","provided","providers","put","records","remove","remove_provider","store","try_from","try_into","type_id","vzip","DMBehaviour","DMEvent","DMRequest","DirectRequest","DirectResponse","add_direct_request","backoff","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","from","handle_dm_event","in_progress_rr","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","peer_id","pointer_metadata","pointer_metadata","pointer_metadata","retry_count","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ExponentialBackoff","__clone_box","backoff_factor","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","expire","fmt","from","get_hash","hash","init","into","is_expired","layout_raw","new","next_timeout","pointer_metadata","reset","reset_val","start_next","started","timeout","to_owned","try_from","try_into","type_id","vzip","RequestResponseState","add_request","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","from","handle_request_response","init","into","layout_raw","pointer_metadata","request_map","try_from","try_into","type_id","vzip","NetworkDef","_DERIVE_core_fmt_Debug_FOR_NetworkDef","add_address","add_direct_request","add_direct_response","autonat","borrow","borrow_mut","deref","deref_mut","deserialize","dht","direct_message","drop","fmt","from","gossipsub","handle_established_inbound_connection","handle_established_outbound_connection","handle_pending_inbound_connection","handle_pending_outbound_connection","identify","init","into","layout_raw","new","on_connection_handler_event","on_swarm_event","pointer_metadata","poll","publish_gossip","request_response","subscribe_gossip","try_from","try_into","type_id","unsubscribe_gossip","vzip","CancelledRequest","CancelledRequestSnafu","DHTError","DialError","DialSnafu","Disagreement","DisagreementSnafu","GetRecord","GetRecordError","GetRecordSnafu","GetRecordWrapperError","GossipsubBuild","GossipsubBuildSnafu","GossipsubConfig","GossipsubConfigSnafu","NetworkError","NoKnownPeers","NoKnownPeersSnafu","NotFound","NotFoundSnafu","PublishError","PublishSnafu","PutRecord","PutRecordSnafu","StreamClosed","StreamClosedSnafu","Transport","TransportLaunch","TransportLaunchSnafu","TransportSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_error","as_error","as_error","as_error_source","as_error_source","as_error_source","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","message","message","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","source","source","source","source","message","message","source","source","source","source","NetworkSnafu","NodeConfigSnafu","RecvSnafu","SendSnafu","SerializationSnafu","TimeoutSnafu","DEFAULT_REPLICATION_FACTOR","ESTABLISHED_LIMIT","ESTABLISHED_LIMIT_UNWR","MAX_GOSSIP_MSG_SIZE","MeshParams","NetworkNode","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeReceiver","_DERIVE_core_fmt_Debug_FOR_NetworkNode","add_known_peers","bootstrap_tx","borrow","borrow_mut","config","config","connected_pids","deref","deref_mut","deserialize","dht_handler","direct_message_state","drop","fmt","from","handle","handle_client_requests","handle_swarm_events","identity","init","into","layout_raw","listener_id","network_node_handle_error","new","num_connected","pd","peer_id","peer_id","pointer_metadata","put_record","request_response_state","resend_tx","spawn_listeners","spawn_network_node","start_listen","swarm","try_from","try_into","type_id","vzip","DEFAULT_REPLICATION_FACTOR","MeshParams","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","UninitializedField","ValidationError","_DERIVE_core_fmt_Debug_FOR_NetworkNodeConfig","__clone_box","__clone_box","__clone_box","as_error","as_error_source","auth_message","auth_message","auth_message","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","bound_addr","build","clone","clone","clone","clone_into","clone_into","clone_into","create_empty","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","header","identity","identity","identity","in_current_span","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","mesh_n","mesh_n_high","mesh_n_low","mesh_outbound_min","mesh_params","mesh_params","mesh_params","node_type","node_type","node_type","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","replication_factor","replication_factor","replication_factor","republication_interval","republication_interval","republication_interval","server_mode","server_mode","server_mode","stake_table","stake_table","stake_table","to_connect_addrs","to_connect_addrs","to_connect_addrs","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","ttl","ttl","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CantKillTwice","CantKillTwiceSnafu","ConnectTimeout","ConnectTimeoutSnafu","DHTError","DHTSnafu","DeserializationError","DeserializationSnafu","FailedToDeserialize","FailedToDeserializeSnafu","FailedToVerify","FailedToVerifySnafu","Killed","KilledSnafu","NetworkError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeReceiver","NetworkSnafu","NoSuchTopic","NoSuchTopicSnafu","NodeConfigError","NodeConfigSnafu","ReceiverEnded","ReceiverEndedSnafu","RecvError","RecvSnafu","SendError","SendSnafu","SerializationError","SerializationSnafu","TimeoutError","TimeoutSnafu","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add_known_peers","as_error","as_error_source","backtrace","begin_bootstrap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","connected_pids","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","direct_request","direct_request_no_serialize","direct_response","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fail","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_record","get_record_timeout","gossip","gossip_no_serialize","header","id","id","ignore_peers","in_current_span","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","listen_addr","listen_addr","lookup_node","lookup_pid","network_config","network_node_handle_error","num_connected","pd","peer_id","peer_id","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","print_routing_table","prune_peer","put_record","put_record_timeout","receiver","recv","recv_kill","request_data","respond_data","send_network","send_request","set_kill_switch","shutdown","source","spawn_network_node","subscribe","take_kill_switch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsubscribe","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_to_connect","source","source","source","source","source","source","source","source","NetworkSnafu","NodeConfigSnafu","RecvSnafu","SendSnafu","SerializationSnafu","TimeoutSnafu","AUTH_HANDSHAKE_TIMEOUT","AsOutput","AuthMessage","MAX_AUTH_MESSAGE_SIZE","StakeTableAuthentication","UpgradeFuture","__clone_box","address_translation","as_connection","as_peer_id","auth_message","authenticate_with_remote_peer","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","construct_auth_message","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","dial","dial_as_listener","drop","drop","from","from","gen_handshake","init","init","inner","into","into","layout_raw","layout_raw","listen_on","new","pd","peer_id_bytes","pointer_metadata","pointer_metadata","poll","project","project_ref","public_key_bytes","read_length_delimited","remove_listener","serialize","signature","stake_table","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","validate","verify_peer_authentication","vzip","vzip","write_length_delimited","Multiaddr","PeerId","ResponseChannel","__clone_box","__clone_box","as_bits","as_ref","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone_into","clone_into","cmp","cmp","compare","compare","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","empty","encode_hex","encode_hex_upper","ends_with","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_iter","from_multihash","from_public_key","from_str","from_str","get_hash","get_hash","hash","hash","header","header","init","init","init","into","into","into","into_iter","is_empty","is_open","iter","layout_raw","layout_raw","layout_raw","len","multihash","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pop","protocol_stack","push","random","replace","sender","serialize","serialize","to_base58","to_bytes","to_owned","to_owned","to_string","to_string","to_vec","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with","with_capacity","with_p2p"],"q":[[0,"libp2p_networking"],[2,"libp2p_networking::network"],[212,"libp2p_networking::network::ClientRequest"],[226,"libp2p_networking::network::NetworkNodeHandleError"],[234,"libp2p_networking::network::behaviours"],[238,"libp2p_networking::network::behaviours::dht"],[454,"libp2p_networking::network::behaviours::dht::bootstrap"],[495,"libp2p_networking::network::behaviours::dht::record"],[585,"libp2p_networking::network::behaviours::dht::store"],[612,"libp2p_networking::network::behaviours::direct_message"],[673,"libp2p_networking::network::behaviours::exponential_backoff"],[712,"libp2p_networking::network::behaviours::request_response"],[733,"libp2p_networking::network::def"],[771,"libp2p_networking::network::error"],[1170,"libp2p_networking::network::error::DHTError"],[1173,"libp2p_networking::network::error::GetRecordWrapperError"],[1174,"libp2p_networking::network::error::NetworkError"],[1180,"libp2p_networking::network::network_node_handle_error"],[1186,"libp2p_networking::network::node"],[1240,"libp2p_networking::network::node::config"],[1373,"libp2p_networking::network::node::handle"],[1839,"libp2p_networking::network::node::handle::NetworkNodeHandleError"],[1847,"libp2p_networking::network::node::handle::network_node_handle_error"],[1853,"libp2p_networking::network::transport"],[1920,"libp2p_networking::reexport"],[2053,"dyn_clone::sealed"],[2054,"core::result"],[2055,"serde::de"],[2056,"rkyv::with"],[2057,"core::fmt"],[2058,"core::fmt"],[2059,"hotshot_types::request_response"],[2060,"libp2p_autonat::behaviour"],[2061,"alloc::vec"],[2062,"libp2p_gossipsub::behaviour"],[2063,"libp2p_identify::behaviour"],[2064,"libp2p_kad::behaviour"],[2065,"libp2p_identity::keypair"],[2066,"std::collections::hash::set"],[2067,"core::option"],[2068,"libp2p_core::muxing::boxed"],[2069,"libp2p_core::transport::boxed"],[2070,"hotshot_types::traits::signature_key"],[2071,"core::alloc::layout"],[2072,"core::alloc::layout"],[2073,"core::any"],[2074,"core::num::nonzero"],[2075,"libp2p_kad::record::store::memory"],[2076,"core::fmt"],[2077,"core::marker"],[2078,"core::hash"],[2079,"libp2p_kad::behaviour"],[2080,"libp2p_kad::behaviour"],[2081,"async_compatibility_layer::channel::unbounded::inner"],[2082,"futures_channel::mpsc"],[2083,"core::cmp"],[2084,"anyhow"],[2085,"libp2p_kad::record"],[2086,"libp2p_kad::record"],[2087,"libp2p_kad::record::store"],[2088,"libp2p_request_response"],[2089,"libp2p_swarm::connection"],[2090,"libp2p_swarm"],[2091,"libp2p_swarm"],[2092,"libp2p_gossipsub::behaviour"],[2093,"libp2p_autonat::behaviour"],[2094,"core::task::wake"],[2095,"libp2p_swarm"],[2096,"libp2p_gossipsub"],[2097,"core::error"],[2098,"std::backtrace"],[2099,"alloc::string"],[2100,"core::convert"],[2101,"color_eyre::section"],[2102,"core::fmt"],[2103,"libp2p_swarm"],[2104,"derive_builder::error"],[2105,"async_compatibility_layer::channel::bounded::inner"],[2106,"libp2p_core::transport"],[2107,"libp2p_core::muxing"],[2108,"core::marker"],[2109,"futures_io::if_std"],[2110,"libp2p_core::transport"],[2111,"alloc::boxed"],[2112,"core::pin"],[2113,"libp2p_core::transport"],[2114,"bitvec::slice"],[2115,"bitvec::order"],[2116,"multihash::multihash"],[2117,"core::cmp"],[2118,"core::fmt"],[2119,"core::net::ip_addr"],[2120,"core::net::ip_addr"],[2121,"core::iter::traits::collect"],[2122,"multiaddr"],[2123,"multiaddr"],[2124,"bitvec::ptr::span"]],"d":["Network logic","symbols needed to implement a networking instance over …","add vec of known peers or addresses","a autonat event","Start the bootstrap process to kademlia","bootstrap node accepts all connections","<code>BoxedTransport</code> is a type alias for a boxed tuple …","The inner <code>NetworkNode</code> has already been killed","Actions to send from the client to the swarm","conductor node is never pruned","Could not connect to the network in time","The number of connected peers has possibly changed","The default Kademlia replication factor","Error in the kademlia DHT","a DHT event","a direct message event","request for data from another peer","Respond with some data to another peer","Failure to deserialize a message","client request to send a direct serialized message","Recv-ed a direct message from a node","client request to send a direct reply to a message","Recv-ed a direct response from a node (that hopefully was …","Deserialization error","Signature verification error","Request the number of connected peers","Request the set of connected peers","Get(Key, Chan)","Print the routing  table to stderr, debugging only","a gossip  event","broadcast a serialized message","Recv-ed a broadcast","a identify event. Is boxed because this event is much …","Ignore peers. Only here for debugging purposes. Allows us …","Report that kademlia has successfully bootstrapped into …","The network node has been killed","Get address of peer","NOTE: …","Overarching network behaviour performing:","","Error generating network","events generated by the swarm that we wish to relay to the …","internal representation of the network events only used …","Network definition","describe the configuration of the network","Builder for <code>NetworkNodeConfig</code>.","Error type for NetworkNodeConfigBuilder","A handle containing:","Error wrapper type for interacting with swarm handle","internal network node receiver","this is mostly to estimate how many network connections a …","no known topic matches the hashset of keys","Error building Node config","prune a peer","Put(Key, Value) into DHT relay success back on channel","The receiver was unable to receive a new message","Error receiving message from network","regular node has a limit to the number of connections to …","a request response event","A peer is asking us for data","Error sending request to network","Failure to serialize a message","kill the swarm","subscribe to a topic","Error waiting for connections","Uninitialized field","unsubscribe from a topic","Custom validation error","","The signed authentication message sent to the remote peer …","The signed authentication message sent to the remote peer …","Auto NAT behaviour to determine if we are publically …","networking behaviours wrapping libp2p’s behaviours","Send to the bootstrap task to tell it to start a bootstrap","","","","","","","","","address to bind to","address to bind to","","","the configuration parameters of the netework","defines the swarm and network definition (internal)","","","","","","","","","","","","","","","purpose: peer routing purpose: storing pub key &lt;-&gt; peer id …","Handler for DHT Events","purpose: directly messaging peer","Handler for direct messages","","","","","","","","","","libp2p network errors Contains the <code>NetworkError</code> snafu types","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Bind all interfaces on port <code>port</code> NOTE we may want …","Generates an authenticated transport checked against the …","purpose: broadcasting messages to many peers NOTE …","human readable id","purpose: identifying the addresses from an outside POV","optional identity","optional identity","pub/private key from with peer_id is derived","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","the local address we’re listening on","the listener id we are listening on, if it exists","mesh_n from gossipsub","mesh_n_high from gossipsub","mesh_n_low from gossipsub","mesh_outbound_min from gossipsub","parameters for gossipsub mesh network","parameters for gossipsub mesh network","network configuration","Re-exports of the snafu errors that <code>NetworkNodeHandleError</code> …","functionality of a libp2p network node","The type of node (bootstrap etc)","The type of node (bootstrap etc)","Phantom data to hold the key type","Phantom data to hold the key type","the peer id of the networkbehaviour","peer id of network node","","","","","the receiver","kill switch","Replication factor for entries in the DHT","Replication factor for entries in the DHT","republication interval in DHT, must be much less than <code>ttl</code>","republication interval in DHT, must be much less than <code>ttl</code>","Behaviour for requesting and receiving data","Handler for requests and response behavior events.","Channel to resend requests, set to Some when we call …","send an action to the networkbehaviour","","whether to start in libp2p::kad::Mode::Server mode","whether to start in libp2p::kad::Mode::Server mode","Spawn a network node task task and return the handle and …","The stake table. Used for authenticating other nodes. If …","The stake table. Used for authenticating other nodes. If …","the swarm of networkbehaviours","list of addresses to connect to at initialization","list of addresses to connect to at initialization","","Alternative Libp2p transport implementations","","","","","","","","","expiratiry for records in DHT","expiratiry for records in DHT","","","","","","","","","Send back request ID to client","Send back channel","msg contents","Key to publish under","Key to search for","Channel to notify caller of result of publishing","Channel to notify caller of value (or failure to find …","Peer to try sending the request to","peer id","request sent on wire","Data","number of retries","number of retries to make","Value to publish under","source of error","source of error","source of error","source of error","source of error","source of error","dummy source","source of error","Wrapper around Kademlia","Wrapper around <code>RequestResponse</code>","exponential backoff type","Request Response Handling for data requests","State of bootstrapping","Behaviour wrapping libp2p’s kademlia included:","DHT event enum","represents progress through DHT","The query has been started","Only event tracked currently is when we successfully …","Metadata holder for get query","Metadata holder for get query","the maximum number of nodes to query in the DHT at any one …","the number of nodes required to get an answer from in …","Not in progress","The query has not been started","In progress","State used for random walk and bootstrapping","","","","","","Retry timeout","Exponential retry backoff","Exponential retry backoff","Task for doing bootstraps at a regular interval","State of bootstrapping","Sender to the bootstrap task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","handle a DHT event","","","","","","","","","","","","","","","","","","","","","","","","Send that the bootsrap suceeded","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Retrieve a value for a key from the DHT. Value …","update state based on recv-ed get query","Update state based on put query","","in progress queries for nearby peers","List of in-progress put requests","List of in-progress get requests","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","the key to look up","the key to put","","","","","","","","","Create a new DHT behaviour","notify client of result","notify client of result","number of replicas required to replicate over","The lookup keys for all outstanding DHT queries","the peer id (useful only for debugging right now)","Phantom type for the key","","","","","","","","","print out the routing table to stderr","progress through DHT query","progress through DHT query","Publish a key/value to the kv store. Once replicated upon …","Additional DHT record functionality","already received records","Get the replication factor for queries","replication factor","the number of remaining retries before giving up","Spawn a task which will retry the query after a backoff.","Spawn a task which will retry the query after a backoff.","Sender to retry requests.","Sets a sender to bootstrap task","Give the handler a way to retry requests.","State of bootstrap","Additional DHT store functionality This file contains the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the value to put","","","","","","","","","Bootstrap has finished","Bootstrap task’s state","Internal bootstrap events","Shutdown bootstrap","Start bootstrap","Start bootstrap","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Field indicating progress state","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Task’s sender","","","Run bootstrap task","Task’s loop","Task’s receiver","","","","","","","","","A namespace for looking up P2P identities","The namespace of a record. This is included with the key …","A record’s key. This is a concatenation of the namespace …","A (signed or unsigned) record value to be stored …","A signed record value","An unsigned record value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The actual key","","","","The namespace of the record key","Creates and returns a new unsigned record","Create and return a new record key in the given namespace","Creates and returns a new signed record by signing the key …","","","","Require certain namespaces to be authenticated","","","Convert the record key to a byte vector","","","","","","","","","Try to convert a byte vector to a record key","","","","","","","If the message requires authentication, validate the …","Get the underlying value of the record","","","","A <code>RecordStore</code> wrapper that validates records before …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Create a new <code>ValidatedStore</code> with the given underlying store","Phantom type for the key","","","","Overwrite the <code>put</code> method to validate the record before …","","","","The underlying store","","","","","Wrapper metadata around libp2p’s request response usage: …","Lilst of direct message output events","Request to direct message a peert","We received as Direct Request","We received a Direct Response","Add a direct request for a given peer","backoff since last attempted request","","","","","","","the data","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","handle a direct message event","In progress queries","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","the recv-ers peer id","","","","the number of remaining retries before giving up","","","","","","","","","","","","","Track (with exponential backoff) sending of some sort of …","","factor to back off by","","","","","","","","","","","","","","","Marked as expired regardless of time left.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Whether or not the timeout is expired","","Create new backoff","Return the timeout duration and start the next timeout.","","reset backoff","Value to reset to when reset is called","start next timeout result: whether or not we succeeded if …","when we started the timeout","the current timeout amount","","","","","","Handler for request response messages","Add a requests return channel to the map of pending …","","","","","","","","","Returns the argument unchanged.","Handles messages from the <code>request_response</code> behaviour by …","","Calls <code>U::from(self)</code>.","","","Map requests to the their response channels","","","","","Overarching network behaviour performing:","","Add an address","Add a direct request for a given peer","Add a direct response for a channel","Auto NAT behaviour to determine if we are publically …","","","","","","purpose: peer routing purpose: storing pub key &lt;-&gt; peer id …","purpose: directly messaging peer","","","Returns the argument unchanged.","purpose: broadcasting messages to many peers NOTE …","","","","","purpose: identifying the addresses from an outside POV","","Calls <code>U::from(self)</code>.","","Create a new instance of a <code>NetworkDef</code>","","","","","Publish a given gossip","Behaviour for requesting and receiving data","Subscribe to a given topic","","","","Unsubscribe from a given topic","","request was ignored serverside","SNAFU context selector for the <code>DHTError::CancelledRequest</code> …","Error enum for querying store because for some reason, …","Error initiating dial of peer","SNAFU context selector for the <code>NetworkError::DialError</code> …","nodes disagreed on the value","SNAFU context selector for the <code>DHTError::Disagreement</code> …","Get Record Error","wrapper","SNAFU context selector for the <code>DHTError::GetRecord</code> variant","Wrapper Error enum for <code>libp2p::kad::GetRecordError</code>. …","Error building the gossipsub instance","SNAFU context selector for the <code>NetworkError::GossipsubBuild</code>…","Error building the gossipsub configuration","SNAFU context selector for the …","wrapper type for errors generated by the <code>Network</code>","Error when there are no known peers to bootstrap off","SNAFU context selector for the <code>NetworkError::NoKnownPeers</code> …","could not find 2 or more nodes that had the value","SNAFU context selector for the <code>DHTError::NotFound</code> variant","Error publishing a gossipsub message","SNAFU context selector for the <code>NetworkError::PublishError</code> …","Get Record Error","SNAFU context selector for the <code>DHTError::PutRecord</code> variant","Error if one of the channels to or from the swarm is closed","SNAFU context selector for the <code>NetworkError::StreamClosed</code> …","Error during dialing or listening","Error establishing backend connection","SNAFU context selector for the …","SNAFU context selector for the <code>NetworkError::Transport</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","source of error","source of error","source of error","source of error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","","Wrapped num of connections","Number of connections to a single peer before logging an …","Maximum size of a message","","Network definition","","","","","","","","initialize the DHT with known peers add the peers to …","Send to the bootstrap task to tell it to start a bootstrap","","","configuration for the libp2p network (e.g. how it should …","the configuration parameters of the netework","return hashset of PIDs this node is connected to","","","","Handler for DHT Events","Handler for direct messages","","","Returns the argument unchanged.","libp2p network handle allows for control over the libp2p …","event handler for client events currectly supported …","event handler for events emitted from the swarm","pub/private key from with peer_id is derived","","Calls <code>U::from(self)</code>.","","the listener id we are listening on, if it exists","","Creates a new <code>Network</code> with the given settings.","Returns number of peers this node is connected to","Phantom data to hold the key type","Get a reference to the network node’s peer id.","peer id of network node","","Publish a key/value to the kv store. Once replicated upon …","Handler for requests and response behavior events.","Channel to resend requests, set to Some when we call …","Spawn a task to listen for requests on the returned channel","","starts the swarm listening on <code>listen_addr</code> and optionally …","the swarm of networkbehaviours","","","","","The default Kademlia replication factor","NOTE: …","describe the configuration of the network","Builder for <code>NetworkNodeConfig</code>.","Error type for NetworkNodeConfigBuilder","Uninitialized field","Custom validation error","","","","","","","The signed authentication message sent to the remote peer …","The signed authentication message sent to the remote peer …","The signed authentication message sent to the remote peer …","","","","","","","","","address to bind to","address to bind to","address to bind to","Builds a new <code>NetworkNodeConfig</code>.","","","","","","","Create an empty builder, with all fields set to <code>None</code> or …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","optional identity","optional identity","optional identity","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","mesh_n from gossipsub","mesh_n_high from gossipsub","mesh_n_low from gossipsub","mesh_outbound_min from gossipsub","parameters for gossipsub mesh network","parameters for gossipsub mesh network","parameters for gossipsub mesh network","The type of node (bootstrap etc)","The type of node (bootstrap etc)","The type of node (bootstrap etc)","","","","","Replication factor for entries in the DHT","Replication factor for entries in the DHT","Replication factor for entries in the DHT","republication interval in DHT, must be much less than <code>ttl</code>","republication interval in DHT, must be much less than <code>ttl</code>","republication interval in DHT, must be much less than <code>ttl</code>","whether to start in libp2p::kad::Mode::Server mode","whether to start in libp2p::kad::Mode::Server mode","whether to start in libp2p::kad::Mode::Server mode","The stake table. Used for authenticating other nodes. If …","The stake table. Used for authenticating other nodes. If …","The stake table. Used for authenticating other nodes. If …","list of addresses to connect to at initialization","list of addresses to connect to at initialization","list of addresses to connect to at initialization","","","","","","","","","","","","","expiratiry for records in DHT","expiratiry for records in DHT","expiratiry for records in DHT","","","","","","","","","The inner <code>NetworkNode</code> has already been killed","SNAFU context selector for the …","Could not connect to the network in time","SNAFU context selector for the …","Error in the kademlia DHT","SNAFU context selector for the …","Failure to deserialize a message","SNAFU context selector for the …","Deserialization error","SNAFU context selector for the …","Signature verification error","SNAFU context selector for the …","The network node has been killed","SNAFU context selector for the …","Error generating network","A handle containing:","Error wrapper type for interacting with swarm handle","internal network node receiver","SNAFU context selector for the …","no known topic matches the hashset of keys","SNAFU context selector for the …","Error building Node config","SNAFU context selector for the …","The receiver was unable to receive a new message","SNAFU context selector for the …","Error receiving message from network","SNAFU context selector for the …","Error sending request to network","SNAFU context selector for the …","Failure to serialize a message","SNAFU context selector for the …","Error waiting for connections","SNAFU context selector for the …","","","","","","","","","","","","","","","","","Tell libp2p about known network nodes","","","","Notify the network to begin the bootstrap process","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a reference to the network config","return hashset of PIDs this node is connected to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Make a direct request to <code>peer_id</code> containing <code>msg</code>","Make a direct request to <code>peer_id</code> containing <code>msg</code> without …","Reply with <code>msg</code> to a request over <code>chan</code>","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Receive a record from the kademlia DHT if it exists. Must …","Get a record from the kademlia DHT with a timeout","Gossip a message to peers","Gossip a message to peers without serializing","","Get a reference to the network node handle’s id.","human readable id","Ignore <code>peers</code> when pruning e.g. maintain their connection","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference to the network node handle’s listen addr.","the local address we’re listening on","Looks up a node’s <code>PeerId</code> by its staking key. Is …","Look up a peer’s addresses in kademlia NOTE: this should …","network configuration","Re-exports of the snafu errors that <code>NetworkNodeHandleError</code> …","Returns number of peers this node is connected to","Phantom data to hold the key type","Get a reference to the network node handle’s peer id.","the peer id of the networkbehaviour","","","","","","","","","","","","","","","","","","","Print out the routing table used by kademlia NOTE: only …","Forcefully disconnect from a peer","Insert a record into the kademlia DHT","Insert a record into the kademlia DHT with a timeout","the receiver","recv a network event","kill switch","Request another peer for some data we want.  Returns the …","Send a response to a request with the response channel","send an action to the networkbehaviour","Send a client request to the network","Add a kill switch to the receiver","Cleanly shuts down a swarm node This is done by sending a …","","Spawn a network node task task and return the handle and …","Subscribe to a topic","Take the kill switch to allow killing the receiver task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsubscribe from a topic","","","","","","","","","","","","","","","","","","","Wait until at least <code>num_peers</code> have connected","source of error","source of error","source of error","source of error","source of error","source of error","dummy source","source of error","","","","","","","The timeout for the authentication handshake. This is used …","A helper trait that allows us to access the underlying …","The deserialized form of an authentication message that is …","The maximum size of an authentication message. This is …","A wrapper for a <code>Transport</code> that bidirectionally …","A type alias for the future that upgrades a connection to …","","","Get a mutable reference to the underlying connection","Get a mutable reference to the underlying <code>PeerId</code>","A pre-signed message that we send to the remote peer for …","Prove to the remote peer that we are in the stake table by …","","","","","","","Create an sign an authentication message to be sent to the …","","","","","","","","Dial a remote peer. This function is changed to perform an …","Dial a remote peer as a listener. This function is changed …","","","Returns the argument unchanged.","Returns the argument unchanged.","Wrap the supplied future in an upgrade that performs the …","","","The underlying transport we are wrapping","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new <code>StakeTableAuthentication</code> transport that wraps …","Phantom data for the connection type","The encoded peer ID of the sender. This is appended to the …","","","This function is where we perform the authentication …","","","The encoded (stake table) public key of the sender. This, …","A helper function to read a length-delimited message from …","The below functions just pass through to the inner …","","The signature on the public key","The stake table we check against to authenticate …","","","","","","","","Validate the signature on the public key and return it if …","Verify that the remote peer is:","","","A helper function to write a length-delimited message to a …","Representation of a Multiaddr.","Identifier of a peer of the network.","A channel for sending a response to an inbound request.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new, empty multiaddress.","","","Checks whether the given <code>Multiaddr</code> is a suffix of this …","","","","","","","","","","","Convert a Multiaddr to a string","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Parses a <code>PeerId</code> from bytes.","","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.","Builds a <code>PeerId</code> from a public key.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the length of this multiaddress is 0.","Checks whether the response channel is still open, i.e. …","Returns the components of this multiaddress.","","","","Return the length in bytes of this multiaddress.","","","","","","","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …","Returns &amp;str identifiers for the protocol names themselves.","Adds an already-parsed address component to the end of …","Generates a random peer ID from a cryptographically secure …","Replace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.","","","","Returns a base-58 encoded string of this <code>PeerId</code>.","Returns a raw bytes representation of this <code>PeerId</code>.","","","","","Return a copy of this <code>Multiaddr</code>’s byte representation.","","","","","","","","","","","","","","","","","","","Like <code>Multiaddr::push</code> but consumes <code>self</code>.","Create a new, empty multiaddress with the given capacity.","Appends the given <code>PeerId</code> if not yet present at the end of …"],"i":[0,0,11,13,11,3,0,41,0,3,41,12,0,41,13,13,11,11,41,11,12,11,12,41,41,11,11,11,11,13,11,12,13,11,12,41,11,0,0,0,41,0,0,0,0,0,0,0,0,0,0,41,41,11,11,41,41,3,13,12,41,41,11,11,41,136,11,136,3,38,135,91,0,131,3,11,12,13,3,11,12,13,38,135,3,3,131,0,3,3,11,12,13,3,11,12,13,3,3,11,12,13,91,131,91,131,3,11,12,13,3,3,3,3,3,0,3,11,12,13,3,11,12,13,13,13,13,13,13,13,3,0,0,91,40,91,38,135,131,3,11,12,13,193,3,11,12,13,3,11,12,13,40,131,137,137,137,137,38,135,40,0,0,38,135,40,131,40,131,3,11,12,13,39,39,38,135,38,135,91,131,131,40,3,38,135,0,38,135,131,38,135,3,0,3,11,12,13,3,11,12,13,38,135,3,11,12,13,3,11,12,13,194,195,196,197,198,197,198,194,196,194,195,196,198,197,199,200,201,202,203,204,205,206,0,0,0,0,0,0,0,0,46,45,0,0,0,0,44,46,44,0,43,44,45,46,47,43,53,54,0,49,49,47,49,43,44,45,53,54,46,47,49,43,44,45,53,54,46,43,44,45,46,43,44,45,46,47,47,49,43,44,45,53,54,46,47,49,43,44,45,53,54,46,47,49,43,44,45,53,54,46,49,47,49,43,44,45,53,54,46,44,45,46,44,44,44,44,45,45,45,45,46,46,46,46,49,49,43,44,45,53,54,46,47,49,43,44,45,53,54,46,46,49,49,49,46,49,49,49,47,49,43,44,45,53,54,46,47,49,43,44,45,53,54,46,53,54,47,49,43,44,45,53,54,46,49,53,54,53,49,49,49,47,49,43,44,45,53,54,46,49,53,54,49,0,53,49,49,53,49,49,49,49,49,43,0,43,44,45,46,47,49,43,44,45,53,54,46,47,49,43,44,45,53,54,46,47,49,43,44,45,53,54,46,54,47,49,43,44,45,53,54,46,66,0,0,66,66,69,66,69,66,69,66,69,66,69,66,69,66,69,66,69,69,66,69,66,69,66,69,69,66,69,69,69,69,66,69,66,69,66,69,66,69,73,0,0,0,71,71,71,73,74,71,73,74,71,73,74,71,73,74,71,73,74,71,73,74,71,73,74,71,71,73,73,74,71,73,74,71,73,71,71,71,71,73,73,73,73,71,71,73,74,71,73,74,71,73,74,74,71,73,74,74,71,74,71,71,73,74,0,71,73,74,71,73,74,71,71,73,73,74,74,71,73,74,71,73,74,71,71,71,73,74,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,87,87,84,85,85,84,87,85,84,87,85,84,85,84,87,85,84,87,85,84,87,85,84,87,85,84,87,85,84,87,84,84,85,84,87,85,84,87,85,84,87,85,85,84,87,85,85,84,87,85,84,87,85,84,87,85,84,87,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,110,0,0,33,0,110,0,110,126,0,0,33,0,33,0,0,33,0,110,0,33,0,110,0,33,0,33,33,0,0,119,120,121,111,114,115,122,116,123,124,117,118,125,110,126,33,110,126,33,110,126,33,110,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,111,114,115,116,117,118,33,110,119,120,121,111,114,115,122,116,123,124,117,118,125,110,126,119,120,121,111,114,115,122,116,123,124,117,118,125,110,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,33,110,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,111,114,115,116,117,118,119,120,121,111,114,115,122,116,33,33,123,124,117,118,125,110,110,126,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,33,110,126,33,110,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,119,120,121,111,114,115,122,116,123,124,117,118,125,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,111,114,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,33,110,119,120,121,111,114,115,122,116,123,124,117,118,125,110,126,33,110,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,119,120,121,111,114,115,122,116,33,123,124,117,118,125,110,126,207,208,209,210,211,212,213,214,215,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,131,131,131,0,131,131,131,131,131,131,131,131,131,131,0,131,131,131,131,131,131,131,0,131,131,131,131,131,131,131,131,131,131,0,131,131,131,131,131,131,0,0,0,0,0,136,136,0,38,135,137,136,136,135,38,135,38,135,136,137,38,135,136,137,135,38,135,135,38,135,137,38,135,137,135,38,135,137,38,135,136,137,38,135,136,137,38,135,136,137,38,135,136,137,38,136,136,137,38,135,136,136,136,137,136,135,38,135,136,38,135,136,137,38,135,136,137,38,135,136,137,137,137,137,137,135,38,135,135,38,135,38,135,136,137,135,38,135,135,38,135,135,38,135,135,38,135,135,38,135,38,135,137,136,38,135,136,137,38,135,136,137,135,38,135,38,135,136,137,38,135,136,137,41,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,0,0,0,41,0,41,0,41,0,41,0,41,0,41,0,41,0,40,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,40,41,41,41,40,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,140,141,142,143,144,145,146,41,40,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,40,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,40,40,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,41,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,40,40,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,140,141,142,143,144,145,146,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,41,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,40,40,40,41,40,40,40,41,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,40,40,40,40,0,40,40,40,40,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,40,40,40,39,39,39,40,40,40,40,39,40,41,0,40,39,40,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,40,39,147,148,149,140,141,150,151,142,152,153,143,154,144,145,146,41,40,199,200,201,202,203,204,205,206,0,0,0,0,0,0,0,0,0,0,0,0,163,156,160,160,156,156,156,163,156,163,163,163,0,156,163,156,163,156,163,163,156,156,156,163,156,163,156,156,163,156,156,163,156,163,156,156,156,163,156,163,156,156,156,163,0,156,163,163,156,163,156,163,156,163,156,163,163,156,156,163,0,0,0,0,25,29,25,25,29,25,92,29,25,92,29,25,25,29,25,29,25,29,25,29,25,92,29,25,92,29,25,25,92,29,29,25,92,29,25,25,25,25,25,29,25,25,25,25,29,29,29,29,25,25,92,29,29,25,25,25,25,25,92,29,29,29,29,25,29,29,25,29,25,29,25,29,25,29,25,92,29,25,92,29,25,25,92,25,25,92,29,25,29,25,29,25,92,29,25,25,25,29,25,92,25,29,29,29,25,29,25,29,25,25,25,25,25,25,92,29,29,29,25,92,29,25,92,29,25,92,29,25,25,25],"f":"````````````````````````````````````````````````````````````````````{{cb}d{}}`````{ce{}{}}0000000``{ff}{{ce}d{}{}}``{{}f}{hc{}}0000000{c{{j{f}}}l}{{ce}{{j{{n{gi}}}}}{}{}{}{}}000````{hd}000{{ff}A`}{{ce}A`{}{}}000`{{fAb}Ad}{{AfAb}Ad}{{AhAb}Ad}{{AjAb}Ad}{cc{}}00{{{B`{AlAn}}}Aj}{BbAj}{{{B`{{Bf{Bd}}{Bf{Bd}}}}}Aj}3{BhAj}{BjAj}{BlAj}{Bn{{j{fc}}}{}}{C`Cb}{{Cd{Ch{{Cf{c}}}}{Ch{{Bf{Bd}}}}}{{j{{D`{{Cn{CjCl}}}}Db}}}Dd}``````{{}h}000`{ce{}{}}000{{}{{j{DfDh}}}}000`````````````````{{}}000``````````{{fc}jDj}``{{{Dl{c}}h}{{j{{Cn{Dn{E`{c}}}}Eb}}}Dd}`````4`{c{{j{e}}}{}{}}0000000``{cEd{}}0006666````````````````````````````````````````{{cb}d{}}000```````7777777777777777{EfEf}{EhEh}{EjEj}{ElEl}{{ce}d{}{}}000{EnF`}{hc{}}000000000000000{{ce}{{j{{n{gi}}}}}{}{}{}{}}0000000{{{Fb{c}}Bl{Ff{Fdc}}}{{Ch{Ah}}}Dd}{hd}0000000{{EhEh}A`}{{EjEj}A`}{{ElEl}A`}{{ce}A`{}{}}00000000000{{{Fb{c}}}dDd}{{{Fb{c}}Ab}Ad{FhDd}}{{EfAb}Ad}{{EhAb}Ad}{{EjAb}Ad}{{FjAb}Ad}{{FlAb}Ad}{{ElAb}Ad}{cc{}}0000000{{ce}Fn{G`Gb}Gd}{{{Fb{c}}{Bf{Bd}}{Gf{{Bf{Bd}}}}F`GhBd{Gj{{Ff{Fdc}}}}}dDd}{{{Fb{c}}{Ff{Fdc}}GlGnA`}dDd}{{{Fb{c}}H`Gn}dDd}{{Elc}dHb}```{{}h}0000000{ce{}{}}0000000``{{}{{j{DfDh}}}}0000000{{CjF`}{{Fb{c}}}Dd}``````{{}}0000000{{{Fb{c}}{Gj{{Ff{Fdc}}}}}dDd}``{{{Fb{c}}GnFl}dDd}``{{{Fb{c}}}F`Dd}``{{{Fb{c}}Fj}dDd}{{{Fb{c}}Fl}dDd}`{{{Fb{c}}{Hf{Hd}}}dDd}{{{Fb{c}}{Hh{Af}}}dDd}``::::{c{{j{e}}}{}{}}000000000000000{cEd{}}0000000`<<<<<<<<`````{Hjd}===={hc{}}000{{ce}{{j{{n{gi}}}}}{}{}{}{}}0{hd}0{cc{}}0`{{}h}0{ce{}{}}0{{}{{j{DfDh}}}}0`{{}}0{{{Hl{Hd}}{Hh{Af}}}d}9`;;;;::33``````{{cb}d{}}00444444{{{Hn{c}}}{{Hn{c}}}{I`Dd}}{IbIb}{IdId}{{ce}d{}{}}00======{c{{j{{Hn{e}}}}}lDd}={c{{j{Ib}}}l}>>==={{{Hn{c}}{Hn{c}}}A`{IfDd}}{{IbIb}A`}{{ce}A`{}{}}0000000{{{Hn{c}}Ab}Ad{FhDd}}{cc{}}00{{}h}00{ce{}{}}00`{{}{{j{DfDh}}}}00`{{{Bf{Bd}}}{{Hn{c}}}Dd}{{Ib{Bf{Bd}}}Id}{{Id{Bf{Bd}}}{{Ih{{Hn{c}}}}}Dd}{{}}00{IbA`}{{{Hn{c}}e}jDdDj}{{Ibc}jDj}{Id{{Bf{Bd}}}}999{c{{j{e}}}{}{}}{Ij{{Ih{{Hn{c}}}}}Dd}1{Bd{{Ih{Ib}}}}2{{{Il{Bd}}}{{Ih{Id}}}}333{cEd{}}00{{{Hn{c}}Id}A`Dd}{{{Hn{c}}}{{Il{Bd}}}Dd}{ce{}{}}00`{{{Ff{ce}}In}{{J`{d}}}JbDd}11{hc{}}0{{ce}{{j{{n{gi}}}}}{}{}{}{}}{hd}{cc{}}{{{Ff{ce}}Jd}{{Ch{{Jf{Ij}}}}}JbDd}{{}h}7{{}{{j{DfDh}}}}{c{{Ff{ce}}}JbDd}`{{}}{{{Ff{ce}}}gJbDd{}}{{{Ff{ce}}Jd}{{Bf{In}}}JbDd}{{{Ff{ce}}Ij}{{J`{d}}}JbDd}2{{{Ff{ce}}Jd}dJbDd}{{{Ff{ce}}JdCj}dJbDd}`{c{{j{e}}}{}{}}0{cEd{}}{ce{}{}}`````{{JhJjJl}d}`111111`{{}Jh}{hc{}}00000{{ce}{{j{{n{gi}}}}}{}{}{}{}}00{hd}00{{JjAb}Ad}{{JhAb}Ad}{{JnAb}Ad}{cc{}}00{{Jh{B`{{Bf{Bd}}{Bf{Bd}}}}{Ch{{Hh{Af}}}}}{{Ch{Ah}}}}`{{}h}00;;;{{}{{j{DfDh}}}}00`{{}}00`??????>>>===`{{cb}d{}}`>>{GhGh}{{ce}d{}{}}{{}Gh}>>=<{{GhGh}A`}{{ce}A`{}{}}000{Ghd}{{GhAb}Ad}<{{ce}Fn{G`Gb}Gd}{{Ghc}dHb}<{ce{}{}}{GhA`}={{K`Kb}Gh}{{GhA`}Kb}>7`{{GhA`}d}``4{c{{j{e}}}{}{}}0{cEd{}}6`{{KdJl{Gf{{Ch{An}}}}}d}77{{}Kd}{hc{}}0{{ce}{{j{{n{gi}}}}}{}{}{}{}}{hd}{{KdAb}Ad}{cc{}}{{Kd{B`{AlAn}}}{{Ch{Ah}}}}{{}h}?{{}{{j{DfDh}}}}{{}}`<<;{ce{}{}}``{{{Kf{c}}CjCb}dDd}{{{Kf{c}}Cj{Bf{Bd}}}JlDd}{{{Kf{c}}{Kh{{Bf{Bd}}}}{Bf{Bd}}}dDd}`33<<;``:{{{Kf{c}}Ab}AdDd}9`{{{Kf{c}}KjCjCbCb}{{j{{Kl{{Kf{c}}}}Kn}}}Dd}{{{Kf{c}}KjCjCbL`}{{j{{Kl{{Kf{c}}}}Kn}}}Dd}{{{Kf{c}}KjCbCb}{{j{dKn}}}Dd}{{{Kf{c}}Kj{Ch{Cj}}{Il{Cb}}L`}{{j{{Bf{Cb}}Kn}}}Dd}`;8:{{Lb{Gj{{Ff{Fdc}}}}Ld{Lf{{Bf{Bd}}{Bf{Bd}}}}{Lf{AlAn}}Lh}{{Kf{c}}}Dd}{{{Kf{c}}CjKj{Lj{{Kf{c}}}}}dDd}{{{Kf{c}}Ll}dDd}<{{{Kf{c}}Ln}{{Md{{Mb{e{M`{{Kf{c}}}}}}}}}Dd{}}{{{Kf{c}}Mf{Bf{Bd}}}dDd}`{{{Kf{c}}Bn}dDd}{c{{j{e}}}{}{}}0{cEd{}}2{ce{}{}}``````````````````````````````{{cb}d{}}00000000000000{cMh{}}00000{Db{{Ch{Mj}}}}{Ml{{Ch{Mj}}}}44444444444444444444444444444444{{{Mn{c}}}Db{{Nb{N`}}}}{{{Nd{c}}}Db{{Nb{N`}}}}{NfDb}{NhDb}{NjMl}{NlMl}{Db{{Ch{Mh}}}}{Ml{{Ch{Mh}}}}{NnNn}{O`O`}{ObOb}{{{Mn{c}}}{{Mn{c}}}I`}{{{Nd{c}}}{{Nd{c}}}I`}{NfNf}{OdOd}{NhNh}{OfOf}{OhOh}{NjNj}{NlNl}{OjOj}{MlMl}{OlOl}{{ce}d{}{}}00000000000000{hc{}}0000000000000000000000000000000{DbBn}{MlBn}{{ce}{{j{{n{gi}}}}}{}{}{}{}}000000000000000{hd}000000000000000{{{Mn{c}}}{{j{eDb}}}{{Nb{N`}}}{}}{{{Nd{c}}}{{j{eDb}}}{{Nb{N`}}}{}}{Nf{{j{cDb}}}{}}{Nh{{j{cDb}}}{}}{Nj{{j{cMl}}}{}}{Nl{{j{cMl}}}{}}{{NnAb}Ad}{{O`Ab}Ad}{{ObAb}Ad}{{{Mn{c}}Ab}AdFh}{{{Nd{c}}Ab}AdFh}{{NfAb}Ad}{{OdAb}Ad}{{NhAb}Ad}{{DbAb}Ad}0{{OfAb}Ad}{{OhAb}Ad}{{NjAb}Ad}{{NlAb}Ad}{{OjAb}Ad}{{MlAb}Ad}0{{OlAb}Ad}0{cc{}}000000000000000{{ce}{{On{eg}}}{}{A`AbAd}{}}00{c{}{}}00{{}h}000000000000000{ce{}{}}000000000000000{{Nnc}Db{}}{{O`c}Db{}}{{Obc}Db{}}{{{Mn{c}}e}Db{{Nb{N`}}}{}}{{{Nd{c}}e}Db{{Nb{N`}}}{}}{{Nfc}Db{}}{{Odc}Db{}}{{Nhc}Db{}}{{Ofc}Ml{}}{{Ohc}Ml{}}{{Njc}Ml{}}{{Nlc}Ml{}}{{Ojc}Ml{}}{{}{{j{DfDh}}}}000000000000000``{{}}000000000000000{Db{{Ch{Mh}}}}{Ml{{Ch{Mh}}}}{ce{}{}}00000000000000{cN`{}}00{c{{j{e}}}{}{}}0000000000000000000000000000000{cEd{}}0000000000000003333333333333333`````````````````````````````{{{Af{c}}{Il{{Cn{CjCb}}}}}dDd}`44``{{{Af{c}}}{{Cf{Cj}}}Dd}{hc{}}0{{ce}{{j{{n{gi}}}}}{}{}{}{}}``{hd}{{{Af{c}}Ab}AdDd}{cc{}}`{{{Af{c}}{j{AfAh}}}{{j{A`Db}}}Dd}{{{Af{c}}{Aj{Aj}}{Hh{Ah}}}{{j{dDb}}}Dd}`{{}h}={{}{{j{DfDh}}}}``{{{Dl{c}}}{{j{{Af{c}}Db}}}Dd}{{{Af{c}}}hDd}`{{{Af{c}}}CjDd}`{{}}{{{Af{c}}Fl}dDd}``{{{Af{c}}}{{j{{Cn{{Hh{Af}}{Al{Ah}}}}Db}}}Dd}`{{{Af{c}}Cb}{{j{CbDb}}}Dd}`{c{{j{e}}}{}{}}0{cEd{}}{ce{}{}}````````{{cb}d{}}00{cMh{}}0{{{An{c}}{Ch{{Bf{Bd}}}}}{{An{c}}}{DdI`}}``33333333{{{An{c}}{Ch{Cb}}}{{An{c}}}{DdI`}}``{{{An{c}}}{{j{{Dl{c}}AA`}}}{DdI`}}{{{Dl{c}}}{{Dl{c}}}{I`Dd}}{{{An{c}}}{{An{c}}}{I`Dd}}{AAbAAb}{{ce}d{}{}}00{{}{{An{c}}}{DdI`}}{{}{{Dl{c}}}{AAdDd}}1{{}AAb}{hc{}}0000000{{ce}{{j{{n{gi}}}}}{}{}{}{}}000{hd}000{{{Dl{c}}Ab}AdDd}{{AA`Ab}Ad}0{{AAbAb}Ad}{cc{}}00{AAfAA`}{N`AA`}2{{ce}{{On{eg}}}{}{A`AbAd}{}}{{{An{c}}e}{{An{c}}}{DdI`}{{Nb{Cd}}}}``{c{}{}}{{}h}000{ce{}{}}000{{}{{j{DfDh}}}}000````{{{An{c}}{Ch{AAb}}}{{An{c}}}{DdI`}}``{{{An{c}}f}{{An{c}}}{DdI`}}``{{}}000{{{An{c}}e}{{An{c}}}{DdI`}{{Nb{F`}}}}``{{{An{c}}{Ch{Kb}}}{{An{c}}}{DdI`}}``{{{An{c}}A`}{{An{c}}}{DdI`}}``{{{An{c}}{Ch{{Cf{c}}}}}{{An{c}}}{DdI`}}``{{{An{c}}{Cf{{Cn{CjCb}}}}}{{An{c}}}{DdI`}}``999{cN`{}}{c{{j{e}}}{}{}}00000005``{cEd{}}000<<<<`````````````````````````````````{{cb}d{}}000000000000000{{{E`{c}}{Bf{{Cn{CjCb}}}}}{{j{dEb}}}Dd}{cMh{}}0{Eb{{Ch{Mj}}}}{{{E`{c}}}{{j{dEb}}}Dd}{ce{}{}}00000000000000000000000000000000000{AAhEb}{AAjEb}{AAlEb}{AAnEb}{AB`Eb}{ABbEb}{ABdEb}{Eb{{Ch{Mh}}}}{{{E`{c}}}{{E`{c}}}{I`Dd}}{ABfABf}{ABhABh}{ABjABj}{AAhAAh}{AAjAAj}{ABlABl}{ABnABn}{AAlAAl}{AC`AC`}{ACbACb}{AAnAAn}{ACdACd}{AB`AB`}{ABbABb}{ABdABd}{{ce}d{}{}}000000000000000{{{E`{c}}}{{Dl{c}}}Dd}{{{E`{c}}}{{j{{Cf{Cj}}Eb}}}Dd}{hc{}}00000000000000000000000000000000000{EbBn}{{ce}{{j{{n{gi}}}}}{}{}{}{}}00000000000000000{{{E`{c}}Cj{Il{Bd}}}{{j{dEb}}}Dd}{{{E`{c}}Cj{Bf{Bd}}}{{j{dEb}}}Dd}{{{E`{c}}{Kh{{Bf{Bd}}}}{Il{Bd}}}{{j{dEb}}}Dd}{hd}00000000000000000{AAh{{j{cEb}}}{}}{AAj{{j{cEb}}}{}}{AAl{{j{cEb}}}{}}{AAn{{j{cEb}}}{}}{AB`{{j{cEb}}}{}}{ABb{{j{cEb}}}{}}{ABd{{j{cEb}}}{}}{{{E`{c}}Ab}Ad{FhDd}}{{DnAb}Ad}{{ABfAb}Ad}{{ABhAb}Ad}{{ABjAb}Ad}{{AAhAb}Ad}{{AAjAb}Ad}{{ABlAb}Ad}{{ABnAb}Ad}{{AAlAb}Ad}{{AC`Ab}Ad}{{ACbAb}Ad}{{AAnAb}Ad}{{ACdAb}Ad}{{AB`Ab}Ad}{{ABbAb}Ad}{{ABdAb}Ad}{{EbAb}Ad}0{cc{}}00000000000000000{{{E`{c}}IdBd}{{j{{Bf{Bd}}Eb}}}Dd}{{{E`{c}}IdKb}{{j{{Bf{Bd}}Eb}}}Dd}{{{E`{c}}N`{Il{Bd}}}{{j{dEb}}}Dd}{{{E`{c}}N`{Bf{Bd}}}{{j{dEb}}}Dd}{{ce}{{On{eg}}}{}{A`AbAd}{}}{{{E`{c}}}hDd}`{{{E`{c}}{Bf{Cj}}}{{j{dEb}}}Dd}{c{}{}}{{}h}00000000000000000{ce{}{}}00000000000000000{{ABfc}Eb{}}{{ABhc}Eb{}}{{ABjc}Eb{}}{{AAhc}Eb{}}{{AAjc}Eb{}}{{ABlc}Eb{}}{{ABnc}Eb{}}{{AAlc}Eb{}}{{AC`c}Eb{}}{{ACbc}Eb{}}{{AAnc}Eb{}}{{ACdc}Eb{}}{{AB`c}Eb{}}{{ABbc}Eb{}}{{ABdc}Eb{}}{{}{{j{DfDh}}}}00000000000000000{{{E`{c}}}CbDd}`{{{E`{c}}{Il{Bd}}Kb}{{j{CjEb}}}Dd}{{{E`{c}}Cj}{{j{dEb}}}Dd}``{{{E`{c}}}{{j{hEb}}}Dd}`{{{E`{c}}}CjDd}`{{}}00000000000000000{{{E`{c}}}{{j{dEb}}}Dd}4{{{E`{c}}Id{Hn{c}}}{{j{dEb}}}Dd}{{{E`{c}}Id{Hn{c}}Kb}{{j{dEb}}}Dd}`{Dn{{j{AhEb}}}}`{{{E`{c}}{Il{Bd}}Cj}{{j{{Ch{An}}Eb}}}Dd}{{{E`{c}}{Bf{Bd}}{Kh{An}}}{{j{dEb}}}Dd}`{{{E`{c}}Af}{{j{dEb}}}Dd}{{Dn{ACf{d}}}d}7{Eb{{Ch{Mh}}}}{{{Dl{c}}h}{{j{{Cn{Dn{E`{c}}}}Eb}}}Dd}{{{E`{c}}N`}{{j{dEb}}}Dd}{Dn{{Ch{{ACf{d}}}}}}{ce{}{}}000000000000000{cN`{}}{c{{j{e}}}{}{}}00000000000000000000000000000000000{cEd{}}000000000000000005333333333333333333{{{E`{c}}hh}{{j{dEb}}}Dd}````````````````````{{cb}d{}}{{{ACh{ceg}}CbCb}{{Ch{Cb}}}ACjDd{AClACn}}{AD`c{AClACn}}{AD`Cj}`{{c{ADb{{Ch{{Bf{Bd}}}}}}}{{Ih{d}}}{ADdACn}}9999{{{ADf{c}}}{{ADf{c}}}{I`Dd}}{{ce}d{}{}}{{cCj}{{Ih{{Bf{Bd}}}}}Dd}{hc{}}000{{ce}{{j{{n{gi}}}}}{}{}{}{}}0{c{{j{{ADf{e}}}}}lDd}{{{ACh{ceg}}Cb}{{j{i{ADh{k}}}}}ACjDd{AClACn}{}{}}0{hd}0{cc{}}0{{cA`{ADb{{Ch{{Cf{e}}}}}}{ADb{{Ch{{Bf{Bd}}}}}}}{{ADn{{ADl{ADj}}}}}{{ADj{}{{AE`{j}}}}Ab}Dd}{{}h}0`{ce{}{}}0{{}{{j{DfDh}}}}0{{{ACh{ceg}}AEbCb}{{j{d{ADh{i}}}}}ACjDd{AClACn}{}}{{c{Ch{{Cf{e}}}}{Ch{{Bf{Bd}}}}}{{ACh{ceg}}}ACjDd{AClACn}}``{{}}0{{{ADn{{ACh{ceg}}}}Ln}{{Md{{AEd{ik}}}}}ACjDd{AClACn}{}{}}{{{ADn{{ACh{ceg}}}}}{{`{ceg}}}ACjDd{AClACn}}0`{{ch}{{Ih{{Bf{Bd}}}}}{AEfACn}}{{{ACh{ceg}}AEb}A`ACjDd{AClACn}}{{{ADf{c}}e}jDdDj}``9{c{{j{e}}}{}{}}000{cEd{}}0{{{ADf{c}}}{{Ih{c}}}Dd}{{c{ADb{{Ch{{Cf{eg}}}}}}Cj}{{Ih{d}}}{AEhACn}DdGd}=={{c{Il{Bd}}}{{Ih{d}}}{ADdACn}}```{{cb}d{}}0{c{{AEj{eg}}}{}{}AEl}{Cb{{Il{Bd}}}}{CjAEn}{ce{}{}}00000`{CbCb}{CjCj}{{ce}d{}{}}0{{CbCb}AF`}{{CjCj}AF`}{{ce}AF`{}{}}0{hc{}}00000{{ce}{{j{{n{gi}}}}}{}{}{}{}}{c{{j{Cb}}}l}1{c{{j{Cj}}}l}2{hd}00{{}Cb}{ce{}{{AFd{AFb}}}}0{{CbCb}A`}0{{CjCj}A`}{{ce}A`{}{}}0000000{{CbAb}{{j{dAFf}}}}0{{{Kh{c}}Ab}{{j{dAFf}}}Fh}{{CjAb}{{j{dAFf}}}}0{AFhCb}{cc{}}{AFjCb}{AFlCb}{AFnCb}3{AG`Cj}04{{{Il{Bd}}}{{j{CjAGb}}}}{cCb{{AGf{}{{AGd{AFh}}}}}}{AEn{{j{CjAEn}}}}3{Bn{{j{CbAGh}}}}{Bn{{j{Cj}}}}{{ce}Fn{G`Gb}Gd}0{{Cbc}dHb}{{Cjc}dHb}{{ce}{{On{eg}}}{}{A`AbAd}{}}0{{}h}00{ce{}{}}00{CbAGj}{CbA`}{{{Kh{c}}}A`{}}2{{}{{j{DfDh}}}}00{Cbh}`{{CbCb}{{Ch{AF`}}}}{{CjCj}{{Ch{AF`}}}}{{}}00{Cb{{Ch{AFh}}}}{CbAGl}{{CbAFh}d}{{}Cj}{{Cbhc}{{Ch{Cb}}}{{AGn{AFh}{{AE`{{Ch{AFh}}}}}}}}`{{Cbc}jDj}{{Cjc}jDj}{CjN`}{Cj{{Bf{Bd}}}}{ce{}{}}0{cN`{}}0{Cb{{Bf{Bd}}}}{c{{j{{AEj{eg}}{AH`{e}}}}}{}{}AEl}{N`{{j{CbAGh}}}}{{{Bf{Bd}}}{{j{CbAGh}}}}{Bn{{j{CbAGh}}}}{c{{j{e}}}{}{}}0{{{Bf{Bd}}}{{j{Cj}}}}{AEn{{j{Cj}}}}2222{cEd{}}00:::{{CbAFh}Cb}{hCb}{{CbCj}{{j{CbCb}}}}","c":[],"p":[[5,"Private",2053],[1,"unit"],[6,"NetworkNodeType",2],[1,"usize"],[6,"Result",2054],[10,"Deserializer",2055],[5,"With",2056],[1,"bool"],[5,"Formatter",2057],[8,"Result",2057],[6,"ClientRequest",2],[6,"NetworkEvent",2],[6,"NetworkEventInternal",2],[5,"Request",2058],[5,"Response",2058],[6,"Event",2059],[6,"Event",2060],[1,"u8"],[5,"Vec",2061],[6,"Event",2062],[6,"Event",2063],[6,"Event",2064],[1,"str"],[1,"u16"],[5,"Multiaddr",1920],[5,"Keypair",2065],[5,"HashSet",2066],[6,"Option",2067],[5,"PeerId",1920],[5,"StreamMuxerBox",2068],[1,"tuple"],[5,"Boxed",2069],[6,"NetworkError",771],[10,"SignatureKey",2070],[5,"Layout",2071],[5,"LayoutError",2071],[10,"Serializer",2072],[5,"NetworkNodeConfig",1240],[5,"NetworkNodeReceiver",1373],[5,"NetworkNodeHandle",1373],[6,"NetworkNodeHandleError",1373],[5,"TypeId",2073],[5,"Bootstrap",238],[6,"State",238],[6,"DHTEvent",238],[6,"DHTProgress",238],[5,"MAX_DHT_QUERY_SIZE",238],[8,"NonZeroUsize",2074],[5,"DHTBehaviour",238],[5,"MemoryStore",2075],[5,"ValidatedStore",585],[10,"Debug",2057],[5,"KadGetQuery",238],[5,"KadPutQuery",238],[1,"u64"],[10,"Hash",2076],[10,"Sized",2077],[10,"BuildHasher",2076],[5,"Sender",2078],[5,"ExponentialBackoff",673],[5,"Behaviour",2064],[8,"GetRecordResult",2064],[5,"QueryId",2079],[8,"PutRecordResult",2064],[10,"Hasher",2076],[6,"InputEvent",454],[5,"Sender",2080],[5,"UnboundedSender",2081],[5,"DHTBootstrapTask",454],[5,"Receiver",2080],[6,"RecordValue",495],[10,"Clone",2082],[6,"Namespace",495],[5,"RecordKey",495],[10,"PartialEq",2083],[8,"Result",2084],[5,"Record",2085],[1,"slice"],[5,"ProviderRecord",2085],[8,"Result",2086],[10,"RecordStore",2086],[5,"Key",2085],[6,"Cow",2087],[5,"DMBehaviour",612],[5,"DMRequest",612],[5,"OutboundRequestId",2059],[6,"DMEvent",612],[1,"u32"],[5,"Duration",2088],[5,"RequestResponseState",712],[5,"NetworkDef",733],[5,"ResponseChannel",1920],[5,"ConnectionId",2089],[8,"THandler",2090],[5,"ConnectionDenied",2090],[6,"Endpoint",2091],[5,"Behaviour",2062],[5,"Behaviour",2063],[8,"Behaviour",2092],[5,"Behaviour",2060],[8,"THandlerOutEvent",2090],[6,"FromSwarm",2093],[5,"Context",2094],[8,"THandlerInEvent",2090],[6,"ToSwarm",2093],[6,"Poll",2095],[8,"IdentTopic",2096],[10,"Error",2097],[5,"Backtrace",2098],[6,"DHTError",771],[5,"GossipsubConfigSnafu",771],[5,"String",2099],[10,"Into",2100],[5,"GossipsubBuildSnafu",771],[5,"StreamClosedSnafu",771],[5,"NoKnownPeersSnafu",771],[5,"DisagreementSnafu",771],[5,"NotFoundSnafu",771],[5,"DialSnafu",771],[5,"TransportSnafu",771],[5,"TransportLaunchSnafu",771],[5,"PublishSnafu",771],[5,"GetRecordSnafu",771],[5,"PutRecordSnafu",771],[5,"CancelledRequestSnafu",771],[6,"GetRecordWrapperError",771],[5,"IndentedSection",2101],[10,"Display",2057],[10,"Send",2077],[10,"Sync",2077],[5,"NetworkNode",1186],[5,"RecvError",2102],[6,"SwarmEvent",2090],[5,"UnboundedReceiver",2081],[5,"NetworkNodeConfigBuilder",1240],[6,"NetworkNodeConfigBuilderError",1240],[5,"MeshParams",1240],[10,"Default",2103],[5,"UninitializedFieldError",2104],[5,"SendSnafu",1373],[5,"RecvSnafu",1373],[5,"ConnectTimeoutSnafu",1373],[5,"KilledSnafu",1373],[5,"NoSuchTopicSnafu",1373],[5,"FailedToDeserializeSnafu",1373],[5,"FailedToVerifySnafu",1373],[5,"NetworkSnafu",1373],[5,"SerializationSnafu",1373],[5,"DeserializationSnafu",1373],[5,"NodeConfigSnafu",1373],[5,"TimeoutSnafu",1373],[5,"DHTSnafu",1373],[5,"CantKillTwiceSnafu",1373],[5,"ReceiverEndedSnafu",1373],[5,"Receiver",2105],[5,"StakeTableAuthentication",1853],[10,"Transport",2106],[10,"StreamMuxer",2107],[10,"Unpin",2077],[10,"AsOutput",1853],[5,"Arc",2108],[10,"AsyncWrite",2109],[5,"AuthMessage",1853],[6,"TransportError",2106],[10,"Future",2110],[5,"Box",2111],[5,"Pin",2112],[17,"Output"],[5,"ListenerId",2106],[6,"TransportEvent",2106],[10,"AsyncRead",2109],[10,"AsyncReadExt",2113],[5,"BitSlice",2114],[10,"BitOrder",2115],[5,"Multihash",2116],[6,"Ordering",2083],[1,"char"],[10,"FromIterator",2117],[5,"Error",2057],[6,"Protocol",2118],[5,"Ipv4Addr",2119],[6,"IpAddr",2119],[5,"Ipv6Addr",2119],[5,"PublicKey",2065],[6,"ParseError",2120],[17,"Item"],[10,"IntoIterator",2117],[6,"Error",2121],[5,"Iter",2122],[5,"ProtoStackIter",2122],[10,"FnOnce",2123],[6,"BitSpanError",2124],[8,"BoxedTransport",2],[15,"DataRequest",212],[15,"DataResponse",212],[15,"DirectRequest",212],[15,"PutDHT",212],[15,"GetDHT",212],[15,"NetworkError",1839],[15,"SerializationError",1839],[15,"DeserializationError",1839],[15,"NodeConfigError",1839],[15,"TimeoutError",1839],[15,"DHTError",1839],[15,"CantKillTwice",1839],[15,"ReceiverEnded",1839],[15,"CancelledRequest",1170],[15,"GetRecord",1170],[15,"PutRecord",1170],[15,"GetRecordError",1173],[15,"GossipsubConfig",1174],[15,"GossipsubBuild",1174],[15,"DialError",1174],[15,"Transport",1174],[15,"TransportLaunch",1174],[15,"PublishError",1174]],"b":[[123,"impl-From%3CEvent%3CRequest,+Response%3E%3E-for-NetworkEventInternal"],[124,"impl-From%3CEvent%3E-for-NetworkEventInternal"],[125,"impl-From%3CEvent%3CVec%3Cu8%3E,+Vec%3Cu8%3E%3E%3E-for-NetworkEventInternal"],[127,"impl-From%3CEvent%3E-for-NetworkEventInternal"],[128,"impl-From%3CEvent%3E-for-NetworkEventInternal"],[129,"impl-From%3CEvent%3E-for-NetworkEventInternal"],[974,"impl-Debug-for-NetworkError"],[975,"impl-Display-for-NetworkError"],[981,"impl-Display-for-DHTError"],[982,"impl-Debug-for-DHTError"],[983,"impl-Display-for-GetRecordWrapperError"],[984,"impl-Debug-for-GetRecordWrapperError"],[1295,"impl-Debug-for-NetworkNodeConfigBuilderError"],[1296,"impl-Display-for-NetworkNodeConfigBuilderError"],[1301,"impl-From%3CUninitializedFieldError%3E-for-NetworkNodeConfigBuilderError"],[1302,"impl-From%3CString%3E-for-NetworkNodeConfigBuilderError"],[1605,"impl-Display-for-NetworkNodeHandleError"],[1606,"impl-Debug-for-NetworkNodeHandleError"],[1971,"impl-Display-for-Multiaddr"],[1972,"impl-Debug-for-Multiaddr"],[1974,"impl-Debug-for-PeerId"],[1975,"impl-Display-for-PeerId"],[1976,"impl-From%3CProtocol%3C\'a%3E%3E-for-Multiaddr"],[1978,"impl-From%3CIpv4Addr%3E-for-Multiaddr"],[1979,"impl-From%3CIpAddr%3E-for-Multiaddr"],[1980,"impl-From%3CIpv6Addr%3E-for-Multiaddr"],[1982,"impl-From%3C%26PublicKey%3E-for-PeerId"],[1983,"impl-From%3CPublicKey%3E-for-PeerId"],[2033,"impl-TryFrom%3CString%3E-for-Multiaddr"],[2034,"impl-TryFrom%3CVec%3Cu8%3E%3E-for-Multiaddr"],[2035,"impl-TryFrom%3C%26str%3E-for-Multiaddr"],[2038,"impl-TryFrom%3CVec%3Cu8%3E%3E-for-PeerId"],[2039,"impl-TryFrom%3CMultihash%3C64%3E%3E-for-PeerId"]]}],\
["multi_validator_combined",{"doc":"A multi-validator using both the web server libp2p","t":"CHCSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNNIFINNNNNOOONNNNNNNNNNNNNNNNNOOOONOONNNNNN","n":["infra","main","types","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","Network","NodeImpl","ThisRun","__clone_box","borrow","borrow_mut","clone","clone_into","config","delay_duration","delayed_tasks_channels","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","layout_raw","message_cache","network","networks","no_delay_counter","pointer_metadata","primary_down","primary_fail_counter","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"multi_validator_combined"],[3,"multi_validator_combined::infra"],[137,"multi_validator_combined::types"],[178,"dyn_clone::sealed"],[179,"clap_builder::builder::command"],[180,"core::clone"],[181,"hotshot_types::traits::node_implementation"],[182,"hotshot_orchestrator::config"],[183,"hotshot_example_types::block_types"],[184,"hotshot_example_types::block_types"],[185,"rkyv::with"],[186,"core::result"],[187,"core::fmt"],[188,"core::fmt"],[189,"clap_builder"],[190,"core::net::socket_addr"],[191,"alloc::vec"],[192,"clap_builder::util::id"],[193,"core::option"],[194,"hotshot_orchestrator::client"],[195,"hotshot_orchestrator::client"],[196,"alloc::boxed"],[197,"core::future::future"],[198,"core::pin"],[199,"core::alloc::layout"],[200,"core::alloc::layout"],[201,"hotshot::traits::networking::push_cdn_network"],[202,"hotshot::traits::networking::libp2p_network"],[203,"hotshot::traits::networking::combined_network"],[204,"url"],[205,"hotshot::types::handle"],[206,"hotshot_example_types::storage_types"],[207,"hotshot_example_types::auction_results_provider_types"],[208,"hotshot_types::traits::node_implementation"],[209,"serde::de"],[210,"core::hash"],[211,"core::marker"],[212,"core::hash"]],"d":["general infra used for this example","","types used for this example","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","dummy struct so we can choose types","convenience type alias","","","","","","The underlying network configuration","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","The underlying network","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9,0,0,0,58,58,58,58,58,66,67,67,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,67,66,67,67,58,67,67,58,58,58,58,58,58],"f":"`{{}b}`````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>```{{cd}b{}}??{GdGd}{{ce}b{}{}}```{jc{}}0{c{{C`{Gd}}}Gf}{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}{jb}{{GdGd}Gh}{{ce}Gh{}{}}000{{GdCb}Cd}{cc{}}{{ce}h{GjGl}Gn}{{Gdc}bH`}{{}j}{ce{}{}}{{}{{C`{E`Eb}}}}````{{}}``{{Gdc}C`Hb}3{c{{C`{e}}}{}{}}0{cGb{}}5","c":[],"p":[[1,"unit"],[5,"Private",178],[5,"Command",179],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",180],[10,"NodeType",181],[5,"ConfigArgs",3],[10,"RunDa",3],[5,"NetworkConfig",182],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",183],[17,"BlockPayload"],[5,"TestBlockPayload",183],[17,"BlockHeader"],[5,"TestBlockHeader",183],[17,"InstanceState"],[5,"TestInstanceState",184],[5,"Libp2pDaRun",3],[5,"CombinedDaRun",3],[5,"With",185],[6,"Result",186],[5,"Formatter",187],[8,"Result",187],[10,"Debug",187],[5,"ArgMatches",188],[8,"Error",189],[6,"SocketAddr",190],[5,"Vec",191],[5,"Id",192],[6,"Option",193],[5,"ValidatorArgs",194],[5,"OrchestratorClient",194],[10,"BuilderTask",195],[5,"Box",196],[10,"Future",197],[5,"Pin",198],[5,"Layout",199],[5,"LayoutError",199],[1,"str"],[10,"ConnectedNetwork",200],[5,"PushCdnNetwork",201],[5,"Libp2pNetwork",202],[5,"CombinedNetworks",203],[5,"Url",204],[1,"tuple"],[5,"SystemContextHandle",205],[17,"Network"],[17,"Storage"],[5,"TestStorage",206],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",207],[10,"NodeImplementation",181],[10,"Versions",181],[5,"TypeId",208],[5,"NodeImpl",137],[10,"Deserializer",209],[1,"bool"],[10,"Hash",210],[10,"Sized",211],[10,"BuildHasher",210],[10,"Hasher",210],[10,"Serializer",212],[8,"ThisRun",137],[8,"Network",137]],"b":[]}],\
["multi_validator_libp2p",{"doc":"A multi-validator using libp2p","t":"CHCSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNNIFINNNNNONNNNNNNNNNNNNNNONNONNNNNNN","n":["infra","main","types","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","Network","NodeImpl","ThisRun","__clone_box","borrow","borrow_mut","clone","clone_into","config","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","inner","into","layout_raw","network","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"multi_validator_libp2p"],[3,"multi_validator_libp2p::infra"],[137,"multi_validator_libp2p::types"],[172,"dyn_clone::sealed"],[173,"clap_builder::builder::command"],[174,"core::clone"],[175,"hotshot_types::traits::node_implementation"],[176,"hotshot_orchestrator::config"],[177,"hotshot_example_types::block_types"],[178,"hotshot_example_types::block_types"],[179,"rkyv::with"],[180,"core::result"],[181,"core::fmt"],[182,"core::fmt"],[183,"clap_builder"],[184,"core::net::socket_addr"],[185,"alloc::vec"],[186,"clap_builder::util::id"],[187,"core::option"],[188,"hotshot_orchestrator::client"],[189,"hotshot_orchestrator::client"],[190,"alloc::boxed"],[191,"core::future::future"],[192,"core::pin"],[193,"core::alloc::layout"],[194,"core::alloc::layout"],[195,"hotshot::traits::networking::push_cdn_network"],[196,"hotshot::traits::networking::libp2p_network"],[197,"hotshot::traits::networking::combined_network"],[198,"url"],[199,"hotshot::types::handle"],[200,"hotshot_example_types::storage_types"],[201,"hotshot_example_types::auction_results_provider_types"],[202,"hotshot_types::traits::node_implementation"],[203,"serde::de"],[204,"core::hash"],[205,"core::marker"],[206,"core::hash"]],"d":["general infra used for this example","","types used for this example","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","dummy struct so we can choose types","convenience type alias","","","","","","The underlying network configuration","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","The underlying network","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9,0,0,0,58,58,58,58,58,66,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,67,58,58,66,58,58,58,58,58,58,58],"f":"`{{}b}`````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>```{{cd}b{}}??{GdGd}{{ce}b{}{}}`{jc{}}0{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}{c{{C`{Gd}}}Gf}{jb}{{GdGd}Gh}{{ce}Gh{}{}}000{{GdCb}Cd}{cc{}}{{ce}h{GjGl}Gn}{{Gdc}bH`}{{}j}`{ce{}{}}{{}{{C`{E`Eb}}}}`{{}}{{Gdc}C`Hb}3{c{{C`{e}}}{}{}}0{cGb{}}5","c":[],"p":[[1,"unit"],[5,"Private",172],[5,"Command",173],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",174],[10,"NodeType",175],[5,"ConfigArgs",3],[10,"RunDa",3],[5,"NetworkConfig",176],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",177],[17,"BlockPayload"],[5,"TestBlockPayload",177],[17,"BlockHeader"],[5,"TestBlockHeader",177],[17,"InstanceState"],[5,"TestInstanceState",178],[5,"Libp2pDaRun",3],[5,"CombinedDaRun",3],[5,"With",179],[6,"Result",180],[5,"Formatter",181],[8,"Result",181],[10,"Debug",181],[5,"ArgMatches",182],[8,"Error",183],[6,"SocketAddr",184],[5,"Vec",185],[5,"Id",186],[6,"Option",187],[5,"ValidatorArgs",188],[5,"OrchestratorClient",188],[10,"BuilderTask",189],[5,"Box",190],[10,"Future",191],[5,"Pin",192],[5,"Layout",193],[5,"LayoutError",193],[1,"str"],[10,"ConnectedNetwork",194],[5,"PushCdnNetwork",195],[5,"Libp2pNetwork",196],[5,"CombinedNetworks",197],[5,"Url",198],[1,"tuple"],[5,"SystemContextHandle",199],[17,"Network"],[17,"Storage"],[5,"TestStorage",200],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",201],[10,"NodeImplementation",175],[10,"Versions",175],[5,"TypeId",202],[5,"NodeImpl",137],[10,"Deserializer",203],[1,"bool"],[10,"Hash",204],[10,"Sized",205],[10,"BuildHasher",204],[10,"Hasher",204],[10,"Serializer",206],[8,"ThisRun",137],[8,"Network",137]],"b":[]}],\
["multi_validator_push_cdn",{"doc":"A multi validator","t":"CHCSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNNIFINNNONNONNNNNNNNNNNNNNNONOONNNNNNN","n":["infra","main","types","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","Network","NodeImpl","ThisRun","__clone_box","borrow","borrow_mut","client","clone","clone_into","config","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","from","get_hash","hash","init","into","is_paused","layout_raw","metrics","network","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"multi_validator_push_cdn"],[3,"multi_validator_push_cdn::infra"],[137,"multi_validator_push_cdn::types"],[173,"dyn_clone::sealed"],[174,"clap_builder::builder::command"],[175,"core::clone"],[176,"hotshot_types::traits::node_implementation"],[177,"hotshot_orchestrator::config"],[178,"hotshot_example_types::block_types"],[179,"hotshot_example_types::block_types"],[180,"rkyv::with"],[181,"core::result"],[182,"core::fmt"],[183,"core::fmt"],[184,"clap_builder"],[185,"core::net::socket_addr"],[186,"alloc::vec"],[187,"clap_builder::util::id"],[188,"core::option"],[189,"hotshot_orchestrator::client"],[190,"hotshot_orchestrator::client"],[191,"alloc::boxed"],[192,"core::future::future"],[193,"core::pin"],[194,"core::alloc::layout"],[195,"core::alloc::layout"],[196,"hotshot::traits::networking::push_cdn_network"],[197,"hotshot::traits::networking::libp2p_network"],[198,"hotshot::traits::networking::combined_network"],[199,"url"],[200,"hotshot::types::handle"],[201,"hotshot_example_types::storage_types"],[202,"hotshot_example_types::auction_results_provider_types"],[203,"hotshot_types::traits::node_implementation"],[204,"serde::de"],[205,"core::hash"],[206,"core::marker"],[207,"core::hash"]],"d":["general infra used for this example","","types used for this example","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","Convenience type alias","Convenience type alias","","","","","","","The underlying configuration","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","The underlying network","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9,0,0,0,58,58,58,66,58,58,67,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,66,58,66,67,58,58,58,58,58,58,58],"f":"`{{}b}`````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>```{{cd}b{}}??`{GdGd}{{ce}b{}{}}`{jc{}}0{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}{c{{C`{Gd}}}Gf}{jb}{{GdGd}Gh}{{ce}Gh{}{}}000{cc{}}{{ce}h{GjGl}Gn}{{Gdc}bH`}{{}j}{ce{}{}}`{{}{{C`{E`Eb}}}}``{{}}{{Gdc}C`Hb}3{c{{C`{e}}}{}{}}0{cGb{}}5","c":[],"p":[[1,"unit"],[5,"Private",173],[5,"Command",174],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",175],[10,"NodeType",176],[5,"ConfigArgs",3],[10,"RunDa",3],[5,"NetworkConfig",177],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",178],[17,"BlockPayload"],[5,"TestBlockPayload",178],[17,"BlockHeader"],[5,"TestBlockHeader",178],[17,"InstanceState"],[5,"TestInstanceState",179],[5,"Libp2pDaRun",3],[5,"CombinedDaRun",3],[5,"With",180],[6,"Result",181],[5,"Formatter",182],[8,"Result",182],[10,"Debug",182],[5,"ArgMatches",183],[8,"Error",184],[6,"SocketAddr",185],[5,"Vec",186],[5,"Id",187],[6,"Option",188],[5,"ValidatorArgs",189],[5,"OrchestratorClient",189],[10,"BuilderTask",190],[5,"Box",191],[10,"Future",192],[5,"Pin",193],[5,"Layout",194],[5,"LayoutError",194],[1,"str"],[10,"ConnectedNetwork",195],[5,"PushCdnNetwork",196],[5,"Libp2pNetwork",197],[5,"CombinedNetworks",198],[5,"Url",199],[1,"tuple"],[5,"SystemContextHandle",200],[17,"Network"],[17,"Storage"],[5,"TestStorage",201],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",202],[10,"NodeImplementation",176],[10,"Versions",176],[5,"TypeId",203],[5,"NodeImpl",137],[10,"Deserializer",204],[1,"bool"],[10,"Hash",205],[10,"Sized",206],[10,"BuildHasher",205],[10,"Hasher",205],[10,"Serializer",207],[8,"Network",137],[8,"ThisRun",137]],"b":[]}],\
["orchestrator",{"doc":"A orchestrator","t":"CHSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNN","n":["infra","main","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"orchestrator"],[2,"orchestrator::infra"],[136,"dyn_clone::sealed"],[137,"clap_builder::builder::command"],[138,"core::clone"],[139,"hotshot_types::traits::node_implementation"],[140,"hotshot_orchestrator::config"],[141,"hotshot_example_types::block_types"],[142,"hotshot_example_types::block_types"],[143,"rkyv::with"],[144,"core::result"],[145,"core::fmt"],[146,"core::fmt"],[147,"clap_builder"],[148,"core::net::socket_addr"],[149,"alloc::vec"],[150,"clap_builder::util::id"],[151,"core::option"],[152,"hotshot_orchestrator::client"],[153,"hotshot_orchestrator::client"],[154,"alloc::boxed"],[155,"core::future::future"],[156,"core::pin"],[157,"core::alloc::layout"],[158,"core::alloc::layout"],[159,"hotshot::traits::networking::push_cdn_network"],[160,"hotshot::traits::networking::libp2p_network"],[161,"hotshot::traits::networking::combined_network"],[162,"url"],[163,"hotshot::types::handle"],[164,"hotshot_example_types::storage_types"],[165,"hotshot_example_types::auction_results_provider_types"],[166,"hotshot_types::traits::node_implementation"]],"d":["general infra used for this example","","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9],"f":"`{{}b}````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>","c":[],"p":[[1,"unit"],[5,"Private",136],[5,"Command",137],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",2],[10,"Clone",138],[10,"NodeType",139],[5,"ConfigArgs",2],[10,"RunDa",2],[5,"NetworkConfig",140],[5,"PushCdnDaRun",2],[17,"Transaction"],[5,"TestTransaction",141],[17,"BlockPayload"],[5,"TestBlockPayload",141],[17,"BlockHeader"],[5,"TestBlockHeader",141],[17,"InstanceState"],[5,"TestInstanceState",142],[5,"Libp2pDaRun",2],[5,"CombinedDaRun",2],[5,"With",143],[6,"Result",144],[5,"Formatter",145],[8,"Result",145],[10,"Debug",145],[5,"ArgMatches",146],[8,"Error",147],[6,"SocketAddr",148],[5,"Vec",149],[5,"Id",150],[6,"Option",151],[5,"ValidatorArgs",152],[5,"OrchestratorClient",152],[10,"BuilderTask",153],[5,"Box",154],[10,"Future",155],[5,"Pin",156],[5,"Layout",157],[5,"LayoutError",157],[1,"str"],[10,"ConnectedNetwork",158],[5,"PushCdnNetwork",159],[5,"Libp2pNetwork",160],[5,"CombinedNetworks",161],[5,"Url",162],[1,"tuple"],[5,"SystemContextHandle",163],[17,"Network"],[17,"Storage"],[5,"TestStorage",164],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",165],[10,"NodeImplementation",139],[10,"Versions",139],[5,"TypeId",166]],"b":[]}],\
["orchestrator_combined",{"doc":"Orchestrator using the web server","t":"CHCSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNNIFINNNNNOOONNNNNNNNNNNNNNNNNOOOONOONNNNNN","n":["infra","main","types","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","Network","NodeImpl","ThisRun","__clone_box","borrow","borrow_mut","clone","clone_into","config","delay_duration","delayed_tasks_channels","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","layout_raw","message_cache","network","networks","no_delay_counter","pointer_metadata","primary_down","primary_fail_counter","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"orchestrator_combined"],[3,"orchestrator_combined::infra"],[137,"orchestrator_combined::types"],[178,"dyn_clone::sealed"],[179,"clap_builder::builder::command"],[180,"core::clone"],[181,"hotshot_types::traits::node_implementation"],[182,"hotshot_orchestrator::config"],[183,"hotshot_example_types::block_types"],[184,"hotshot_example_types::block_types"],[185,"rkyv::with"],[186,"core::result"],[187,"core::fmt"],[188,"core::fmt"],[189,"clap_builder"],[190,"core::net::socket_addr"],[191,"alloc::vec"],[192,"clap_builder::util::id"],[193,"core::option"],[194,"hotshot_orchestrator::client"],[195,"hotshot_orchestrator::client"],[196,"alloc::boxed"],[197,"core::future::future"],[198,"core::pin"],[199,"core::alloc::layout"],[200,"core::alloc::layout"],[201,"hotshot::traits::networking::push_cdn_network"],[202,"hotshot::traits::networking::libp2p_network"],[203,"hotshot::traits::networking::combined_network"],[204,"url"],[205,"hotshot::types::handle"],[206,"hotshot_example_types::storage_types"],[207,"hotshot_example_types::auction_results_provider_types"],[208,"hotshot_types::traits::node_implementation"],[209,"serde::de"],[210,"core::hash"],[211,"core::marker"],[212,"core::hash"]],"d":["general infra used for this example","","types used for this example","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","dummy struct so we can choose types","convenience type alias","","","","","","The underlying network configuration","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","The underlying network","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9,0,0,0,58,58,58,58,58,66,67,67,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,67,66,67,67,58,67,67,58,58,58,58,58,58],"f":"`{{}b}`````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>```{{cd}b{}}??{GdGd}{{ce}b{}{}}```{jc{}}0{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}{c{{C`{Gd}}}Gf}{jb}{{GdGd}Gh}{{ce}Gh{}{}}000{{GdCb}Cd}{cc{}}{{ce}h{GjGl}Gn}{{Gdc}bH`}{{}j}{ce{}{}}{{}{{C`{E`Eb}}}}````{{}}``{{Gdc}C`Hb}3{c{{C`{e}}}{}{}}0{cGb{}}5","c":[],"p":[[1,"unit"],[5,"Private",178],[5,"Command",179],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",180],[10,"NodeType",181],[5,"ConfigArgs",3],[10,"RunDa",3],[5,"NetworkConfig",182],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",183],[17,"BlockPayload"],[5,"TestBlockPayload",183],[17,"BlockHeader"],[5,"TestBlockHeader",183],[17,"InstanceState"],[5,"TestInstanceState",184],[5,"Libp2pDaRun",3],[5,"CombinedDaRun",3],[5,"With",185],[6,"Result",186],[5,"Formatter",187],[8,"Result",187],[10,"Debug",187],[5,"ArgMatches",188],[8,"Error",189],[6,"SocketAddr",190],[5,"Vec",191],[5,"Id",192],[6,"Option",193],[5,"ValidatorArgs",194],[5,"OrchestratorClient",194],[10,"BuilderTask",195],[5,"Box",196],[10,"Future",197],[5,"Pin",198],[5,"Layout",199],[5,"LayoutError",199],[1,"str"],[10,"ConnectedNetwork",200],[5,"PushCdnNetwork",201],[5,"Libp2pNetwork",202],[5,"CombinedNetworks",203],[5,"Url",204],[1,"tuple"],[5,"SystemContextHandle",205],[17,"Network"],[17,"Storage"],[5,"TestStorage",206],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",207],[10,"NodeImplementation",181],[10,"Versions",181],[5,"TypeId",208],[5,"NodeImpl",137],[10,"Deserializer",209],[1,"bool"],[10,"Hash",210],[10,"Sized",211],[10,"BuildHasher",210],[10,"Hasher",210],[10,"Serializer",212],[8,"ThisRun",137],[8,"Network",137]],"b":[]}],\
["validator_combined",{"doc":"A validator using both the web server and libp2p","t":"CHCSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNNIFINNNNNOOONNNNNNNNNNNNNNNNNOOOONOONNNNNN","n":["infra","main","types","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","Network","NodeImpl","ThisRun","__clone_box","borrow","borrow_mut","clone","clone_into","config","delay_duration","delayed_tasks_channels","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","into","layout_raw","message_cache","network","networks","no_delay_counter","pointer_metadata","primary_down","primary_fail_counter","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"validator_combined"],[3,"validator_combined::infra"],[137,"validator_combined::types"],[178,"dyn_clone::sealed"],[179,"clap_builder::builder::command"],[180,"core::clone"],[181,"hotshot_types::traits::node_implementation"],[182,"hotshot_orchestrator::config"],[183,"hotshot_example_types::block_types"],[184,"hotshot_example_types::block_types"],[185,"rkyv::with"],[186,"core::result"],[187,"core::fmt"],[188,"core::fmt"],[189,"clap_builder"],[190,"core::net::socket_addr"],[191,"alloc::vec"],[192,"clap_builder::util::id"],[193,"core::option"],[194,"hotshot_orchestrator::client"],[195,"hotshot_orchestrator::client"],[196,"alloc::boxed"],[197,"core::future::future"],[198,"core::pin"],[199,"core::alloc::layout"],[200,"core::alloc::layout"],[201,"hotshot::traits::networking::push_cdn_network"],[202,"hotshot::traits::networking::libp2p_network"],[203,"hotshot::traits::networking::combined_network"],[204,"url"],[205,"hotshot::types::handle"],[206,"hotshot_example_types::storage_types"],[207,"hotshot_example_types::auction_results_provider_types"],[208,"hotshot_types::traits::node_implementation"],[209,"serde::de"],[210,"core::hash"],[211,"core::marker"],[212,"core::hash"]],"d":["general infra used for this example","","types used for this example","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","dummy struct so we can choose types","convenience type alias","","","","","","The underlying network configuration","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","The underlying network","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9,0,0,0,58,58,58,58,58,66,67,67,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,67,66,67,67,58,67,67,58,58,58,58,58,58],"f":"`{{}b}`````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>```{{cd}b{}}??{GdGd}{{ce}b{}{}}```{jc{}}0{c{{C`{Gd}}}Gf}{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}{jb}{{GdGd}Gh}{{ce}Gh{}{}}000{{GdCb}Cd}{cc{}}{{ce}h{GjGl}Gn}{{Gdc}bH`}{{}j}{ce{}{}}{{}{{C`{E`Eb}}}}````{{}}``{{Gdc}C`Hb}3{c{{C`{e}}}{}{}}0{cGb{}}5","c":[],"p":[[1,"unit"],[5,"Private",178],[5,"Command",179],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",180],[10,"NodeType",181],[5,"ConfigArgs",3],[10,"RunDa",3],[5,"NetworkConfig",182],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",183],[17,"BlockPayload"],[5,"TestBlockPayload",183],[17,"BlockHeader"],[5,"TestBlockHeader",183],[17,"InstanceState"],[5,"TestInstanceState",184],[5,"Libp2pDaRun",3],[5,"CombinedDaRun",3],[5,"With",185],[6,"Result",186],[5,"Formatter",187],[8,"Result",187],[10,"Debug",187],[5,"ArgMatches",188],[8,"Error",189],[6,"SocketAddr",190],[5,"Vec",191],[5,"Id",192],[6,"Option",193],[5,"ValidatorArgs",194],[5,"OrchestratorClient",194],[10,"BuilderTask",195],[5,"Box",196],[10,"Future",197],[5,"Pin",198],[5,"Layout",199],[5,"LayoutError",199],[1,"str"],[10,"ConnectedNetwork",200],[5,"PushCdnNetwork",201],[5,"Libp2pNetwork",202],[5,"CombinedNetworks",203],[5,"Url",204],[1,"tuple"],[5,"SystemContextHandle",205],[17,"Network"],[17,"Storage"],[5,"TestStorage",206],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",207],[10,"NodeImplementation",181],[10,"Versions",181],[5,"TypeId",208],[5,"NodeImpl",137],[10,"Deserializer",209],[1,"bool"],[10,"Hash",210],[10,"Sized",211],[10,"BuildHasher",210],[10,"Hasher",210],[10,"Serializer",212],[8,"ThisRun",137],[8,"Network",137]],"b":[]}],\
["validator_libp2p",{"doc":"A validator using libp2p","t":"CHCSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNNIFINNNNNONNNNNNNNNNNNNNNONNONNNNNNN","n":["infra","main","types","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","Network","NodeImpl","ThisRun","__clone_box","borrow","borrow_mut","clone","clone_into","config","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","init","inner","into","layout_raw","network","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"validator_libp2p"],[3,"validator_libp2p::infra"],[137,"validator_libp2p::types"],[172,"dyn_clone::sealed"],[173,"clap_builder::builder::command"],[174,"core::clone"],[175,"hotshot_types::traits::node_implementation"],[176,"hotshot_orchestrator::config"],[177,"hotshot_example_types::block_types"],[178,"hotshot_example_types::block_types"],[179,"rkyv::with"],[180,"core::result"],[181,"core::fmt"],[182,"core::fmt"],[183,"clap_builder"],[184,"core::net::socket_addr"],[185,"alloc::vec"],[186,"clap_builder::util::id"],[187,"core::option"],[188,"hotshot_orchestrator::client"],[189,"hotshot_orchestrator::client"],[190,"alloc::boxed"],[191,"core::future::future"],[192,"core::pin"],[193,"core::alloc::layout"],[194,"core::alloc::layout"],[195,"hotshot::traits::networking::push_cdn_network"],[196,"hotshot::traits::networking::libp2p_network"],[197,"hotshot::traits::networking::combined_network"],[198,"url"],[199,"hotshot::types::handle"],[200,"hotshot_example_types::storage_types"],[201,"hotshot_example_types::auction_results_provider_types"],[202,"hotshot_types::traits::node_implementation"],[203,"serde::de"],[204,"core::hash"],[205,"core::marker"],[206,"core::hash"]],"d":["general infra used for this example","","types used for this example","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","dummy struct so we can choose types","convenience type alias","","","","","","The underlying network configuration","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","The underlying network","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9,0,0,0,58,58,58,58,58,66,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,67,58,58,66,58,58,58,58,58,58,58],"f":"`{{}b}`````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>```{{cd}b{}}??{GdGd}{{ce}b{}{}}`{jc{}}0{c{{C`{Gd}}}Gf}{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}{jb}{{GdGd}Gh}{{ce}Gh{}{}}000{{GdCb}Cd}{cc{}}{{ce}h{GjGl}Gn}{{Gdc}bH`}{{}j}`{ce{}{}}{{}{{C`{E`Eb}}}}`{{}}{{Gdc}C`Hb}3{c{{C`{e}}}{}{}}0{cGb{}}5","c":[],"p":[[1,"unit"],[5,"Private",172],[5,"Command",173],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",174],[10,"NodeType",175],[5,"ConfigArgs",3],[10,"RunDa",3],[5,"NetworkConfig",176],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",177],[17,"BlockPayload"],[5,"TestBlockPayload",177],[17,"BlockHeader"],[5,"TestBlockHeader",177],[17,"InstanceState"],[5,"TestInstanceState",178],[5,"Libp2pDaRun",3],[5,"CombinedDaRun",3],[5,"With",179],[6,"Result",180],[5,"Formatter",181],[8,"Result",181],[10,"Debug",181],[5,"ArgMatches",182],[8,"Error",183],[6,"SocketAddr",184],[5,"Vec",185],[5,"Id",186],[6,"Option",187],[5,"ValidatorArgs",188],[5,"OrchestratorClient",188],[10,"BuilderTask",189],[5,"Box",190],[10,"Future",191],[5,"Pin",192],[5,"Layout",193],[5,"LayoutError",193],[1,"str"],[10,"ConnectedNetwork",194],[5,"PushCdnNetwork",195],[5,"Libp2pNetwork",196],[5,"CombinedNetworks",197],[5,"Url",198],[1,"tuple"],[5,"SystemContextHandle",199],[17,"Network"],[17,"Storage"],[5,"TestStorage",200],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",201],[10,"NodeImplementation",175],[10,"Versions",175],[5,"TypeId",202],[5,"NodeImpl",137],[10,"Deserializer",203],[1,"bool"],[10,"Hash",204],[10,"Sized",205],[10,"BuildHasher",204],[10,"Hasher",204],[10,"Serializer",206],[8,"ThisRun",137],[8,"Network",137]],"b":[]}],\
["validator_push_cdn",{"doc":"A validator","t":"CHCSFFFFFKSNNNNNNNNNNNNNNHNNNNNNMNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNHMNNNNNNNNNNNNNNHHMNNNOOONNNNNHNHNNNNNNNNNNNNNNNNNNNONNNNNIFINNNONNONNNNNNNNNNNNNNNONOONNNNNNN","n":["infra","main","types","BUILDER_BASE_PORT","CombinedDaRun","ConfigArgs","Libp2pDaRun","OrchestratorArgs","PushCdnDaRun","RunDa","VALIDATOR_BASE_PORT","__clone_box","__clone_box","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_num_tx_per_round","clone","clone","clone_into","clone_into","command","command_for_update","config","config","config","config","config","config","config","config","config_file","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","gen_local_address","generate_transactions","group_id","init","init","init","init","init","initialize_builder","initialize_networking","initialize_networking","initialize_networking","initialize_networking","initialize_state_and_hotshot","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","load_config_from_file","main_entry_point","network","network","network","network","network","network","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_orchestrator_init_config","run_hotshot","run_orchestrator","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","url","vzip","vzip","vzip","vzip","vzip","Network","NodeImpl","ThisRun","__clone_box","borrow","borrow_mut","client","clone","clone_into","config","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","from","get_hash","hash","init","into","is_paused","layout_raw","metrics","network","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"validator_push_cdn"],[3,"validator_push_cdn::infra"],[137,"validator_push_cdn::types"],[173,"dyn_clone::sealed"],[174,"clap_builder::builder::command"],[175,"core::clone"],[176,"hotshot_types::traits::node_implementation"],[177,"hotshot_orchestrator::config"],[178,"hotshot_example_types::block_types"],[179,"hotshot_example_types::block_types"],[180,"rkyv::with"],[181,"core::result"],[182,"core::fmt"],[183,"core::fmt"],[184,"clap_builder"],[185,"core::net::socket_addr"],[186,"alloc::vec"],[187,"clap_builder::util::id"],[188,"core::option"],[189,"hotshot_orchestrator::client"],[190,"hotshot_orchestrator::client"],[191,"alloc::boxed"],[192,"core::future::future"],[193,"core::pin"],[194,"core::alloc::layout"],[195,"core::alloc::layout"],[196,"hotshot::traits::networking::push_cdn_network"],[197,"hotshot::traits::networking::libp2p_network"],[198,"hotshot::traits::networking::combined_network"],[199,"url"],[200,"hotshot::types::handle"],[201,"hotshot_example_types::storage_types"],[202,"hotshot_example_types::auction_results_provider_types"],[203,"hotshot_types::traits::node_implementation"],[204,"serde::de"],[205,"core::hash"],[206,"core::marker"],[207,"core::hash"]],"d":["general infra used for this example","","types used for this example","Base port for builder","Represents a combined-network-based run","The configuration file to be used for this run","Represents a libp2p-based run","Arguments passed to the orchestrator","Represents a Push CDN-based run","Defines the behavior of a “run” of the network with a …","Base port for validator","","","","","","","","","","","","","","","Helper function to calculate the number of transactions to …","","","","","","","Returns the config for this run","","","","The underlying configuration","The underlying network configuration","The underlying network configuration","The configuration file to be used for this run","The configuration file to be used for this run","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a local address for node with index <code>node_index</code>, …","Helper function to generate transactions a given node …","","","","","","","Sets correct builder_url and registers a builder with …","Initializes networking, returns self","","","","Initializes the genesis state and HotShot instance; does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reads a network configuration from a given filepath","Main entry point for validators","Returns the underlying network for this run","","","","The underlying network","The underlying network","The underlying network","","","","","","Reads the orchestrator initialization config from the …","Starts HotShot consensus, returns when consensus has …","Runs the orchestrator","","","","","","","","","","","","","","","","","","","","The url the orchestrator runs on; this should be in the …","","","","","","Convenience type alias","Convenience type alias","Convenience type alias","","","","","","","The underlying configuration","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","The underlying network","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,9,9,9,12,21,22,6,9,12,21,22,6,9,0,6,9,6,9,9,9,10,12,21,22,12,21,22,6,9,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,6,9,12,21,22,6,9,9,9,0,0,9,12,21,22,6,9,0,10,12,21,22,10,12,21,22,6,9,12,21,22,6,9,0,0,10,12,21,22,12,21,22,12,21,22,6,9,0,10,0,6,9,12,21,22,6,9,12,21,22,6,9,12,21,22,6,9,9,9,6,12,21,22,6,9,0,0,0,58,58,58,66,58,58,67,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,66,58,66,67,58,58,58,58,58,58,58],"f":"`{{}b}`````````{{cd}b{}}0{ff}0{ce{}{}}000000000{{hjj}j}{{{l{c}}}{{l{c}}}{nA`}}{AbAb}{{ce}b{}{}}0{{}f}0{AdAf}{{{Ah{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}Af{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}`````{{}Ab}{jc{}}000000000{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}0000{jb}0000{{{l{c}}Cb}Cd{CfA`}}{{AbCb}Cd}{cc{}}0000{Ch{{C`{AbCj}}}}0{jCl}{{hjjj}{{Cn{Al}}}}{{}{{Db{D`}}}}{{}j}0000{{AfDdDf}{{Db{{Dj{Dh}}}}}}{{Af{Db{Cl}}}{{Dn{{Dj{Dl}}}}}}000{Ad{{Dn{{Dj{Dl}}}}}}{ce{}{}}0000{{}{{C`{E`Eb}}}}0000{EdAf}{Ddb}{AdcEf}{{{Ah{c}}}Eh{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bj{c}}}Ej{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}{{{Bl{c}}}{{El{c}}}{{A`{}{{Aj{Al}}{An{B`}}{Bb{Bd}}{Bf{Bh}}}}}}```{{}}0000{{}{{F`{AfEn}}}}{{Ad{Fb{cgi}}{Cn{Al}}hh}{{Dn{{Dj{Dl}}}}}{{A`{}{{Aj{Al}}}}{A`{}{{Bf{Bh}}}}}Ef{{Fn{c}{{Fd{e}}{Ff{{Fh{c}}}}{Fj{{Fl{c}}}}}}}G`}{{{l{c}}}bA`};;{c{{C`{e}}}{}{}}000000000{cGb{}}0000{{AbCh}{{C`{bCj}}}}0`>>>>>```{{cd}b{}}??`{GdGd}{{ce}b{}{}}`{jc{}}0{c{{C`{Gd}}}Gf}{{ce}{{C`{{Bn{gi}}}}}{}{}{}{}}{jb}{{GdGd}Gh}{{ce}Gh{}{}}000{cc{}}{{ce}h{GjGl}Gn}{{Gdc}bH`}{{}j}{ce{}{}}`{{}{{C`{E`Eb}}}}``{{}}{{Gdc}C`Hb}3{c{{C`{e}}}{}{}}0{cGb{}}5","c":[],"p":[[1,"unit"],[5,"Private",173],[5,"Command",174],[1,"u64"],[1,"usize"],[5,"OrchestratorArgs",3],[10,"Clone",175],[10,"NodeType",176],[5,"ConfigArgs",3],[10,"RunDa",3],[5,"NetworkConfig",177],[5,"PushCdnDaRun",3],[17,"Transaction"],[5,"TestTransaction",178],[17,"BlockPayload"],[5,"TestBlockPayload",178],[17,"BlockHeader"],[5,"TestBlockHeader",178],[17,"InstanceState"],[5,"TestInstanceState",179],[5,"Libp2pDaRun",3],[5,"CombinedDaRun",3],[5,"With",180],[6,"Result",181],[5,"Formatter",182],[8,"Result",182],[10,"Debug",182],[5,"ArgMatches",183],[8,"Error",184],[6,"SocketAddr",185],[5,"Vec",186],[5,"Id",187],[6,"Option",188],[5,"ValidatorArgs",189],[5,"OrchestratorClient",189],[10,"BuilderTask",190],[5,"Box",191],[10,"Future",192],[5,"Pin",193],[5,"Layout",194],[5,"LayoutError",194],[1,"str"],[10,"ConnectedNetwork",195],[5,"PushCdnNetwork",196],[5,"Libp2pNetwork",197],[5,"CombinedNetworks",198],[5,"Url",199],[1,"tuple"],[5,"SystemContextHandle",200],[17,"Network"],[17,"Storage"],[5,"TestStorage",201],[17,"AuctionResultsProvider"],[5,"TestAuctionResultsProvider",202],[10,"NodeImplementation",176],[10,"Versions",176],[5,"TypeId",203],[5,"NodeImpl",137],[10,"Deserializer",204],[1,"bool"],[10,"Hash",205],[10,"Sized",206],[10,"BuildHasher",205],[10,"Hasher",205],[10,"Serializer",207],[8,"Network",137],[8,"ThisRun",137]],"b":[]}],\
["whitelist_push_cdn",{"doc":"The whitelist is an adaptor that is able to update the …","t":"FNNNNNNNNNONNNNNNNNNOHONNNNNNN","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","deserialize","discovery_endpoint","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","layout_raw","local_discovery","main","orchestrator_url","pointer_metadata","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"whitelist_push_cdn"],[30,"clap_builder::builder::command"],[31,"rkyv::with"],[32,"core::result"],[33,"core::fmt"],[34,"core::fmt"],[35,"clap_builder"],[36,"clap_builder::util::id"],[37,"core::option"],[38,"core::alloc::layout"],[39,"core::alloc::layout"],[40,"core::any"]],"d":["The main component of the push CDN.","","","","","","","","","","The discovery client endpoint (including scheme) to …","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Whether or not to use the local discovery client","","The URL the orchestrator is running on. This should be …","","","","","","",""],"i":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6],"f":"`{bb}0{ce{}{}}0{{}b}0{dc{}}0{{ce}{{h{{f{gi}}}}}{}{}{}{}}`{dj}{{ln}A`}{cc{}}{Ab{{h{lAd}}}}0{{}{{Ah{Af}}}}{{}d}9{{}{{h{AjAl}}}}`{{}{{An{j}}}}`{{}}{c{{h{e}}}{}{}}0{cB`{}}{{lAb}{{h{jAd}}}}0?","c":[],"p":[[5,"Command",30],[1,"usize"],[5,"With",31],[6,"Result",32],[1,"unit"],[5,"Args",0],[5,"Formatter",33],[8,"Result",33],[5,"ArgMatches",34],[8,"Error",35],[5,"Id",36],[6,"Option",37],[5,"Layout",38],[5,"LayoutError",38],[8,"Result",39],[5,"TypeId",40]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);

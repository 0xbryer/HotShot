var searchIndex = JSON.parse('{\
"benchmark_client":{"doc":"","t":[6,3,6,12,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11],"n":["FromServer","Opts","ToServer","addr","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","from","from_arg_matches","from_arg_matches_mut","group_id","into","main","read_spam","spam","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":["benchmark_client","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,3,3,3,3],"f":[0,0,0,0,[1,1],[1,1],[[]],[[]],[[],1],[[],1],[[]],[2,[[5,[3,4]]]],[2,[[5,[3,4]]]],[[],[[7,[6]]]],[[]],[[]],[[8,8,9]],[[8,8,10]],[[],5],[[],5],[[],11],[[3,2],[[5,[4]]]],[[3,2],[[5,[4]]]],[[]]],"p":[[3,"Command"],[3,"ArgMatches"],[3,"Opts"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[15,"usize"],[3,"TcpStreamRecvUtil"],[3,"TcpStreamSendUtil"],[3,"TypeId"]]},\
"counter":{"doc":"","t":[0,5,17,13,13,13,3,13,13,3,4,3,4,4,6,13,13,13,13,3,6,3,4,4,13,3,13,3,13,4,13,13,3,13,3,17,13,13,3,17,17,17,13,13,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,11,12,12,12,5,12,11,12,5,12,12,12,12,12,11,11,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,13,3,13,3,13,3,13,3,3,3,4,17,3,3,4,4,3,13,3,13,3,13,13,13,13,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,5,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,16,8,10,0,5,3,3,3,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,12,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["common","main","BROADCAST_TIMEOUT","Broadcast","BroadcastViaDM","BroadcastViaGossip","CliOpt","Conductor","ConductorIdIs","ConductorMessage","ConductorMessageMethod","ConductorState","CounterError","CounterRequest","CounterState","DMViaDM","DirectMessage","Docker","DummyRecv","EnvType","Epoch","EpochData","EpochType","ExecutionEnvironment","FileRead","FileReadSnafu","Handle","HandleSnafu","Kill","Message","Metal","MissingBootstrap","MissingBootstrapSnafu","Normal","NormalMessage","PADDING_SIZE","RecvdConductor","Relayed","RelayedMessage","SEND_DENOMINATOR","SEND_NUMERATOR","SUCCESS_NUMBER","StateRequest","StateResponse","TIMEOUT","WebUi","aggregate_epochs","as_error_source","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","broadcast_type","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","command","command_for_update","complete_round","conductor_addr","conductor_broadcast","conductor_handle_network_event","current_epoch","default","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","duration","env_type","env_type_delegate","epoch","epoch","epoch_idx","epoch_type","eq","eq","eq","eq","eq","eq","eq","eq","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_peer","from_str","get_serializable","group_id","group_id","group_id","handle_normal_msg","header","in_current_span","increment_epoch","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","lossy_network","message_durations","node_states","node_type","normal_to_relayed","num_gossip","num_nodes","padding","parse_node","previous_epochs","provide","ready_set","regular_handle_network_event","relay_to_conductor","req","req","req","sent_ts","serialize","serialize","serialize","serialize","serialize","serialize","serialize","source","start_main","state","to_connect_addrs","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","web","webui_addr","webui_delegate","0","source","source","0","0","0","0","0","AddrParse","AddrParseSnafu","Decode","DecodeSnafu","InvalidConfig","InvalidConfigSnafu","Io","IoSnafu","IsolationConfig","IsolationConfigBuilder","IsolationConfigBuilderError","LOSSY_QDISC","LossyNetwork","LossyNetworkBuilder","LossyNetworkBuilderError","LossyNetworkError","Netns","RtNetlink","RtNetlinkSnafu","SetNs","SetNsSnafu","UninitializedField","UninitializedField","ValidationError","ValidationError","_DERIVE_core_fmt_Debug_FOR_IsolationConfig","_DERIVE_core_fmt_Debug_FOR_LossyNetwork","as_error_source","as_error_source","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge_addr","bridge_addr","bridge_addr","bridge_name","bridge_name","bridge_name","build","build","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","counter_ns","counter_ns","counter_ns","create_empty","create_empty","create_qdisc","create_qdisc_netlink","cur","default","default","default","del_link","description","enable_firewall","env_type","env_type","env_type","eth_name","eth_name","eth_name","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","isolate","isolate_netlink","isolation_config","isolation_config","isolation_config","netem_config","netem_config","netem_config","new","provide","provide","provide","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_firewall","undo_isolate","undo_isolate_netlink","veth2_addr","veth2_addr","veth2_addr","veth2_name","veth2_name","veth2_name","veth_name","veth_name","veth_name","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","source","source","source","source","source","Serialized","WebInfo","get_serializable","network_state","spawn_server","ConnectionState","NetworkConfig","State","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connected_peers","connecting_peers","from","from","from","identity","into","into","into","known_peers","network_config","new","new","node_type","send","serialize","serialize","serialize","state","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["counter","","counter::commoncounter::common::ConductorMessageMethod","counter::common::CounterError","","counter::common::CounterRequest","counter::common::Message","","","","counter::common::lossy_networkcounter::common::lossy_network::IsolationConfigBuilderError","","counter::common::lossy_network::LossyNetworkBuilderError","","counter::common::lossy_network::LossyNetworkError","","","","","counter::common::web","","","","","counter::common::web::network_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","timeout before failing to broadcast","broadcast message to all nodes","","","","conductor requests that message is sent to node that the …","","A message sent and recv-ed by a [‘…","ways to send messages between nodes","","","Normal message. Sent amongst <code>NetworkNodeType::Regular</code> and …","","","direct message <code>PeerId</code>","execution environment is within docker","","This will be flattened into CliOpt","","","","The execution environemnt type","","SNAFU context selector for the <code>CounterError::FileRead</code> …","","SNAFU context selector for the <code>CounterError::Handle</code> variant","kill node","overall message","execution environment is on metal","","SNAFU context selector for the …","message to end from a peer to a peer","Message sent between non-<code>NetworkNodeType::Conductor</code> nodes","","recv-ed the conductor id","messaged recved and relayed to conductor","A message sent and recv-ed by a [‘…","probaiblity denominator that recv-er node sends back …","probability numerator that recv-er node sends back timing …","","Request state","Reply with state","the timeout before ending rounding","This will be flattened into CliOpt","returns time per data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","internal interface to bind to","the type of broadcast (direct or broadcast)","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increment conductor to the next epoch","If this value is set, a webserver will be spawned on this …","","network event handler for conductor","","","","","","","","","","","time message took to propagate from sender to recv-er","Doc comment","","the epoch the message was sent on","the epoch the request was made on","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","peer","","","","","","handler for non-conductor nodes for normal messages","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","the role this node plays","convert a normal message into a message to relay to …","number of rounds of gossip","total number of nodes","arbitrary amount of padding to vary message length","convert node string into multi addr","","","","event handler for events from the swarm","whether or not message shuld be relayed to conductor","the underlying request the recv-ing node should take","the requeset being made","the request the recv-ing node should make","timestamp when message was sent","","","","","","","","","[’bootstrap_addrs…","","list of bootstrap node addrs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Doc comment","","","","","","","","","","","SNAFU context selector for the <code>LossyNetworkError::AddrParse</code>…","","SNAFU context selector for the <code>LossyNetworkError::Decode</code> …","","SNAFU context selector for the …","","SNAFU context selector for the <code>LossyNetworkError::Io</code> …","A description of how the network should be isolated","Builder for <code>IsolationConfig</code>.","Error type for IsolationConfigBuilder","hardcoded default values","A description of a lossy network","Builder for <code>LossyNetwork</code>.","Error type for LossyNetworkBuilder","","represent the current network namespace (useful if …","","SNAFU context selector for the <code>LossyNetworkError::RtNetlink</code>…","","SNAFU context selector for the <code>LossyNetworkError::SetNs</code> …","Uninitialized field","Uninitialized field","Custom validation error","Custom validation error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the bridge ip address","the bridge ip address","the bridge ip address","the bridge name","the bridge name","the bridge name","Builds a new <code>LossyNetwork</code>.","Builds a new <code>IsolationConfig</code>.","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","the network namespace name to create","the network namespace name to create","the network namespace name to create","Create an empty builder, with all fields set to <code>None</code> or …","Create an empty builder, with all fields set to <code>None</code> or …","Create a network qdisc","Internal invocation to netlink library to create the qdisc","","","","","","","Enables firewall rules to allow network bridge to function …","the execution environment","the execution environment","the execution environment","Ethernet interface that is connected to WAN","Ethernet interface that is connected to WAN","Ethernet interface that is connected to WAN","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create isolated environment in separate network namespace …","Prepares server for latency by:","metadata describing how to isolate. Only used when <code>env_type</code>…","metadata describing how to isolate. Only used when <code>env_type</code>…","metadata describing how to isolate. Only used when <code>env_type</code>…","The network loss conditions","The network loss conditions","The network loss conditions","creates new network namespace and enters namespace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","deletes created iptables rules","Delete isolated environment and network bridge","tears down all created interfaces deletes all iptables …","the virtual ethernet interface ip address that lives in …","the virtual ethernet interface ip address that lives in …","the virtual ethernet interface ip address that lives in …","the virtual ethernet interface name that lives in …","the virtual ethernet interface name that lives in …","the virtual ethernet interface name that lives in …","the virtual ethernet interface name that lives in the …","the virtual ethernet interface name that lives in the …","the virtual ethernet interface name that lives in the …","","","","","","","","","","","","","","","","","","","","","","","","","Trait to unify the info that can be send to the web …","","","Spawn a web server on the given <code>addr</code>. This web server will …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,17,10,10,0,16,16,0,0,0,0,0,0,10,17,18,16,0,0,0,0,0,6,0,6,0,12,0,18,6,0,16,0,0,16,16,0,0,0,0,12,12,0,0,2,6,31,32,33,31,32,33,6,10,2,11,12,13,14,15,16,17,31,32,33,18,19,20,9,6,10,2,11,12,13,14,15,16,17,31,32,33,18,19,20,9,6,33,15,9,6,10,2,11,12,13,14,15,16,17,18,19,20,9,10,2,11,12,13,14,15,16,17,18,19,20,9,33,33,2,33,0,0,2,2,6,12,13,14,15,16,17,18,14,32,33,13,14,11,11,10,12,13,14,15,16,17,18,9,10,2,11,12,13,14,15,16,17,31,32,33,18,19,20,9,6,6,10,2,11,12,13,14,15,16,17,31,32,33,18,19,20,9,6,31,32,33,31,32,33,14,18,2,31,32,33,0,6,6,11,10,2,11,12,13,14,15,16,17,31,32,33,18,19,20,9,6,19,20,9,0,11,11,33,13,33,33,13,0,2,6,2,0,13,13,14,15,13,12,13,14,15,16,17,18,6,0,15,33,10,2,11,12,13,14,15,16,17,18,19,20,9,6,10,2,11,12,13,14,15,16,17,31,32,33,18,19,20,9,6,10,2,11,12,13,14,15,16,17,31,32,33,18,19,20,9,6,10,2,11,12,13,14,15,16,17,31,32,33,18,19,20,9,6,31,32,33,31,32,33,10,2,11,12,13,14,15,16,17,31,32,33,18,19,20,9,6,0,31,33,71,72,73,74,75,76,77,78,46,0,46,0,46,0,46,0,0,0,0,0,0,0,0,0,0,46,0,46,0,50,52,50,52,0,0,50,52,46,46,62,49,48,50,47,52,51,54,55,56,53,57,58,46,62,49,48,50,47,52,51,54,55,56,53,57,58,46,47,47,51,47,47,51,48,47,53,46,49,48,47,51,54,55,56,53,57,58,49,48,47,51,54,55,56,53,57,58,47,47,51,48,47,49,49,62,48,47,51,0,46,51,48,49,48,48,49,48,53,49,50,50,52,52,51,54,55,56,53,57,58,46,46,62,49,48,50,50,50,47,52,52,52,51,54,55,56,53,57,58,46,50,52,46,50,52,46,62,49,48,50,47,52,51,54,55,56,53,57,58,46,54,55,56,53,57,58,49,51,48,49,48,48,49,48,62,50,52,46,46,49,48,47,51,54,55,56,53,57,58,50,52,46,62,49,48,50,47,52,51,54,55,56,53,57,58,46,62,49,48,50,47,52,51,54,55,56,53,57,58,46,62,49,48,50,47,52,51,54,55,56,53,57,58,46,51,49,51,47,47,51,47,47,51,47,47,51,62,49,48,50,47,52,51,54,55,56,53,57,58,46,79,80,81,82,83,84,85,86,87,88,0,88,0,0,0,0,0,65,67,70,65,67,70,70,70,65,67,70,67,65,67,70,70,65,65,67,67,65,65,67,70,65,65,67,70,65,67,70,65,67,70,65,67,70],"f":[0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[2,3]],[[],4],[5,5],[5,5],[5,5],[5,5],[5,5],[5,5],[6,[[8,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[9,6],[6,[[8,[4]]]],[10,10],[2,2],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[2,10]],0,[[21,[23,[[22,[2]]]]],[[25,[24]]]],[[26,[23,[[22,[2]]]]],[[25,[24]]]],0,[[],2],[6,27],[[],[[25,[12]]]],[[],[[25,[13]]]],[[],[[25,[14]]]],[[],[[25,[15]]]],[[],[[25,[16]]]],[[],[[25,[17]]]],[[],[[25,[18]]]],0,0,0,0,0,0,0,[[10,10],28],[[12,12],28],[[13,13],28],[[14,14],28],[[15,15],28],[[16,16],28],[[17,17],28],[[18,18],28],[9,[[25,[6]]]],[[10,29],30],[[2,29],30],[[11,29],30],[[12,29],30],[[13,29],30],[[14,29],30],[[15,29],30],[[16,29],30],[[17,29],30],[[31,29],30],[[32,29],30],[[33,29],30],[[18,29],30],[[19,29],30],[[20,29],30],[[9,29],30],[[6,29],30],[[6,29],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,[[25,[31,35]]]],[34,[[25,[32,35]]]],[34,[[25,[33,35]]]],[34,[[25,[31,35]]]],[34,[[25,[32,35]]]],[34,[[25,[33,35]]]],0,[27,[[25,[18]]]],[2],[[],[[8,[36]]]],[[],[[8,[36]]]],[[],[[8,[36]]]],[[[23,[22]],13,[8,[[38,[37]]]]],[[25,[24]]]],[[],39],[[]],[11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,6],[20,6],[9,6],0,0,0,0,[[13,40],14],0,0,0,[27,[[25,[41,42]]]],0,[43],0,[[26,[23,[22]]],[[25,[24]]]],0,0,0,0,0,[12,25],[13,25],[14,25],[15,25],[16,25],[17,25],[18,25],[6,[[8,[4]]]],[33,[[25,[6]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],44],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[31,34],[[25,[35]]]],[[32,34],[[25,[35]]]],[[33,34],[[25,[35]]]],[[31,34],[[25,[35]]]],[[32,34],[[25,[35]]]],[[33,34],[[25,[35]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[],4],[[],4],[46,[[8,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[47,44],47],0,0,[[47,44],47],0,0,[48,[[25,[49,50]]]],[47,[[25,[51,52]]]],[53,46],[46,[[8,[4]]]],[49,49],[48,48],[47,47],[51,51],[54,54],[55,55],[56,56],[53,53],[57,57],[58,58],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[47,44],47],0,0,[[],48],[[],47],[49,[[25,[46]]]],[[49,27],[[25,[46]]]],0,[[],48],[[],47],[[],51],[[59,44],[[25,[46]]]],[46,27],[[51,27],[[25,[46]]]],[[48,18],48],0,0,[[48,44],48],0,0,[53,[[25,[46]]]],[[49,29],30],[[50,29],30],[[50,29],30],[[52,29],30],[[52,29],30],[[51,29],30],[[54,29],30],[[55,29],30],[[56,29],30],[[53,29],30],[[57,29],30],[[58,29],30],[[46,29],30],[[46,29],30],[[]],[[]],[[]],[60,50],[44,50],[[]],[[]],[[]],[60,52],[44,52],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],39],[[],39],[[],39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,46],[55,46],[56,46],[53,46],[57,46],[58,46],[49,[[25,[46]]]],[[51,27],[[25,[46]]]],[[48,[8,[51]]],48],0,0,[[48,61],48],0,0,[27,[[25,[62,46]]]],[43],[43],[43],[46,[[8,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],44],[[],44],[[],44],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[51,44],[[25,[46]]]],[49,[[25,[46]]]],[[51,44],[[25,[46]]]],[[47,44],47],0,0,[[47,44],47],0,0,[[47,44],47],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],0,[[[23,[22]],63]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,[22,[[65,[64]]]],[[40,66],67],0,[[[65,[64]],68],69],[[[65,[64]]],25],[67,25],[70,25],0,[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],45],[[],45],[[],45],[[]],[[]],[[]]],"p":[[6,"Result"],[3,"ConductorState"],[15,"usize"],[8,"Error"],[3,"Command"],[4,"CounterError"],[3,"Backtrace"],[4,"Option"],[3,"MissingBootstrapSnafu"],[4,"EpochType"],[3,"EpochData"],[4,"CounterRequest"],[3,"NormalMessage"],[3,"RelayedMessage"],[3,"ConductorMessage"],[4,"Message"],[4,"ConductorMessageMethod"],[4,"ExecutionEnvironment"],[3,"HandleSnafu"],[3,"FileReadSnafu"],[3,"Duration"],[3,"NetworkNodeHandle"],[3,"Arc"],[4,"NetworkNodeHandleError"],[4,"Result"],[4,"NetworkEvent"],[15,"str"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"WebUi"],[3,"EnvType"],[3,"CliOpt"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[3,"DirectMessageResponse"],[3,"ResponseChannel"],[3,"IndentedSection"],[3,"PeerId"],[3,"Multiaddr"],[4,"Error"],[3,"Demand"],[3,"String"],[3,"TypeId"],[4,"LossyNetworkError"],[3,"IsolationConfigBuilder"],[3,"LossyNetworkBuilder"],[3,"LossyNetwork"],[4,"LossyNetworkBuilderError"],[3,"IsolationConfig"],[4,"IsolationConfigBuilderError"],[3,"InvalidConfigSnafu"],[3,"RtNetlinkSnafu"],[3,"IoSnafu"],[3,"SetNsSnafu"],[3,"DecodeSnafu"],[3,"AddrParseSnafu"],[3,"Handle"],[3,"UninitializedFieldError"],[3,"NetemQdisc"],[3,"Netns"],[4,"SocketAddr"],[8,"Serialize"],[3,"State"],[3,"NetworkNodeConfig"],[3,"NetworkConfig"],[3,"Sender"],[6,"Result"],[3,"ConnectionState"],[13,"DirectMessage"],[13,"Handle"],[13,"FileRead"],[13,"StateResponse"],[13,"Normal"],[13,"Relayed"],[13,"Conductor"],[13,"ConductorIdIs"],[13,"UninitializedField"],[13,"ValidationError"],[13,"UninitializedField"],[13,"ValidationError"],[13,"RtNetlink"],[13,"Io"],[13,"SetNs"],[13,"Decode"],[13,"AddrParse"],[8,"WebInfo"]]},\
"hotshot":{"doc":"Provides a generic rust implementation of the <code>HotShot</code> BFT …","t":[13,13,13,13,17,17,3,4,3,3,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,0,6,3,6,4,4,3,3,3,3,3,3,13,13,13,13,13,13,13,13,13,13,3,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,5,5,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,16,13,13,13,13,16,16,16,13,13,13,13,13,13,4,8,16,8,13,13,13,8,13,13,13,8,8,16,6,16,13,16,13,13,10,10,10,11,11,11,11,11,11,11,11,10,10,11,10,10,10,11,11,11,10,11,0,0,11,11,11,11,10,10,11,0,11,11,11,11,11,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,11,11,11,11,11,10,11,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,3,17,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,4,3,3,13,16,13,8,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,12,11,11,11,11,10,11,11,12,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,11,11,11,11,11,11,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BadBlock","Continue","FailedToBroadcast","FailedToMessageLeader","H_256","H_512","HotShot","HotShotError","HotShotInitializer","HotShotInner","InconsistentBlock","InsufficientValidSignatures","InvalidState","LeafNotFound","Misc","NetworkFault","StorageError","TimeoutError","ViewTimeoutError","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone_into","create_or_obtain_chan_from_read","create_or_obtain_chan_from_write","data","demos","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","documentation","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from_genesis","from_reload","get_decided_leaf","get_next_view_timeout","get_state","header","in_current_span","init","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","provide","publish_transaction_async","rand","send_broadcast_message","send_direct_message","source","timeout_view","to_owned","to_string","traits","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","types","vzip","vzip","vzip","vzip","context","context","num_valid_signatures","source","source","source","source","source","state","threshold","view_number","Leaf","QuorumCertificate","as_any","as_any","as_any_mut","as_any_mut","block_commitment","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","commit","commit","deltas","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","from","genesis","genesis","genesis","get_hash","hash","height","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","justify_qc","leaf_commitment","new","parent_commitment","proposer_id","rejected","serialize","serialize","signatures","state","tag","tag","timestamp","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","view_number","view_number","vzip","vzip","dentry","Account","Addition","Balance","DEntryBlock","DEntryError","DEntryGenesisBlock","DEntryNode","DEntryNormalBlock","DEntryState","DEntryTransaction","DEntryTypes","Genesis","GenesisAfterStart","GenesisFailed","InconsistentTransaction","InsufficentBalance","NoSuchInputAccount","NoSuchOutputAccount","Normal","PreviousStateMismatch","ReusedNonce","Subtraction","account","account","accounts","add","add_transaction_raw","amount","amount","append","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","balances","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","commit","commit","commit","contained_transactions","create_random_transaction","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","genesis","genesis","genesis_from","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","header","in_current_span","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","next_block","nonce","on_commit","padding","partial_cmp","previous_state","provide","random_leaf","random_quorum_certificate","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","source","sub","tag","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txn_count","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_block","validate_independence","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","Block","BlockType","ChannelDisconnected","ChannelSend","CouldNotDeliver","DHTError","Election","Error","Error","ExecutorError","FailedToBindListener","FailedToDeserialize","FailedToSerialize","IdentityHandshake","ListenerSend","NetworkError","NetworkReliability","Networking","NetworkingImplementation","NoMessagesInQueue","NoSocketsError","NoSuchNode","NodeImplementation","Other","ShutDown","SocketDecodeError","State","Storage","Storage","StorageResult","Time","Timeout","Transaction","UnboundedChannelDisconnected","WebSocket","add_transaction_raw","append","append","append_single_view","append_single_view","as_any","as_any_mut","as_error_source","backtrace","borrow","borrow_mut","broadcast_message","broadcast_queue","cause","cleanup_storage_up_to_view","commit","contained_transactions","deref","deref_mut","description","direct_queue","drop","dummy","election","fmt","fmt","from","from","get_anchored_view","get_record","header","implementations","in_current_span","init","into","into_any","into_any_arc","into_any_rc","known_nodes","message_node","network_changes","next_block","next_broadcast","next_direct","notify_of_subsequent_leader","on_commit","provide","put_record","ready","sample_delay","sample_keep","shut_down","source","to_string","try_from","try_into","type_id","validate_block","vzip","inner","input","input","source","source","source","source","source","source","source","source","source","DummyState","append","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","commit","create_random_transaction","default","deref","deref_mut","deserialize","drop","eq","fmt","from","get_hash","hash","init","into","into_any","into_any_arc","into_any_rc","next_block","on_commit","random","serialize","tag","to_owned","try_from","try_into","type_id","validate_block","vzip","static_committee","vrf","GeneralStaticCommittee","StaticCommittee","StaticElectionConfig","StaticVoteToken","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","commit","create_election","default","default_election_config","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","eq","fmt","fmt","fmt","from","from","from","get_hash","get_leader","get_stake_table","get_threshold","hash","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","make_vote_token","new","serialize","serialize","tag","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate_vote_token","vote_count","vzip","vzip","vzip","BinomialQuery","BlsPubKey","JfPubKey","SORTITION_PARAMETER","VRFStakeTable","VRFStakeTableConfig","VRFVoteToken","VrfImpl","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_sortition_proof","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","count","create_election","default","default_election_config","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","distribution","drop","drop","drop","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_native","from_private","generate_test_key","generate_test_vote_token","generated_from_seed_indexed","get_all_stake","get_hash","get_hash","get_hash","get_leader","get_p","get_sortition_proof","get_stake","get_stake_table","get_threshold","hash","hash","hash","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","make_vote_token","proof","pub_key","serialize","serialize","serialize","serialize","sign","sortition_parameter","tag","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate_vote_token","vote_count","vzip","vzip","vzip","vzip","vzip","vzip","with_initial_stake","CentralizedServerNetwork","DummyReliability","Libp2pNetwork","MasterMap","MemoryNetwork","MemoryStorage","PeerInfoVec","WNetwork","append","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","broadcast_message","broadcast_message","broadcast_message","broadcast_queue","broadcast_queue","broadcast_queue","broadcast_queue","cleanup_storage_up_to_view","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit","connect","connect_to","connect_with_server_config","connection_table_size","construct_tmp_storage","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","direct_queue","direct_queue","direct_queue","direct_queue","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_task","generator","generator","generator","generator","get_anchored_view","get_connected_client_count","get_full_state","get_record","get_record","get_record","get_record","in_flight_message_count","in_flight_message_count","in_flight_message_count","in_flight_message_count","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","known_nodes","known_nodes","known_nodes","known_nodes","message_node","message_node","message_node","message_node","network_changes","network_changes","network_changes","network_changes","new","new","new","new","new","next_broadcast","next_broadcast","next_broadcast","next_broadcast","next_direct","next_direct","next_direct","next_direct","notify_of_subsequent_leader","notify_of_subsequent_leader","notify_of_subsequent_leader","notify_of_subsequent_leader","put_record","put_record","put_record","put_record","ready","ready","ready","ready","run_ready","sample_delay","sample_keep","send_results","shut_down","shut_down","shut_down","shut_down","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_ready","Decide","Error","Event","EventType","HotShotHandle","Message","NextLeaderViewTimeout","PrivateKey","ReplicaViewTimeout","SignatureKey","TimedOut","ViewFinished","Vote","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","available_events","block_commitment","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect_round_events","current_view","current_view","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","ed25519","eq","eq","eq","event","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_private","generated_from_seed_indexed","get_current_view","get_decided_leaf","get_leader","get_next_leader_receiver_channel_len","get_next_view_timeout","get_public_key","get_replica_receiver_channel_len","get_state","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","justify_qc","justify_qc_commitment","kind","leaf_commitment","networking","next_event","send_broadcast_consensus_message","send_direct_consensus_message","sender","serialize","serialize","serialize","shut_down","sign","sign_proposal","sign_vote","signature","start","start_one_round","storage","submit_transaction","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_next_event","type_id","type_id","type_id","type_id","type_id","type_id","validate","view_number","vote_token","vzip","vzip","vzip","vzip","vzip","vzip","error","leaf_chain","qc","view_number","view_number","view_number","Ed25519Priv","Ed25519Pub","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","fmt","from","from","from_bytes","from_bytes","from_private","from_str","from_str","generate","generate_from_seed","generate_test_key","generated_from_seed_indexed","generated_from_seed_indexed","get_hash","hash","header","header","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","partial_cmp","partial_cmp","serialize","serialize","sign","to_bytes","to_bytes","to_owned","to_owned","to_string","to_string","to_tagged_base64","to_tagged_base64","try_from","try_from","try_into","try_into","type_id","type_id","validate","vzip","vzip"],"q":["hotshot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot::HotShotError","","","","","","","","","","","hotshot::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot::demos","hotshot::demos::dentryhotshot::demos::dentry::DEntryBlock","","hotshot::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot::traits::NetworkError","","","","","","","","","","","","hotshot::traits::dummy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot::traits::election","","hotshot::traits::election::static_committee","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot::traits::election::vrfhotshot::traits::implementationshotshot::typeshotshot::types::EventType","","","","","","hotshot::types::ed25519","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A block failed verification","Internal value used to drive the state machine","Failed to broadcast a message on the network","Failed to Message the leader in the given stage","Length, in bytes, of a 256 bit hash","Length, in bytes, of a 512 bit hash","Thread safe, shared view of a <code>HotShot</code>","Reexport error type Error type for <code>HotShot</code>","initializer struct for creating starting block","Holds the state needed to participate in <code>HotShot</code> consensus","A block was not consistent with the existing state","Not enough valid signatures for a quorum","Invalid state machine state","Item was not present in storage","Miscelaneous error TODO fix this with #181 …","Failure in networking layer","Error accesing storage","HotShot timed out waiting for msgs","HotShot timed out during round","","","","","","","","","","","","","","","","","","","","","","given a view number and a upgradable read lock on a …","given a view number and a write lock on a channel map, …","Data availability support Contains structures and …","Contains implementations of the <code>HotShot</code> traits used in the …","","","","","","","","","","HotShot: A linear time, committee electing, BFT Protocol.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","initialize from genesis","reload previous state based on most recent leaf","Returns a copy of the last decided leaf","return the timeout for a view for <code>self</code>","Returns a copy of the state","","","","","","","Initializes a new hotshot and does the work of setting up …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Creates a new hotshot with the given configuration options …","","Publishes a transaction to the network","Reexport rand crate","Send a broadcast message.","Send a direct message to a given recipient.","","Marks a given view number as timed out. This should be …","","","Contains traits consumed by <code>HotShot</code>","","","","","","","","","","","","","Contains types used by the crate","","","","","source of error","Context","Number of valid signatures","Underlying error","source of error","The underlying network fault","The underlying network fault","Underlying network fault","The state that the round was in when it timed out","Threshold of signatures needed for a quorum","view number","This is the consensus-internal analogous concept to a …","The type used for Quorum Certificates","","","","","Hash of the block refereed to by this Quorum Certificate.","","","","","","","","","","","Block leaf wants to apply","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","To be used only for generating the genesis quorum …","Creates the genesis Leaf for the genesis View (special …","Temporary bypass for boostrapping","","","Number of leaves before this one in the chain","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Per spec, justification","Hash of the <code>Leaf</code> referred to by this Quorum Certificate","Creates a new leaf with the specified block and parent","The hash of the parent <code>Leaf</code> So we can ask if it extends","the proposer id of the leaf","Transactions that were marked for rejection while …","","","The list of signatures establishing the validity of this …","What the state should be AFTER applying <code>self.deltas</code>","","","the timestamp the leaf was constructed at, in nanoseconds. …","","","","","","","","","The view number this quorum certificate was generated …","CurView from leader when proposing leaf","","","Double entry accounting demo","The account identifier type used by the demo","Records an increase in an account balance","The account balance type used by the demo","The block for the dentry demo","The error type for the dentry demo","initializes the first state on genesis","The node implementation for the dentry demo","Any block after genesis","The state for the dentry demo NOTE both fields are btrees …","The transaction for the dentry demo","Implementation of <code>NodeTypes</code> for <code>DEntryNode</code>","genesis block","Genesis reencountered after initialization","Genesis failure","The subtraction and addition amounts for this transaction …","Tried to move more money than was in the account","No such input account exists","No such output account exists","normal block","Previous state commitment does not match","Nonce was reused","Records a reduction in an account balance","An account identifier","An account identifier","initializes the first state","An increment to an account balance","","An account balance","An account balance","","","","","","","","","","","","","","","","","","","","","","","","Key/value store of accounts and balances","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","generate a default genesis block","","generate a genesis block with the provided initial …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>DEntryNode</code>","","The nonce for a transaction, no two transactions can have …","","Number of bytes to pad to each transaction","","Block state commitment","","Provides a random <code>Leaf</code>","Provides a random <code>QuorumCertificate</code>","","","","","","","","","","A decrement to an account balance","","","","","","","","","","","","","","Transaction vector","","","","","","","","","","","","","","","","","","","","","total transactions in this block","","","","","","","","","","","","Ensures that this transaction is at least consistent with …","","","","","","","","","","","","","Abstraction over the full contents of a block","The type of block this state is associated with","An underlying channel has disconnected","Channel error","Could not deliver a message to a specified recipient","DHT error","Election Time is generic here to allow multiple …","The error type for this type of block","The error type for this particular type of ledger state","Error orginiating from within the executor","Failed to bind a listener socket","Failed to deserealize a message","Failed to serialize a message","Could not complete handshake","A Listener failed to send a message","Error type for networking","interface describing how reliable the network is","Networking type for this consensus implementation","Describes, generically, the behaviors a networking …","The centralized server could not find a specific message.","No sockets were open","Attempted to deliver a message to an unknown node","Node implementation aggregate trait","Generic error type for compatibility if needed","The underlying connection has been shut down","Failed to decode a socket specification","Abstraction over the state that blocks modify","Abstraction over on disk persistence of node state","Storage type for this consensus implementation","Result for a storage type","Time compatibility needed for reward collection","A timeout occurred","The type of the transitions we are applying","An underlying unbounded channel has disconnected","WebSockets specific error","Attempts to add a transaction, returning an Error if it …","Appends the given block to this state, returning an new …","Append the list of views to this storage","Insert a single view. Shorthand for","Insert a single view. Shorthand for","","","","","","","Broadcasts a message to the network","Moves out the entire queue of received broadcast messages, …","","Cleans up the storage up to the given view. The given view …","Commit this storage.","returns hashes of all the transactions in this block TODO …","","","","Moves out the entire queue of received direct messages to …","","Dummy testing implementations","Sortition trait elections used for consensus","","","Returns the argument unchanged.","","Get the latest anchored view","Get value stored in shared store under <code>key</code>","","Module for publicly usable implementations of the traits","","","Calls <code>U::from(self)</code>.","","","","Node’s currently known to the networking implementation","Sends a direct message to a specific node","Returns a list of changes in the network that have been …","Returns an empty, template next block given this current …","Provides a future for the next received broadcast","Provides a future for the next received direct message to …","notifies the network of the next leader so it can prepare. …","Gets called to notify the persistence backend that this …","","Insert <code>value</code> into the shared store under <code>key</code>.","Returns true when node is successfully initialized into …","sample from uniform distribution to decide whether or not …","Sample from bernoulli distribution to decide whether or …","Shut down this network. Afterwards this network should no …","","","","","","Returns true if and only if the provided block is valid …","","Originating error","Input that was given","Input that was given","Originating bincode error","originating bincode error","Originating websockets error","Originating async_std error","Originating io error","originating io error","Source of error","Source of error","Source of error","The dummy state","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","Generate a random <code>DummyState</code>","","","","","","","","","static (round robin) comittee election","generic vrf based election over anything that implements …","Dummy implementation of <code>Election</code>","static committee using a vrf kp","configuration for static committee. stub for now","TODO ed - docs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Index the vector of public keys with the current view …","Clone the static table","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Simply make the partial signature","Creates a new dummy elector","","","","","","","","","","","","","","","","","","","","","represents a binomial query made by sortition …","concrete type for bls public key","type wrapper for VRF’s public key","the sortition committee size parameter","The stake table for VRFs","configuration specifying the stake table","TODO doc me","the vrf implementation","","","","","","","","","","","","","","","","","","","","","","","","","Stateless method to verify VRF proof and sortition for a …","","","","","","","","","","","","","","The number of signatures that are valid TODO (ct) this …","","","","","","","","","","","","","","","","","","","","the ordered distribution of stake across nodes","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","wrap the public key","","","","","get total stake","","","","","get the committee parameter for this query","Stateless method to produce VRF proof and sortition for a …","get total stake","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","The list of signatures","The public key assocaited with this token","","","","","","the committee size parameter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create stake table with this initial stake","Handle for connecting to a centralized server","dummy implementation of network reliability","Networking implementation that uses libp2p generic over <code>M</code> …","Shared state for in-memory mock networking.","In memory only network simulator.","In memory, ephemeral, storage for a <code>HotShot</code> instance","Type alias for a shared collection of peerid, multiaddrs","Handle to the underlying networking implementation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Connect to a centralized server","Creates a connection to the given node.","Connect with the server running at <code>addr</code> and retrieve the …","Returns the size of the internal connection table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generates the background processing task","","Returns a boxed function …","","","","Get the amount of clients that are connected","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs new network for a node. Note that this network …","Create a new, empty, <code>MasterMap</code>","Creates a new <code>MemoryNetwork</code> and hooks it up to the group …","Creates a new <code>WNetwork</code> preloaded with connections to the …","Create a new instance of the memory storage with the given …","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the server indicated that the current run …","","","Send the results for this run to the server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns when network is ready","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","Event streaming handle for a <code>HotShot</code> instance running in …","Incoming message","A next leader task was canceled by a timeout interrupt","The private key type for this signature algorithm","A replica task was canceled by a timeout interrupt","Trait for abstracting public key signatures","Signals the start of a new view","The view has finished.  If values were decided on, a <code>Decide</code>…","A nodes vote on the prepare field.","","","","","","","","","","","","","Will pull all the currently available events out of the …","hash of the block being proposed TODO delete this when we …","","","","","","","","","","","","","","","","","","","","","","","","","iterate through all events on a <code>NodeImplementation</code> and …","The current view","The view this vote was cast for","","","","","","","","","","","","","","","","","","","","","","Demonstration implementation of the <code>SignatureKey</code> trait …","","","","The underlying event","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a public key from bytes","Produce a public key from a private key","Generate a new key pair","Wrapper to get this node’s current view","Gets most recent decided leaf","Wrapper for <code>HotShotConsensusApi</code>’s <code>get_leader</code> function","Get length of the next leaders’s receiver channel","return the timeout for a view of the underlying <code>HotShot</code>","Wrapper to get this node’s public key","Get length of the replica’s receiver channel","Gets the current committed state of the <code>HotShot</code> instance","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","The justification qc for this view","TODO we should remove this this is correct, but highly …","The message kind","Hash of the item being voted on","Provides a reference to the underlying networking …","Will return the next event in the queue","Wrapper around <code>HotShotConsensusApi</code>’s …","Wrapper around <code>HotShotConsensusApi</code>’s …","The sender of this message","","","","Shut down the the inner hotshot and wait until all …","Produce a signature","Wrapper around <code>HotShotConsensusApi</code>’s <code>sign_proposal</code> …","Wrapper around <code>HotShotConsensusApi</code>’s <code>sign_vote</code> function","The signature share associated with this vote TODO ct/vrf …","Signals to the underlying <code>HotShot</code> to unpause","Signals the underlying <code>HotShot</code> to run one round, if paused.","Provides a reference to the underlying storage for this …","Submits a transaction to the backing <code>HotShot</code> instance.","Serialize a public key to bytes","","","","","","","","","","","","","","","","","","","Will attempt to immediately pull an event out of the queue","","","","","","","Validate a signature","The view number that this event originates from","The vote token generated by this replica","","","","","","","The underlying error","The chain of Leafs that were committed by this decision","The QC signing the most recent leaf in <code>leaf_chain</code>.","The view that timed out","The view that timed out","The view number that has just finished","Private key type for a ed25519 [<code>SignatureKey</code>] pair","Public key type for an ed25519 <code>SignatureKey</code> pair","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create an existing private key from bytes","","","","","Generate a new private key from scratch","Generate a new private key from a seed","","Generate a new private key from a seed and a number","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Convert a private key to bytes","","","","","","Return the <code>TaggedBase64</code> representation of this key.","Return the <code>TaggedBase64</code> representation of this key.","","","","","","","","",""],"i":[3,3,3,3,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,121,19,9,3,121,19,9,3,3,3,121,19,9,3,121,19,9,3,9,9,0,0,0,0,3,121,19,9,3,121,19,9,3,0,3,121,19,9,3,3,3,121,19,9,19,19,9,9,9,3,3,3,121,19,9,9,3,121,19,9,3,121,19,9,3,121,19,9,3,121,19,9,9,3,9,0,9,9,3,9,9,3,0,3,121,19,9,3,121,19,9,3,121,19,9,0,3,121,19,9,122,123,124,125,126,127,128,129,130,124,130,0,0,38,20,38,20,38,38,20,38,20,38,20,38,20,38,20,20,38,20,38,20,38,20,38,20,38,20,38,20,38,20,20,38,20,38,38,38,20,38,20,38,20,38,20,38,20,38,20,20,38,20,20,20,20,38,20,38,20,38,20,20,38,20,38,20,38,20,38,20,38,20,38,20,0,0,0,0,0,0,0,0,0,0,0,0,45,47,47,47,47,47,47,45,47,47,0,48,49,51,50,45,48,49,46,48,49,47,50,46,51,52,45,53,54,48,49,47,50,46,51,52,45,53,54,47,47,46,48,49,47,50,46,51,52,45,53,54,48,49,47,50,46,51,52,45,53,54,47,48,49,50,46,51,52,45,53,54,48,49,50,46,51,52,45,53,54,53,50,46,45,45,46,46,53,54,48,49,47,50,46,51,52,45,53,54,48,49,47,50,46,51,52,45,53,54,47,48,49,50,46,51,52,45,53,48,49,47,50,46,51,52,45,53,54,48,49,50,46,51,52,45,53,48,49,47,47,50,46,51,52,45,53,54,48,49,47,50,46,51,52,45,53,54,45,45,45,48,49,50,46,51,52,45,53,48,49,50,46,51,52,45,53,47,47,48,49,47,50,46,51,52,45,53,54,48,49,47,50,46,51,52,45,53,54,48,49,47,50,46,51,52,45,53,54,48,49,47,50,46,51,52,45,53,54,48,49,47,50,46,51,52,45,53,54,54,46,50,46,50,53,52,47,0,0,48,49,50,46,51,52,45,53,47,50,50,46,45,48,49,50,46,51,52,45,53,54,47,52,48,49,47,50,46,51,52,45,53,54,48,49,47,50,46,51,52,45,53,54,45,48,49,47,50,46,51,52,45,53,54,46,50,48,49,47,50,46,51,52,45,53,54,131,132,0,133,33,33,33,33,8,134,133,33,33,33,33,33,33,0,0,8,0,33,33,33,0,33,33,33,0,0,8,0,133,33,134,33,33,134,133,135,135,135,33,33,33,33,33,33,136,136,33,135,135,134,33,33,33,136,33,0,0,33,33,33,33,135,136,33,0,33,33,33,33,33,33,136,136,136,133,136,136,136,133,33,136,136,110,110,136,33,33,33,33,33,133,33,137,138,139,140,141,142,143,138,144,145,146,147,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,0,0,0,0,0,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,77,76,78,76,76,77,78,76,77,78,77,78,76,77,78,77,76,77,78,76,77,78,77,76,76,76,77,76,77,78,76,77,78,76,77,78,76,77,78,76,77,78,76,76,77,78,77,76,77,78,76,77,78,76,77,78,76,77,78,76,77,76,77,78,0,0,0,0,0,0,0,0,86,87,85,88,89,90,86,87,85,88,89,90,86,87,85,88,89,90,86,87,85,88,89,90,86,86,87,85,88,89,90,86,87,85,88,89,90,88,88,86,90,86,86,87,85,88,89,90,86,87,85,88,89,90,87,85,88,90,90,86,87,85,88,89,90,85,88,89,87,85,88,89,90,86,87,85,88,89,90,85,85,85,85,86,85,87,85,88,89,86,89,86,87,86,86,85,88,89,86,87,85,88,89,90,86,87,85,88,89,90,86,87,85,88,89,90,86,87,85,88,89,90,86,87,85,88,89,90,86,88,88,87,85,88,90,85,90,88,85,86,87,85,88,89,90,86,87,85,88,89,90,86,87,85,88,89,90,86,87,85,88,89,90,85,86,88,86,87,85,88,89,90,86,0,0,0,0,0,0,0,0,94,95,96,99,103,97,98,94,95,96,99,103,97,98,94,95,96,99,103,97,98,94,95,96,99,103,97,98,94,95,96,97,98,95,96,97,98,94,95,96,99,97,98,94,95,96,99,97,98,94,94,95,98,95,98,94,95,96,99,103,97,98,94,95,96,99,103,97,98,94,95,96,97,98,95,95,96,99,103,97,98,94,95,96,99,103,97,98,95,96,99,103,97,98,94,98,95,96,97,98,94,95,94,95,96,97,98,95,96,97,98,95,96,99,103,97,98,94,95,96,99,103,97,98,94,95,96,99,103,97,98,94,95,96,99,103,97,98,94,95,96,99,103,97,98,94,95,96,97,98,95,96,97,98,95,96,97,98,96,103,97,98,94,95,96,97,98,95,96,97,98,95,96,97,98,95,96,97,98,95,96,97,98,95,99,99,95,95,96,97,98,95,96,99,97,98,94,95,96,99,103,97,98,94,95,96,99,103,97,98,94,95,96,99,103,97,98,94,95,96,99,103,97,98,94,96,114,114,0,0,0,0,114,75,114,0,0,114,0,113,114,65,26,115,116,113,114,65,26,115,116,26,116,113,114,65,26,115,116,113,114,65,26,115,116,113,114,65,26,115,116,113,114,65,26,115,116,26,115,116,113,114,65,26,115,116,113,114,65,26,115,116,65,115,116,113,114,65,26,115,116,0,65,115,116,113,113,114,65,115,116,113,114,65,26,115,116,75,75,75,26,26,26,26,26,26,26,26,113,114,65,26,115,116,113,114,65,26,115,116,113,114,65,26,115,116,113,114,65,26,115,116,113,114,65,26,115,116,115,116,65,116,26,26,26,26,65,65,115,116,26,75,26,26,116,26,26,26,26,75,113,114,65,26,115,116,113,114,65,26,115,116,113,114,65,26,115,116,26,113,114,65,26,115,116,75,113,116,113,114,65,26,115,116,148,149,149,150,151,152,0,0,117,118,117,118,117,118,117,118,117,118,117,118,117,118,117,118,117,118,117,118,117,118,117,118,117,118,118,117,118,117,118,118,117,118,117,117,118,117,118,118,118,117,118,117,118,117,118,117,118,117,118,117,118,117,118,117,118,118,117,118,117,118,117,118,117,118,117,118,117,118,117,118,118,117,118],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],2],[3,[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[5,[2]]]],[[[9,[[0,[6,7]],[0,[6,[8,[[0,[6,7]]]]]]]]],[[9,[[0,[6,7]],[0,[6,[8,[[0,[6,7]]]]]]]]]],[[]],[[[11,[[10,[7]]]]],[[12,[7]]]],[[[13,[[10,[7]]]]],[[12,[7]]]],0,0,[14],[14],[14],[14],[14],[14],[14],[14],[3,15],0,[14],[14],[14],[14],[[3,16],[[18,[17]]]],[[3,16],[[18,[17]]]],[[]],[[]],[[]],[[]],[[],[[18,[[19,[7]],[3,[7]]]]]],[[[20,[7]]],[[19,[7]]]],[[[9,[7,[8,[7]]]]],[[20,[7]]]],[[[9,[7,[8,[7]]]]],21],[[[9,[7,[8,[7]]]]]],[[],22],[[]],[[],14],[[],14],[[],14],[[],14],[[21,23,[19,[7]],[25,[24]]],[[18,[[26,[7,[8,[7]]]],[3,[7]]]]]],[[]],[[]],[[]],[[]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[[21,23,[19,[7]],[25,[24]]],[[18,[[9,[7,[8,[7]]]],[3,[7]]]]]],[30],[[[9,[7,[8,[7]]]]],[[18,[[3,[7]]]]]],0,[[[9,[7,[8,[7]]]],[32,[[31,[7]]]]],[[18,[33]]]],[[[9,[7,[8,[7]]]],[32,[[31,[7]]]]],[[18,[33]]]],[3,[[5,[2]]]],[[[9,[7,[8,[7]]]],[35,[[34,[7]]]],[5,[[35,[[34,[7]]]]]]]],[[]],[[],36],0,[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],37],[[],37],[[],37],[[],37],0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],0,[[]],[[]],[[]],[[]],[38,38],[20,20],[[]],[[]],[38,[[39,[38]]]],[20,[[39,[20]]]],0,[14],[14],[14],[14],[[],[[18,[38]]]],[[],[[18,[20]]]],[14],[14],[[38,38],40],[[20,20],40],[[38,16],[[18,[17]]]],[[20,16],[[18,[17]]]],[[]],[41,20],[[]],[[],38],[[],20],0,[[],21],[38],0,[[],14],[[],14],[[]],[[]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],0,0,[[[39,[20]],38,21,[42,[27]],43,44],20],0,0,0,[38,18],[20,18],0,0,[[],36],[[],36],0,[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],37],[[],37],0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[45,[[18,[45]]]],0,0,[46,[[18,[46]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],2],[47,[[5,[4]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,[[5,[2]]]],[48,48],[49,49],[50,50],[46,46],[51,51],[52,52],[45,45],[53,53],[54,54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[53,53],55],[50,[[39,[50]]]],[46,[[39,[46]]]],[45,[[39,[45]]]],[45,[[56,[[39,[50]]]]]],[[46,57]],[[],46],[[],53],[[],54],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[47,15],[[],[[18,[48]]]],[[],[[18,[49]]]],[[],[[18,[50]]]],[[],[[18,[46]]]],[[],[[18,[51]]]],[[],[[18,[52]]]],[[],[[18,[45]]]],[[],[[18,[53]]]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[[48,48],40],[[49,49],40],[[50,50],40],[[46,46],40],[[51,51],40],[[52,52],40],[[45,45],40],[[53,53],40],[[48,16],58],[[49,16],58],[[47,16],58],[[47,16],58],[[50,16],58],[[46,16],58],[[51,16],58],[[52,16],58],[[45,16],58],[[53,16],58],[[54,16],58],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],45],[[],45],[[[61,[59,60]]],45],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[48],[49],[50],[46],[51],[52],[45],[53],[[],22],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[[],54],[46],0,[46],0,[[53,53],[[5,[55]]]],0,[30],[57,[[20,[7]]]],[57,[[38,[7]]]],[48,18],[49,18],[50,18],[46,18],[51,18],[52,18],[45,18],[53,18],[47,[[5,[2]]]],0,[[],36],[[],36],[[],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],0,[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[45,14],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[46,40],[50,40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],18],[[],18],[[[42,[62,27]]],[[64,[[25,[63,27]]]]]],[41,[[64,[[25,[63,27]]]]]],[41,[[64,[[25,[63,27]]]]]],[[],1],[[],1],[[],2],[33,[[5,[4]]]],[[]],[[]],[65,[[64,[[25,[63,27]]]]]],[[],[[64,[[25,[63,27]]]]]],[33,[[5,[2]]]],[[],[[64,[[25,[63,27]]]]]],[[],[[64,[[25,[63,27]]]]]],[[],[[56,[39,66]]]],[14],[14],[33,15],[[],[[64,[[25,[63,27]]]]]],[14],0,0,[[33,16],[[18,[17]]]],[[33,16],[[18,[17]]]],[[]],[67,33],[[],[[64,[[25,[63,27]]]]]],[[[0,[68,69,70]]],[[64,[[25,[63,27]]]]]],[[],22],0,[[]],[[],14],[[]],[[[25,[27]]],[[25,[1,27]]]],[28,[[28,[1]]]],[29,[[29,[1]]]],[[],[[64,[[25,[63,27]]]]]],[65,[[64,[[25,[63,27]]]]]],[[],[[64,[[25,[63,27]]]]]],[[]],[[],[[64,[[25,[63,27]]]]]],[[],[[64,[[25,[63,27]]]]]],[[[28,[71]]],[[64,[[25,[63,27]]]]]],[[]],[30],[[[0,[68,69,70]],[0,[68,69,70]]],[[64,[[25,[63,27]]]]]],[[],[[64,[[25,[63,27]]]]]],[[],72],[[],40],[[],[[64,[[25,[63,27]]]]]],[33,[[5,[2]]]],[[],36],[[],18],[[],18],[[],37],[[],40],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[73,[[18,[73]]]],[[],1],[[],1],[[]],[[]],[73,73],[[]],[73,[[39,[73]]]],[[73,57],74],[[],73],[14],[14],[[],[[18,[73]]]],[14],[[73,73],40],[[73,16],[[18,[17]]]],[[]],[[],21],[73],[[],14],[[]],[[[25,[27]]],[[25,[1,27]]]],[28,[[28,[1]]]],[29,[[29,[1]]]],[73],[73],[57,73],[73,18],[[],36],[[]],[[],18],[[],18],[[],37],[73,40],[[]],0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[[76,[6,[0,[6,75]]]]],[[76,[6,[0,[6,75]]]]]],[[[77,[[0,[6,75]]]]],[[77,[[0,[6,75]]]]]],[78,78],[[]],[[]],[[]],[[[77,[75]]],[[39,[[77,[75]]]]]],[[[42,[75]]],[[76,[75]]]],[[],78],[21],[14],[14],[14],[14],[14],[14],[[],[[18,[[77,[75]]]]]],[[],[[18,[78]]]],[14],[14],[14],[[[77,[[0,[79,75]]]],77],40],[[[76,[80,[0,[80,75]]]],16],58],[[[77,[[0,[80,75]]]],16],58],[[78,16],58],[[]],[[]],[[]],[[],21],[[[76,[75]]],75],[[[76,[75]]]],[[[76,[75]]],81],[[[77,[[0,[82,75]]]]]],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[[[76,[75]]],[[18,[[5,[[77,[75]]]],83]]]],[[[42,[75]]],[[76,[75]]]],[[[77,[75]]],18],[78,18],[[],36],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],37],[[],37],[[],37],[[[76,[75]],75,84],[[18,[84,83]]]],[[[77,[75]]],81],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[85,81,81,81,81],[[18,[40,83]]]],[86,86],[87,87],[85,85],[[[88,[6,6]]],[[88,[6,6]]]],[89,89],[90,90],[[]],[[]],[[]],[[]],[[]],[[]],[88,[[39,[88]]]],0,[[[42,[85]]],86],[[],90],[21],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[[],[[18,[87]]]],[[],[[18,[85]]]],[[],[[18,[88]]]],[[],[[18,[90]]]],0,[14],[14],[14],[14],[14],[14],[[85,85],40],[[88,88],40],[[89,89],40],[[[87,[80,80,80]],16],58],[[85,16],58],[[88,16],58],[[89,16],58],[[90,16],58],[[]],[[]],[[]],[[]],[[]],[[]],[44,[[5,[85]]]],[[],85],[[],85],[21],[[]],[21],[87,81],[[],21],[[],21],[[],21],[86,85],[89,[[92,[91]]]],[[81,81,81],[[18,[83]]]],[[87,85],[[5,[81]]]],[86],[86,81],[85],[88],[89],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[86,[[18,[5,83]]]],0,0,[87,18],[85,18],[88,18],[90,18],[[],93],0,[[],36],[85,44],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[85,93],40],[[86,85,84],[[18,[84,83]]]],[88,81],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[85]],90],86],0,0,0,0,0,0,0,0,[[[94,[7]],[42,[[62,[7]]]]],[[64,[[25,[63]]]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[95,[7]],[65,[7]]],[[64,[[25,[63]]]]]],[[[96,[7]],[65,[7]]],[[64,[[25,[63]]]]]],[[[97,[7]],[65,[7]]],[[64,[[25,[63]]]]]],[[[98,[7]],[65,[7]]],[[64,[[25,[63]]]]]],[[[95,[7]]],[[64,[[25,[63]]]]]],[[[96,[7]]],[[64,[[25,[63]]]]]],[[[97,[7]]],[[64,[[25,[63]]]]]],[[[98,[7]]],[[64,[[25,[63]]]]]],[[[94,[7]]],[[64,[[25,[63]]]]]],[[[95,[[0,[6,7]]]]],[[95,[[0,[6,7]]]]]],[[[96,[[0,[6,7]]]]],[[96,[[0,[6,7]]]]]],[99,99],[[[97,[[0,[6,7]]]]],[[97,[[0,[6,7]]]]]],[[[98,[[0,[6,7]]]]],[[98,[[0,[6,7]]]]]],[[[94,[[0,[6,7]]]]],[[94,[[0,[6,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[94,[7]]],[[64,[[25,[63]]]]]],[[[25,[24]],42,100],[[95,[7]]]],[[[98,[7]],[0,[101,80]]],[[18,[33]]]],[[[25,[24]],100]],[[[98,[7]]],14],[[],[[102,[[94,[7]]]]]],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[[[95,[7]]],[[64,[[25,[63]]]]]],[[[96,[7]]],[[64,[[25,[63]]]]]],[[[97,[7]]],[[64,[[25,[63]]]]]],[[[98,[7]]],[[64,[[25,[63]]]]]],[14],[[[95,[7]]]],[14],[14],[14],[14],[14],[14],[[[95,[[0,[80,7]]]],16],58],[[[96,[7]],16],58],[[99,16],58],[[[103,[7]],16],58],[[[97,[7]],16],58],[[[98,[7]],16],58],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[98,[7]],104],[[5,[[42,[[105,[[18,[33]]]]]]]]]],[[14,14],[[25,[106]]]],[[14,14],[[25,[106]]]],[[14,14],[[25,[106]]]],[[14,14],[[25,[106]]]],[[[94,[7]]],[[64,[[25,[63]]]]]],[[[95,[7]]],107],[[[94,[7]]],[[64,[[25,[63]]]]]],[[[95,[7]],[0,[68,69,70]]],[[64,[[25,[63]]]]]],[[[96,[7]],[0,[68,69,70]]],[[64,[[25,[63]]]]]],[[[97,[7]],[0,[68,69,70]]],[[64,[[25,[63]]]]]],[[[98,[7]],[0,[68,69,70]]],[[64,[[25,[63]]]]]],[[[95,[7]]],[[5,[14]]]],[[[96,[7]]],[[5,[14]]]],[[[97,[7]]],[[5,[14]]]],[[[98,[7]]],[[5,[14]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[[[95,[7]]],[[64,[[25,[63]]]]]],[[[96,[7]]],[[64,[[25,[63]]]]]],[[[97,[7]]],[[64,[[25,[63]]]]]],[[[98,[7]]],[[64,[[25,[63]]]]]],[[[95,[7]],[65,[7]]],[[64,[[25,[63]]]]]],[[[96,[7]],[65,[7]]],[[64,[[25,[63]]]]]],[[[97,[7]],[65,[7]]],[[64,[[25,[63]]]]]],[[[98,[7]],[65,[7]]],[[64,[[25,[63]]]]]],[[[95,[7]]],[[64,[[25,[63]]]]]],[[[96,[7]]],[[64,[[25,[63]]]]]],[[[97,[7]]],[[64,[[25,[63]]]]]],[[[98,[7]]],[[64,[[25,[63]]]]]],[[[25,[24]],108,[28,[[109,[42]]]],14,14],[[18,[[96,[7]],33]]]],[[],[[28,[[103,[7]]]]]],[[[25,[24]],[28,[[103,[7]]]],[5,[[28,[110]]]]],[[97,[7]]]],[[15,111,[5,[72]]],[[18,[[98,[7]],33]]]],[[],[[94,[7]]]],[[[95,[7]]],[[64,[[25,[63]]]]]],[[[96,[7]]],[[64,[[25,[63]]]]]],[[[97,[7]]],[[64,[[25,[63]]]]]],[[[98,[7]]],[[64,[[25,[63]]]]]],[[[95,[7]]],[[64,[[25,[63]]]]]],[[[96,[7]]],[[64,[[25,[63]]]]]],[[[97,[7]]],[[64,[[25,[63]]]]]],[[[98,[7]]],[[64,[[25,[63]]]]]],[[[95,[7]],[28,[71]]],[[64,[[25,[63]]]]]],[[[96,[7]],[28,[71]]],[[64,[[25,[63]]]]]],[[[97,[7]],[28,[71]]],[[64,[[25,[63]]]]]],[[[98,[7]],[28,[71]]],[[64,[[25,[63]]]]]],[[[95,[7]],[0,[68,69,70]],[0,[68,69,70]]],[[64,[[25,[63]]]]]],[[[96,[7]],[0,[68,69,70]],[0,[68,69,70]]],[[64,[[25,[63]]]]]],[[[97,[7]],[0,[68,69,70]],[0,[68,69,70]]],[[64,[[25,[63]]]]]],[[[98,[7]],[0,[68,69,70]],[0,[68,69,70]]],[[64,[[25,[63]]]]]],[[[95,[7]]],[[64,[[25,[63]]]]]],[[[96,[7]]],[[64,[[25,[63]]]]]],[[[97,[7]]],[[64,[[25,[63]]]]]],[[[98,[7]]],[[64,[[25,[63]]]]]],[[[95,[7]]],40],[99,72],[99,40],[[[95,[7]],112]],[[[95,[7]]],[[64,[[25,[63]]]]]],[[[96,[7]]],[[64,[[25,[63]]]]]],[[[97,[7]]],[[64,[[25,[63]]]]]],[[[98,[7]]],[[64,[[25,[63]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[96,[7]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[[26,[7,[8,[7]]]]],[[18,[[42,[[113,[7]]]],[3,[7]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[113,113],[114,114],[65,65],[[[26,[7,[8,[7]]]]],[[26,[7,[8,[7]]]]]],[115,115],[116,116],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[7,[8,[7]]]]],[[18,[[3,[7]]]]]],0,0,[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[14],[[],[[18,[65]]]],[[],[[18,[115]]]],[[],[[18,[116]]]],[14],[14],[14],[14],[14],[14],0,[[65,65],40],[[115,115],40],[[116,116],40],0,[[113,16],[[18,[17]]]],[[114,16],[[18,[17]]]],[[65,16],[[18,[17]]]],[[115,16],[[18,[17]]]],[[116,16],[[18,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[44,5],[[]],[21],[[[26,[7,[8,[7]]]]]],[[[26,[7,[8,[7]]]]],[[20,[7]]]],[[[26,[7,[8,[7]]]]]],[[[26,[7,[8,[7]]]]],[[5,[14]]]],[[[26,[7,[8,[7]]]]],21],[[[26,[7,[8,[7]]]]]],[[[26,[7,[8,[7]]]]],[[5,[14]]]],[[[26,[7,[8,[7]]]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],0,0,0,0,[[[26,[7,[8,[7]]]]]],[[[26,[7,[8,[7]]]]],[[18,[[113,[7]],[3,[7]]]]]],[[[26,[7,[8,[7]]]],[34,[7]]]],[[[26,[7,[8,[7]]]],[34,[7]]]],0,[65,18],[115,18],[116,18],[[[26,[7,[8,[7]]]]]],[[],93],[[[26,[7,[8,[7]]]],39],93],[[[26,[7,[8,[7]]]],39]],0,[[[26,[7,[8,[7]]]]]],[[[26,[7,[8,[7]]]]]],[[[26,[7,[8,[7]]]]]],[[[26,[7,[8,[7]]]]],[[18,[[3,[7]]]]]],[[],44],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[26,[7,[8,[7]]]]],[[18,[[5,[[113,[7]]]],[3,[7]]]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[93,40],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[117,117],[118,118],[[]],[[]],[[117,117],55],[[118,118],55],[14],[14],[14],[14],[[],[[18,[117]]]],[[],[[18,[118]]]],[14],[14],[[117,117],40],[[118,118],40],[[117,16],[[18,[17]]]],[[118,16],[[18,[17]]]],[[118,16],[[18,[17]]]],[[]],[[]],[[],[[5,[117]]]],[44,[[5,[118]]]],[[],118],[15,[[18,[117,36]]]],[15,[[18,[118,36]]]],[[],117],[[],117],[21],[21,117],[21],[[],21],[118],[[],22],[[],22],[[],14],[[],14],[[]],[[]],[[[25,[27]]],[[25,[1,27]]]],[[[25,[27]]],[[25,[1,27]]]],[28,[[28,[1]]]],[28,[[28,[1]]]],[29,[[29,[1]]]],[29,[[29,[1]]]],[[117,117],[[5,[55]]]],[[118,118],[[5,[55]]]],[117,18],[118,18],[[],93],[117,[[42,[119,27]]]],[118,44],[[]],[[]],[[],36],[[],36],[117,120],[118,120],[[],18],[[],18],[[],18],[[],18],[[],37],[[],37],[[118,93],40],[[]],[[]]],"p":[[8,"Any"],[8,"Error"],[4,"HotShotError"],[3,"Backtrace"],[4,"Option"],[8,"Clone"],[8,"NodeTypes"],[8,"NodeImplementation"],[3,"HotShot"],[3,"SendToTasks"],[3,"RwLockUpgradableReadGuard"],[3,"ViewQueue"],[3,"RwLockWriteGuard"],[15,"usize"],[15,"str"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"HotShotInitializer"],[3,"Leaf"],[15,"u64"],[3,"IndentedSection"],[3,"HotShotConfig"],[8,"Metrics"],[3,"Box"],[3,"HotShotHandle"],[3,"Global"],[3,"Arc"],[3,"Rc"],[3,"Demand"],[4,"MessageKind"],[8,"Into"],[4,"NetworkError"],[4,"ConsensusMessage"],[3,"UnboundedSender"],[3,"String"],[3,"TypeId"],[3,"QuorumCertificate"],[3,"Commitment"],[15,"bool"],[3,"StoredView"],[3,"Vec"],[15,"i128"],[3,"EncodedPublicKey"],[4,"DEntryBlock"],[3,"DEntryState"],[4,"DEntryError"],[3,"Subtraction"],[3,"Addition"],[3,"DEntryTransaction"],[3,"DEntryGenesisBlock"],[3,"DEntryNormalBlock"],[3,"DEntryTypes"],[3,"DEntryNode"],[4,"Ordering"],[3,"HashSet"],[8,"RngCore"],[6,"Result"],[6,"Account"],[6,"Balance"],[3,"BTreeMap"],[4,"ViewEntry"],[8,"Future"],[3,"Pin"],[3,"Message"],[3,"RandomState"],[4,"NetworkNodeHandleError"],[8,"Serialize"],[8,"Send"],[8,"Sync"],[3,"AtomicBool"],[3,"Duration"],[3,"DummyState"],[4,"DummyTransaction"],[8,"SignatureKey"],[3,"GeneralStaticCommittee"],[3,"StaticVoteToken"],[3,"StaticElectionConfig"],[8,"PartialEq"],[8,"Debug"],[3,"NonZeroU64"],[8,"Hash"],[4,"ElectionError"],[4,"Checked"],[3,"JfPubKey"],[3,"VrfImpl"],[3,"VRFStakeTable"],[3,"VRFVoteToken"],[3,"BinomialQuery"],[3,"VRFStakeTableConfig"],[3,"BigUint"],[3,"Ratio"],[3,"EncodedSignature"],[3,"MemoryStorage"],[3,"CentralizedServerNetwork"],[3,"Libp2pNetwork"],[3,"MemoryNetwork"],[3,"WNetwork"],[3,"DummyReliability"],[4,"SocketAddr"],[8,"ToSocketAddrs"],[6,"StorageResult"],[3,"MasterMap"],[3,"Sender"],[6,"BoxFuture"],[8,"Fn"],[15,"u32"],[3,"NetworkNodeConfig"],[3,"RwLock"],[8,"NetworkReliability"],[15,"u16"],[3,"RunResults"],[3,"Event"],[4,"EventType"],[3,"TimedOut"],[3,"Vote"],[3,"Ed25519Priv"],[3,"Ed25519Pub"],[15,"u8"],[3,"TaggedBase64"],[3,"HotShotInner"],[13,"Misc"],[13,"InvalidState"],[13,"InsufficientValidSignatures"],[13,"StorageError"],[13,"TimeoutError"],[13,"FailedToMessageLeader"],[13,"FailedToBroadcast"],[13,"NetworkFault"],[13,"ViewTimeoutError"],[13,"Genesis"],[13,"Normal"],[8,"State"],[8,"Block"],[8,"Storage"],[8,"NetworkingImplementation"],[13,"Other"],[13,"SocketDecodeError"],[13,"NoSocketsError"],[13,"FailedToSerialize"],[13,"FailedToDeserialize"],[13,"WebSocket"],[13,"ExecutorError"],[13,"FailedToBindListener"],[13,"Timeout"],[13,"ChannelDisconnected"],[13,"UnboundedChannelDisconnected"],[13,"Error"],[13,"Decide"],[13,"ReplicaViewTimeout"],[13,"NextLeaderViewTimeout"],[13,"ViewFinished"]]},\
"libp2p_networking":{"doc":"Library for p2p communication","t":[0,0,0,3,11,11,11,11,12,11,11,11,11,11,12,11,11,12,11,11,11,11,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,2,13,4,4,3,3,3,4,3,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,11,0,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,5,11,11,11,11,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,3,3,4,4,13,13,13,3,13,13,3,13,4,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,4,3,13,13,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,3,3,3,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,3,4,13,3,13,3,13,13,3,4,13,3,13,3,4,13,3,13,3,13,3,13,3,13,3,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["message","network","reexport","Message","borrow","borrow_mut","clone","clone_into","content","deserialize","eq","fmt","from","into","sender","serialize","to_owned","topic","try_from","try_into","type_id","vzip","AddKnownPeers","BeginBootstrap","Bootstrap","CantKillTwice","ClientRequest","Conductor","ConnectTimeout","DHTError","DHTEvent","DMEvent","DeserializationError","DirectRequest","DirectRequest","DirectResponse","DirectResponse","GetConnectedPeerNum","GetConnectedPeers","GetDHT","GetRoutingTable","GossipEvent","GossipMsg","GossipMsg","IdentifyEvent","IgnorePeers","IsBootstrapped","Killed","LookupPeer","MeshParams","NetworkDef","NetworkError","NetworkError","NetworkEvent","NetworkEventInternal","NetworkNode","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeType","NodeConfigError","Prune","PutDHT","ReceiverEnded","RecvError","Regular","SendError","SerializationError","Shutdown","Subscribe","TimeoutError","UninitializedField","Unsubscribe","ValidationError","add_address","add_direct_request","add_direct_response","add_known_peers","add_known_peers","addresses_of_peer","as_error_source","as_error_source","backtrace","begin_bootstrap","behaviours","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","build","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","connected_pids","connected_pids","default","default","default","default","description","deserialize","deserialize_msg","dht","direct_request","direct_response","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","gen_multiaddr","gen_transport","get_random_handle","get_record","get_record","get_record_timeout","gossip","header","header","id","identity","identity","ignore_peers","in_current_span","in_current_span","into","into","into","into","into","into","into","into","into","into","into","into","is_killed","listen_addr","lookup_pid","mesh_n","mesh_n_high","mesh_n_low","mesh_outbound_min","mesh_params","mesh_params","modify_state","network_node_handle_error","new","new","new","new_handler","node_type","node_type","notify_webui","num_connected","num_connected","on_connection_handler_event","on_swarm_event","peer_id","peer_id","poll","print_routing_table","provide","provide","prune_peer","publish_gossip","put_record","put_record","put_record_timeout","receiver","register_webui_listener","replication_factor","replication_factor","request_response","serialize","serialize_msg","shutdown","source","spawn_handler","spawn_listeners","spin_up_swarm","start_listen","state","state_wait_timeout_until","state_wait_timeout_until_with_trigger","state_wait_until","subscribe","subscribe_gossip","to_connect_addrs","to_connect_addrs","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsubscribe","unsubscribe_gossip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_to_connect","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","contents","key","key","notify","notify","pid","retry_count","retry_count","value","0","0","0","1","1","1","2","0","0","0","0","0","0","source","source","source","source","source","source","source","source","dht","direct_message","direct_message_codec","exponential_backoff","gossip","Bootstrap","DHTBehaviour","DHTEvent","DHTProgress","Finished","InProgress","IsBootstrapped","KadPutQuery","NotStarted","NotStarted","RandomWalk","Started","State","add_address","add_bootstrap_nodes","addresses_of_peer","backoff","begin_bootstrap","begin_bootstrap","bootstrap_nodes","bootstrap_state","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","event_queue","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_hash","get_record","hash","in_progress_get_closest_peers","into","into","into","into","into","into","into","kadem","lookup_peer","new","new_handler","on_connection_handler_event","on_swarm_event","peer_id","poll","print_routing_table","put_record","query_closest_peers","random_walk","replication_factor","state","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","DMBehaviour","DMEvent","DMRequest","DirectRequest","DirectResponse","add_address","add_direct_request","add_direct_response","addresses_of_peer","backoff","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","fmt","from","from","from","into","into","into","new","new_handler","on_connection_handler_event","on_swarm_event","peer_id","poll","remove_address","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","1","1","2","0","0","DirectMessageCodec","DirectMessageProtocol","DirectMessageRequest","DirectMessageResponse","MAX_MSG_SIZE_DM","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","protocol_name","read_request","read_response","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_request","write_response","ExponentialBackoff","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","get_hash","hash","into","is_expired","new","reset","start_next","to_owned","try_from","try_into","type_id","vzip","GossipBehaviour","GossipEvent","GossipMsg","addresses_of_peer","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drain_publish_gossips","eq","fmt","from","from","into","into","new","new_handler","on_connection_handler_event","on_swarm_event","poll","publish_gossip","subscribe_gossip","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unsubscribe_gossip","vzip","vzip","0","1","CancelledRequest","CancelledRequestSnafu","DHTError","DialError","DialSnafu","Disagreement","DisagreementSnafu","GetRecord","GetRecordError","GetRecordSnafu","GetRecordWrapperError","GossipsubBuild","GossipsubBuildSnafu","GossipsubConfig","GossipsubConfigSnafu","NetworkError","NoKnownPeers","NoKnownPeersSnafu","NotFound","NotFoundSnafu","PublishError","PublishSnafu","PutRecord","PutRecordSnafu","StreamClosed","StreamClosedSnafu","Transport","TransportLaunch","TransportLaunchSnafu","TransportSnafu","as_error_source","as_error_source","as_error_source","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","description","description","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","message","message","provide","provide","provide","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","source","source","source","source","message","message","source","source","source","source","NetworkSnafu","NodeConfigSnafu","RecvSnafu","SendSnafu","SerializationSnafu","TimeoutSnafu","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Multiaddr","PeerId","as_bits","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deserialize","deserialize","empty","encode_hex","encode_hex_upper","ends_with","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_iter","from_multihash","from_public_key","from_str","from_str","get_hash","get_hash","hash","hash","header","header","into","into","into_iter","is_empty","is_public_key","iter","len","partial_cmp","partial_cmp","pop","protocol_name","protocol_stack","push","random","replace","serialize","serialize","to_base58","to_bytes","to_owned","to_owned","to_string","to_string","to_vec","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_multiaddr","try_into","try_into","type_id","type_id","vzip","vzip","with","with_capacity"],"q":["libp2p_networking","","","libp2p_networking::message","","","","","","","","","","","","","","","","","","","libp2p_networking::network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::ClientRequest","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::NetworkEvent","","","","","","","libp2p_networking::network::NetworkEventInternal","","","","libp2p_networking::network::NetworkNodeConfigBuilderError","","libp2p_networking::network::NetworkNodeHandleError","","","","","","","","libp2p_networking::network::behaviours","","","","","libp2p_networking::network::behaviours::dht","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::behaviours::dht::DHTProgress","libp2p_networking::network::behaviours::direct_message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::behaviours::direct_message::DMEvent","","","","","libp2p_networking::network::behaviours::direct_message_codec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::behaviours::exponential_backoff","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::behaviours::gossip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::behaviours::gossip::GossipEvent","","libp2p_networking::network::errorlibp2p_networking::network::error::DHTError","","","libp2p_networking::network::error::GetRecordWrapperError","libp2p_networking::network::error::NetworkError","","","","","","libp2p_networking::network::network_node_handle_error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::reexport","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Example message used by the UI library","Network logic","symbols needed to implement a networking instance over …","example message that may be sent to the swarm. Used in the …","","","","","the content of the message","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","the peerid of the sender","","","the topic associated with the msg","","","","","add vec of known peers or addresses","Start the bootstrap process to kademlia","bootstrap node accepts all connections","The inner <code>NetworkNode</code> has already been killed","Actions to send from the client to the swarm","conductor node is never pruned","Could not connect to the network in time","Error in the kademlia DHT","a DHT event","a direct message event","Failure to deserialize a message","client request to send a direct serialized message","Recv-ed a direct message from a node","client request to send a direct reply to a message","Recv-ed a direct response from a node (that hopefully was …","Request the number of connected peers","Request the set of connected peers","Get(Key, Chan)","Print the routing  table to stderr, debugging only","a gossip  event","broadcast a serialized message","Recv-ed a broadcast","a identify event. Is boxed because this event is much …","Ignore peers. Only here for debugging purposes. Allows us …","Report that kademlia has successfully bootstrapped into …","The network node has been killed","Get address of peer","NOTE: …","Overarching network behaviour performing:","","Error generating network","events generated by the swarm that we wish to relay to the …","internal representation of the network events only used …","Network definition","describe the configuration of the network","Builder for <code>NetworkNodeConfig</code>.","Error type for NetworkNodeConfigBuilder","A handle containing:","Error wrapper type for interacting with swarm handle","this is mostly to estimate how many network connections a …","Error building Node config","prune a peer","Put(Key, Value) into DHT relay success back on channel","The receiver was unable to receive a new message","Error receiving message from network","regular node has a limit to the number of connections to …","Error sending request to network","Failure to serialize a message","kill the swarm","subscribe to a topic","Error waiting for connections","Uninitialized field","unsubscribe from a topic","Custom validation error","Add an address","Add a direct request for a given peer","Add a direct response for a channel","Tell libp2p about known network nodes","initialize the DHT with known peers add the peers to …","","","","","Notify the network to begin the bootstrap process","networking behaviours wrapping libp2p’s behaviours","","","","","","","","","","","","","","","","","","","","","","","","","address to bind to","address to bind to","Builds a new <code>NetworkNodeConfig</code>.","","","","","","","","","","Return a reference to the network config","return hashset of PIDs this node is connected to","return hashset of PIDs this node is connected to","","","","","","","Deserialize an arbitrary message","purpose: peer routing purpose: storing pub key &lt;-&gt; peer id …","Make a direct request to <code>peer_id</code> containing <code>msg</code>","Reply with <code>msg</code> to a request over <code>chan</code>","","Contains the <code>NetworkError</code> snafu types","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Bind all interfaces on port <code>port</code> NOTE we may want …","Generate authenticated transport, copied from …","Given a slice of handles assumed to be larger than 0, …","Retrieve a value for a key from the DHT. Value …","Receive a record from the kademlia DHT if it exists. Must …","Get a record from the kademlia DHT with a timeout","Gossip a message to peers","","","Get a reference to the network node handle’s id.","optional identity","optional identity","Ignore <code>peers</code> when pruning e.g. maintain their connection","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the network state is killed","Get a reference to the network node handle’s listen addr.","Look up a peer’s addresses in kademlia NOTE: this should …","mesh_n from gossipsub","mesh_n_high from gossipsub","mesh_n_low from gossipsub","mesh_outbound_min from gossipsub","parameters for gossipsub mesh network","parameters for gossipsub mesh network","Modify the state. This will automatically call …","Re-exports of the snafu errors that <code>NetworkNodeHandleError</code> …","Create a new instance of a <code>NetworkDef</code>","constructs a new node listening on <code>known_addr</code>","Creates a new <code>Network</code> with the given settings.","","The type of node (bootstrap etc)","The type of node (bootstrap etc)","Notify the webui that either the <code>state</code> or <code>connection_state</code> …","Returns number of peers this node is connected to","Returns number of peers this node is connected to","","","Get a reference to the network node handle’s peer id.","Get a reference to the network node’s peer id.","","Print out the routing table used by kademlia NOTE: only …","","","Forcefully disconnet from a peer","Publish a given gossip","Publish a key/value to the kv store. Once replicated upon …","Insert a record into the kademlia DHT","Insert a record into the kademlia DHT with a timeout","Receives a reference of the internal <code>NetworkNodeReceiver</code>, …","Register a webui listener","replication factor for entries in the DHT default is …","replication factor for entries in the DHT default is …","purpose: directly messaging peer","","Serialize an arbitrary message","Cleanly shuts down a swarm node This is done by sending a …","","Spawn a handler <code>F</code> that will be notified every time a new …","Spawn a task to listen for requests on the returned channel","a single node, connects them to each other and waits for …","starts the swarm listening on <code>listen_addr</code> and optionally …","Get a clone of the internal state","Call <code>wait_timeout_until</code> on the state’s <code>SubscribableMutex</code>","Call <code>wait_timeout_until_with_trigger</code> on the state’s …","Call <code>wait_until</code> on the state’s <code>SubscribableMutex</code>","Subscribe to a topic","Subscribe to a given topic","list of addresses to connect to at initialization","list of addresses to connect to at initialization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsubscribe from a topic","Unsubscribe from a given topic","","","","","","","","","","","","","Wait until at least <code>num_peers</code> have connected, or until …","","","","","","","","","","","","","","","","","msg contents","Key to publish under","Key to search for","Channel to notify caller of result of publishing","Channel to notify caller of value (or failure to find …","peer id","number of retries","number of retries to make","Value to publish under","","","","","","","","","","","","","","source of error","source of error","source of error","source of error","source of error","source of error","dummy source","source of error","Wrapper around Kademlia","Wrapper around <code>RequestResponse</code>","Implementation of a codec for sending messages for …","exponential backoff type","Wrapper around gossipsub","State of bootstrapping","Behaviour wrapping libp2p’s kademlia included:","DHT event enum","represents progress through DHT","Sucessfully completed","The query has been started","Only event tracked currently is when we successfully …","Metadata holder for get query","Not in progress","The query has not been started","State of the periodic random walk","In progress","State used for random walk and bootstrapping","Passthru to kademlia Associate address with kademlia peer","Save in case kademlia forgets about bootstrap nodes","","Retry timeout","Begin the bootstrap process","client approval to begin bootstrap","bootstrap nodes","State of bootstrapping","","","","","","","","","","","","","","","","","","","","","","","","","","List of kademlia events","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Retrieve a value for a key from the DHT. Value …","","in progress queries for nearby peers","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Kademlia behaviour","query a peer (e.g. obtain its address if it exists)","Create a new DHT behaviour","","","","the peer id (useful only for debugging right now)","","print out the routing table to stderr","Publish a key/value to the kv store. Once replicated upon …","Start a query for the closest peers","State of last random walk","replication factor","State of bootstrap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper metadata around libp2p’s request response usage: …","Lilst of direct message output events","Request to direct message a peert","We received as Direct Request","We received a Direct Response","Add address to request response behaviour","Add a direct request for a given peer","Add a direct response for a channel","","backoff since last attempted request","","","","","","","the data","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new behaviour based on request response","","","","the recv-ers peer id","","Remove address from request response behaviour","","","","","","","","","","","","","","","","","","","","Codec for direct messages","Protocol for direct messages","Wrapper type describing a serialized direct message","wrapper type describing the response to direct message","Maximum size of a direct message","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Track (with exponential backoff) sending of some sort of …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Whether or not the timeout is expired","Create new backoff","reset backoff","start next timeout result: whether or not we succeeded if …","","","","","","wrapper metadata around libp2p’s gossip protocol","Output event","We received a gossip","","","","","","","","Attempt to drain the internal gossip list, publishing each …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new gossip behavioru based on gossipsub","","","","","Publish a given gossip","Subscribe to a given topic","","","","","","","","Unsubscribe from a given topic","","","","","request was ignored serverside","SNAFU context selector for the <code>DHTError::CancelledRequest</code> …","Error enum for querying store because for some reason, …","Error initiating dial of peer","SNAFU context selector for the <code>NetworkError::DialError</code> …","nodes disagreed on the value","SNAFU context selector for the <code>DHTError::Disagreement</code> …","Get Record Error","wrapper","SNAFU context selector for the <code>DHTError::GetRecord</code> variant","Wrapper Error enum for <code>libp2p::kad::GetRecordError</code>. …","Error building the gossipsub instance","SNAFU context selector for the <code>NetworkError::GossipsubBuild</code>…","Error building the gossipsub configuration","SNAFU context selector for the …","wrapper type for errors generated by the <code>Network</code>","Error when there are no known peers to bootstrap off","SNAFU context selector for the <code>NetworkError::NoKnownPeers</code> …","could not find 2 or more nodes that had the value","SNAFU context selector for the <code>DHTError::NotFound</code> variant","Error publishing a gossipsub message","SNAFU context selector for the <code>NetworkError::PublishError</code> …","Get Record Error","SNAFU context selector for the <code>DHTError::PutRecord</code> variant","Error if one of the channels to or from the swarm is closed","SNAFU context selector for the <code>NetworkError::StreamClosed</code> …","Error during dialing or listening","Error establishing backend connection","SNAFU context selector for the …","SNAFU context selector for the <code>NetworkError::Transport</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","source of error","source of error","source of error","source of error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Representation of a Multiaddr.","Identifier of a peer of the network.","","","","","","","","","","","","","","","","Create a new, empty multiaddress.","","","Checks whether the given <code>Multiaddr</code> is a suffix of this …","","","Convert a Multiaddr to a string","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Parses a <code>PeerId</code> from bytes.","","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.","Builds a <code>PeerId</code> from a public key.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the length of this multiaddress is 0.","Checks whether the public key passed as parameter matches …","Returns the components of this multiaddress.","Return the length in bytes of this multiaddress.","","","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …","","Returns &amp;str identifiers for the protocol names themselves.","Adds an already-parsed address component to the end of …","Generates a random peer ID from a cryptographically secure …","Replace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.","","","Returns a base-58 encoded string of this <code>PeerId</code>.","Returns a raw bytes representation of this <code>PeerId</code>.","","","","","Return a copy of this <code>Multiaddr</code>’s byte representation.","","","","","","","","","Tries to extract a <code>PeerId</code> from the given <code>Multiaddr</code>.","","","","","","","Like <code>Multiaddr::push</code> but consumes <code>self</code>.","Create a new, empty multiaddress with the given capacity."],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,32,32,26,15,0,26,15,15,34,34,15,32,33,32,33,32,32,32,32,34,32,33,34,32,33,15,32,0,0,0,15,0,0,0,0,0,0,0,0,0,15,32,32,15,15,26,15,15,32,32,15,24,32,24,7,7,7,14,16,7,24,15,15,14,0,7,23,22,24,25,14,15,16,26,32,33,34,7,23,22,24,25,14,15,16,26,32,33,34,22,23,22,15,23,22,25,26,23,22,25,26,14,14,16,23,22,25,26,15,26,0,7,14,14,26,0,7,23,24,24,25,14,15,15,16,26,32,33,34,7,23,22,24,24,24,25,14,15,16,26,32,33,34,34,34,34,34,26,0,0,0,7,14,14,14,24,15,14,22,23,14,24,15,7,23,22,24,25,14,15,16,26,32,33,34,14,14,14,25,25,25,25,22,23,14,0,7,14,16,7,22,23,14,14,16,7,7,14,16,7,14,24,15,14,7,7,14,14,14,14,22,23,7,26,0,14,15,14,16,0,16,14,14,14,14,14,7,22,23,23,22,25,26,24,15,7,23,22,24,25,14,15,16,26,32,33,34,7,23,22,24,25,14,15,16,26,32,33,34,7,23,22,24,25,14,15,16,26,32,33,34,14,7,7,23,22,24,25,14,15,16,26,32,33,34,14,122,123,124,125,126,127,128,129,130,131,132,122,123,124,125,132,133,134,135,134,135,133,133,135,134,136,137,138,136,137,138,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,0,0,0,0,0,0,0,0,0,72,73,39,0,72,73,0,72,0,54,54,54,71,54,54,54,54,54,153,71,72,39,64,73,54,153,71,72,39,64,73,71,72,39,73,71,72,39,73,72,39,73,54,71,72,39,64,73,54,153,71,72,39,64,73,73,54,73,54,54,153,71,72,39,64,73,54,54,54,54,54,54,54,54,54,54,54,54,54,71,71,72,39,73,54,153,71,72,39,64,73,54,153,71,72,39,64,73,54,153,71,72,39,64,73,54,153,71,72,39,64,73,154,0,0,0,40,40,56,56,56,56,78,78,56,40,78,56,40,78,40,78,56,40,78,56,40,56,56,56,56,78,56,56,78,56,40,78,56,40,78,56,40,78,56,40,155,156,155,156,155,82,12,0,0,0,0,0,81,79,82,12,81,79,82,12,81,79,82,12,81,79,82,12,79,82,12,81,79,82,12,81,79,82,12,81,79,82,12,81,79,79,79,81,79,82,12,81,79,82,12,81,79,82,12,81,79,82,12,81,79,82,12,79,79,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,37,53,53,37,53,37,37,37,53,37,37,53,37,53,37,53,53,53,53,53,53,53,37,53,37,53,37,53,37,53,53,37,157,157,86,0,0,44,0,86,0,86,100,0,0,44,0,44,0,0,44,0,86,0,44,0,86,0,44,0,44,44,0,0,44,86,100,44,86,93,94,95,87,88,89,96,90,44,97,98,91,92,99,86,100,93,94,95,87,88,89,96,90,44,97,98,91,92,99,86,100,87,88,89,90,91,92,44,86,93,94,95,87,88,89,96,90,97,98,91,92,99,86,100,93,94,95,87,88,89,96,90,97,98,91,92,99,86,100,44,86,87,88,89,90,91,92,93,94,95,87,88,89,96,90,44,44,97,98,91,92,99,86,86,100,100,93,94,95,87,88,89,96,90,44,97,98,91,92,99,86,100,44,86,100,44,86,100,93,94,95,87,88,89,96,90,44,97,98,91,92,99,86,100,93,94,95,87,88,89,96,90,97,98,91,92,99,87,88,44,86,100,44,86,93,94,95,87,88,89,96,90,97,98,91,92,99,86,100,44,86,100,93,94,95,87,88,89,96,90,44,97,98,91,92,99,86,100,93,94,95,87,88,89,96,90,44,97,98,91,92,99,86,100,93,94,95,87,88,89,96,90,44,97,98,91,92,99,86,100,93,94,95,87,88,89,96,90,44,97,98,91,92,99,86,100,158,159,160,161,162,163,164,165,166,167,0,0,0,0,0,0,103,104,101,102,105,106,103,104,101,102,105,106,101,102,103,104,101,102,105,106,103,104,101,102,105,106,101,102,103,104,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,103,104,101,102,105,106,0,0,9,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,9,9,9,9,8,9,9,8,8,9,9,9,9,9,8,8,8,8,9,8,8,9,8,9,8,9,8,9,8,9,8,9,9,8,9,9,9,8,9,9,9,9,8,9,9,8,8,8,9,8,9,8,9,9,9,9,9,9,8,8,8,8,9,8,9,8,9,8,9,9],"f":[0,0,0,0,[[]],[[]],[1,1],[[]],0,[[],[[2,[1]]]],[[1,1],3],[[1,4],5],[[]],[[]],0,[1,2],[[]],0,[[],2],[[],2],[[],6],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[7,8,9]],[[7,8,[11,[10]],10]],[[7,[13,[12]],[11,[10]]]],[[14,11],[[2,[15]]]],[16],[[7,8],[[11,[9]]]],[[],17],[[],17],[15,[[19,[18]]]],[[[14,[[0,[20,21]]]]],[[2,[15]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[22,[19,[9]]],22],0,[22,[[2,[23,24]]]],[15,[[19,[17]]]],[23,23],[22,22],[25,25],[26,26],[[]],[[]],[[]],[[]],[14,23],[14,[[2,[[27,[8]],15]]]],[16,[[27,[8]]]],[[],23],[[],22],[[],25],[[],26],[15,28],[[],[[2,[26]]]],[[],[[2,[29,[31,[30]]]]]],0,[[14,8],[[2,[15]]]],[[14,[13,[12]]],[[2,[15]]]],[[26,26],3],0,[[7,4],5],[[23,4],5],[[24,4],5],[[24,4],5],[[25,4],5],[[[14,[21]],4],5],[[15,4],5],[[15,4],5],[[16,4],5],[[26,4],5],[[32,4],5],[[33,4],5],[[34,4],5],[[]],[[]],[[]],[35,24],[36,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,34],[38,34],[39,34],[40,34],[28,[[2,[26]]]],[41,9],[42,[[2,[43,44]]]],[45,[[46,[14]]]],[[7,[11,[10]],[47,[[11,[10]]]],48,10]],[[14,10],[[2,[29,15]]]],[[14,49],[[2,[29,15]]]],[[14,35],[[2,[15]]]],[[],50],[[],50],[14,51],[[22,[52,[42]]],22],0,[[14,[11,[8]]],[[2,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,3],[[[14,[[0,[20,21]]]]],9],[[14,8],[[2,[15]]]],0,0,0,0,[[22,[19,[25]]],22],0,[14],0,[[53,54,55,56],7],[[23,51],[[2,[[14,[[0,[20,21]]]],15]]]],[23,[[2,[16,44]]]],[7],[[22,26],22],0,[14],[14,[[2,[51,15]]]],[16,51],[[7,8,57]],[[7,58]],[14,8],[16,8],[[7,59],[[61,[60]]]],[14,[[2,[15]]]],[62],[62],[[14,8],[[2,[15]]]],[[7,63,[11,[10]]]],[[7,64]],[14,[[2,[15]]]],[[14,49],[[2,[15]]]],0,[14,65],[[22,[52,[48]]],22],0,0,[26,2],[[],[[2,[[11,[10]],[31,[30]]]]]],[[[14,[[0,[20,21]]]]],[[2,[15]]]],[15,[[19,[17]]]],[46,66],[16,[[2,[44]]]],[[49,11,23,51,46],[[2,[15]]]],[[16,9],[[2,[9,44]]]],[[[14,[67]]],67],[[14,49],[[2,[15]]]],[[14,49],[[69,[[68,[66]]]]]],[14,[[2,[15]]]],[[14,35],[[2,[15]]]],[[7,28]],[[22,27],22],0,[[]],[[]],[[]],[[]],[[],35],[[],35],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[14,35],[[2,[15]]]],[[7,28]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[[0,[20,21]]]],51,51,49],[[2,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[54,8,9]],[[54,[70,[8,[27,[9]]]]]],[[54,8],[[11,[9]]]],0,[54],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,71],[72,72],[39,39],[73,73],[[]],[[]],[[]],[[]],[[72,72],3],[[39,39],3],[[73,73],3],0,[[71,4],5],[[72,4],5],[[39,4],5],[[64,4],5],[[73,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],74],[[54,[11,[10]],[47,[[11,[10]]]],48,75,10]],[73],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[54,8,47]],[[[77,[76]],8,48],54],[54],[[54,8,57]],[[54,58]],0,[[54,59],[[61,[60]]]],[54],[[54,64]],[[54,8]],0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[56,8,9]],[[56,78]],[[56,[13,[12]],[11,[10]]]],[[56,8],[[11,[9]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[40,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[[80,[79]]],56],[56],[[56,8,57]],[[56,58]],0,[[56,59],[[61,[60]]]],[[56,8,9]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],6],[[],6],[[],6],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81,81],[79,79],[82,82],[12,12],[[]],[[]],[[]],[[]],[[],[[2,[79]]]],[[82,82],3],[[12,12],3],[[81,4],5],[[79,4],5],[[82,4],5],[[12,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81],[[79,81],[[83,[[31,[66]]]]]],[[79,81],[[83,[[31,[66]]]]]],[79,2],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[79,81,82],[[83,[[31,[66]]]]]],[[79,81,12],[[83,[[31,[66]]]]]],0,[[]],[[]],[75,75],[[]],[[],75],[[75,75],3],[[75,4],5],[[]],[[],74],[75],[[]],[75,3],[[84,49],75],[75],[[75,3]],[[]],[[],2],[[],2],[[],6],[[]],0,0,0,[[53,8],[[11,[9]]]],[[]],[[]],[[]],[[]],[37,37],[[]],[53,3],[[37,37],3],[[37,4],5],[[]],[[]],[[]],[[]],[85,53],[53],[[53,8,57]],[[53,58]],[[53,59],[[61,[60]]]],[[53,63,[11,[10]]]],[[53,28]],[[]],[[],2],[[],2],[[],2],[[],2],[[],6],[[],6],[[53,28]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],17],[[],17],[[],17],[44,[[19,[18]]]],[86,[[19,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[87,44],[88,44],[89,44],[90,44],[91,86],[92,86],[44,[[19,[17]]]],[86,[[19,[17]]]],[93,93],[94,94],[95,95],[[[87,[67]]],[[87,[67]]]],[[[88,[67]]],[[88,[67]]]],[89,89],[96,96],[90,90],[97,97],[98,98],[91,91],[92,92],[99,99],[86,86],[100,100],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,28],[86,28],[87,[[2,[44]]]],[88,[[2,[44]]]],[89,[[2,[44]]]],[90,[[2,[44]]]],[91,[[2,[86]]]],[92,[[2,[86]]]],[[93,4],5],[[94,4],5],[[95,4],5],[[[87,[21]],4],5],[[[88,[21]],4],5],[[89,4],5],[[96,4],5],[[90,4],5],[[44,4],5],[[44,4],5],[[97,4],5],[[98,4],5],[[91,4],5],[[92,4],5],[[99,4],5],[[86,4],5],[[86,4],5],[[100,4],5],[[100,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],50],[[],50],[[],50],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93,44],[94,44],[95,44],[87,44],[88,44],[89,44],[96,44],[90,44],[97,86],[98,86],[91,86],[92,86],[99,86],0,0,[62],[62],[62],[44,[[19,[17]]]],[86,[[19,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],35],[[],35],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[101,15],[102,15],[103,103],[104,104],[101,101],[102,102],[105,105],[106,106],[[]],[[]],[[]],[[]],[[]],[[]],[101,[[2,[15]]]],[102,[[2,[15]]]],[[103,4],5],[[104,4],5],[[101,4],5],[[102,4],5],[[105,4],5],[[106,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[103,15],[104,15],[101,15],[102,15],[105,15],[106,15],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],107],[9],[8,108],[[]],[[]],[[]],[[]],[9,9],[8,8],[[]],[[]],[[9,9],109],[[8,8],109],[[],[[2,[9]]]],[[],[[2,[8]]]],[[],9],[[]],[[]],[[9,9],3],[[9,9],3],[[8,8],3],[[9,4],[[2,[110]]]],[[9,4],[[2,[110]]]],[[8,4],[[2,[110]]]],[[8,4],[[2,[110]]]],[[]],[111,9],[112,9],[113,9],[114,9],[[]],[115,8],[115,8],[[],[[2,[8,116]]]],[[],9],[108,[[2,[8,108]]]],[115,8],[28,[[2,[9,117]]]],[28,[[2,[8]]]],[[],74],[[],74],[9],[8],[[],50],[[],50],[[]],[[]],[9,118],[9,3],[[8,115],[[19,[3]]]],[9,118],[9,51],[[9,9],[[19,[109]]]],[[8,8],[[19,[109]]]],[9,[[19,[112]]]],[[]],[9,119],[[9,112]],[[],8],[[9,51],[[19,[9]]]],[9,2],[8,2],[8,35],[8,[[11,[10,120]]]],[[]],[[]],[[],35],[[],35],[9,[[11,[10,120]]]],[[],[[2,[107,121]]]],[[],2],[35,[[2,[9,117]]]],[28,[[2,[9,117]]]],[[[11,[10,120]]],[[2,[9,117]]]],[108,[[2,[8]]]],[[],2],[[[11,[10,120]]],[[2,[8]]]],[9,[[19,[8]]]],[[],2],[[],2],[[],6],[[],6],[[]],[[]],[[9,112],9],[51,9]],"p":[[3,"Message"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[3,"NetworkDef"],[3,"PeerId"],[3,"Multiaddr"],[15,"u8"],[3,"Vec"],[3,"DirectMessageResponse"],[3,"ResponseChannel"],[3,"NetworkNodeHandle"],[4,"NetworkNodeHandleError"],[3,"NetworkNode"],[8,"Error"],[3,"Backtrace"],[4,"Option"],[8,"Default"],[8,"Debug"],[3,"NetworkNodeConfigBuilder"],[3,"NetworkNodeConfig"],[4,"NetworkNodeConfigBuilderError"],[3,"MeshParams"],[4,"NetworkNodeType"],[3,"HashSet"],[15,"str"],[8,"Deserialize"],[4,"ErrorKind"],[3,"Box"],[4,"ClientRequest"],[4,"NetworkEvent"],[4,"NetworkEventInternal"],[3,"String"],[3,"UninitializedFieldError"],[4,"GossipEvent"],[4,"Event"],[4,"DHTEvent"],[4,"DMEvent"],[15,"u16"],[4,"Keypair"],[3,"Boxed"],[4,"NetworkError"],[8,"RngCore"],[3,"Arc"],[3,"Sender"],[3,"NonZeroUsize"],[3,"Duration"],[3,"IndentedSection"],[15,"usize"],[8,"Into"],[3,"GossipBehaviour"],[3,"DHTBehaviour"],[3,"Behaviour"],[3,"DMBehaviour"],[3,"ConnectionId"],[4,"FromSwarm"],[3,"Context"],[4,"NetworkBehaviourAction"],[4,"Poll"],[3,"Demand"],[6,"IdentTopic"],[3,"KadPutQuery"],[3,"Receiver"],[8,"Future"],[8,"Clone"],[3,"FuturesOrdered"],[3,"Timeout"],[3,"HashMap"],[3,"Bootstrap"],[4,"State"],[4,"DHTProgress"],[15,"u64"],[3,"ExponentialBackoff"],[3,"MemoryStore"],[3,"Kademlia"],[3,"DMRequest"],[3,"DirectMessageCodec"],[3,"RequestResponse"],[3,"DirectMessageProtocol"],[3,"DirectMessageRequest"],[3,"Pin"],[15,"u32"],[3,"Gossipsub"],[4,"DHTError"],[3,"GossipsubConfigSnafu"],[3,"GossipsubBuildSnafu"],[3,"StreamClosedSnafu"],[3,"NoKnownPeersSnafu"],[3,"DisagreementSnafu"],[3,"NotFoundSnafu"],[3,"DialSnafu"],[3,"TransportSnafu"],[3,"TransportLaunchSnafu"],[3,"PublishSnafu"],[3,"GetRecordSnafu"],[3,"PutRecordSnafu"],[3,"CancelledRequestSnafu"],[4,"GetRecordWrapperError"],[3,"SendSnafu"],[3,"RecvSnafu"],[3,"NetworkSnafu"],[3,"SerializationSnafu"],[3,"NodeConfigSnafu"],[3,"TimeoutSnafu"],[3,"BitSlice"],[3,"Multihash"],[4,"Ordering"],[3,"Error"],[3,"Ipv6Addr"],[4,"Protocol"],[3,"Ipv4Addr"],[4,"IpAddr"],[4,"PublicKey"],[4,"Error"],[4,"Error"],[3,"Iter"],[3,"ProtoStackIter"],[3,"Global"],[4,"BitSpanError"],[13,"GossipMsg"],[13,"Subscribe"],[13,"Unsubscribe"],[13,"DirectResponse"],[13,"Prune"],[13,"AddKnownPeers"],[13,"IgnorePeers"],[13,"GetConnectedPeerNum"],[13,"GetConnectedPeers"],[13,"GetRoutingTable"],[13,"LookupPeer"],[13,"DirectRequest"],[13,"PutDHT"],[13,"GetDHT"],[13,"GossipMsg"],[13,"DirectRequest"],[13,"DirectResponse"],[13,"DHTEvent"],[13,"IdentifyEvent"],[13,"GossipEvent"],[13,"DMEvent"],[13,"UninitializedField"],[13,"ValidationError"],[13,"NetworkError"],[13,"SerializationError"],[13,"DeserializationError"],[13,"NodeConfigError"],[13,"TimeoutError"],[13,"DHTError"],[13,"CantKillTwice"],[13,"ReceiverEnded"],[3,"RandomWalk"],[13,"InProgress"],[13,"DirectRequest"],[13,"DirectResponse"],[13,"GossipMsg"],[13,"CancelledRequest"],[13,"GetRecord"],[13,"PutRecord"],[13,"GetRecordError"],[13,"GossipsubConfig"],[13,"GossipsubBuild"],[13,"DialError"],[13,"Transport"],[13,"TransportLaunch"],[13,"PublishError"]]},\
"multi_machine_centralized":{"doc":"","t":[6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,5,12,11,11,11,11,11,11],"n":["Node","NodeOpt","as_any","as_any_mut","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","host","init","init_state_and_hotshot","into","into_any","into_any_arc","into_any_rc","main","port","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":["multi_machine_centralized","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","","","","The address to connect to","","Creates the initial state and hotshot for simulation.","Calls <code>U::from(self)</code>.","","","","","The port to connect to","","","","","",""],"i":[0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,0,4,4,4,4,4,4,4],"f":[0,0,[[],1],[[],1],[2,2],[2,2],[[]],[[]],[[],2],[[],2],[3],[3],[3],[[4,5],6],[[]],[7,[[9,[4,8]]]],[7,[[9,[4,8]]]],[[],[[11,[10]]]],0,[[],3],[[[13,[12]],[16,[14,15]],17]],[[]],[[[19,[18]]],[[19,[1,18]]]],[20,[[20,[1]]]],[21,[[21,[1]]]],[[]],0,[[],9],[[],9],[[],22],[[4,7],[[9,[8]]]],[[4,7],[[9,[8]]]],[[]]],"p":[[8,"Any"],[3,"Command"],[15,"usize"],[3,"NodeOpt"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"DEntryTypes"],[3,"CentralizedServerNetwork"],[6,"BlsPubKey"],[3,"StaticElectionConfig"],[3,"HotShotConfig"],[15,"u64"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"TypeId"]]},\
"multi_machine_libp2p":{"doc":"","t":[17,4,3,3,3,6,6,13,13,6,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,5,5,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["BOOTSTRAPS","CliOpt","CliOrchestrated","CliStandalone","Config","FromServer","Node","Orchestrated","Standalone","ToServer","addr","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","bootstrap_mesh_n","bootstrap_mesh_n","bootstrap_mesh_n_high","bootstrap_mesh_n_high","bootstrap_mesh_n_low","bootstrap_mesh_n_low","bootstrap_mesh_outbound_min","bootstrap_mesh_outbound_min","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","bs","command","command_for_update","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","has_subcommand","identity","init","init","init","init","init","init","init_state_and_hotshot","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","main","mesh_n","mesh_n","mesh_n_high","mesh_n_high","mesh_n_low","mesh_n_low","mesh_outbound_min","mesh_outbound_min","new_libp2p_network","next_view_timeout","next_view_timeout","node_id","node_idx","node_type","num_bootstrap","num_nodes","num_nodes","num_txn_per_round","num_txn_per_round","online_time","online_time","parse_dns","parse_ip","privkey","propose_max_round_time","propose_max_round_time","propose_min_round_time","propose_min_round_time","pubkey","run","seed","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","vzip","vzip","0","0"],"q":["multi_machine_libp2p","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multi_machine_libp2p::CliOpt",""],"d":["bootstrap hardcoded metadata","","","","","","","","","","The orchestrator host to connect to","","","","","","","","","","","","","","","","bootstrap node mesh n","","bootstrap node mesh high","","bootstrap node mesh low","","bootstrap node outbound min","","","","","","","","","","address to bind to","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Creates the initial state and hotshot for simulation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","bootstrap node mesh n","","bootstrap node mesh high","","bootstrap node mesh low","","bootstrap node outbound min","","","next view timeout","","Id of the current node","","num bootstrap","","num nodes","","num transactions to be submitted per round","","how long to run for","convert node string into multi addr node string of the …","","","","max round time","","min round time","","","seed used to generate ids","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,8,8,0,4,16,4,7,8,16,4,7,8,4,7,4,7,8,8,16,7,16,7,16,7,16,7,16,4,7,8,16,4,7,8,16,7,16,8,8,16,4,7,8,16,4,7,8,16,4,7,8,4,7,8,16,4,7,8,4,7,8,4,7,8,4,7,8,16,16,4,4,7,7,8,16,16,4,7,8,16,4,7,8,16,4,7,8,16,4,7,8,0,16,7,16,7,16,7,16,7,16,16,7,16,7,16,7,16,7,16,7,16,7,0,0,16,16,7,16,7,16,16,7,16,4,7,8,16,4,7,8,16,4,7,8,4,7,8,4,7,8,16,4,7,8,27,28],"f":[0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],2],[[],2],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[4,5],6],[[7,5],6],[[8,5],6],[[]],[[]],[[]],[[]],[9,[[11,[4,10]]]],[9,[[11,[7,10]]]],[9,[[11,[8,10]]]],[9,[[11,[4,10]]]],[9,[[11,[7,10]]]],[9,[[11,[8,10]]]],[[],[[13,[12]]]],[[],[[13,[12]]]],[14,15],0,[[],3],[[4,13],[[11,[16,17]]]],[[],3],[[],3],[7,16],[[],3],[[16,[19,[18]]]],[[]],[[]],[[]],[[]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[[[21,[20]]],[[21,[1,20]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[22,[[22,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[23,[[23,[1]]]],[[]],0,0,0,0,0,0,0,0,[16,[[11,[[19,[18]],17]]]],0,0,0,0,0,0,0,0,0,0,0,0,[14,[[11,[24,25]]]],[14,[[11,[24,25]]]],0,0,0,0,0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],26],[[],26],[[],26],[[],26],[[4,9],[[11,[10]]]],[[7,9],[[11,[10]]]],[[8,9],[[11,[10]]]],[[4,9],[[11,[10]]]],[[7,9],[[11,[10]]]],[[8,9],[[11,[10]]]],[[]],[[]],[[]],[[]],0,0],"p":[[8,"Any"],[3,"Command"],[15,"usize"],[3,"CliOrchestrated"],[3,"Formatter"],[6,"Result"],[3,"CliStandalone"],[4,"CliOpt"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[3,"Config"],[4,"NetworkError"],[3,"DEntryTypes"],[3,"Libp2pNetwork"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"Multiaddr"],[4,"Error"],[3,"TypeId"],[13,"Orchestrated"],[13,"Standalone"]]},\
"multi_machine_vrf_centralized":{"doc":"","t":[6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Node","NodeOpt","VrfTypes","as_any","as_any","as_any_mut","as_any_mut","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","command","command_for_update","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","fmt","fmt","from","from","from_arg_matches","from_arg_matches_mut","get_hash","group_id","hash","host","init","init","init_state_and_hotshot","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","main","partial_cmp","port","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip"],"q":["multi_machine_vrf_centralized","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Implementation of <code>NodeTypes</code> for <code>DEntryNode</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","The address to connect to","","","Creates the initial state and hotshot for simulation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","The port to connect to","","","","","","","","","","","",""],"i":[0,0,0,3,10,3,10,10,10,3,10,3,10,3,3,3,10,10,3,3,10,3,10,3,3,10,3,3,10,3,10,10,10,3,10,3,10,3,10,0,3,10,3,10,3,10,3,10,0,3,10,3,3,3,10,3,10,3,10,10,10,3,10],"f":[0,0,0,[[],1],[[],1],[[],1],[[],1],[2,2],[2,2],[[]],[[]],[[]],[[]],[3,3],[[]],[[3,3],4],[[],2],[[],2],[[],3],[5],[5],[5],[5],[[],[[6,[3]]]],[5],[5],[[3,3],7],[[3,8],9],[[10,8],9],[[]],[[]],[11,[[6,[10,12]]]],[11,[[6,[10,12]]]],[[],13],[[],[[15,[14]]]],[3],0,[[],5],[[],5],[[[16,[3]],[21,[[19,[[18,[17]]]],20]],13]],[[]],[[]],[[[23,[22]]],[[23,[1,22]]]],[[[23,[22]]],[[23,[1,22]]]],[24,[[24,[1]]]],[24,[[24,[1]]]],[25,[[25,[1]]]],[25,[[25,[1]]]],[[]],[[3,3],[[15,[4]]]],0,[3,6],[[]],[[],6],[[],6],[[],6],[[],6],[[],26],[[],26],[[10,11],[[6,[12]]]],[[10,11],[[6,[12]]]],[[]],[[]]],"p":[[8,"Any"],[3,"Command"],[3,"VrfTypes"],[4,"Ordering"],[15,"usize"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"NodeOpt"],[3,"ArgMatches"],[6,"Error"],[15,"u64"],[3,"Id"],[4,"Option"],[3,"CentralizedServerNetwork"],[3,"Parameters"],[3,"BLSSignatureScheme"],[3,"JfPubKey"],[3,"VRFStakeTableConfig"],[3,"HotShotConfig"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"TypeId"]]},\
"multi_machine_vrf_libp2p":{"doc":"","t":[17,4,3,3,3,6,6,6,13,13,6,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,5,5,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["BOOTSTRAPS","CliOpt","CliOrchestrated","CliStandalone","Config","FromServer","Key","Node","Orchestrated","Standalone","ToServer","VrfTypes","addr","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","bootstrap_mesh_n","bootstrap_mesh_n","bootstrap_mesh_n_high","bootstrap_mesh_n_high","bootstrap_mesh_n_low","bootstrap_mesh_n_low","bootstrap_mesh_outbound_min","bootstrap_mesh_outbound_min","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","bs","clone","clone_into","cmp","command","command_for_update","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","get_hash","group_id","group_id","has_subcommand","hash","identity","init","init","init","init","init","init","init","init_state_and_hotshot","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","main","mesh_n","mesh_n","mesh_n_high","mesh_n_high","mesh_n_low","mesh_n_low","mesh_outbound_min","mesh_outbound_min","new_libp2p_network","next_view_timeout","next_view_timeout","node_id","node_idx","node_type","num_bootstrap","num_nodes","num_nodes","num_txn_per_round","num_txn_per_round","online_time","online_time","parse_dns","parse_ip","partial_cmp","privkey","propose_max_round_time","propose_max_round_time","propose_min_round_time","propose_min_round_time","pubkey","run","seed","serialize","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","vzip","vzip","vzip","0","0"],"q":["multi_machine_vrf_libp2pmulti_machine_vrf_libp2p::CliOpt",""],"d":["bootstrap hardcoded metadata","","","","","","","","","","","Implementation of <code>NodeTypes</code> for <code>DEntryNode</code>","The orchestrator host to connect to","","","","","","","","","","","","","","","","","","bootstrap node mesh n","","bootstrap node mesh high","","bootstrap node mesh low","","bootstrap node outbound min","","","","","","","","","","","","address to bind to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Creates the initial state and hotshot for simulation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","bootstrap node mesh n","","bootstrap node mesh high","","bootstrap node mesh low","","bootstrap node outbound min","","","next view timeout","","Id of the current node","","num bootstrap","","num nodes","","num transactions to be submitted per round","","how long to run for","convert node string into multi addr node string of the …","","","","","max round time","","min round time","","","seed used to generate ids","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,12,12,0,0,8,19,8,11,12,3,19,8,11,12,3,8,11,8,11,12,12,19,11,19,11,19,11,19,11,19,8,11,12,3,19,8,11,12,3,19,11,19,3,3,3,12,12,3,19,8,11,12,3,19,8,11,12,3,3,19,8,11,12,3,3,8,11,12,3,19,8,11,12,3,8,11,12,8,11,12,3,8,11,12,3,19,19,8,8,11,11,12,3,19,19,8,11,12,3,19,8,11,12,3,19,8,11,12,3,19,8,11,12,3,0,19,11,19,11,19,11,19,11,19,19,11,19,11,19,11,19,11,19,11,19,11,0,0,3,19,19,11,19,11,19,19,11,3,3,19,8,11,12,3,19,8,11,12,3,19,8,11,12,3,8,11,12,8,11,12,19,8,11,12,3,29,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[3,3],[[]],[[3,3],4],[[],2],[[],2],[[],3],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[6,[3]]]],[5],[5],[5],[5],[5],[[3,3],7],[[8,9],10],[[11,9],10],[[12,9],10],[[3,9],10],[[]],[[]],[[]],[[]],[[]],[13,[[6,[8,14]]]],[13,[[6,[11,14]]]],[13,[[6,[12,14]]]],[13,[[6,[8,14]]]],[13,[[6,[11,14]]]],[13,[[6,[12,14]]]],[[],15],[[],[[17,[16]]]],[[],[[17,[16]]]],[18,7],[3],0,[[],5],[[],5],[[8,17],[[6,[19,20]]]],[[],5],[11,19],[[],5],[[],5],[[19,[21,[3]]]],[[]],[[]],[[]],[[]],[[]],[[[23,[22]]],[[23,[1,22]]]],[[[23,[22]]],[[23,[1,22]]]],[[[23,[22]]],[[23,[1,22]]]],[[[23,[22]]],[[23,[1,22]]]],[[[23,[22]]],[[23,[1,22]]]],[24,[[24,[1]]]],[24,[[24,[1]]]],[24,[[24,[1]]]],[24,[[24,[1]]]],[24,[[24,[1]]]],[25,[[25,[1]]]],[25,[[25,[1]]]],[25,[[25,[1]]]],[25,[[25,[1]]]],[25,[[25,[1]]]],[[]],0,0,0,0,0,0,0,0,[19,[[6,[[21,[3]],20]]]],0,0,0,0,0,0,0,0,0,0,0,0,[18,[[6,[26,27]]]],[18,[[6,[26,27]]]],[[3,3],[[17,[4]]]],0,0,0,0,0,0,0,0,[3,6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],28],[[],28],[[],28],[[],28],[[],28],[[8,13],[[6,[14]]]],[[11,13],[[6,[14]]]],[[12,13],[[6,[14]]]],[[8,13],[[6,[14]]]],[[11,13],[[6,[14]]]],[[12,13],[[6,[14]]]],[[]],[[]],[[]],[[]],[[]],0,0],"p":[[8,"Any"],[3,"Command"],[3,"VrfTypes"],[4,"Ordering"],[15,"usize"],[4,"Result"],[15,"bool"],[3,"CliOrchestrated"],[3,"Formatter"],[6,"Result"],[3,"CliStandalone"],[4,"CliOpt"],[3,"ArgMatches"],[6,"Error"],[15,"u64"],[3,"Id"],[4,"Option"],[15,"str"],[3,"Config"],[4,"NetworkError"],[3,"Libp2pNetwork"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"Multiaddr"],[4,"Error"],[3,"TypeId"],[13,"Orchestrated"],[13,"Standalone"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

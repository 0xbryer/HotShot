var searchIndex = JSON.parse('{\
"clichat":{"doc":"","t":[3,11,11,11,11,12,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11],"n":["CliOpt","augment_args","augment_args_for_update","borrow","borrow_mut","first_dial_addr","fmt","from","from_arg_matches","from_arg_matches_mut","into","into_app","into_app_for_update","main","port","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":["clichat","","","","","","","","","","","","","","","","","","","",""],"d":["command line arguments","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Path to the node configuration file","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["cliopt",3],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["cliopt",3],["error",3]]]],[[["argmatches",3]],["result",4,[["cliopt",3],["error",3]]]],[[]],[[],["command",6]],[[],["command",6]],[[],["result",6]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["cliopt",3],["argmatches",3]],["result",4,[["error",3]]]],[[["cliopt",3],["argmatches",3]],["result",4,[["error",3]]]],[[]]],"p":[[3,"CliOpt"]]},\
"counter":{"doc":"","t":[0,5,17,13,13,13,3,13,13,3,4,3,4,4,6,13,13,13,13,6,3,4,4,13,3,13,3,13,4,13,13,3,13,3,17,13,13,3,17,17,17,13,13,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,12,12,11,12,12,12,5,12,12,5,12,12,12,12,12,11,11,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,13,3,13,3,13,3,13,3,3,3,4,17,3,3,4,4,3,13,3,13,3,13,13,13,13,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,5,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,16,8,10,0,5,3,3,3,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,12,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["common","main","BROADCAST_TIMEOUT","Broadcast","BroadcastViaDM","BroadcastViaGossip","CliOpt","Conductor","ConductorIdIs","ConductorMessage","ConductorMessageMethod","ConductorState","CounterError","CounterRequest","CounterState","DMViaDM","DirectMessage","Docker","DummyRecv","Epoch","EpochData","EpochType","ExecutionEnvironment","FileRead","FileReadSnafu","Handle","HandleSnafu","Kill","Message","Metal","MissingBootstrap","MissingBootstrapSnafu","Normal","NormalMessage","PADDING_SIZE","RecvdConductor","Relayed","RelayedMessage","SEND_DENOMINATOR","SEND_NUMERATOR","SUCCESS_NUMBER","StateRequest","StateResponse","TIMEOUT","aggregate_epochs","as_error_source","augment_args","augment_args_for_update","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","broadcast_type","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complete_round","conductor_addr","conductor_broadcast","conductor_handle_network_event","current_epoch","default","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","duration","env_type","epoch","epoch","epoch_idx","epoch_type","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_peer","from_str","get_serializable","handle_normal_msg","header","in_current_span","increment_epoch","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_app","into_app_for_update","into_error","into_error","into_error","lossy_network","message_durations","ne","ne","ne","ne","ne","ne","node_states","node_type","normal_to_relayed","num_gossip","num_nodes","padding","parse_node","previous_epochs","ready_set","regular_handle_network_event","relay_to_conductor","req","req","req","sent_ts","serialize","serialize","serialize","serialize","serialize","serialize","serialize","source","start_main","state","to_connect_addrs","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","web","webui_addr","0","source","source","0","0","0","0","0","AddrParse","AddrParseSnafu","Decode","DecodeSnafu","InvalidConfig","InvalidConfigSnafu","Io","IoSnafu","IsolationConfig","IsolationConfigBuilder","IsolationConfigBuilderError","LOSSY_QDISC","LossyNetwork","LossyNetworkBuilder","LossyNetworkBuilderError","LossyNetworkError","Netns","RtNetlink","RtNetlinkSnafu","SetNs","SetNsSnafu","UninitializedField","UninitializedField","ValidationError","ValidationError","_DERIVE_core_fmt_Debug_FOR_IsolationConfig","_DERIVE_core_fmt_Debug_FOR_LossyNetwork","as_error_source","as_error_source","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge_addr","bridge_addr","bridge_addr","bridge_name","bridge_name","bridge_name","build","build","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","counter_ns","counter_ns","counter_ns","create_empty","create_empty","create_qdisc","create_qdisc_netlink","cur","default","default","default","del_link","description","enable_firewall","env_type","env_type","env_type","eth_name","eth_name","eth_name","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","isolate","isolate_netlink","isolation_config","isolation_config","isolation_config","netem_config","netem_config","netem_config","new","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_firewall","undo_isolate","undo_isolate_netlink","veth2_addr","veth2_addr","veth2_addr","veth2_name","veth2_name","veth2_name","veth_name","veth_name","veth_name","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","source","source","source","source","source","Serialized","WebInfo","get_serializable","network_state","spawn_server","ConnectionState","NetworkConfig","State","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connected_peers","connecting_peers","from","from","from","identity","into","into","into","known_peers","network_config","new","new","node_type","send","serialize","serialize","serialize","state","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["counter","","counter::commoncounter::common::ConductorMessageMethod","counter::common::CounterError","","counter::common::CounterRequest","counter::common::Message","","","","counter::common::lossy_networkcounter::common::lossy_network::IsolationConfigBuilderError","","counter::common::lossy_network::LossyNetworkBuilderError","","counter::common::lossy_network::LossyNetworkError","","","","","counter::common::web","","","","","counter::common::web::network_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","timeout before failing to broadcast","broadcast message to all nodes","","","","conductor requests that message is sent to node that the …","","A message sent and recv-ed by a [‘…","ways to send messages between nodes","","","Normal message. Sent amongst <code>NetworkNodeType::Regular</code> and …","","","direct message <code>PeerId</code>","execution environment is within docker","","","","","The execution environemnt type","","SNAFU context selector for the <code>CounterError::FileRead</code> …","","SNAFU context selector for the <code>CounterError::Handle</code> variant","kill node","overall message","execution environment is on metal","","SNAFU context selector for the …","message to end from a peer to a peer","Message sent between non-<code>NetworkNodeType::Conductor</code> nodes","","recv-ed the conductor id","messaged recved and relayed to conductor","A message sent and recv-ed by a [‘…","probaiblity denominator that recv-er node sends back …","probability numerator that recv-er node sends back timing …","","Request state","Reply with state","the timeout before ending rounding","returns time per data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","internal interface to bind to","the type of broadcast (direct or broadcast)","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increment conductor to the next epoch","If this value is set, a webserver will be spawned on this …","","network event handler for conductor","","","","","","","","","","","time message took to propagate from sender to recv-er","type of environment","the epoch the message was sent on","the epoch the request was made on","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","peer","","","handler for non-conductor nodes for normal messages","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","the role this node plays","convert a normal message into a message to relay to …","number of rounds of gossip","total number of nodes","arbitrary amount of padding to vary message length","convert node string into multi addr","","","event handler for events from the swarm","whether or not message shuld be relayed to conductor","the underlying request the recv-ing node should take","the requeset being made","the request the recv-ing node should make","timestamp when message was sent","","","","","","","","","[’bootstrap_addrs…","","list of bootstrap node addrs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SNAFU context selector for the <code>LossyNetworkError::AddrParse</code>…","","SNAFU context selector for the <code>LossyNetworkError::Decode</code> …","","SNAFU context selector for the …","","SNAFU context selector for the <code>LossyNetworkError::Io</code> …","A description of how the network should be isolated","Builder for <code>IsolationConfig</code>.","Error type for IsolationConfigBuilder","hardcoded default values","A description of a lossy network","Builder for <code>LossyNetwork</code>.","Error type for LossyNetworkBuilder","","represent the current network namespace (useful if …","","SNAFU context selector for the <code>LossyNetworkError::RtNetlink</code>…","","SNAFU context selector for the <code>LossyNetworkError::SetNs</code> …","Uninitialized field","Uninitialized field","Custom validation error","Custom validation error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the bridge ip address","the bridge ip address","the bridge ip address","the bridge name","the bridge name","the bridge name","Builds a new <code>LossyNetwork</code>.","Builds a new <code>IsolationConfig</code>.","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","the network namespace name to create","the network namespace name to create","the network namespace name to create","Create an empty builder, with all fields set to <code>None</code> or …","Create an empty builder, with all fields set to <code>None</code> or …","Create a network qdisc","Internal invocation to netlink library to create the qdisc","","","","","","","Enables firewall rules to allow network bridge to function …","the execution environment","the execution environment","the execution environment","Ethernet interface that is connected to WAN","Ethernet interface that is connected to WAN","Ethernet interface that is connected to WAN","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create isolated environment in separate network namespace …","Prepares server for latency by:","metadata describing how to isolate. Only used when <code>env_type</code>…","metadata describing how to isolate. Only used when <code>env_type</code>…","metadata describing how to isolate. Only used when <code>env_type</code>…","The network loss conditions","The network loss conditions","The network loss conditions","creates new network namespace and enters namespace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","deletes created iptables rules","Delete isolated environment and network bridge","tears down all created interfaces deletes all iptables …","the virtual ethernet interface ip address that lives in …","the virtual ethernet interface ip address that lives in …","the virtual ethernet interface ip address that lives in …","the virtual ethernet interface name that lives in …","the virtual ethernet interface name that lives in …","the virtual ethernet interface name that lives in …","the virtual ethernet interface name that lives in the …","the virtual ethernet interface name that lives in the …","the virtual ethernet interface name that lives in the …","","","","","","","","","","","","","","","","","","","","","","","","","Trait to unify the info that can be send to the web …","","","Spawn a web server on the given <code>addr</code>. This web server will …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,2,0,3,3,0,0,0,0,0,0,2,1,4,3,0,0,0,0,5,0,5,0,6,0,4,5,0,3,0,0,3,3,0,0,0,0,6,6,0,7,5,8,8,5,2,7,9,6,10,11,12,3,1,8,4,13,14,15,5,2,7,9,6,10,11,12,3,1,8,4,13,14,15,5,8,12,15,5,2,7,9,6,10,11,12,3,1,4,13,14,15,2,7,9,6,10,11,12,3,1,4,13,14,15,7,8,0,0,7,7,5,6,10,11,12,3,1,4,11,8,10,11,9,9,2,6,10,11,12,3,1,4,2,6,10,11,12,3,1,4,15,2,7,9,6,10,11,12,3,1,8,4,13,14,15,5,5,2,7,9,6,10,11,12,3,1,8,4,13,14,15,5,8,8,11,4,7,0,5,5,9,2,7,9,6,10,11,12,3,1,8,4,13,14,15,5,8,8,13,14,15,0,9,6,10,11,12,3,1,9,8,10,8,8,10,0,7,7,0,10,10,11,12,10,6,10,11,12,3,1,4,5,0,12,8,2,7,9,6,10,11,12,3,1,4,13,14,15,5,2,7,9,6,10,11,12,3,1,8,4,13,14,15,5,2,7,9,6,10,11,12,3,1,8,4,13,14,15,5,2,7,9,6,10,11,12,3,1,8,4,13,14,15,5,8,8,2,7,9,6,10,11,12,3,1,8,4,13,14,15,5,0,8,16,17,18,19,20,21,22,23,24,0,24,0,24,0,24,0,0,0,0,0,0,0,0,0,0,24,0,24,0,25,26,25,26,0,0,25,26,24,24,27,28,29,25,30,26,31,32,33,34,35,36,37,24,27,28,29,25,30,26,31,32,33,34,35,36,37,24,30,30,31,30,30,31,29,30,35,24,28,29,30,31,32,33,34,35,36,37,28,29,30,31,32,33,34,35,36,37,30,30,31,29,30,28,28,27,29,30,31,0,24,31,29,28,29,29,28,29,35,28,25,25,26,26,31,32,33,34,35,36,37,24,24,27,28,29,25,25,25,30,26,26,26,31,32,33,34,35,36,37,24,25,26,24,25,26,24,27,28,29,25,30,26,31,32,33,34,35,36,37,24,32,33,34,35,36,37,28,31,29,28,29,29,28,29,27,24,28,29,30,31,32,33,34,35,36,37,25,26,24,27,28,29,25,30,26,31,32,33,34,35,36,37,24,27,28,29,25,30,26,31,32,33,34,35,36,37,24,27,28,29,25,30,26,31,32,33,34,35,36,37,24,31,28,31,30,30,31,30,30,31,30,30,31,27,28,29,25,30,26,31,32,33,34,35,36,37,24,38,39,40,41,42,43,44,45,46,47,0,47,0,0,0,0,0,48,49,50,48,49,50,50,50,48,49,50,49,48,49,50,50,48,48,49,49,48,48,49,50,48,48,49,50,48,49,50,48,49,50,48,49,50],"f":[null,[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["conductorstate",3],["usize",0]]],[[["",0]],["error",8]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["countererror",4]],["option",4,[["backtracenull,null,[[["missingbootstrapsnafu",3]],["countererror",4]],[[["countererror",4]],["option",4,[["error",8]]]],[[["epochtype",4]],["epochtype",4]],[[["conductorstate",3]],["conductorstate",3]],[[["epochdata",3]],["epochdata",3]],[[["counterrequest",4]],["counterrequest",4]],[[["normalmessage",3]],["normalmessage",3]],[[["relayedmessage",3]],["relayedmessage",3]],[[["conductormessage",3]],["conductormessage",3]],[[["message",4]],["message",4]],[[["conductormessagemethod",4]],["conductormessagemethod",4]],[[["executionenvironment",4]],["executionenvironment",4]],[[["handlesnafu",3]],["handlesnafu",3]],[[["filereadsnafu",3]],["filereadsnafu",3]],[[["missingbootstrapsnafu",3]],["missingbootstrapsnafu",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["conductorstate",3],["epochtype",4]]],null,[[["duration",3],["arc",3,[["networknodehandle",3,[["conductorstate",3]]]]]],["future",8]],[[["networkevent",4],["arc",3,[["networknodehandle",3,[["conductorstate",3]]]]]],["future",8]],null,[[],["conductorstate",3]],[[["countererror",4]],["str",0]],[[],["result",4,[["counterrequest",4]]]],[[],["result",4,[["normalmessage",3]]]],[[],["result",4,[["relayedmessage",3]]]],[[],["result",4,[["conductormessage",3]]]],[[],["result",4,[["message",4]]]],[[],["result",4,[["conductormessagemethod",4]]]],[[],["result",4,[["executionenvironment",4]]]],null,null,null,null,null,null,[[["epochtype",4],["epochtype",4]],["bool",0]],[[["counterrequest",4],["counterrequest",4]],["bool",0]],[[["normalmessage",3],["normalmessage",3]],["bool",0]],[[["relayedmessage",3],["relayedmessage",3]],["bool",0]],[[["conductormessage",3],["conductormessage",3]],["bool",0]],[[["message",4],["message",4]],["bool",0]],[[["conductormessagemethod",4],["conductormessagemethod",4]],["bool",0]],[[["executionenvironment",4],["executionenvironment",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["missingbootstrapsnafu",3]],["result",4,[["countererror",4]]]],[[["epochtype",4],["formatter",3]],["result",6]],[[["conductorstate",3],["formatter",3]],["result",6]],[[["epochdata",3],["formatter",3]],["result",6]],[[["counterrequest",4],["formatter",3]],["result",6]],[[["normalmessage",3],["formatter",3]],["result",6]],[[["relayedmessage",3],["formatter",3]],["result",6]],[[["conductormessage",3],["formatter",3]],["result",6]],[[["message",4],["formatter",3]],["result",6]],[[["conductormessagemethod",4],["formatter",3]],["result",6]],[[["cliopt",3],["formatter",3]],["result",6]],[[["executionenvironment",4],["formatter",3]],["result",6]],[[["handlesnafu",3],["formatter",3]],["result",6]],[[["filereadsnafu",3],["formatter",3]],["result",6]],[[["missingbootstrapsnafu",3],["formatter",3]],["result",6]],[[["countererror",4],["formatter",3]],["result",6]],[[["countererror",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["argmatches",3]],["result",4,[["cliopt",3],["error",3]]]],[[["argmatches",3]],["result",4,[["cliopt",3],["error",3]]]],null,[[["str",0]],["result",4,[["executionenvironment",4]]]],[[["conductorstate",3]]],[[["arc",3,[["networknodehandle",3]]],["normalmessage",3],["option",4,[["responsechannel",3,[["directmessageresponse",3]]]]]],["future",8]],[[],["indentedsection",3]],[[]],[[["epochdata",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[["handlesnafu",3]],["countererror",4]],[[["filereadsnafu",3]],["countererror",4]],[[["missingbootstrapsnafu",3]],["countererror",4]],null,null,[[["counterrequest",4],["counterrequest",4]],["bool",0]],[[["normalmessage",3],["normalmessage",3]],["bool",0]],[[["relayedmessage",3],["relayedmessage",3]],["bool",0]],[[["conductormessage",3],["conductormessage",3]],["bool",0]],[[["message",4],["message",4]],["bool",0]],[[["conductormessagemethod",4],["conductormessagemethod",4]],["bool",0]],null,null,[[["normalmessage",3],["peerid",3]],["relayedmessage",3]],null,null,null,[[["str",0]],["result",4,[["multiaddr",3],["error",4]]]],null,null,[[["networkevent",4],["arc",3,[["networknodehandle",3]]]],["future",8]],null,null,null,null,null,[[["counterrequest",4]],["result",4]],[[["normalmessage",3]],["result",4]],[[["relayedmessage",3]],["result",4]],[[["conductormessage",3]],["result",4]],[[["message",4]],["result",4]],[[["conductormessagemethod",4]],["result",4]],[[["executionenvironment",4]],["result",4]],[[["countererror",4]],["option",4,[["error",8]]]],[[["cliopt",3]],["future",8]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["cliopt",3],["argmatches",3]],["result",4,[["error",3]]]],[[["cliopt",3],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["error",8]],[[["",0]],["error",8]],[[["",0]],["error",8]],[[["lossynetworkerror",4]],["option",4,[["backtrace",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["isolationconfigbuilder",3],["string",3]],["isolationconfigbuilder",3]],null,null,[[["isolationconfigbuilder",3],["string",3]],["isolationconfigbuilder",3]],null,null,[[["lossynetworkbuilder",3]],["result",4,[["lossynetwork",3],["lossynetworkbuildererror",4]]]],[[["isolationconfigbuilder",3]],["result",4,[["isolationconfig",3],["isolationconfigbuildererror",4]]]],[[["invalidconfigsnafu",3]],["lossynetworkerror",4]],[[["lossynetworkerror",4]],["option",4,[["error",8]]]],[[["lossynetwork",3]],["lossynetwork",3]],[[["lossynetworkbuilder",3]],["lossynetworkbuilder",3]],[[["isolationconfigbuilder",3]],["isolationconfigbuilder",3]],[[["isolationconfig",3]],["isolationconfig",3]],[[["rtnetlinksnafu",3]],["rtnetlinksnafu",3]],[[["iosnafu",3]],["iosnafu",3]],[[["setnssnafu",3]],["setnssnafu",3]],[[["invalidconfigsnafu",3]],["invalidconfigsnafu",3]],[[["decodesnafu",3]],["decodesnafu",3]],[[["addrparsesnafu",3]],["addrparsesnafu",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["isolationconfigbuilder",3],["string",3]],["isolationconfigbuilder",3]],null,null,[[],["lossynetworkbuilder",3]],[[],["isolationconfigbuilder",3]],[[["lossynetwork",3]],["future",8]],[[["lossynetwork",3],["str",0]],["future",8]],null,[[],["lossynetworkbuilder",3]],[[],["isolationconfigbuilder",3]],[[],["isolationconfig",3]],[[["handle",3],["string",3]],["future",8]],[[["lossynetworkerror",4]],["str",0]],[[["isolationconfig",3],["str",0]],["future",8]],[[["lossynetworkbuilder",3],["executionenvironment",4]],["lossynetworkbuilder",3]],null,null,[[["lossynetworkbuilder",3],["string",3]],["lossynetworkbuilder",3]],null,null,[[["invalidconfigsnafu",3]],["result",4,[["lossynetworkerror",4]]]],[[["lossynetwork",3],["formatter",3]],["result",6]],[[["lossynetworkbuildererror",4],["formatter",3]],["result",6]],[[["lossynetworkbuildererror",4],["formatter",3]],["result",6]],[[["isolationconfigbuildererror",4],["formatter",3]],["result",6]],[[["isolationconfigbuildererror",4],["formatter",3]],["result",6]],[[["isolationconfig",3],["formatter",3]],["result",6]],[[["rtnetlinksnafu",3],["formatter",3]],["result",6]],[[["iosnafu",3],["formatter",3]],["result",6]],[[["setnssnafu",3],["formatter",3]],["result",6]],[[["invalidconfigsnafu",3],["formatter",3]],["result",6]],[[["decodesnafu",3],["formatter",3]],["result",6]],[[["addrparsesnafu",3],["formatter",3]],["result",6]],[[["lossynetworkerror",4],["formatter",3]],["result",6]],[[["lossynetworkerror",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["string",3]],["lossynetworkbuildererror",4]],[[["uninitializedfielderror",3]],["lossynetworkbuildererror",4]],[[]],[[]],[[["uninitializedfielderror",3]],["isolationconfigbuildererror",4]],[[["string",3]],["isolationconfigbuildererror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rtnetlinksnafu",3]],["lossynetworkerror",4]],[[["iosnafu",3]],["lossynetworkerror",4]],[[["setnssnafu",3]],["lossynetworkerror",4]],[[["invalidconfigsnafu",3]],["lossynetworkerror",4]],[[["decodesnafu",3]],["lossynetworkerror",4]],[[["addrparsesnafu",3]],["lossynetworkerror",4]],[[["lossynetwork",3]],["future",8]],[[["isolationconfig",3],["str",0]],["future",8]],[[["lossynetworkbuilder",3],["option",4,[["isolationconfig",3]]]],["lossynetworkbuilder",3]],null,null,[[["lossynetworkbuilder",3],["netemqdisc",3]],["lossynetworkbuilder",3]],null,null,[[["str",0]],["future",8]],[[["lossynetworkerror",4]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["isolationconfig",3],["string",3]],["future",8]],[[["lossynetwork",3]],["future",8]],[[["isolationconfig",3],["string",3]],["future",8]],[[["isolationconfigbuilder",3],["string",3]],["isolationconfigbuilder",3]],null,null,[[["isolationconfigbuilder",3],["string",3]],["isolationconfigbuilder",3]],null,null,[[["isolationconfigbuilder",3],["string",3]],["isolationconfigbuilder",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],null,[[["arc",3,[["networknodehandle",3]]],["socketaddr",4]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,[[["networknodehandle",3]],["future",8]],[[["peerid",3],["networknodeconfig",3]],["networkconfig",3]],null,[[["state",3,[["serialize",8]]],["sender",3]],["future",8]],[[["state",3,[["serialize",8]]]],["result",4]],[[["networkconfig",3]],["result",4]],[[["connectionstate",3]],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]]],"p":[[4,"ConductorMessageMethod"],[4,"EpochType"],[4,"Message"],[4,"ExecutionEnvironment"],[4,"CounterError"],[4,"CounterRequest"],[3,"ConductorState"],[3,"CliOpt"],[3,"EpochData"],[3,"NormalMessage"],[3,"RelayedMessage"],[3,"ConductorMessage"],[3,"HandleSnafu"],[3,"FileReadSnafu"],[3,"MissingBootstrapSnafu"],[13,"DirectMessage"],[13,"Handle"],[13,"FileRead"],[13,"StateResponse"],[13,"Normal"],[13,"Relayed"],[13,"Conductor"],[13,"ConductorIdIs"],[4,"LossyNetworkError"],[4,"LossyNetworkBuilderError"],[4,"IsolationConfigBuilderError"],[3,"Netns"],[3,"LossyNetwork"],[3,"LossyNetworkBuilder"],[3,"IsolationConfigBuilder"],[3,"IsolationConfig"],[3,"RtNetlinkSnafu"],[3,"IoSnafu"],[3,"SetNsSnafu"],[3,"InvalidConfigSnafu"],[3,"DecodeSnafu"],[3,"AddrParseSnafu"],[13,"UninitializedField"],[13,"ValidationError"],[13,"UninitializedField"],[13,"ValidationError"],[13,"RtNetlink"],[13,"Io"],[13,"SetNs"],[13,"Decode"],[13,"AddrParse"],[8,"WebInfo"],[3,"State"],[3,"NetworkConfig"],[3,"ConnectionState"]]},\
"dentry_simulator":{"doc":"","t":[6,3,11,11,11,11,11,11,11,11,5,5,5,11,11,11,5,12,5,12,11,11,11,11,11,11],"n":["Node","Opt","augment_args","augment_args_for_update","borrow","borrow_mut","fmt","from","from_arg_matches","from_arg_matches_mut","get_hotshot","get_networking","inital_state","into","into_app","into_app_for_update","main","nodes","prebaked_transactions","transactions","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":["dentry_simulator","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Returns the argument unchanged.","","","Creates a hotshot","Trys to get a networking implementation with the given id","Provides the initial state for the simulation","Calls <code>U::from(self)</code>.","","","","Number of nodes to run","Prebaked list of transactions","Number of transactions to simulate","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1],"f":[null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["opt",3],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["opt",3],["error",3]]]],[[["argmatches",3]],["result",4,[["opt",3],["error",3]]]],[[["usize",0],["usize",0],["u64",0],["wnetwork",3,[["message",3,[["dentryblock",3],["transaction",3],["state",3],["ed25519pub",3]]],["ed25519pub",3]]],["state",3]],["future",8]],[[["ed25519pub",3],["str",0],["u64",0],["",0]],["future",8]],[[],["state",3]],[[]],[[],["command",6]],[[],["command",6]],[[]],null,[[],["vec",3,[["transaction",3]]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["opt",3],["argmatches",3]],["result",4,[["error",3]]]],[[["opt",3],["argmatches",3]],["result",4,[["error",3]]]],[[]]],"p":[[3,"Opt"]]},\
"hotshot":{"doc":"Provides a generic rust implementation of the <code>HotShot</code> BFT …","t":[13,13,13,13,4,13,13,17,17,3,3,4,3,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,0,0,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,11,2,12,11,11,11,11,12,12,12,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,16,16,16,16,16,8,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,3,3,3,3,3,3,3,3,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,0,6,3,6,3,4,3,13,13,13,13,13,13,3,3,3,12,12,12,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,5,5,5,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,8,13,13,13,16,16,16,13,13,13,13,13,13,4,8,16,8,13,13,8,13,13,16,13,8,16,16,8,16,8,16,6,13,8,16,13,10,10,11,11,11,11,10,10,11,10,11,10,0,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,0,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,10,10,11,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,4,13,3,13,3,13,13,16,13,13,8,13,3,13,13,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,12,11,11,11,11,10,12,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BadBlock","BadOrForgedQC","Continue","Continuous","ExecutionType","FailedToBroadcast","FailedToMessageLeader","H_256","H_512","HotShot","HotShotConfig","HotShotError","HotShotInner","InconsistentBlock","Incremental","InsufficientValidSignatures","InvalidState","ItemNotFound","Misc","NetworkFault","StorageError","TimeoutError","ViewTimeoutError","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","committee","create_or_obtain_chan_from_read","create_or_obtain_chan_from_write","data","demos","description","documentation","execution_type","fmt","fmt","fmt","fmt","from","from","from","from","from","get_decided_leaf","get_next_view_timeout","get_state","header","in_current_span","init","into","into","into","into","into","known_nodes","max_transactions","new","next_view_timeout","num_bootstrap","propose_max_round_time","propose_min_round_time","publish_transaction_async","rand","round_start_delay","send_broadcast_message","send_direct_message","send_event","source","start_delay","threshold","timeout_ratio","timeout_view","to_owned","to_owned","to_owned","to_string","total_nodes","traits","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","types","vzip","vzip","vzip","vzip","vzip","bad_qc","context","context","hash","num_valid_signatures","source","source","source","source","source","state","threshold","type_name","view_number","DynamicCommittee","Input","Output","Proof","PublicKey","SecretKey","Vrf","borrow","borrow_mut","default","evaluate","evaluate","from","get_leader","get_vote_count","get_votes","into","make_vote_token","new","prove","prove","try_from","try_into","type_id","verify","verify","vzip","BlockHash","Leaf","LeafHash","QuorumCertificate","StateHash","TransactionHash","VecQuorumCertificate","VerifyHash","as_ref","as_ref","as_ref","as_ref","as_ref","block_hash","block_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","create_verify_hash","default","default","default","default","default","default","deltas","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dummy","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","genesis","genesis","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","justify_qc","leaf_hash","ne","ne","ne","ne","ne","ne","ne","ne","new","parent","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","protocol_name","protocol_name","protocol_name","protocol_name","protocol_name","random","random","random","random","random","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signatures","signatures","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec_cert","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_number","view_number","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","dentry","Account","Addition","Balance","DEntryBlock","DEntryError","DEntryNode","InconsistentTransaction","InsufficentBalance","NoSuchInputAccount","NoSuchOutputAccount","PreviousStateMismatch","ReusedNonce","State","Subtraction","Transaction","account","account","add","add_transaction_raw","amount","amount","append","as_error_source","backtrace","balances","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contained_transactions","create_random_transaction","default","default","default","description","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_hash","get_starting_state","hash","hash","hash","hash","hash","hash","hash_leaf","hash_transaction","header","in_current_span","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","new","next_block","nonce","nonces","on_commit","previous_block","random_leaf","random_quorom_certificate","random_transaction","serialize","serialize","serialize","serialize","serialize","source","sub","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_block","validate_independence","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Block","Block","Block","BlockContents","ChannelSend","CouldNotDeliver","DHTError","Election","Error","Error","ExecutorError","FailedToBindListener","FailedToDeserialize","FailedToSerialize","IdentityHandshake","ListenerSend","NetworkError","NetworkReliability","Networking","NetworkingImplementation","NoSocketsError","NoSuchNode","NodeImplementation","Other","ShutDown","SignatureKey","SocketDecodeError","State","State","State","StatefulHandler","StatefulHandler","Storage","Storage","StorageResult","Timeout","Transaction","Transaction","WebSocket","add_transaction_raw","append","as_error_source","backtrace","borrow","borrow_mut","broadcast_message","broadcast_queue","cause","contained_transactions","description","direct_queue","election","fmt","fmt","from","from","get_block","get_internal_state","get_leaf","get_leaf_by_block","get_newest_qc","get_qc","get_qc_for_view","get_record","get_state","hash","hash_leaf","hash_transaction","header","implementations","in_current_span","into","known_nodes","message_node","network_changes","next_block","next_broadcast","next_direct","notify","on_commit","put_record","ready","sample_delay","sample_keep","shut_down","source","to_string","try_from","try_into","type_id","update","validate_block","vzip","inner","input","input","source","source","source","source","source","source","source","StaticCommittee","borrow","borrow_mut","from","get_leader","get_stake_table","get_vote_count","get_votes","into","make_vote_token","new","try_from","try_into","type_id","vzip","AtomicStorage","DummyReliability","Libp2pNetwork","MasterMap","MemoryNetwork","MemoryStorage","PeerInfoVec","Stateless","WNetwork","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","broadcast_message","broadcast_message","broadcast_queue","broadcast_queue","broadcast_queue","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","connect_to","connection_table_size","construct_tmp_storage","construct_tmp_storage","create","default","default","direct_queue","direct_queue","direct_queue","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_task","generator","generator","generator","get_block","get_block","get_internal_state","get_internal_state","get_leaf","get_leaf","get_leaf_by_block","get_leaf_by_block","get_newest_qc","get_newest_qc","get_qc","get_qc","get_qc_for_view","get_qc_for_view","get_record","get_record","get_record","get_state","get_state","in_flight_message_count","in_flight_message_count","in_flight_message_count","init_from_loader","into","into","into","into","into","into","into","into","known_nodes","known_nodes","known_nodes","message_node","message_node","message_node","network_changes","network_changes","network_changes","new","new","new","new","new","next_broadcast","next_broadcast","next_broadcast","next_direct","next_direct","next_direct","notify","open","put_record","put_record","put_record","ready","ready","ready","sample_delay","sample_keep","shut_down","shut_down","shut_down","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_ready","Decide","Error","Event","EventType","Follower","HotShotHandle","Leader","Message","NewView","NextLeaderViewTimeout","PrivateKey","Propose","ReplicaViewTimeout","SignatureKey","Synced","TimedOut","TransactionRejected","ViewFinished","Vote","available_events","block_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect_round_events","current_view","current_view","deserialize","deserialize","deserialize","ed25519","eq","eq","event","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_private","get_decided_leaf","get_hash","get_hash","get_next_view_timeout","get_state","hash","hash","into","into","into","into","into","into","is_ready","justify","justify_qc","kind","leaf_hash","ne","ne","networking","next_event","sender","serialize","serialize","serialize","shut_down","sign","signature","start","start_one_round","storage","submit_transaction","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_next_event","type_id","type_id","type_id","type_id","type_id","type_id","validate","view_number","vzip","vzip","vzip","vzip","vzip","vzip","block","block","error","qcs","state","transaction","view_number","view_number","view_number","view_number","view_number","view_number","view_number","Ed25519Priv","Ed25519Pub","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deserialize","deserialize","eq","eq","fmt","fmt","fmt","from","from","from_bytes","from_bytes","from_private","from_str","from_str","generate","generate_from_seed","generate_test_key","generated_from_seed_indexed","get_hash","hash","header","header","into","into","ne","ne","partial_cmp","partial_cmp","serialize","serialize","sign","to_bytes","to_bytes","to_owned","to_owned","to_string","to_string","to_tagged_base64","to_tagged_base64","try_from","try_from","try_into","try_into","type_id","type_id","validate","vzip","vzip"],"q":["hotshot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot::HotShotError","","","","","","","","","","","","","","hotshot::committee","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot::datahotshot::demos","hotshot::demos::dentry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot::traits::NetworkError","","","","","","","","","","hotshot::traits::election","","","","","","","","","","","","","","","hotshot::traits::implementationshotshot::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotshot::types::EventType","","","","","","","","","","","","","hotshot::types::ed25519","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A block failed verification","Bad or forged quorum certificate","Internal value used to drive the state machine","constantly increment view as soon as view finishes","the type of consensus to run. Either: wait for a signal to …","Failed to broadcast a message on the network","Failed to Message the leader in the given stage","Length, in bytes, of a 256 bit hash","Length, in bytes, of a 512 bit hash","Thread safe, shared view of a <code>HotShot</code>","Holds configuration for a <code>HotShot</code>","Reexport error type Error type for <code>HotShot</code>","Holds the state needed to participate in <code>HotShot</code> consensus","A block was not consistent with the existing state","wait for a signal","Not enough valid signatures for a quorum","Invalid state machine state","Item was not present in storage","Miscelaneous error TODO fix this with #181 …","Failure in networking layer","Error accesing storage","HotShot timed out waiting for msgs","HotShot timed out during round","","","","","","","","","","","","","","","","","","","","Contains structures and functions for committee election","given a view number and a upgradable read lock on a …","given a view number and a write lock on a channel map, …","Provides types useful for representing <code>HotShot</code>’s data …","Contains implementations of the <code>HotShot</code> traits used in the …","","HotShot: A linear time, committee electing, BFT Protocol.","Whether to run one view or continuous views","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a copy of the last decided leaf","return the timeout for a view for <code>self</code>","Returns a copy of the state","","","Initializes a new hotshot and does the work of setting up …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","List of known node’s public keys, including own, sorted …","Maximum transactions per block","Creates a new hotshot with the given configuration options …","Base duration for next-view timeout, in milliseconds","Number of network bootstrap nodes","The maximum amount of time a leader can wait to start a …","The minimum amount of time a leader has to wait to start a …","Publishes a transaction to the network","Reexport rand crate","The delay a leader inserts before starting pre-commit, in …","Send a broadcast message.","Send a direct message to a given recipient.","Sends an event over an event broadcaster if one is …","","Delay after init before starting consensus, in milliseconds","Nodes required to reach a decision","The exponential backoff ration for the next-view timeout","Marks a given view number as timed out. This should be …","","","","","Total number of nodes in the network","Contains traits consumed by <code>HotShot</code>","","","","","","","","","","","","","","","","Contains types used by the crate","","","","","","The bad quorum certificate","source of error","Context","Hash of the missing item","Number of valid signatures","Underlying error","source of error","The underlying network fault","The underlying network fault","Underlying network fault","The state that the round was in when it timed out","Threshold of signatures needed for a quorum","Name of the hash type that was not found. Can be easily …","view number","A structure for dynamic committee.","The input of VRF proof.","The output of VRF evaluation.","VRF signature.","VRF public key.","VRF secret key.","A trait for VRF proof, evaluation and verification.","","","","Computes the VRF output associated with a VRF proof.","Computes the VRF output for committee election.","Returns the argument unchanged.","Determines the leader. Note: A leader doesn’t …","Returns the number of votes a validated token has.","Validates a vote token.","Calls <code>U::from(self)</code>.","Attempts to generate a vote token for self.","Creates a new dynamic committee.","Creates the VRF proof associated with a VRF secret key.","Signs the VRF signature.","","","","Verifies a VRF proof.","Verifies the VRF proof.","","External wrapper type","A node in <code>HotShot</code>’s consensus-internal merkle tree.","External wrapper type","The type used for Quorum Certificates","External wrapper type","External wrapper type","<code>QuorumCertificate</code> variant using a <code>Vec</code> rather than a …","External wrapper type","","","","","","Hash of the block refereed to by this Quorum Certificate.","Block this QC refers to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This concatenates the encoding of <code>leaf_hash</code>, <code>view</code>, and …","","","","","","","Block leaf wants to apply","","","","","","","","","Create a dummy <code>VecQuorumCertificate</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an array of the correct size directly into an <code>Self</code>","Converts an array of the correct size directly into an <code>Self</code>","Converts an array of the correct size directly into an <code>Self</code>","Converts an array of the correct size directly into an <code>Self</code>","Converts an array of the correct size directly into an <code>Self</code>","Temporary bypass for boostrapping","Temporary bypass for boostrapping","","","","","","","","","","","","","","Hashes the leaf with the hashing algorithm provided by the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Per spec, justification","Hash of the <code>Leaf</code> referred to by this Quorum Certificate","","","","","","","","","Creates a new leaf with the specified block and parent","The hash of the parent <code>Leaf</code> So we can ask if it extends","","","","","","","","","","","Testing only random generation","Testing only random generation","Testing only random generation","Testing only random generation","Testing only random generation","","","","","","","","","The list of signatures establishing the validity of this …","The signature portion of this QC","What the state should be after applying <code>self.deltas</code>","","","","","","","","","Clones the contents of this Hash into a <code>Vec&lt;u8&gt;</code>","Clones the contents of this Hash into a <code>Vec&lt;u8&gt;</code>","Clones the contents of this Hash into a <code>Vec&lt;u8&gt;</code>","Clones the contents of this Hash into a <code>Vec&lt;u8&gt;</code>","Clones the contents of this Hash into a <code>Vec&lt;u8&gt;</code>","Converts this Quorum Certificate to a version using a <code>Vec</code> …","","","","","","","","","","","","","","","","","","","","","","","","","The view number this quorum certificate was generated …","The view we were on when we made this certificate","CurView from leader when proposing leaf","","","","","","","","","Double entry accounting demo","The account identifier type used by the demo","Records an increase in an account balance","The account balance type used by the demo","The block for the dentry demo","The error type for the dentry demo","The node implementation for the dentry demo","The subtraction and addition amounts for this transaction …","Tried to move more money than was in the account","No such input account exists","No such output account exists","Previous state commitment does not match","Nonce was reused","The state for the dentry demo","Records a reduction in an account balance","The transaction for the dentry demo","An account identifier","An account identifier","An increment to an account balance","","An account balance","An account balance","","","","Key/value store of accounts and balances","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Provides a common starting state","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Create a new <code>DEntryNode</code>","","The nonce for a transaction, no two transactions can have …","Set of previously seen nonces","","Block state commitment","Provides a random <code>Leaf</code>","Provides a random <code>QuorumCertificate</code>","Provides a random valid transaction from the current state","","","","","","","A decrement to an account balance","","","","","","","","Transaction vector","","","","","","","","","","","","","","","","","","","","","","","Ensures that this transaction is at least consistent with …","","","","","","","","Block type for this consensus implementation","The type of block this state is associated with","Block type for this consensus implementation","Abstraction over the contents of a block","Channel error","Could not deliver a message to a specified recipient","DHT error","The election algorithm","The error type for this type of block","The error type for this particular type of ledger state","Error orginiating from within the executor","Failed to bind a listener socket","Failed to deserealize a message","Failed to serialize a message","Could not complete handshake","A Listener failed to send a message","Error type for networking","interface describing how reliable the network is","Networking type for this consensus implementation","Describes, generically, the behaviors a networking …","No sockets were open","Attempted to deliver a message to an unknown node","Node implementation aggregate trait","Generic error type for compatibility if needed","The underlying connection has been shut down","The signature key type for this implementation","Failed to decode a socket specification","Abstraction over the state that blocks modify","State type for this consensus implementation","State type for this consensus implementation","Trait for a stateful event handler","Stateful call back handler for this consensus …","Abstraction over on disk persistence of node state","Storage type for this consensus implementation","Result for a storage type","A timeout occurred","A transaction trait for <code>BlockContents</code>","The type of the transitions we are applying","WebSockets specific error","Attempts to add a transaction, returning an Error if it …","Appends the given block to this state, returning an new …","","","","","Broadcasts a message to the network","Moves out the entire queue of received broadcast messages, …","","returns hashes of all the transactions in this block","","Moves out the entire queue of received direct messages to …","Sortition trait","","","Returns the argument unchanged.","","Retrieves a block from storage, returning <code>None</code> if it could …","Get the internal state of this storage system.","Retrieves a leaf by its hash","Retrieves a leaf by the hash of its block","Retrieves the newest Quorum Certificate","Retrieves a Quorum Certificate from storage, by the hash …","Retrieves the Quorum Certificate associated with a …","Get value stored in shared store under <code>key</code>","Retrieves a <code>State</code>, indexed by the hash of the <code>Leaf</code> that …","Produces a hash for the contents of the block","Produces a hash for an arbitrary sequence of bytes","Produces a hash for a transaction","","Module for publicly usable implementations of the traits","","Calls <code>U::from(self)</code>.","Node’s currently known to the networking implementation","Sends a direct message to a specific node","Returns a list of changes in the network that have been …","Returns an empty, template next block given this current …","Provides a future for the next received broadcast","Provides a future for the next received direct message to …","The <code>HotShot</code> implementation will call this method, with the …","Gets called to notify the persistence backend that this …","Insert <code>value</code> into the shared store under <code>key</code>.","Returns true when node is successfully initialized into …","sample from uniform distribution to decide whether or not …","Sample from bernoulli distribution to decide whether or …","Shut down this network. Afterwards this network should no …","","","","","","Calls the given <code>update_fn</code> for a list of modifications, …","Returns true if and only if the provided block is valid …","","Originating error","Input that was given","Input that was given","Originating bincode error","originating bincode error","Originating websockets error","Originating async_std error","Originating io error","originating io error","Source of error","Dummy implementation of <code>Election</code>","","","Returns the argument unchanged.","Index the vector of public keys with the current view …","Clone the static table","If its a validated token, it always has one vote","Simply verify the signature and check the membership list","Calls <code>U::from(self)</code>.","Simply make the partial signature","Creates a new dummy elector","","","","","Persistent <code>Storage</code> implementation, based upon <code>atomic_store</code>.","dummy implementation of network reliability","Networking implementation that uses libp2p generic over <code>M</code> …","Shared state for in-memory mock networking.","In memory only network simulator.","In memory, ephemeral, storage for a <code>HotShot</code> instance","Type alias for a shared collection of peerid, multiaddrs","Dummy, do nothing implementation of <code>StatefulHandler</code>","Handle to the underlying networking implementation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a connection to the given node.","Returns the size of the internal connection table","","","Creates an atomic storage at a given path. If files exist, …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generates the background processing task","Returns a boxed function …","","","","","","","","","","","","","","","","","","","","","","","","","Open an atomic storage with a given <code>AtomicStoreLoader</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Constructs new network for a node. Note that this network …","Create a new, empty, <code>MasterMap</code>","Creates a new <code>MemoryNetwork</code> and hooks it up to the group …","Creates a new <code>WNetwork</code> preloaded with connections to the …","Creates a new, empty <code>MemoryStorage</code>","","","","","","","","Open an atomic storage at a given path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns when network is ready","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>HotShot</code> instance","The type and contents of a status event emitted by a …","This node is a follower for this view","Event streaming handle for a <code>HotShot</code> instance running in …","This node is the leader for this view","Incoming message","A new view was started by this node","A next leader task was canceled by a timeout interrupt","The private key type for this signature algorithm","A new block was proposed","A replica task was canceled by a timeout interrupt","Trait for abstracting public key signatures","The node has been synced with the network","Signals the start of a new view","The transaction has been rejected. Currently HotShot does …","The view has finished.  If values were decided on, a <code>Decide</code>…","A nodes vote on the prepare field.","Will pull all the currently available events out of the …","hash of the block being proposed TODO delete this when we …","","","","","","","","","","","","","","","","","","","","","","","","","iterate through all events on a <code>NodeImplementation</code> and …","The current view","The view this vote was cast for","","","","Demonstration implementation of the <code>SignatureKey</code> trait …","","","The underlying event","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a public key from bytes","Produce a public key from a private key","Gets most recent decided leaf","","","return the timeout for a view of the underlying <code>HotShot</code>","Gets the current committed state of the <code>HotShot</code> instance","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Blocks until network is ready to be used (e.g. connected …","The justification qc for this view","TODO we should remove this this is correct, but highly …","The message kind","Hash of the item being voted on","","","Provides a reference to the underlying networking …","Will return the next event in the queue","The sender of this message","","","","Shut down the the inner hotshot and wait until all …","Produce a signature","The signature share associated with this vote","Signals to the underlying <code>HotShot</code> to unpause","Signals the underlying <code>HotShot</code> to run one round, if paused.","Provides a reference to the underlying storage for this …","Submits a transaction to the backing <code>HotShot</code> instance.","Serialize a public key to bytes","","","","","","","","","","","","","","","","","","","Will attempt to immediately pull an event out of the queue","","","","","","","Validate a signature","The view number that this event originates from","","","","","","","The block that was proposed","The list of blocks that were committed by this decision","The underlying error","The quorum certificates that accompy this Decide","The list of states that were committed by this decision","The transaction that has been rejected.","The view being started","The view that timed out","The view that timed out","The current view number","The current view number","The current view number","The view number that has just finished","Private key type for a ed25519 [<code>SignatureKey</code>] pair","Public key type for an ed25519 <code>SignatureKey</code> pair","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create an existing private key from bytes","","","","","Generate a new private key from scratch","Generate a new private key from a seed","","Generate a new private key from a seed and a number","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Convert a private key to bytes","","","","","","Return the <code>TaggedBase64</code> representation of this key.","Return the <code>TaggedBase64</code> representation of this key.","","","","","","","","",""],"i":[1,1,1,2,0,1,1,0,0,0,0,0,0,1,2,1,1,1,1,1,1,1,1,1,1,3,1,2,4,5,3,1,2,4,5,1,2,4,5,2,4,5,0,0,0,0,0,1,0,4,1,1,2,4,3,1,2,4,5,5,5,5,1,1,5,3,1,2,4,5,4,4,5,4,4,4,4,5,0,4,5,5,5,1,4,4,4,5,2,4,5,1,4,0,3,1,2,4,5,3,1,2,4,5,3,1,2,4,5,0,3,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,10,9,16,0,17,17,17,17,17,0,18,18,18,17,18,18,18,18,18,18,18,18,17,18,18,18,18,17,18,18,0,0,0,0,0,0,0,0,19,20,21,22,23,24,25,19,20,21,22,23,24,25,26,19,20,21,22,23,24,25,26,19,20,21,22,23,24,25,26,19,20,21,22,23,24,25,26,19,20,21,22,23,0,19,20,21,22,23,24,26,19,20,21,22,23,24,25,26,25,19,20,21,22,23,19,20,21,22,23,19,20,21,22,23,24,25,26,19,20,21,22,23,24,25,26,19,19,20,20,21,21,22,22,23,23,24,25,26,19,20,21,22,23,24,25,19,20,21,22,23,24,26,19,20,21,22,23,24,26,26,19,20,21,22,23,24,25,26,26,24,19,20,21,22,23,24,25,26,26,26,19,20,21,22,23,19,20,21,22,23,19,20,21,22,23,19,20,21,22,23,24,25,26,24,25,26,19,20,21,22,23,24,25,26,19,20,21,22,23,24,19,20,21,22,23,24,25,26,19,20,21,22,23,24,25,26,19,20,21,22,23,24,25,26,24,25,26,19,20,21,22,23,24,25,26,0,0,0,0,0,0,0,27,27,27,27,27,27,0,0,0,28,29,30,31,28,29,32,27,27,32,28,29,27,30,32,31,33,28,29,27,30,32,31,33,27,28,29,30,32,31,33,28,29,30,32,31,33,31,32,32,31,33,27,28,29,30,32,31,28,29,30,32,31,28,29,27,27,30,32,31,33,28,29,27,30,32,31,33,28,29,30,32,31,32,28,29,30,32,31,31,31,31,27,27,28,29,27,30,32,31,33,28,29,30,32,31,33,32,30,32,32,31,0,0,0,28,29,30,32,31,27,30,28,29,30,32,31,33,27,31,28,29,27,30,32,31,33,28,29,27,30,32,31,33,28,29,27,30,32,31,33,32,30,28,29,27,30,32,31,33,34,35,36,0,37,37,37,34,38,35,37,37,37,37,37,37,0,0,34,0,37,37,0,37,37,34,37,0,34,36,0,34,0,34,0,37,0,38,37,38,35,37,37,37,37,39,39,37,38,37,39,0,37,37,37,37,40,40,40,40,40,40,40,39,40,38,38,38,37,0,37,37,39,39,39,35,39,39,36,35,39,39,41,41,39,37,37,37,37,37,40,35,37,42,43,44,45,46,47,48,43,49,50,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,0,0,0,0,0,52,53,54,55,56,57,58,59,52,53,54,55,56,57,58,59,53,56,57,53,56,57,53,54,56,57,58,59,53,54,56,57,58,59,57,57,58,59,58,52,59,53,56,57,52,53,54,55,56,57,52,53,54,55,56,57,58,59,57,53,56,57,58,59,58,59,58,59,58,59,58,59,58,59,58,59,53,56,57,58,59,53,56,57,58,52,53,54,55,56,57,58,59,53,56,57,53,56,57,53,56,57,53,55,56,57,59,53,56,57,53,56,57,52,58,53,56,57,53,56,57,54,54,53,56,57,53,54,56,57,58,59,52,53,54,55,56,57,58,59,52,53,54,55,56,57,58,59,52,53,54,55,56,57,58,59,58,59,52,53,54,55,56,57,58,59,53,60,60,0,0,60,0,60,0,60,60,61,60,60,0,60,0,60,60,0,62,63,62,64,60,65,66,63,62,64,60,65,66,63,62,64,60,65,66,63,62,64,60,65,66,63,62,66,63,65,66,63,0,66,63,64,64,60,65,66,63,62,64,60,65,66,63,61,61,62,66,63,62,62,66,63,62,64,60,65,66,63,62,66,63,65,63,66,63,62,62,65,65,66,63,62,61,63,62,62,62,62,61,62,64,60,65,66,63,62,64,60,65,66,63,62,64,60,65,66,63,62,62,64,60,65,66,63,61,64,62,64,60,65,66,63,67,68,69,68,68,70,71,72,73,74,75,76,77,0,0,78,79,78,79,78,79,78,79,78,79,78,79,78,79,78,79,79,78,79,78,79,79,78,79,78,78,79,78,79,79,78,79,78,79,78,79,78,79,78,79,79,78,79,78,79,78,79,78,79,78,79,78,79,78,79,79,78,79],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["error",8]],[[["hotshoterror",4]],["option",4,[["backtrace",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["hotshoterror",4]],["option",4,[["error",8]]]],[[["executiontype",4]],["executiontype",4]],[[["hotshotconfig",3,[["",26,[["clone",8],["signaturekey",8]]]]]],["hotshotconfig",3,[["",26,[["clone",8],["signaturekey",8]]]]]],[[["hotshot",3,[["",26,[["clone",8],["nodeimplementation",8],["send",8],["sync",8]]]]]],["hotshot",3,[["",26,[["clone",8],["nodeimplementation",8],["send",8],["sync",8]]]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["viewnumber",3],["rwlockupgradablereadguard",3,[["sendtotasks",3,[["nodeimplementation",8]]]]]],["future",8]],[[["viewnumber",3],["rwlockwriteguard",3,[["sendtotasks",3,[["nodeimplementation",8]]]]]],["future",8]],null,null,[[["hotshoterror",4]],["str",0]],null,null,[[["hotshoterror",4],["formatter",3]],["result",4,[["error",3]]]],[[["hotshoterror",4],["formatter",3]],["result",4,[["error",3]]]],[[["executiontype",4],["formatter",3]],["result",6]],[[["hotshotconfig",3,[["",26,[["debug",8],["signaturekey",8]]]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["hotshot",3,[["",26,[["nodeimplementation",8],["sync",8],["send",8]]]]]],["future",8]],[[["hotshot",3,[["",26,[["nodeimplementation",8],["sync",8],["send",8]]]]]],["u64",0]],[[["hotshot",3,[["",26,[["nodeimplementation",8],["sync",8],["send",8]]]]]],["future",8]],[[],["indentedsection",3]],[[]],[[["intoiterator",8],["u64",0],["hotshotconfig",3]],["future",8]],[[]],[[]],[[]],[[]],[[]],null,null,[[["intoiterator",8],["u64",0],["hotshotconfig",3]],["future",8]],null,null,null,null,[[["hotshot",3,[["",26,[["nodeimplementation",8],["sync",8],["send",8]]]]]],["future",8]],null,null,[[["hotshot",3,[["",26,[["nodeimplementation",8],["sync",8],["send",8]]]]],["into",8]],["future",8]],[[["hotshot",3,[["",26,[["nodeimplementation",8],["sync",8],["send",8]]]]],["into",8]],["future",8]],[[["hotshot",3,[["",26,[["nodeimplementation",8],["sync",8],["send",8]]]]],["event",3]],["future",8]],[[["hotshoterror",4]],["option",4,[["error",8]]]],null,null,null,[[["hotshot",3,[["",26,[["nodeimplementation",8],["sync",8],["send",8]]]]],["viewnumber",3],["sender",3,[["consensusmessage",4]]],["option",4,[["sender",3,[["consensusmessage",4]]]]]],["future",8]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["dynamiccommittee",3]],[[]],[[]],[[]],[[["btreemap",3],["viewnumber",3]],["ed25519pub",3]],[[],["u64",0]],[[["btreemap",3],["viewnumber",3],["ed25519pub",3],["encodedsignature",3],["statehash",3]],["option",4]],[[]],[[["btreemap",3],["viewnumber",3],["ed25519priv",3],["statehash",3]],["option",4,[["encodedsignature",3]]]],[[],["dynamiccommittee",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["bool",0]],[[],["bool",0]],[[]],null,null,null,null,null,null,null,null,[[["blockhash",3]]],[[["leafhash",3]]],[[["transactionhash",3]]],[[["verifyhash",3]]],[[["statehash",3]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["blockhash",3]],["blockhash",3]],[[["leafhash",3]],["leafhash",3]],[[["transactionhash",3]],["transactionhash",3]],[[["verifyhash",3]],["verifyhash",3]],[[["statehash",3]],["statehash",3]],[[["quorumcertificate",3]],["quorumcertificate",3]],[[["vecquorumcertificate",3]],["vecquorumcertificate",3]],[[["leaf",3]],["leaf",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["blockhash",3],["blockhash",3]],["ordering",4]],[[["leafhash",3],["leafhash",3]],["ordering",4]],[[["transactionhash",3],["transactionhash",3]],["ordering",4]],[[["verifyhash",3],["verifyhash",3]],["ordering",4]],[[["statehash",3],["statehash",3]],["ordering",4]],[[["leafhash",3],["viewnumber",3]],["verifyhash",3]],[[],["blockhash",3]],[[],["leafhash",3]],[[],["transactionhash",3]],[[],["verifyhash",3]],[[],["statehash",3]],[[],["quorumcertificate",3]],null,[[],["result",4,[["blockhash",3]]]],[[],["result",4,[["leafhash",3]]]],[[],["result",4,[["transactionhash",3]]]],[[],["result",4,[["verifyhash",3]]]],[[],["result",4,[["statehash",3]]]],[[],["result",4,[["quorumcertificate",3]]]],[[],["result",4,[["vecquorumcertificate",3]]]],[[],["result",4,[["leaf",3]]]],[[],["vecquorumcertificate",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["blockhash",3],["blockhash",3]],["bool",0]],[[["leafhash",3],["leafhash",3]],["bool",0]],[[["transactionhash",3],["transactionhash",3]],["bool",0]],[[["verifyhash",3],["verifyhash",3]],["bool",0]],[[["statehash",3],["statehash",3]],["bool",0]],[[["quorumcertificate",3],["quorumcertificate",3]],["bool",0]],[[["vecquorumcertificate",3],["vecquorumcertificate",3]],["bool",0]],[[["leaf",3],["leaf",3]],["bool",0]],[[["blockhash",3],["formatter",3]],["result",4,[["error",3]]]],[[["leafhash",3],["formatter",3]],["result",4,[["error",3]]]],[[["transactionhash",3],["formatter",3]],["result",4,[["error",3]]]],[[["verifyhash",3],["formatter",3]],["result",4,[["error",3]]]],[[["statehash",3],["formatter",3]],["result",4,[["error",3]]]],[[["quorumcertificate",3],["formatter",3]],["result",4,[["error",3]]]],[[["vecquorumcertificate",3],["formatter",3]],["result",4,[["error",3]]]],[[["leaf",3],["formatter",3]],["result",4,[["error",3]]]],[[],["blockhash",3]],[[]],[[],["leafhash",3]],[[]],[[],["transactionhash",3]],[[]],[[],["verifyhash",3]],[[]],[[],["statehash",3]],[[]],[[]],[[]],[[]],[[],["blockhash",3]],[[],["leafhash",3]],[[],["transactionhash",3]],[[],["verifyhash",3]],[[],["statehash",3]],null,null,[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["blockhash",3],["",0]]],[[["leafhash",3],["",0]]],[[["transactionhash",3],["",0]]],[[["verifyhash",3],["",0]]],[[["statehash",3],["",0]]],[[["quorumcertificate",3],["",0]]],[[["leaf",3]],["leafhash",3]],[[["leaf",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["blockhash",3],["blockhash",3]],["bool",0]],[[["leafhash",3],["leafhash",3]],["bool",0]],[[["transactionhash",3],["transactionhash",3]],["bool",0]],[[["verifyhash",3],["verifyhash",3]],["bool",0]],[[["statehash",3],["statehash",3]],["bool",0]],[[["quorumcertificate",3],["quorumcertificate",3]],["bool",0]],[[["vecquorumcertificate",3],["vecquorumcertificate",3]],["bool",0]],[[["leaf",3],["leaf",3]],["bool",0]],[[["leafhash",3],["quorumcertificate",3],["viewnumber",3]],["leaf",3]],null,[[["blockhash",3],["blockhash",3]],["option",4,[["ordering",4]]]],[[["leafhash",3],["leafhash",3]],["option",4,[["ordering",4]]]],[[["transactionhash",3],["transactionhash",3]],["option",4,[["ordering",4]]]],[[["verifyhash",3],["verifyhash",3]],["option",4,[["ordering",4]]]],[[["statehash",3],["statehash",3]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["blockhash",3]],[[],["leafhash",3]],[[],["transactionhash",3]],[[],["verifyhash",3]],[[],["statehash",3]],[[["blockhash",3]],["result",4]],[[["leafhash",3]],["result",4]],[[["transactionhash",3]],["result",4]],[[["verifyhash",3]],["result",4]],[[["statehash",3]],["result",4]],[[["quorumcertificate",3]],["result",4]],[[["vecquorumcertificate",3]],["result",4]],[[["leaf",3]],["result",4]],null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["blockhash",3]],["vec",3,[["u8",0],["global",3]]]],[[["leafhash",3]],["vec",3,[["u8",0],["global",3]]]],[[["transactionhash",3]],["vec",3,[["u8",0],["global",3]]]],[[["verifyhash",3]],["vec",3,[["u8",0],["global",3]]]],[[["statehash",3]],["vec",3,[["u8",0],["global",3]]]],[[["quorumcertificate",3]],["vecquorumcertificate",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["dentryblock",3]],["result",4,[["dentryblock",3]]]],null,null,[[["state",3]],["result",4,[["state",3]]]],[[["",0]],["error",8]],[[["dentryerror",4]],["option",4,[["backtrace",3]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["dentryerror",4]],["option",4,[["error",8]]]],[[["subtraction",3]],["subtraction",3]],[[["addition",3]],["addition",3]],[[["transaction",3]],["transaction",3]],[[["state",3]],["state",3]],[[["dentryblock",3]],["dentryblock",3]],[[["dentrynode",3,[["clone",8]]]],["dentrynode",3,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["dentryblock",3]],["hashset",3,[["transactionhash",3]]]],[[["state",3]]],[[],["state",3]],[[],["dentryblock",3]],[[],["dentrynode",3]],[[["dentryerror",4]],["str",0]],[[],["result",4,[["subtraction",3]]]],[[],["result",4,[["addition",3]]]],[[],["result",4,[["transaction",3]]]],[[],["result",4,[["state",3]]]],[[],["result",4,[["dentryblock",3]]]],[[["subtraction",3],["subtraction",3]],["bool",0]],[[["addition",3],["addition",3]],["bool",0]],[[["transaction",3],["transaction",3]],["bool",0]],[[["state",3],["state",3]],["bool",0]],[[["dentryblock",3],["dentryblock",3]],["bool",0]],[[["subtraction",3],["formatter",3]],["result",6]],[[["addition",3],["formatter",3]],["result",6]],[[["dentryerror",4],["formatter",3]],["result",6]],[[["dentryerror",4],["formatter",3]],["result",6]],[[["transaction",3],["formatter",3]],["result",6]],[[["state",3],["formatter",3]],["result",6]],[[["dentryblock",3],["formatter",3]],["result",6]],[[["dentrynode",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[],["state",3]],[[["subtraction",3],["",0]]],[[["addition",3],["",0]]],[[["transaction",3],["",0]]],[[["state",3],["",0]]],[[["dentryblock",3]],["blockhash",3]],[[["dentryblock",3],["",0]]],[[],["leafhash",3]],[[],["transactionhash",3]],[[],["indentedsection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["subtraction",3],["subtraction",3]],["bool",0]],[[["addition",3],["addition",3]],["bool",0]],[[["transaction",3],["transaction",3]],["bool",0]],[[["state",3],["state",3]],["bool",0]],[[["dentryblock",3],["dentryblock",3]],["bool",0]],[[],["dentrynode",3]],[[["state",3]]],null,null,[[["state",3]]],null,[[["dentryblock",3]],["leaf",3,[["dentryblock",3],["state",3]]]],[[],["quorumcertificate",3]],[[["state",3],["",0]],["transaction",3]],[[["subtraction",3]],["result",4]],[[["addition",3]],["result",4]],[[["transaction",3]],["result",4]],[[["state",3]],["result",4]],[[["dentryblock",3]],["result",4]],[[["dentryerror",4]],["option",4,[["error",8]]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["state",3]],["bool",0]],[[["transaction",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["error",8]],[[["networkerror",4]],["option",4,[["backtrace",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["networkerror",4]],["option",4,[["error",8]]]],[[["",0]],["hashset",3,[["transactionhash",3],["randomstate",3]]]],[[["networkerror",4]],["str",0]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],null,[[["networkerror",4],["formatter",3]],["result",4,[["error",3]]]],[[["networkerror",4],["formatter",3]],["result",4,[["error",3]]]],[[]],[[["networknodehandleerror",4]],["networkerror",4]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["leafhash",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["viewnumber",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["",26,[["serialize",8],["send",8],["sync",8]]]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["leafhash",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["blockhash",3]],[[],["leafhash",3]],[[],["transactionhash",3]],[[],["indentedsection",3]],null,[[]],[[]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["vec",3,[["global",3]]],["vec",3,[["global",3]]]]],[[["",0]]],[[["",0],["",26,[["serialize",8],["send",8],["sync",8]]],["",26,[["serialize",8],["send",8],["sync",8]]]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["duration",3]],[[["",0]],["bool",0]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["networkerror",4]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["bool",0]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["staticcommittee",3],["viewnumber",3]],["ed25519pub",3]],[[["staticcommittee",3]]],[[["staticcommittee",3]],["u64",0]],[[["staticcommittee",3],["viewnumber",3],["ed25519pub",3],["statehash",3]],["option",4]],[[]],[[["staticcommittee",3],["viewnumber",3],["ed25519priv",3],["statehash",3]],["option",4]],[[["vec",3,[["ed25519pub",3]]]],["staticcommittee",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]],["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["libp2pnetwork",3,[["",26,[["clone",8],["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["",26,[["clone",8],["signaturekey",8]]]]]],["libp2pnetwork",3,[["",26,[["clone",8],["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["",26,[["clone",8],["signaturekey",8]]]]]],[[["dummyreliability",3]],["dummyreliability",3]],[[["memorynetwork",3,[["clone",8],["",26,[["clone",8],["signaturekey",8]]]]]],["memorynetwork",3,[["clone",8],["",26,[["clone",8],["signaturekey",8]]]]]],[[["wnetwork",3,[["clone",8],["",26,[["clone",8],["signaturekey",8]]]]]],["wnetwork",3,[["clone",8],["",26,[["clone",8],["signaturekey",8]]]]]],[[["atomicstorage",3,[["clone",8],["clone",8]]]],["atomicstorage",3,[["clone",8],["clone",8]]]],[[["memorystorage",3,[["clone",8],["clone",8]]]],["memorystorage",3,[["clone",8],["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["signaturekey",8],["",26,[["tosocketaddrs",8],["debug",8]]]],["future",8]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["future",8]],[[],["storageresult",6,[["atomicstorage",3,[["blockcontents",8],["state",8]]]]]],[[],["storageresult",6,[["memorystorage",3,[["blockcontents",8],["state",8]]]]]],[[["path",3]],["result",6,[["atomicstorage",3]]]],[[],["stateless",3]],[[],["memorystorage",3]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["stateless",3],["formatter",3]],["result",4,[["error",3]]]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["formatter",3]],["result",6]],[[["dummyreliability",3],["formatter",3]],["result",6]],[[["mastermap",3,[["signaturekey",8]]],["formatter",3]],["result",6]],[[["memorynetwork",3,[["signaturekey",8]]],["formatter",3]],["result",6]],[[["wnetwork",3,[["signaturekey",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["sender",3]],["option",4,[["vec",3,[["boxfuture",6,[["result",4,[["networkerror",4]]]]]]]]]],[[["usize",0],["usize",0]],["box",3,[["fn",8]]]],[[["usize",0],["usize",0]],["box",3,[["fn",8]]]],[[["usize",0],["usize",0]],["box",3,[["fn",8]]]],[[["atomicstorage",3,[["blockcontents",8],["state",8]]],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorystorage",3,[["blockcontents",8],["state",8]]],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["atomicstorage",3,[["blockcontents",8],["state",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorystorage",3,[["blockcontents",8],["state",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["atomicstorage",3,[["blockcontents",8],["state",8]]],["leafhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorystorage",3,[["blockcontents",8],["state",8]]],["leafhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["atomicstorage",3,[["blockcontents",8],["state",8]]],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorystorage",3,[["blockcontents",8],["state",8]]],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["atomicstorage",3,[["blockcontents",8],["state",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorystorage",3,[["blockcontents",8],["state",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["atomicstorage",3,[["blockcontents",8],["state",8]]],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorystorage",3,[["blockcontents",8],["state",8]]],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["atomicstorage",3,[["blockcontents",8],["state",8]]],["viewnumber",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorystorage",3,[["blockcontents",8],["state",8]]],["viewnumber",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["",26,[["serialize",8],["send",8],["sync",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["",26,[["serialize",8],["send",8],["sync",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]],["",26,[["serialize",8],["send",8],["sync",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["atomicstorage",3,[["blockcontents",8],["state",8]]],["leafhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorystorage",3,[["blockcontents",8],["state",8]]],["leafhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["testablesignaturekey",8]]]],["option",4,[["usize",0]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["testablesignaturekey",8]]]],["option",4,[["usize",0]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["testablesignaturekey",8]]]],["option",4,[["usize",0]]]],[[["atomicstoreloader",3],["option",4,[["tempdir",3]]]],["result",6,[["atomicstorage",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]],["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]],["pin",3,[["box",3,[["future",8]]]]]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["networknodeconfig",3],["signaturekey",8],["arc",3,[["rwlock",3,[["vec",3]]]]],["usize",0],["usize",0]],["future",8]],[[],["arc",3,[["mastermap",3,[["signaturekey",8]]]]]],[[["arc",3,[["mastermap",3]]],["option",4,[["arc",3,[["networkreliability",8]]]]]],["memorynetwork",3]],[[["signaturekey",8],["str",0],["u16",0],["option",4,[["duration",3]]]],["future",8]],[[],["memorystorage",3]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["stateless",3],["vec",3,[["global",3]]],["vec",3,[["global",3]]]]],[[["path",3]],["result",6,[["atomicstorage",3]]]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["",26,[["serialize",8],["send",8],["sync",8]]],["",26,[["serialize",8],["send",8],["sync",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]],["",26,[["serialize",8],["send",8],["sync",8]]],["",26,[["serialize",8],["send",8],["sync",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]],["",26,[["serialize",8],["send",8],["sync",8]]],["",26,[["serialize",8],["send",8],["sync",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["dummyreliability",3]],["duration",3]],[[["dummyreliability",3]],["bool",0]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorynetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["wnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["debug",8],["sync",8]]],["signaturekey",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["atomicstorage",3,[["blockcontents",8],["state",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["memorystorage",3,[["blockcontents",8],["state",8]]]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["libp2pnetwork",3,[["",26,[["clone",8],["serialize",8],["deserializeowned",8],["send",8],["sync",8],["debug",8]]],["signaturekey",8]]]],["future",8]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["hotshothandle",3,[["nodeimplementation",8]]]],["result",4,[["vec",3,[["event",3]]],["hotshoterror",4]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["hotshothandle",3,[["nodeimplementation",8]]]],[[["event",3]],["event",3]],[[["eventtype",4]],["eventtype",4]],[[["message",3]],["message",3]],[[["timedout",3]],["timedout",3]],[[["vote",3]],["vote",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["future",8]],null,null,[[],["result",4,[["message",3]]]],[[],["result",4,[["timedout",3]]]],[[],["result",4,[["vote",3]]]],null,[[["timedout",3],["timedout",3]],["bool",0]],[[["vote",3],["vote",3]],["bool",0]],null,[[["event",3],["formatter",3]],["result",4,[["error",3]]]],[[["eventtype",4],["formatter",3]],["result",4,[["error",3]]]],[[["message",3],["formatter",3]],["result",4,[["error",3]]]],[[["timedout",3],["formatter",3]],["result",4,[["error",3]]]],[[["vote",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["encodedpublickey",3]],["option",4]],[[]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["future",8]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["u64",0]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["future",8]],[[["timedout",3],["",0]]],[[["vote",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["future",8]],null,null,null,null,[[["timedout",3],["timedout",3]],["bool",0]],[[["vote",3],["vote",3]],["bool",0]],[[["hotshothandle",3,[["nodeimplementation",8]]]]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["future",8]],null,[[["message",3]],["result",4]],[[["timedout",3]],["result",4]],[[["vote",3]],["result",4]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["future",8]],[[],["encodedsignature",3]],null,[[["hotshothandle",3,[["nodeimplementation",8]]]],["future",8]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["future",8]],[[["hotshothandle",3,[["nodeimplementation",8]]]]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["future",8]],[[["",0]],["encodedpublickey",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["hotshothandle",3,[["nodeimplementation",8]]]],["result",4,[["option",4,[["event",3]]],["hotshoterror",4]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["encodedsignature",3]],["bool",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["ed25519priv",3]],["ed25519priv",3]],[[["ed25519pub",3]],["ed25519pub",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["ed25519priv",3],["ed25519priv",3]],["ordering",4]],[[["ed25519pub",3],["ed25519pub",3]],["ordering",4]],[[],["result",4,[["ed25519priv",3]]]],[[],["result",4,[["ed25519pub",3]]]],[[["ed25519priv",3],["ed25519priv",3]],["bool",0]],[[["ed25519pub",3],["ed25519pub",3]],["bool",0]],[[["ed25519priv",3],["formatter",3]],["result",4,[["error",3]]]],[[["ed25519pub",3],["formatter",3]],["result",4,[["error",3]]]],[[["ed25519pub",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[],["option",4,[["ed25519priv",3]]]],[[["encodedpublickey",3]],["option",4,[["ed25519pub",3]]]],[[],["ed25519pub",3]],[[["str",0]],["result",4,[["ed25519priv",3],["string",3]]]],[[["str",0]],["result",4,[["ed25519pub",3],["string",3]]]],[[],["ed25519priv",3]],[[],["ed25519priv",3]],[[["u64",0]]],[[["u64",0]],["ed25519priv",3]],[[["",0],["",0]],["u64",0]],[[["ed25519pub",3],["",0]]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[]],[[]],[[["ed25519priv",3],["ed25519priv",3]],["bool",0]],[[["ed25519pub",3],["ed25519pub",3]],["bool",0]],[[["ed25519priv",3],["ed25519priv",3]],["option",4,[["ordering",4]]]],[[["ed25519pub",3],["ed25519pub",3]],["option",4,[["ordering",4]]]],[[["ed25519priv",3]],["result",4]],[[["ed25519pub",3]],["result",4]],[[],["encodedsignature",3]],[[["ed25519priv",3]],["vec",3,[["u8",0],["global",3]]]],[[["ed25519pub",3]],["encodedpublickey",3]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["ed25519priv",3]],["taggedbase64",3]],[[["ed25519pub",3]],["taggedbase64",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["ed25519pub",3],["encodedsignature",3]],["bool",0]],[[]],[[]]],"p":[[4,"HotShotError"],[4,"ExecutionType"],[3,"HotShotInner"],[3,"HotShotConfig"],[3,"HotShot"],[13,"BadOrForgedQC"],[13,"Misc"],[13,"InvalidState"],[13,"ItemNotFound"],[13,"InsufficientValidSignatures"],[13,"StorageError"],[13,"TimeoutError"],[13,"FailedToMessageLeader"],[13,"FailedToBroadcast"],[13,"NetworkFault"],[13,"ViewTimeoutError"],[8,"Vrf"],[3,"DynamicCommittee"],[3,"BlockHash"],[3,"LeafHash"],[3,"TransactionHash"],[3,"VerifyHash"],[3,"StateHash"],[3,"QuorumCertificate"],[3,"VecQuorumCertificate"],[3,"Leaf"],[4,"DEntryError"],[3,"Subtraction"],[3,"Addition"],[3,"Transaction"],[3,"DEntryBlock"],[3,"State"],[3,"DEntryNode"],[8,"NodeImplementation"],[8,"State"],[8,"StatefulHandler"],[4,"NetworkError"],[8,"BlockContents"],[8,"NetworkingImplementation"],[8,"Storage"],[8,"NetworkReliability"],[13,"Other"],[13,"SocketDecodeError"],[13,"NoSocketsError"],[13,"FailedToSerialize"],[13,"FailedToDeserialize"],[13,"WebSocket"],[13,"ExecutorError"],[13,"FailedToBindListener"],[13,"Timeout"],[3,"StaticCommittee"],[3,"Stateless"],[3,"Libp2pNetwork"],[3,"DummyReliability"],[3,"MasterMap"],[3,"MemoryNetwork"],[3,"WNetwork"],[3,"AtomicStorage"],[3,"MemoryStorage"],[4,"EventType"],[8,"SignatureKey"],[3,"HotShotHandle"],[3,"Vote"],[3,"Event"],[3,"Message"],[3,"TimedOut"],[13,"Propose"],[13,"Decide"],[13,"Error"],[13,"TransactionRejected"],[13,"NewView"],[13,"ReplicaViewTimeout"],[13,"NextLeaderViewTimeout"],[13,"Leader"],[13,"Follower"],[13,"Synced"],[13,"ViewFinished"],[3,"Ed25519Priv"],[3,"Ed25519Pub"]]},\
"libp2p_networking":{"doc":"Library for p2p communication","t":[0,0,3,11,11,11,11,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,2,13,4,4,3,3,3,4,3,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,11,0,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,5,11,11,5,11,5,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,3,3,4,4,13,13,13,3,13,13,3,13,4,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,4,3,13,13,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,3,3,3,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,3,4,13,3,13,3,13,13,3,4,13,3,13,3,4,13,3,13,3,13,3,13,3,13,3,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["message","network","Message","borrow","borrow_mut","clone","clone_into","content","deserialize","eq","fmt","from","into","ne","sender","serialize","to_owned","topic","try_from","try_into","type_id","vzip","AddKnownPeers","BeginBootstrap","Bootstrap","CantKillTwice","ClientRequest","Conductor","DHTError","DHTEvent","DMEvent","DeserializationError","DirectRequest","DirectRequest","DirectResponse","DirectResponse","GetConnectedPeerNum","GetConnectedPeers","GetDHT","GetRoutingTable","GossipEvent","GossipMsg","GossipMsg","IdentifyEvent","IgnorePeers","IsBootstrapped","LookupPeer","MeshParams","NetworkDef","NetworkError","NetworkError","NetworkEvent","NetworkEventInternal","NetworkNode","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeType","NodeConfigError","Prune","PutDHT","RecvError","Regular","SendError","SerializationError","Shutdown","Subscribe","TimeoutError","UninitializedField","Unsubscribe","ValidationError","add_address","add_direct_request","add_direct_response","add_known_peers","add_known_peers","addresses_of_peer","as_error_source","as_error_source","backtrace","begin_bootstrap","behaviours","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","build","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","connected_pids","connected_pids","default","default","default","default","description","deserialize","deserialize_msg","dht","direct_request","direct_response","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","gen_multiaddr","gen_transport","get_random_handle","get_record","get_record","get_record_timeout","gossip","header","header","id","identity","identity","ignore_peers","in_current_span","in_current_span","inject_address_change","inject_connection_closed","inject_connection_established","inject_dial_failure","inject_event","inject_expired_external_addr","inject_expired_listen_addr","inject_listen_failure","inject_listener_closed","inject_listener_error","inject_new_external_addr","inject_new_listen_addr","inject_new_listener","into","into","into","into","into","into","into","into","into","into","into","into","is_killed","listen_addr","lookup_pid","mark_killed","mesh_n","mesh_n_high","mesh_n_low","mesh_outbound_min","mesh_params","mesh_params","modify_state","network_node_handle_error","new","new","new","new_handler","node_type","node_type","notify_webui","num_connected","num_connected","peer_id","peer_id","poll","print_routing_table","prune_peer","publish_gossip","put_record","put_record","put_record_timeout","recv_kill","recv_network","register_webui_listener","replication_factor","replication_factor","request_response","serialize","serialize_msg","shutdown","source","spawn_handler","spawn_listeners","spin_up_swarm","start_listen","state","state_changed","state_wait_timeout_until","state_wait_timeout_until_with_trigger","state_wait_until","subscribe","subscribe_gossip","to_connect_addrs","to_connect_addrs","to_connect_addrs","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsubscribe","unsubscribe_gossip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_to_connect","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","key","key","notify","notify","value","0","0","0","1","1","1","2","0","0","0","0","0","0","source","source","source","source","source","source","source","dht","direct_message","direct_message_codec","exponential_backoff","gossip","Bootstrap","DHTBehaviour","DHTEvent","DHTProgress","Finished","InProgress","IsBootstrapped","KadPutQuery","NotStarted","NotStarted","RandomWalk","Started","State","add_address","add_bootstrap_nodes","addresses_of_peer","backoff","begin_bootstrap","begin_bootstrap","bootstrap_nodes","bootstrap_state","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","event_queue","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_hash","get_record","hash","in_progress_get_closest_peers","inject_address_change","inject_connection_closed","inject_connection_established","inject_dial_failure","inject_event","inject_expired_external_addr","inject_expired_listen_addr","inject_listen_failure","inject_listener_closed","inject_listener_error","inject_new_external_addr","inject_new_listen_addr","inject_new_listener","into","into","into","into","into","into","into","kadem","lookup_peer","ne","new","new_handler","peer_id","poll","print_routing_table","put_record","query_closest_peers","random_walk","replication_factor","state","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","DMBehaviour","DMEvent","DMRequest","DirectRequest","DirectResponse","add_address","add_direct_request","add_direct_response","addresses_of_peer","backoff","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","fmt","from","from","from","inject_address_change","inject_connection_closed","inject_connection_established","inject_dial_failure","inject_event","inject_expired_external_addr","inject_expired_listen_addr","inject_listen_failure","inject_listener_closed","inject_listener_error","inject_new_external_addr","inject_new_listen_addr","inject_new_listener","into","into","into","new","new_handler","peer_id","poll","remove_address","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","1","1","2","0","0","DirectMessageCodec","DirectMessageProtocol","DirectMessageRequest","DirectMessageResponse","MAX_MSG_SIZE_DM","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","ne","ne","protocol_name","read_request","read_response","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_request","write_response","ExponentialBackoff","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","get_hash","hash","into","is_expired","ne","new","reset","start_next","to_owned","try_from","try_into","type_id","vzip","GossipBehaviour","GossipEvent","GossipMsg","addresses_of_peer","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drain_publish_gossips","eq","fmt","from","from","inject_address_change","inject_connection_closed","inject_connection_established","inject_dial_failure","inject_event","inject_expired_external_addr","inject_expired_listen_addr","inject_listen_failure","inject_listener_closed","inject_listener_error","inject_new_external_addr","inject_new_listen_addr","inject_new_listener","into","into","ne","new","new_handler","poll","publish_gossip","subscribe_gossip","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unsubscribe_gossip","vzip","vzip","0","1","CancelledRequest","CancelledRequestSnafu","DHTError","DialError","DialSnafu","Disagreement","DisagreementSnafu","GetRecord","GetRecordError","GetRecordSnafu","GetRecordWrapperError","GossipsubBuild","GossipsubBuildSnafu","GossipsubConfig","GossipsubConfigSnafu","NetworkError","NoKnownPeers","NoKnownPeersSnafu","NotFound","NotFoundSnafu","PublishError","PublishSnafu","PutRecord","PutRecordSnafu","StreamClosed","StreamClosedSnafu","Transport","TransportLaunch","TransportLaunchSnafu","TransportSnafu","as_error_source","as_error_source","as_error_source","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","description","description","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","message","message","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","source","source","source","source","message","message","source","source","source","source","NetworkSnafu","NodeConfigSnafu","RecvSnafu","SendSnafu","SerializationSnafu","TimeoutSnafu","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["libp2p_networking","","libp2p_networking::message","","","","","","","","","","","","","","","","","","","","libp2p_networking::networklibp2p_networking::network::ClientRequest","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::NetworkEvent","","","","","","","libp2p_networking::network::NetworkEventInternal","","","","libp2p_networking::network::NetworkNodeConfigBuilderError","","libp2p_networking::network::NetworkNodeHandleError","","","","","","","libp2p_networking::network::behaviours","","","","","libp2p_networking::network::behaviours::dht","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::behaviours::dht::DHTProgress","libp2p_networking::network::behaviours::direct_message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::behaviours::direct_message::DMEvent","","","","","libp2p_networking::network::behaviours::direct_message_codec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::behaviours::exponential_backoff","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::behaviours::gossip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::behaviours::gossip::GossipEvent","","libp2p_networking::network::errorlibp2p_networking::network::error::DHTError","","","libp2p_networking::network::error::GetRecordWrapperError","libp2p_networking::network::error::NetworkError","","","","","","libp2p_networking::network::network_node_handle_error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Example message used by the UI library","Network logic","example message that may be sent to the swarm. Used in the …","","","","","the content of the message","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","the peerid of the sender","","","the topic associated with the msg","","","","","add vec of known peers or addresses","Start the bootstrap process to kademlia","bootstrap node accepts all connections","The inner <code>NetworkNode</code> has already been killed","Actions to send from the client to the swarm","conductor node is never pruned","Error in the kademlia DHT","a DHT event","a direct message event","Failure to deserialize a message","client request to send a direct serialized message","Recv-ed a direct message from a node","client request to send a direct reply to a message","Recv-ed a direct response from a node (that hopefully was …","Request the number of connected peers","Request the set of connected peers","Get(Key, Chan)","Print the routing  table to stderr, debugging only","a gossip  event","broadcast a serialized message","Recv-ed a broadcast","a identify event. Is boxed because this event is much …","Ignore peers. Only here for debugging purposes. Allows us …","Report that kademlia has successfully bootstrapped into …","Get address of peer","NOTE: …","Overarching network behaviour performing:","","Error generating network","events generated by the swarm that we wish to relay to the …","internal representation of the network events only used …","Network definition","describe the configuration of the network","Builder for <code>NetworkNodeConfig</code>.","Error type for NetworkNodeConfigBuilder","A handle containing:","Error wrapper type for interacting with swarm handle","this is mostly to estimate how many network connections a …","Error building Node config","prune a peer","Put(Key, Value) into DHT relay success back on channel","Error receiving message from network","regular node has a limit to the number of connections to …","Error sending request to network","Failure to serialize a message","kill the swarm","subscribe to a topic","Error waiting for connections","Uninitialized field","unsubscribe from a topic","Custom validation error","Add an address","Add a direct request for a given peer","Add a direct response for a channel","Tell libp2p about known network nodes","initialize the DHT with known peers add the peers to …","","","","","Notify the network to begin the bootstrap process","networking behaviours wrapping libp2p’s behaviours","","","","","","","","","","","","","","","","","","","","","","","","","address to bind to","address to bind to","Builds a new <code>NetworkNodeConfig</code>.","","","","","","","","","","Return a reference to the network config","return hashset of PIDs this node is connected to","return hashset of PIDs this node is connected to","","","","","","","Deserialize an arbitrary message","purpose: peer routing purpose: storing pub key &lt;-&gt; peer id …","Make a direct request to <code>peer_id</code> containing <code>msg</code>","Reply with <code>msg</code> to a request over <code>chan</code>","","Contains the <code>NetworkError</code> snafu types","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Bind all interfaces on port <code>port</code> NOTE we may want …","Generate authenticated transport, copied from …","Given a slice of handles assumed to be larger than 0, …","Retrieve a value for a key from the DHT. Value …","Receive a record from the kademlia DHT if it exists. Must …","Get a record from the kademlia DHT with a timeout","Gossip a message to peers","","","Get a reference to the network node handle’s id.","optional identity","optional identity","Ignore <code>peers</code> when pruning e.g. maintain their connection","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the network state is killed","Get a reference to the network node handle’s listen addr.","Look up a peer’s addresses in kademlia NOTE: this should …","Mark this network as killed","mesh_n from gossipsub","mesh_n_high from gossipsub","mesh_n_low from gossipsub","mesh_outbound_min from gossipsub","parameters for gossipsub mesh network","parameters for gossipsub mesh network","Modify the state. This will automatically call …","Re-exports of the snafu errors that <code>NetworkNodeHandleError</code> …","Create a new instance of a <code>NetworkDef</code>","constructs a new node listening on <code>known_addr</code>","Creates a new <code>Network</code> with the given settings.","","The type of node (bootstrap etc)","The type of node (bootstrap etc)","Notify the webui that either the <code>state</code> or <code>connection_state</code> …","Returns number of peers this node is connected to","Returns number of peers this node is connected to","Get a reference to the network node handle’s peer id.","Get a reference to the network node’s peer id.","","Print out the routing table used by kademlia NOTE: only …","Forcefully disconnet from a peer","Publish a given gossip","Publish a key/value to the kv store. Once replicated upon …","Insert a record into the kademlia DHT","Insert a record into the kademlia DHT with a timeout","Get a clone of the internal <code>killed</code> receiver","Get a clone of the internal network receiver","Register a webui listener","replication factor for entries in the DHT default is …","replication factor for entries in the DHT default is …","purpose: directly messaging peer","","Serialize an arbitrary message","Cleanly shuts down a swarm node This is done by sending a …","","Glue function that listens for events from the Swarm …","Spawn a task to listen for requests on the returned channel","a single node, connects them to each other and waits for …","starts the swarm listening on <code>listen_addr</code> and optionally …","Get a clone of the internal state","Get a reference to the internal Condvar. This will be …","Call <code>wait_timeout_until</code> on the state’s <code>SubscribableMutex</code>","Call <code>wait_timeout_until_with_trigger</code> on the state’s …","Call <code>wait_until</code> on the state’s <code>SubscribableMutex</code>","Subscribe to a topic","Subscribe to a given topic","list of addresses to connect to at initialization","Addresses to connect to at init DEPRECATED to be removed …","list of addresses to connect to at initialization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsubscribe from a topic","Unsubscribe from a given topic","","","","","","","","","","","","","Kick off bootstrap processs, then wait for a node to …","","","","","","","","","","","","","","","","","","","Key to publish under","Key to search for","Channel to notify caller of result of publishing","Channel to notify caller of value (or failure to find …","Value to publish under","","","","","","","","","","","","","","source of error","source of error","source of error","source of error","source of error","source of error","dummy source","Wrapper around Kademlia","Wrapper around <code>RequestResponse</code>","Implementation of a codec for sending messages for …","exponential backoff type","Wrapper around gossipsub","State of bootstrapping","Behaviour wrapping libp2p’s kademlia included:","DHT event enum","represents progress through DHT","Sucessfully completed","The query has been started","Only event tracked currently is when we successfully …","Metadata holder for get query","Not in progress","The query has not been started","State of the periodic random walk","In progress","State used for random walk and bootstrapping","Passthru to kademlia Associate address with kademlia peer","Save in case kademlia forgets about bootstrap nodes","","Retry timeout","Begin the bootstrap process","client approval to begin bootstrap","bootstrap nodes","State of bootstrapping","","","","","","","","","","","","","","","","","","","","","","","","","","List of kademlia events","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Retrieve a value for a key from the DHT. Value …","","in progress queries for nearby peers","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Kademlia behaviour","query a peer (e.g. obtain its address if it exists)","","Create a new DHT behaviour","","the peer id (useful only for debugging right now)","","print out the routing table to stderr","Publish a key/value to the kv store. Once replicated upon …","Start a query for the closest peers","State of last random walk","replication factor","State of bootstrap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper metadata around libp2p’s request response usage: …","Lilst of direct message output events","Request to direct message a peert","We received as Direct Request","We received a Direct Response","Add address to request response behaviour","Add a direct request for a given peer","Add a direct response for a channel","","backoff since last attempted request","","","","","","","the data","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new behaviour based on request response","","the recv-ers peer id","","Remove address from request response behaviour","","","","","","","","","","","","","","","","","","","","Codec for direct messages","Protocol for direct messages","Wrapper type describing a serialized direct message","wrapper type describing the response to direct message","Maximum size of a direct message","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Track (with exponential backoff) sending of some sort of …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Whether or not the timeout is expired","","Create new backoff","reset backoff","start next timeout result: whether or not we succeeded if …","","","","","","wrapper metadata around libp2p’s gossip protocol","Output event","We received a gossip","","","","","","","","Attempt to drain the internal gossip list, publishing each …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create new gossip behavioru based on gossipsub","","","Publish a given gossip","Subscribe to a given topic","","","","","","","","Unsubscribe from a given topic","","","","","request was ignored serverside","SNAFU context selector for the <code>DHTError::CancelledRequest</code> …","Error enum for querying store because for some reason, …","Error initiating dial of peer","SNAFU context selector for the <code>NetworkError::DialError</code> …","nodes disagreed on the value","SNAFU context selector for the <code>DHTError::Disagreement</code> …","Get Record Error","wrapper","SNAFU context selector for the <code>DHTError::GetRecord</code> variant","Wrapper Error enum for <code>libp2p::kad::GetRecordError</code>. …","Error building the gossipsub instance","SNAFU context selector for the <code>NetworkError::GossipsubBuild</code>…","Error building the gossipsub configuration","SNAFU context selector for the …","wrapper type for errors generated by the <code>Network</code>","Error when there are no known peers to bootstrap off","SNAFU context selector for the <code>NetworkError::NoKnownPeers</code> …","could not find 2 or more nodes that had the value","SNAFU context selector for the <code>DHTError::NotFound</code> variant","Error publishing a gossipsub message","SNAFU context selector for the <code>NetworkError::PublishError</code> …","Get Record Error","SNAFU context selector for the <code>DHTError::PutRecord</code> variant","Error if one of the channels to or from the swarm is closed","SNAFU context selector for the <code>NetworkError::StreamClosed</code> …","Error during dialing or listening","Error establishing backend connection","SNAFU context selector for the …","SNAFU context selector for the <code>NetworkError::Transport</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","source of error","source of error","source of error","source of error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,4,0,3,4,5,5,4,2,6,2,6,2,2,2,2,5,2,6,5,2,6,2,0,0,0,4,0,0,0,0,0,0,0,0,0,4,2,2,4,3,4,4,2,2,4,7,2,7,8,8,8,9,10,8,7,4,4,9,0,8,11,12,7,13,9,4,10,3,2,6,5,8,11,12,7,13,9,4,10,3,2,6,5,12,11,12,4,11,12,13,3,11,12,13,3,9,9,10,11,12,13,3,4,3,0,8,9,9,3,0,8,11,7,7,13,9,4,4,10,3,2,6,5,8,11,12,7,7,7,13,9,4,10,3,2,6,5,5,5,5,5,3,0,0,0,8,9,9,9,7,4,9,12,11,9,7,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,12,7,13,9,4,10,3,2,6,5,9,9,9,9,13,13,13,13,12,11,9,0,8,9,10,8,12,11,9,9,10,9,10,8,9,9,8,8,9,9,9,9,9,12,11,8,3,0,9,4,0,10,0,10,9,9,9,9,9,9,8,12,8,11,11,12,13,3,7,4,8,11,12,7,13,9,4,10,3,2,6,5,8,11,12,7,13,9,4,10,3,2,6,5,8,11,12,7,13,9,4,10,3,2,6,5,9,8,8,11,12,7,13,9,4,10,3,2,6,5,9,14,15,16,17,18,19,20,21,22,23,24,25,14,15,16,17,18,25,26,27,26,27,26,28,29,30,28,29,30,29,31,32,33,34,35,36,37,38,39,40,41,42,43,0,0,0,0,0,0,0,0,0,44,45,46,0,44,45,0,44,0,47,47,47,48,47,47,47,47,47,49,48,44,46,50,45,47,49,48,44,46,50,45,48,44,46,45,48,44,46,45,44,46,45,47,48,44,46,50,45,47,49,48,44,46,50,45,45,47,45,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,49,48,44,46,50,45,47,47,45,47,47,47,47,47,47,47,47,47,48,48,44,46,45,47,49,48,44,46,50,45,47,49,48,44,46,50,45,47,49,48,44,46,50,45,47,49,48,44,46,50,45,51,0,0,0,52,52,53,53,53,53,54,54,53,52,54,53,52,54,52,54,53,52,53,53,53,53,53,53,53,53,53,53,53,53,53,54,53,52,53,53,54,53,53,54,53,52,54,53,52,54,53,52,54,53,52,55,56,55,56,55,57,58,0,0,0,0,0,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,57,58,59,60,60,60,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,60,60,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,62,63,63,62,63,62,62,62,63,62,62,63,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,62,62,63,63,63,63,63,62,63,62,63,62,63,62,63,63,62,64,64,65,0,0,66,0,65,0,65,67,0,0,66,0,66,0,0,66,0,65,0,66,0,65,0,66,0,66,66,0,0,66,65,67,66,65,68,69,70,71,72,73,74,75,66,76,77,78,79,80,65,67,68,69,70,71,72,73,74,75,66,76,77,78,79,80,65,67,71,72,73,75,78,79,66,65,68,69,70,71,72,73,74,75,76,77,78,79,80,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,65,67,66,65,71,72,73,75,78,79,68,69,70,71,72,73,74,75,66,66,76,77,78,79,80,65,65,67,67,68,69,70,71,72,73,74,75,66,76,77,78,79,80,65,67,66,65,67,66,65,67,68,69,70,71,72,73,74,75,66,76,77,78,79,80,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,71,72,66,65,68,69,70,71,72,73,74,75,76,77,78,79,80,65,67,66,65,67,68,69,70,71,72,73,74,75,66,76,77,78,79,80,65,67,68,69,70,71,72,73,74,75,66,76,77,78,79,80,65,67,68,69,70,71,72,73,74,75,66,76,77,78,79,80,65,67,68,69,70,71,72,73,74,75,66,76,77,78,79,80,65,67,81,82,83,84,85,86,87,88,89,90,0,0,0,0,0,0,91,92,93,94,95,96,91,92,93,94,95,96,93,94,91,92,93,94,95,96,91,92,93,94,95,96,93,94,91,92,93,94,95,96,91,92,93,94,95,96,91,92,93,94,95,96,91,92,93,94,95,96,91,92,93,94,95,96,91,92,93,94,95,96,91,92,93,94,95,96,91,92,93,94,95,96,91,92,93,94,95,96],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["message",3]],["message",3]],[[["",0],["",0]]],null,[[],["result",4,[["message",3]]]],[[["message",3],["message",3]],["bool",0]],[[["message",3],["formatter",3]],["result",6]],[[]],[[]],[[["message",3],["message",3]],["bool",0]],null,[[["message",3]],["result",4]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["networkdef",3],["peerid",3],["multiaddr",3]]],[[["networkdef",3],["peerid",3],["vec",3,[["u8",0]]]]],[[["networkdef",3],["responsechannel",3,[["directmessageresponse",3]]],["vec",3,[["u8",0]]]]],[[["networknodehandle",3],["vec",3]],["future",8]],[[["networknode",3]]],[[["networkdef",3],["peerid",3]],["vec",3,[["multiaddr",3]]]],[[["",0]],["error",8]],[[["",0]],["error",8]],[[["networknodehandleerror",4]],["option",4,[["backtrace",3]]]],[[["networknodehandle",3,[["",26,[["default",8],["debug",8]]]]]],["future",8]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["networknodeconfigbuilder",3],["option",4,[["multiaddr",3]]]],["networknodeconfigbuilder",3]],null,[[["networknodeconfigbuilder",3]],["result",4,[["networknodeconfig",3],["networknodeconfigbuildererror",4]]]],[[["networknodehandleerror",4]],["option",4,[["error",8]]]],[[["networknodeconfig",3]],["networknodeconfig",3]],[[["networknodeconfigbuilder",3]],["networknodeconfigbuilder",3]],[[["meshparams",3]],["meshparams",3]],[[["networknodetype",4]],["networknodetype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["networknodehandle",3]],["networknodeconfig",3]],[[["networknodehandle",3]],["future",8]],[[["networknode",3]],["hashset",3,[["peerid",3]]]],[[],["networknodeconfig",3]],[[],["networknodeconfigbuilder",3]],[[],["meshparams",3]],[[],["networknodetype",4]],[[["networknodehandleerror",4]],["str",0]],[[],["result",4,[["networknodetype",4]]]],[[],["result",4,[["deserialize",8],["box",3,[["errorkind",4]]]]]],null,[[["networknodehandle",3],["peerid",3]],["future",8]],[[["networknodehandle",3],["responsechannel",3,[["directmessageresponse",3]]]],["future",8]],[[["networknodetype",4],["networknodetype",4]],["bool",0]],null,[[["networkdef",3],["formatter",3]],["result",6]],[[["networknodeconfig",3],["formatter",3]],["result",6]],[[["networknodeconfigbuildererror",4],["formatter",3]],["result",6]],[[["networknodeconfigbuildererror",4],["formatter",3]],["result",6]],[[["meshparams",3],["formatter",3]],["result",6]],[[["networknodehandle",3,[["debug",8]]],["formatter",3]],["result",6]],[[["networknodehandleerror",4],["formatter",3]],["result",6]],[[["networknodehandleerror",4],["formatter",3]],["result",6]],[[["networknode",3],["formatter",3]],["result",6]],[[["networknodetype",4],["formatter",3]],["result",6]],[[["clientrequest",4],["formatter",3]],["result",6]],[[["networkevent",4],["formatter",3]],["result",6]],[[["networkeventinternal",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["string",3]],["networknodeconfigbuildererror",4]],[[]],[[["uninitializedfielderror",3]],["networknodeconfigbuildererror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dmevent",4]],["networkeventinternal",4]],[[["gossipevent",4]],["networkeventinternal",4]],[[["dhtevent",4]],["networkeventinternal",4]],[[["identifyevent",4]],["networkeventinternal",4]],[[["str",0]],["result",4,[["networknodetype",4]]]],[[["u16",0]],["multiaddr",3]],[[["keypair",4]],["future",8]],[[],["arc",3,[["networknodehandle",3]]]],[[["networkdef",3],["vec",3,[["u8",0]]],["sender",3,[["vec",3,[["u8",0]]]]],["nonzerousize",3]]],[[["networknodehandle",3]],["future",8]],[[["networknodehandle",3],["duration",3]],["future",8]],[[["networknodehandle",3],["string",3]],["future",8]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[["networknodehandle",3]],["usize",0]],[[["networknodeconfigbuilder",3],["into",8,[["keypair",4]]]],["networknodeconfigbuilder",3]],null,[[["networknodehandle",3],["vec",3,[["peerid",3]]]],["future",8]],[[]],[[]],[[["networkdef",3],["peerid",3],["connectionid",3],["connectedpoint",4],["connectedpoint",4]]],[[["networkdef",3],["peerid",3],["connectionid",3],["connectedpoint",4],["usize",0]]],[[["networkdef",3],["peerid",3],["connectionid",3],["connectedpoint",4],["option",4,[["vec",3]]],["usize",0]]],[[["networkdef",3],["option",4,[["peerid",3]]],["dialerror",4]]],[[["networkdef",3],["peerid",3],["connectionid",3]]],[[["networkdef",3],["multiaddr",3]]],[[["networkdef",3],["listenerid",3],["multiaddr",3]]],[[["networkdef",3],["multiaddr",3],["multiaddr",3]]],[[["networkdef",3],["listenerid",3],["result",4,[["error",3]]]]],[[["networkdef",3],["listenerid",3],["error",8]]],[[["networkdef",3],["multiaddr",3]]],[[["networkdef",3],["listenerid",3],["multiaddr",3]]],[[["networkdef",3],["listenerid",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["networknodehandle",3]],["future",8]],[[["networknodehandle",3,[["",26,[["default",8],["debug",8]]]]]],["multiaddr",3]],[[["networknodehandle",3],["peerid",3]],["future",8]],[[["networknodehandle",3]],["future",8]],null,null,null,null,[[["networknodeconfigbuilder",3],["option",4,[["meshparams",3]]]],["networknodeconfigbuilder",3]],null,[[["networknodehandle",3]],["future",8]],null,[[["gossipbehaviour",3],["dhtbehaviour",3],["identify",3],["dmbehaviour",3],["hashset",3,[["multiaddr",3]]]],["networkdef",3]],[[["networknodeconfig",3],["usize",0]],["future",8]],[[["networknodeconfig",3]],["future",8]],[[["networkdef",3]]],[[["networknodeconfigbuilder",3],["networknodetype",4]],["networknodeconfigbuilder",3]],null,[[["networknodehandle",3]],["future",8]],[[["networknodehandle",3]],["future",8]],[[["networknode",3]],["usize",0]],[[["networknodehandle",3]],["peerid",3]],[[["networknode",3]],["peerid",3]],[[["networkdef",3],["context",3]],["poll",4,[["networkbehaviouraction",4]]]],[[["networknodehandle",3]],["future",8]],[[["networknodehandle",3],["peerid",3]],["future",8]],[[["networkdef",3],["topic",6],["vec",3,[["u8",0]]]]],[[["networkdef",3],["kadputquery",3]]],[[["networknodehandle",3]],["future",8]],[[["networknodehandle",3],["duration",3]],["future",8]],[[["networknodehandle",3]],["receiver",3]],[[["networknodehandle",3]],["receiver",3,[["networkevent",4]]]],[[["networknodehandle",3]],["future",8]],[[["networknodeconfigbuilder",3],["into",8,[["nonzerousize",3]]]],["networknodeconfigbuilder",3]],null,null,[[["networknodetype",4]],["result",4]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["box",3,[["errorkind",4]]]]]],[[["networknodehandle",3,[["",26,[["default",8],["debug",8]]]]]],["future",8]],[[["networknodehandleerror",4]],["option",4,[["error",8]]]],[[["arc",3,[["networknodehandle",3,[["",26,[["send",8],["default",8],["debug",8]]]]]]],["",26,[["fn",8],["sync",8],["send",8]]]],["future",8]],[[["networknode",3]],["future",8]],[[["duration",3],["vec",3],["networknodeconfig",3],["usize",0],["arc",3]],["future",8]],[[["networknode",3],["multiaddr",3]],["future",8]],[[["networknodehandle",3,[["clone",8]]]],["future",8]],[[["networknodehandle",3]],["condvar",3]],[[["networknodehandle",3],["duration",3]],["future",8]],[[["networknodehandle",3],["duration",3]],["timeout",3,[["futuresordered",3,[["future",8]]]]]],[[["networknodehandle",3]],["future",8]],[[["networknodehandle",3],["string",3]],["future",8]],[[["networkdef",3],["str",0]]],[[["networknodeconfigbuilder",3],["hashset",3]],["networknodeconfigbuilder",3]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["networknodehandle",3],["string",3]],["future",8]],[[["networkdef",3],["str",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arc",3,[["networknodehandle",3,[["",26,[["default",8],["debug",8]]]]]]],["usize",0],["receiver",3,[["networkevent",4]]],["usize",0]],["future",8]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["dhtbehaviour",3],["peerid",3],["multiaddr",3]]],[[["dhtbehaviour",3],["hashmap",3,[["peerid",3],["hashset",3,[["multiaddr",3]]]]]]],[[["dhtbehaviour",3],["peerid",3]],["vec",3,[["multiaddr",3]]]],null,[[["dhtbehaviour",3]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bootstrap",3]],["bootstrap",3]],[[["state",4]],["state",4]],[[["dhtevent",4]],["dhtevent",4]],[[["dhtprogress",4]],["dhtprogress",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["state",4],["state",4]],["bool",0]],[[["dhtevent",4],["dhtevent",4]],["bool",0]],[[["dhtprogress",4],["dhtprogress",4]],["bool",0]],null,[[["bootstrap",3],["formatter",3]],["result",6]],[[["state",4],["formatter",3]],["result",6]],[[["dhtevent",4],["formatter",3]],["result",6]],[[["kadputquery",3],["formatter",3]],["result",6]],[[["dhtprogress",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]],["u64",0]],[[["dhtbehaviour",3],["vec",3,[["u8",0]]],["sender",3,[["vec",3,[["u8",0]]]]],["nonzerousize",3],["exponentialbackoff",3]]],[[["dhtprogress",4],["",0]]],null,[[["dhtbehaviour",3],["peerid",3],["connectionid",3],["connectedpoint",4],["connectedpoint",4]]],[[["dhtbehaviour",3],["peerid",3],["connectionid",3],["connectedpoint",4],["usize",0]]],[[["dhtbehaviour",3],["peerid",3],["connectionid",3],["connectedpoint",4],["option",4,[["vec",3]]],["usize",0]]],[[["dhtbehaviour",3],["option",4,[["peerid",3]]],["dialerror",4]]],[[["dhtbehaviour",3],["peerid",3],["connectionid",3]]],[[["dhtbehaviour",3],["multiaddr",3]]],[[["dhtbehaviour",3],["listenerid",3],["multiaddr",3]]],[[["dhtbehaviour",3],["multiaddr",3],["multiaddr",3]]],[[["dhtbehaviour",3],["listenerid",3],["result",4,[["error",3]]]]],[[["dhtbehaviour",3],["listenerid",3],["error",8]]],[[["dhtbehaviour",3],["multiaddr",3]]],[[["dhtbehaviour",3],["listenerid",3],["multiaddr",3]]],[[["dhtbehaviour",3],["listenerid",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["dhtbehaviour",3],["peerid",3],["sender",3]]],[[["dhtprogress",4],["dhtprogress",4]],["bool",0]],[[["kademlia",3,[["memorystore",3]]],["peerid",3],["nonzerousize",3]],["dhtbehaviour",3]],[[["dhtbehaviour",3]]],null,[[["dhtbehaviour",3],["context",3]],["poll",4,[["networkbehaviouraction",4]]]],[[["dhtbehaviour",3]]],[[["dhtbehaviour",3],["kadputquery",3]]],[[["dhtbehaviour",3],["peerid",3]]],null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["dmbehaviour",3],["peerid",3],["multiaddr",3]]],[[["dmbehaviour",3],["dmrequest",3]]],[[["dmbehaviour",3],["responsechannel",3,[["directmessageresponse",3]]],["vec",3,[["u8",0]]]]],[[["dmbehaviour",3],["peerid",3]],["vec",3,[["multiaddr",3]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["dmevent",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["dmbehaviour",3],["peerid",3],["connectionid",3],["connectedpoint",4],["connectedpoint",4]]],[[["dmbehaviour",3],["peerid",3],["connectionid",3],["connectedpoint",4],["usize",0]]],[[["dmbehaviour",3],["peerid",3],["connectionid",3],["connectedpoint",4],["option",4,[["vec",3]]],["usize",0]]],[[["dmbehaviour",3],["option",4,[["peerid",3]]],["dialerror",4]]],[[["dmbehaviour",3],["peerid",3],["connectionid",3]]],[[["dmbehaviour",3],["multiaddr",3]]],[[["dmbehaviour",3],["listenerid",3],["multiaddr",3]]],[[["dmbehaviour",3],["multiaddr",3],["multiaddr",3]]],[[["dmbehaviour",3],["listenerid",3],["result",4,[["error",3]]]]],[[["dmbehaviour",3],["listenerid",3],["error",8]]],[[["dmbehaviour",3],["multiaddr",3]]],[[["dmbehaviour",3],["listenerid",3],["multiaddr",3]]],[[["dmbehaviour",3],["listenerid",3]]],[[]],[[]],[[]],[[["requestresponse",3,[["directmessagecodec",3]]]],["dmbehaviour",3]],[[["dmbehaviour",3]]],null,[[["dmbehaviour",3],["context",3]],["poll",4,[["networkbehaviouraction",4]]]],[[["dmbehaviour",3],["peerid",3],["multiaddr",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["directmessageprotocol",3]],["directmessageprotocol",3]],[[["directmessagecodec",3]],["directmessagecodec",3]],[[["directmessagerequest",3]],["directmessagerequest",3]],[[["directmessageresponse",3]],["directmessageresponse",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4,[["directmessagecodec",3]]]],[[["directmessagerequest",3],["directmessagerequest",3]],["bool",0]],[[["directmessageresponse",3],["directmessageresponse",3]],["bool",0]],[[["directmessageprotocol",3],["formatter",3]],["result",6]],[[["directmessagecodec",3],["formatter",3]],["result",6]],[[["directmessagerequest",3],["formatter",3]],["result",6]],[[["directmessageresponse",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["directmessagerequest",3],["directmessagerequest",3]],["bool",0]],[[["directmessageresponse",3],["directmessageresponse",3]],["bool",0]],[[["directmessageprotocol",3]]],[[["directmessagecodec",3],["directmessageprotocol",3],["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["directmessagecodec",3],["directmessageprotocol",3],["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["directmessagecodec",3]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[["directmessagecodec",3],["directmessageprotocol",3],["",0],["directmessagerequest",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["directmessagecodec",3],["directmessageprotocol",3],["",0],["directmessageresponse",3]],["pin",3,[["box",3,[["future",8]]]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["exponentialbackoff",3]],["exponentialbackoff",3]],[[["",0],["",0]]],[[],["exponentialbackoff",3]],[[["exponentialbackoff",3],["exponentialbackoff",3]],["bool",0]],[[["exponentialbackoff",3],["formatter",3]],["result",6]],[[]],[[["",0],["",0]],["u64",0]],[[["exponentialbackoff",3],["",0]]],[[]],[[["exponentialbackoff",3]],["bool",0]],[[["exponentialbackoff",3],["exponentialbackoff",3]],["bool",0]],[[["u32",0],["duration",3]],["exponentialbackoff",3]],[[["exponentialbackoff",3]]],[[["exponentialbackoff",3],["bool",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["gossipbehaviour",3],["peerid",3]],["vec",3,[["multiaddr",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["gossipevent",4]],["gossipevent",4]],[[["",0],["",0]]],[[["gossipbehaviour",3]],["bool",0]],[[["gossipevent",4],["gossipevent",4]],["bool",0]],[[["gossipevent",4],["formatter",3]],["result",6]],[[]],[[]],[[["gossipbehaviour",3],["peerid",3],["connectionid",3],["connectedpoint",4],["connectedpoint",4]]],[[["gossipbehaviour",3],["peerid",3],["connectionid",3],["connectedpoint",4],["usize",0]]],[[["gossipbehaviour",3],["peerid",3],["connectionid",3],["connectedpoint",4],["option",4,[["vec",3]]],["usize",0]]],[[["gossipbehaviour",3],["option",4,[["peerid",3]]],["dialerror",4]]],[[["gossipbehaviour",3],["peerid",3],["connectionid",3]]],[[["gossipbehaviour",3],["multiaddr",3]]],[[["gossipbehaviour",3],["listenerid",3],["multiaddr",3]]],[[["gossipbehaviour",3],["multiaddr",3],["multiaddr",3]]],[[["gossipbehaviour",3],["listenerid",3],["result",4,[["error",3]]]]],[[["gossipbehaviour",3],["listenerid",3],["error",8]]],[[["gossipbehaviour",3],["multiaddr",3]]],[[["gossipbehaviour",3],["listenerid",3],["multiaddr",3]]],[[["gossipbehaviour",3],["listenerid",3]]],[[]],[[]],[[["gossipevent",4],["gossipevent",4]],["bool",0]],[[["gossipsub",3]],["gossipbehaviour",3]],[[["gossipbehaviour",3]]],[[["gossipbehaviour",3],["context",3]],["poll",4,[["networkbehaviouraction",4]]]],[[["gossipbehaviour",3],["identtopic",6],["vec",3,[["u8",0]]]]],[[["gossipbehaviour",3],["str",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["gossipbehaviour",3],["str",0]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["error",8]],[[["",0]],["error",8]],[[["",0]],["error",8]],[[["networkerror",4]],["option",4,[["backtrace",3]]]],[[["dhterror",4]],["option",4,[["backtracegossipsubconfigsnafu",3]],["networkerror",4]],[[["gossipsubbuildsnafu",3]],["networkerror",4]],[[["streamclosedsnafu",3]],["networkerror",4]],[[["noknownpeerssnafu",3]],["networkerror",4]],[[["disagreementsnafu",3]],["dhterror",4]],[[["notfoundsnafu",3]],["dhterror",4]],[[["networkerror",4]],["option",4,[["error",8]]]],[[["dhterror",4]],["option",4,[["error",8]]]],[[["dialsnafu",3]],["dialsnafu",3]],[[["transportsnafu",3]],["transportsnafu",3]],[[["transportlaunchsnafu",3]],["transportlaunchsnafu",3]],[[["gossipsubconfigsnafu",3,[["clone",8]]]],["gossipsubconfigsnafu",3,[["clone",8]]]],[[["gossipsubbuildsnafu",3,[["clone",8]]]],["gossipsubbuildsnafu",3,[["clone",8]]]],[[["streamclosedsnafu",3]],["streamclosedsnafu",3]],[[["publishsnafu",3]],["publishsnafu",3]],[[["noknownpeerssnafu",3]],["noknownpeerssnafu",3]],[[["getrecordsnafu",3]],["getrecordsnafu",3]],[[["putrecordsnafu",3]],["putrecordsnafu",3]],[[["disagreementsnafu",3]],["disagreementsnafu",3]],[[["notfoundsnafu",3]],["notfoundsnafu",3]],[[["cancelledrequestsnafu",3]],["cancelledrequestsnafu",3]],[[["dhterror",4]],["dhterror",4]],[[["getrecordwrappererror",4]],["getrecordwrappererror",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["networkerror",4]],["str",0]],[[["dhterror",4]],["str",0]],[[["gossipsubconfigsnafu",3]],["result",4,[["networkerror",4]]]],[[["gossipsubbuildsnafu",3]],["result",4,[["networkerror",4]]]],[[["streamclosedsnafu",3]],["result",4,[["networkerror",4]]]],[[["noknownpeerssnafu",3]],["result",4,[["networkerror",4]]]],[[["disagreementsnafu",3]],["result",4,[["dhterror",4]]]],[[["notfoundsnafu",3]],["result",4,[["dhterror",4]]]],[[["dialsnafu",3],["formatter",3]],["result",6]],[[["transportsnafu",3],["formatter",3]],["result",6]],[[["transportlaunchsnafu",3],["formatter",3]],["result",6]],[[["gossipsubconfigsnafu",3,[["debug",8]]],["formatter",3]],["result",6]],[[["gossipsubbuildsnafu",3,[["debug",8]]],["formatter",3]],["result",6]],[[["streamclosedsnafu",3],["formatter",3]],["result",6]],[[["publishsnafu",3],["formatter",3]],["result",6]],[[["noknownpeerssnafu",3],["formatter",3]],["result",6]],[[["networkerror",4],["formatter",3]],["result",6]],[[["networkerror",4],["formatter",3]],["result",6]],[[["getrecordsnafu",3],["formatter",3]],["result",6]],[[["putrecordsnafu",3],["formatter",3]],["result",6]],[[["disagreementsnafu",3],["formatter",3]],["result",6]],[[["notfoundsnafu",3],["formatter",3]],["result",6]],[[["cancelledrequestsnafu",3],["formatter",3]],["result",6]],[[["dhterror",4],["formatter",3]],["result",6]],[[["dhterror",4],["formatter",3]],["result",6]],[[["getrecordwrappererror",4],["formatter",3]],["result",6]],[[["getrecordwrappererror",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dialsnafu",3]],["networkerror",4]],[[["transportsnafu",3]],["networkerror",4]],[[["transportlaunchsnafu",3]],["networkerror",4]],[[["gossipsubconfigsnafu",3]],["networkerror",4]],[[["gossipsubbuildsnafu",3]],["networkerror",4]],[[["streamclosedsnafu",3]],["networkerror",4]],[[["publishsnafu",3]],["networkerror",4]],[[["noknownpeerssnafu",3]],["networkerror",4]],[[["getrecordsnafu",3]],["dhterror",4]],[[["putrecordsnafu",3]],["dhterror",4]],[[["disagreementsnafu",3]],["dhterror",4]],[[["notfoundsnafu",3]],["dhterror",4]],[[["cancelledrequestsnafu",3]],["dhterror",4]],null,null,[[["networkerror",4]],["option",4,[["error",8]]]],[[["dhterror",4]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["sendsnafu",3]],["networknodehandleerror",4]],[[["recvsnafu",3]],["networknodehandleerror",4]],[[["networksnafu",3]],["networksnafu",3]],[[["serializationsnafu",3]],["serializationsnafu",3]],[[["sendsnafu",3]],["sendsnafu",3]],[[["recvsnafu",3]],["recvsnafu",3]],[[["nodeconfigsnafu",3]],["nodeconfigsnafu",3]],[[["timeoutsnafu",3]],["timeoutsnafu",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["sendsnafu",3]],["result",4,[["networknodehandleerror",4]]]],[[["recvsnafu",3]],["result",4,[["networknodehandleerror",4]]]],[[["networksnafu",3],["formatter",3]],["result",6]],[[["serializationsnafu",3],["formatter",3]],["result",6]],[[["sendsnafu",3],["formatter",3]],["result",6]],[[["recvsnafu",3],["formatter",3]],["result",6]],[[["nodeconfigsnafu",3],["formatter",3]],["result",6]],[[["timeoutsnafu",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["networksnafu",3]],["networknodehandleerror",4]],[[["serializationsnafu",3]],["networknodehandleerror",4]],[[["sendsnafu",3]],["networknodehandleerror",4]],[[["recvsnafu",3]],["networknodehandleerror",4]],[[["nodeconfigsnafu",3]],["networknodehandleerror",4]],[[["timeoutsnafu",3]],["networknodehandleerror",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Message"],[4,"ClientRequest"],[4,"NetworkNodeType"],[4,"NetworkNodeHandleError"],[4,"NetworkEventInternal"],[4,"NetworkEvent"],[4,"NetworkNodeConfigBuilderError"],[3,"NetworkDef"],[3,"NetworkNodeHandle"],[3,"NetworkNode"],[3,"NetworkNodeConfig"],[3,"NetworkNodeConfigBuilder"],[3,"MeshParams"],[13,"GossipMsg"],[13,"Subscribe"],[13,"Unsubscribe"],[13,"DirectRequest"],[13,"DirectResponse"],[13,"Prune"],[13,"AddKnownPeers"],[13,"IgnorePeers"],[13,"GetConnectedPeerNum"],[13,"GetConnectedPeers"],[13,"GetRoutingTable"],[13,"LookupPeer"],[13,"PutDHT"],[13,"GetDHT"],[13,"GossipMsg"],[13,"DirectRequest"],[13,"DirectResponse"],[13,"DHTEvent"],[13,"IdentifyEvent"],[13,"GossipEvent"],[13,"DMEvent"],[13,"UninitializedField"],[13,"ValidationError"],[13,"NetworkError"],[13,"SerializationError"],[13,"DeserializationError"],[13,"NodeConfigError"],[13,"TimeoutError"],[13,"DHTError"],[13,"CantKillTwice"],[4,"State"],[4,"DHTProgress"],[4,"DHTEvent"],[3,"DHTBehaviour"],[3,"Bootstrap"],[3,"RandomWalk"],[3,"KadPutQuery"],[13,"InProgress"],[4,"DMEvent"],[3,"DMBehaviour"],[3,"DMRequest"],[13,"DirectRequest"],[13,"DirectResponse"],[3,"DirectMessageRequest"],[3,"DirectMessageResponse"],[3,"DirectMessageProtocol"],[3,"DirectMessageCodec"],[3,"ExponentialBackoff"],[4,"GossipEvent"],[3,"GossipBehaviour"],[13,"GossipMsg"],[4,"DHTError"],[4,"NetworkError"],[4,"GetRecordWrapperError"],[3,"DialSnafu"],[3,"TransportSnafu"],[3,"TransportLaunchSnafu"],[3,"GossipsubConfigSnafu"],[3,"GossipsubBuildSnafu"],[3,"StreamClosedSnafu"],[3,"PublishSnafu"],[3,"NoKnownPeersSnafu"],[3,"GetRecordSnafu"],[3,"PutRecordSnafu"],[3,"DisagreementSnafu"],[3,"NotFoundSnafu"],[3,"CancelledRequestSnafu"],[13,"CancelledRequest"],[13,"GetRecord"],[13,"PutRecord"],[13,"GetRecordError"],[13,"GossipsubConfig"],[13,"GossipsubBuild"],[13,"DialError"],[13,"Transport"],[13,"TransportLaunch"],[13,"PublishError"],[3,"NetworkSnafu"],[3,"SerializationSnafu"],[3,"SendSnafu"],[3,"RecvSnafu"],[3,"NodeConfigSnafu"],[3,"TimeoutSnafu"]]},\
"multi_machine":{"doc":"","t":[6,3,17,11,11,11,11,12,11,11,11,11,5,5,12,5,11,11,11,5,11,11,11,11,11,11],"n":["Node","NodeOpt","TRANSACTION_COUNT","augment_args","augment_args_for_update","borrow","borrow_mut","config","fmt","from","from_arg_matches","from_arg_matches_mut","get_host","get_networking","id","init_state_and_hotshot","into","into_app","into_app_for_update","main","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":["multi_machine","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Path to the node configuration file","","Returns the argument unchanged.","","","Gets IP address and port number of a node from node …","Trys to get a networking implementation with the given id …","Id of the current node","Creates the initial state and hotshot for simulation.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,1,1],"f":[null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["nodeopt",3],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["nodeopt",3],["error",3]]]],[[["argmatches",3]],["result",4,[["nodeopt",3],["error",3]]]],[[["value",4],["u64",0]]],[[["ed25519pub",3],["str",0],["u16",0]],["future",8]],null,[[["usize",0],["usize",0],["u64",0],["wnetwork",3,[["message",3,[["dentryblock",3],["transaction",3],["state",3],["ed25519pub",3]]],["ed25519pub",3]]]],["future",8]],[[]],[[],["command",6]],[[],["command",6]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["nodeopt",3],["argmatches",3]],["result",4,[["error",3]]]],[[["nodeopt",3],["argmatches",3]],["result",4,[["error",3]]]],[[]]],"p":[[3,"NodeOpt"]]},\
"multi_machine_libp2p":{"doc":"","t":[17,3,6,11,11,12,12,12,12,11,11,12,11,11,11,11,5,11,11,11,5,12,12,12,12,5,12,12,12,12,12,12,5,5,12,12,12,11,11,11,11,11,11],"n":["BOOTSTRAPS","CliOpt","Node","augment_args","augment_args_for_update","bootstrap_mesh_n","bootstrap_mesh_n_high","bootstrap_mesh_n_low","bootstrap_mesh_outbound_min","borrow","borrow_mut","bound_addr","fmt","from","from_arg_matches","from_arg_matches_mut","init_state_and_hotshot","into","into_app","into_app_for_update","main","mesh_n","mesh_n_high","mesh_n_low","mesh_outbound_min","new_libp2p_network","next_view_timeout","node_idx","num_bootstrap","num_nodes","num_txn_per_round","online_time","parse_dns","parse_ip","propose_max_round_time","propose_min_round_time","seed","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":["multi_machine_libp2p","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["bootstrap hardcoded metadata","","","","","bootstrap node mesh n","bootstrap node mesh high","bootstrap node mesh low","bootstrap node outbound min","","","address to bind to","","Returns the argument unchanged.","","","Creates the initial state and hotshot for simulation.","Calls <code>U::from(self)</code>.","","","","bootstrap node mesh n","bootstrap node mesh high","bootstrap node mesh low","bootstrap node outbound min","","next view timeout","Id of the current node","num bootstrap","num nodes","num transactions to be submitted per round","how long to run for","convert node string into multi addr node string of the …","","max round time","min round time","seed used to generate ids","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1],"f":[null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["cliopt",3],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["cliopt",3],["error",3]]]],[[["argmatches",3]],["result",4,[["cliopt",3],["error",3]]]],[[["usize",0],["usize",0],["u64",0],["cliopt",3],["libp2pnetwork",3,[["message",3,[["dentryblock",3],["transaction",3],["state",3],["ed25519pub",3]]],["ed25519pub",3]]]],["future",8]],[[]],[[],["command",6]],[[],["command",6]],[[]],null,null,null,null,[[["ed25519pub",3],["vec",3],["usize",0],["networknodetype",4],["multiaddr",3],["option",4,[["keypair",4]]],["cliopt",3]],["future",8]],null,null,null,null,null,null,[[["str",0]],["result",4,[["multiaddr",3],["error",4]]]],[[["str",0]],["result",4,[["multiaddr",3],["error",4]]]],null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["cliopt",3],["argmatches",3]],["result",4,[["error",3]]]],[[["cliopt",3],["argmatches",3]],["result",4,[["error",3]]]],[[]]],"p":[[3,"CliOpt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

var searchIndex = JSON.parse('{\
"clichat":{"doc":"","t":[3,11,11,11,12,11,11,11,5,11,12,11,11,11,11],"n":["CliOpt","borrow","borrow_mut","clap","first_dial_addr","from","from_clap","into","main","parse_args","port","try_from","try_into","type_id","vzip"],"q":["clichat","","","","","","","","","","","","","",""],"d":["command line arguments","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Path to the node configuration file","","","",""],"i":[0,1,1,1,1,1,1,1,0,1,1,1,1,1,1],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["app",3]],null,[[]],[[["argmatches",3]]],[[]],[[],["result",6]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"CliOpt"]]},\
"counter":{"doc":"","t":[0,5,13,13,13,3,13,13,3,4,3,4,4,6,13,13,13,6,3,4,4,13,3,13,3,13,4,13,13,3,13,3,17,13,13,3,13,13,17,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,12,12,11,12,12,11,5,12,12,5,12,12,12,12,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,13,3,13,3,13,3,13,3,3,3,4,17,3,3,4,4,3,13,3,13,3,13,13,13,13,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,5,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,16,8,10,0,5,3,3,3,11,11,11,11,11,11,12,12,12,11,11,11,12,12,11,11,11,12,12,12,12,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["common","main","Broadcast","BroadcastViaDM","BroadcastViaGossip","CliOpt","Conductor","ConductorIdIs","ConductorMessage","ConductorMessageMethod","ConductorState","CounterError","CounterRequest","CounterState","DMViaDM","DirectMessage","Docker","Epoch","EpochData","EpochType","ExecutionEnvironment","FileRead","FileReadSnafu","Handle","HandleSnafu","Kill","Message","Metal","MissingBootstrap","MissingBootstrapSnafu","Normal","NormalMessage","PADDING_SIZE","RecvdConductor","Relayed","RelayedMessage","StateRequest","StateResponse","TIMEOUT","as_error_source","backtrace","bootstrap_addrs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","broadcast_type","build","cause","clap","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complete_round","conductor_broadcast","conductor_direct_message","conductor_handle_network_event","current_epoch","default","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","duration","env_type","epoch","epoch","epoch_idx","epoch_type","eq","eq","eq","eq","eq","eq","eq","eq","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_clap","from_str","get_serializable","get_serializable","handle_normal_msg","header","in_current_span","increment_epoch","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","lossy_network","message_durations","ne","ne","ne","ne","ne","ne","node_states","node_type","normal_to_relayed","num_nodes","padding","parse_args","parse_node","previous_epochs","ready_set","regular_handle_network_event","relay_to_conductor","req","req","req","sent_ts","serialize","serialize","serialize","serialize","serialize","serialize","serialize","source","start_main","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","web","webui_addr","0","source","source","0","0","0","0","0","AddrParse","AddrParseSnafu","Decode","DecodeSnafu","InvalidConfig","InvalidConfigSnafu","Io","IoSnafu","IsolationConfig","IsolationConfigBuilder","IsolationConfigBuilderError","LOSSY_QDISC","LossyNetwork","LossyNetworkBuilder","LossyNetworkBuilderError","LossyNetworkError","Netns","RtNetlink","RtNetlinkSnafu","SetNs","SetNsSnafu","UninitializedField","UninitializedField","ValidationError","ValidationError","_DERIVE_core_fmt_Debug_FOR_IsolationConfig","_DERIVE_core_fmt_Debug_FOR_LossyNetwork","as_error_source","as_error_source","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge_addr","bridge_addr","bridge_addr","bridge_name","bridge_name","bridge_name","build","build","build","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","counter_ns","counter_ns","counter_ns","create_empty","create_empty","create_qdisc","create_qdisc_netlink","cur","default","default","default","del_link","description","enable_firewall","env_type","env_type","env_type","eth_name","eth_name","eth_name","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","isolate","isolate_netlink","isolation_config","isolation_config","isolation_config","netem_config","netem_config","netem_config","new","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_firewall","undo_isolate","undo_isolate_netlink","veth2_addr","veth2_addr","veth2_addr","veth2_name","veth2_name","veth2_name","veth_name","veth_name","veth_name","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","source","source","source","source","source","Serialized","WebInfo","get_serializable","network_state","spawn_server","ConnectionState","NetworkConfig","State","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connected_peers","connecting_peers","connection_state","from","from","from","identity","ignored_peers","into","into","into","known_peers","max_num_peers","min_num_peers","network_config","new","new","new","node_type","send","serialize","serialize","serialize","state","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["counter","","counter::commoncounter::common::ConductorMessageMethod","counter::common::CounterError","","counter::common::CounterRequest","counter::common::Message","","","","counter::common::lossy_networkcounter::common::lossy_network::IsolationConfigBuilderError","","counter::common::lossy_network::LossyNetworkBuilderError","","counter::common::lossy_network::LossyNetworkError","","","","","counter::common::web","","","","","counter::common::web::network_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","broadcast message to all nodes","","","","conductor requests that message is sent to node that the …","","A message sent and recv-ed by a [‘…","ways to send messages between nodes","","","Normal message. Sent amongst <code>NetworkNodeType::Regular</code> and …","","","direct message <code>PeerId</code>","execution environment is within docker","","","","The execution environemnt type","","SNAFU context selector for the <code>CounterError::FileRead</code> …","","SNAFU context selector for the <code>CounterError::Handle</code> variant","kill node","overall message","execution environment is on metal","","SNAFU context selector for the …","message to end from a peer to a peer","Message sent between non-<code>NetworkNodeType::Conductor</code> nodes","","recv-ed the conductor id","messaged recved and relayed to conductor","A message sent and recv-ed by a [‘…","Request state","Reply with state","","","","list of bootstrap node addrs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","internal interface to bind to","the type of broadcast (direct or broadcast)","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increment conductor to the next epoch","","have conductor direct message all participants","network event handler for conductor","","","","","","","","","","","time message took to propagate from sender to recv-er","type of environment","the epoch the message was sent on","the epoch the request was made on","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","handler for non-conductor nodes for normal messages","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","the role this node plays","convert a normal message into a message to relay to …","total number of nodes","arbitrary amount of padding to vary message length","","convert node string into multi addr","","","event handler for events from the swarm","whether or not message shuld be relayed to conductor","the underlying request the recv-ing node should take","the requeset being made","the requeset the recv-ing node should make","timestamp when message was sent","","","","","","","","","[’bootstrap_addrs…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If this value is set, a webserver will be spawned on this …","","","","","","","","","","SNAFU context selector for the <code>LossyNetworkError::AddrParse</code>…","","SNAFU context selector for the <code>LossyNetworkError::Decode</code> …","","SNAFU context selector for the …","","SNAFU context selector for the <code>LossyNetworkError::Io</code> …","A description of how the network should be isolated","Builder for <code>IsolationConfig</code>.","Error type for IsolationConfigBuilder","hardcoded default values","A description of a lossy network","Builder for <code>LossyNetwork</code>.","Error type for LossyNetworkBuilder","","represent the current network namespace (useful if …","","SNAFU context selector for the <code>LossyNetworkError::RtNetlink</code>…","","SNAFU context selector for the <code>LossyNetworkError::SetNs</code> …","Uninitialized field","Uninitialized field","Custom validation error","Custom validation error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the bridge ip address","the bridge ip address","the bridge ip address","the bridge name","the bridge name","the bridge name","Builds a new <code>LossyNetwork</code>.","Builds a new <code>IsolationConfig</code>.","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","the network namespace name to create","the network namespace name to create","the network namespace name to create","Create an empty builder, with all fields set to <code>None</code> or …","Create an empty builder, with all fields set to <code>None</code> or …","Create a network qdisc","Internal invocation to netlink library to create the qdisc","","","","","","","Enables firewall rules to allow network bridge to function …","the execution environment","the execution environment","the execution environment","Ethernet interface that is connected to WAN","Ethernet interface that is connected to WAN","Ethernet interface that is connected to WAN","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create isolated environment in separate network namespace …","Prepares server for latency by:","metadata describing how to isolate. Only used when […","metadata describing how to isolate. Only used when […","metadata describing how to isolate. Only used when […","The network loss conditions","The network loss conditions","The network loss conditions","creates new network namespace and enters namespace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","deletes created iptables rules","Delete isolated environment and network bridge","tears down all created interfaces deletes all iptables …","the virtual ethernet interface ip address that lives in […","the virtual ethernet interface ip address that lives in […","the virtual ethernet interface ip address that lives in […","the virtual ethernet interface name that lives in […","the virtual ethernet interface name that lives in […","the virtual ethernet interface name that lives in […","the virtual ethernet interface name that lives in the …","the virtual ethernet interface name that lives in the …","the virtual ethernet interface name that lives in the …","","","","","","","","","","","","","","","","","","","","","","","","","Trait to unify the info that can be send to the web …","","","Spawn a web server on the given <code>addr</code>. This web server will …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,2,0,3,3,0,0,0,0,0,0,2,1,4,0,0,0,0,5,0,5,0,6,0,4,5,0,3,0,0,3,3,0,6,6,0,5,5,7,2,8,9,6,10,11,12,3,1,7,4,13,14,15,5,2,8,9,6,10,11,12,3,1,7,4,13,14,15,5,7,12,15,5,7,2,8,9,6,10,11,12,3,1,4,13,14,15,2,8,9,6,10,11,12,3,1,4,13,14,15,8,0,0,0,8,8,5,6,10,11,12,3,1,4,11,7,10,11,9,9,2,6,10,11,12,3,1,4,15,2,8,9,6,10,11,12,3,1,4,13,14,15,5,5,2,8,9,6,10,11,12,3,1,7,4,13,14,15,5,7,4,16,8,0,5,5,9,2,8,9,6,10,11,12,3,1,7,4,13,14,15,5,13,14,15,0,9,6,10,11,12,3,1,9,7,10,7,10,7,0,8,8,0,10,10,11,12,10,6,10,11,12,3,1,4,5,0,2,8,9,6,10,11,12,3,1,4,13,14,15,5,2,8,9,6,10,11,12,3,1,7,4,13,14,15,5,2,8,9,6,10,11,12,3,1,7,4,13,14,15,5,2,8,9,6,10,11,12,3,1,7,4,13,14,15,5,2,8,9,6,10,11,12,3,1,7,4,13,14,15,5,0,7,17,18,19,20,21,22,23,24,25,0,25,0,25,0,25,0,0,0,0,0,0,0,0,0,0,25,0,25,0,26,27,26,27,0,0,26,27,25,25,28,29,30,26,31,27,32,33,34,35,36,37,38,25,28,29,30,26,31,27,32,33,34,35,36,37,38,25,31,31,32,31,31,32,30,31,36,25,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,31,31,32,30,31,29,29,28,30,31,32,0,25,32,30,29,30,30,29,30,36,29,26,26,27,27,32,33,34,35,36,37,38,25,25,28,29,30,26,26,26,31,27,27,27,32,33,34,35,36,37,38,25,26,27,25,26,27,25,28,29,30,26,31,27,32,33,34,35,36,37,38,25,33,34,35,36,37,38,29,32,30,29,30,30,29,30,28,25,29,30,31,32,33,34,35,36,37,38,26,27,25,28,29,30,26,31,27,32,33,34,35,36,37,38,25,28,29,30,26,31,27,32,33,34,35,36,37,38,25,28,29,30,26,31,27,32,33,34,35,36,37,38,25,32,29,32,31,31,32,31,31,32,31,31,32,28,29,30,26,31,27,32,33,34,35,36,37,38,25,39,40,41,42,43,44,45,46,47,48,0,48,0,0,0,0,0,49,50,51,49,50,51,51,51,49,49,50,51,50,50,49,50,51,51,50,50,49,49,50,51,50,49,49,50,51,49,49,50,51,49,50,51,49,50,51,49,50,51],"f":[null,[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["error",8]],[[["",0]],["option",4,[["backtrace",3]]]],nullnull,null,[[],["countererror",4]],[[["",0]],["option",4,[["error",8]]]],[[],["app",3]],[[["",0]],["epochtype",4]],[[["",0]],["conductorstate",3]],[[["",0]],["epochdata",3]],[[["",0]],["counterrequest",4]],[[["",0]],["normalmessage",3]],[[["",0]],["relayedmessage",3]],[[["",0]],["conductormessage",3]],[[["",0]],["message",4]],[[["",0]],["conductormessagemethod",4]],[[["",0]],["executionenvironment",4]],[[["",0]],["handlesnafu",3]],[[["",0]],["filereadsnafu",3]],[[["",0]],["missingbootstrapsnafu",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["epochtype",4]]],[[["duration",3],["counterstate",6],["arc",3,[["networknodehandle",3,[["conductorstate",3]]]]]]],[[["duration",3],["counterstate",6],["arc",3,[["networknodehandle",3,[["conductorstate",3]]]]]]],[[["networkevent",4],["arc",3,[["networknodehandle",3,[["conductorstate",3]]]]]]],null,[[]],[[["",0]],["str",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[["",0],["epochtype",4]],["bool",0]],[[["",0],["counterrequest",4]],["bool",0]],[[["",0],["normalmessage",3]],["bool",0]],[[["",0],["relayedmessage",3]],["bool",0]],[[["",0],["conductormessage",3]],["bool",0]],[[["",0],["message",4]],["bool",0]],[[["",0],["conductormessagemethod",4]],["bool",0]],[[["",0],["executionenvironment",4]],["bool",0]],[[],["result",4,[["countererror",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["argmatches",3]]],[[["str",0]],["result",4,[["executionenvironment",4]]]],[[["",0]]],[[["",0]]],[[["arc",3,[["networknodehandle",3,[["counterstate",6]]]]],["normalmessage",3],["option",4,[["responsechannel",3,[["directmessageresponse",3]]]]]]],[[],["indentedsection",3]],[[]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["countererror",4]],[[],["countererror",4]],[[],["countererror",4]],null,null,[[["",0],["counterrequest",4]],["bool",0]],[[["",0],["normalmessage",3]],["bool",0]],[[["",0],["relayedmessage",3]],["bool",0]],[[["",0],["conductormessage",3]],["bool",0]],[[["",0],["message",4]],["bool",0]],[[["",0],["conductormessagemethod",4]],["bool",0]],null,null,[[["",0]],["relayedmessage",3]],null,null,[[],["result",4]],[[["str",0]],["result",4,[["multiaddr",3],["error",4]]]],null,null,[[["networkevent",4],["arc",3,[["networknodehandle",3,[["counterstate",6]]]]]]],null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["option",4,[["error",8]]]],[[["cliopt",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["error",8]],[[["",0]],["error",8]],[[["",0]],["error",8]],[[["",0]],["option",4,[["backtracestring",3]],["",0]],null,null,[[["",0],["string",3]],["",0]],null,null,[[["",0]],["result",4,[["lossynetwork",3],["lossynetworkbuildererror",4]]]],[[["",0]],["result",4,[["isolationconfig",3],["isolationconfigbuildererror",4]]]],[[],["lossynetworkerror",4]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["lossynetwork",3]],[[["",0]],["lossynetworkbuilder",3]],[[["",0]],["isolationconfigbuilder",3]],[[["",0]],["isolationconfig",3]],[[["",0]],["rtnetlinksnafu",3]],[[["",0]],["iosnafu",3]],[[["",0]],["setnssnafu",3]],[[["",0]],["invalidconfigsnafu",3]],[[["",0]],["decodesnafu",3]],[[["",0]],["addrparsesnafu",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["string",3]],["",0]],null,null,[[]],[[]],[[["",0]]],[[["",0],["str",0]]],null,[[]],[[]],[[]],[[["handle",3],["string",3]]],[[["",0]],["str",0]],[[["",0],["str",0]]],[[["",0],["executionenvironment",4]],["",0]],null,null,[[["",0],["string",3]],["",0]],null,null,[[],["result",4,[["lossynetworkerror",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["uninitializedfielderror",3]]],[[["string",3]]],[[]],[[]],[[["string",3]]],[[]],[[["uninitializedfielderror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["lossynetworkerror",4]],[[],["lossynetworkerror",4]],[[],["lossynetworkerror",4]],[[],["lossynetworkerror",4]],[[],["lossynetworkerror",4]],[[],["lossynetworkerror",4]],[[["",0]]],[[["",0],["str",0]]],[[["",0],["option",4,[["isolationconfig",3]]]],["",0]],null,null,[[["",0],["netemqdisc",3]],["",0]],null,null,[[["str",0]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["string",3]]],[[["",0]]],[[["",0],["string",3]]],[[["",0],["string",3]],["",0]],null,null,[[["",0],["string",3]],["",0]],null,null,[[["",0],["string",3]],["",0]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],null,[[["arc",3,[["networknodehandle",3]]],["socketaddr",4]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[]],[[]],[[]],null,null,[[]],[[]],[[]],null,null,null,null,[[["networknodehandle",3]]],[[["peerid",3],["networknodeconfig",3]]],[[["connectiondata",3]],["connectionstate",3]],null,[[["sender",3]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]]],"p":[[4,"ConductorMessageMethod"],[4,"EpochType"],[4,"Message"],[4,"ExecutionEnvironment"],[4,"CounterError"],[4,"CounterRequest"],[3,"CliOpt"],[3,"ConductorState"],[3,"EpochData"],[3,"NormalMessage"],[3,"RelayedMessage"],[3,"ConductorMessage"],[3,"HandleSnafu"],[3,"FileReadSnafu"],[3,"MissingBootstrapSnafu"],[6,"CounterState"],[13,"DirectMessage"],[13,"Handle"],[13,"FileRead"],[13,"StateResponse"],[13,"Normal"],[13,"Relayed"],[13,"Conductor"],[13,"ConductorIdIs"],[4,"LossyNetworkError"],[4,"LossyNetworkBuilderError"],[4,"IsolationConfigBuilderError"],[3,"Netns"],[3,"LossyNetwork"],[3,"LossyNetworkBuilder"],[3,"IsolationConfigBuilder"],[3,"IsolationConfig"],[3,"RtNetlinkSnafu"],[3,"IoSnafu"],[3,"SetNsSnafu"],[3,"InvalidConfigSnafu"],[3,"DecodeSnafu"],[3,"AddrParseSnafu"],[13,"UninitializedField"],[13,"ValidationError"],[13,"UninitializedField"],[13,"ValidationError"],[13,"RtNetlink"],[13,"Io"],[13,"SetNs"],[13,"Decode"],[13,"AddrParse"],[8,"WebInfo"],[3,"State"],[3,"NetworkConfig"],[3,"ConnectionState"]]},\
"dentry_simulator":{"doc":"","t":[6,3,11,11,11,11,11,11,5,5,5,11,5,12,11,5,12,11,11,11,11],"n":["Node","Opt","borrow","borrow_mut","clap","fmt","from","from_clap","get_networking","get_phaselock","inital_state","into","main","nodes","parse_args","prebaked_transactions","transactions","try_from","try_into","type_id","vzip"],"q":["dentry_simulator","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","Returns the argument unchanged.","","Trys to get a networking implementation with the given id","Creates a phaselock","Provides the initial state for the simulation","Calls <code>U::from(self)</code>.","","Number of nodes to run","","Prebaked list of transactions","Number of transactions to simulate","","","",""],"i":[0,0,1,1,1,1,1,1,0,0,0,1,0,1,1,0,1,1,1,1,1],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["app",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[["ed25519pub",3],["str",0],["u64",0],["",0]]],[[["usize",0],["usize",0],["u64",0],["wnetwork",3,[["message",3,[["dentryblock",3],["transaction",3],["state",3],["ed25519pub",3]]],["ed25519pub",3]]],["state",3]]],[[],["state",3]],[[]],[[]],null,[[],["result",4]],[[],["vec",3,[["transaction",3]]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"Opt"]]},\
"libp2p_networking":{"doc":"Library for p2p communication","t":[0,0,0,0,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,13,13,13,4,13,3,13,13,13,13,13,13,13,13,13,13,3,2,13,4,3,3,3,4,3,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,5,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,5,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,0,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,3,4,13,3,13,3,13,13,3,4,13,3,13,3,4,13,3,13,3,13,3,13,3,13,3,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,3,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,12,12,11,11,11,12,5,12,12,11,11,11,11,11,11,11,11,11],"n":["direct_message","message","network","ui","0","0","DirectMessageCodec","DirectMessageProtocol","DirectMessageRequest","DirectMessageResponse","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","ne","ne","protocol_name","read_request","read_response","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_request","write_response","Message","borrow","borrow_mut","clone","clone_into","content","deserialize","eq","fmt","from","into","ne","sender","serialize","to_owned","topic","try_from","try_into","type_id","vzip","AddKnownPeers","Bootstrap","CantKillTwice","ClientRequest","Conductor","ConnectionData","DHTError","DeserializationError","DirectRequest","DirectRequest","DirectResponse","DirectResponse","GetDHT","GossipMsg","GossipMsg","IgnorePeers","NetworkDef","NetworkError","NetworkError","NetworkEvent","NetworkNode","NetworkNodeConfig","NetworkNodeConfigBuilder","NetworkNodeConfigBuilderError","NetworkNodeHandle","NetworkNodeHandleError","NetworkNodeType","NodeConfigError","Pruning","PutDHT","RecvError","Regular","SendError","SerializationError","Shutdown","Subscribe","TimeoutError","UninitializedField","Unsubscribe","ValidationError","add_address","add_connected_peer","add_connecting_peer","add_direct_request","add_direct_response","add_known_peer","add_known_peers","add_known_peers","add_unknown_address","addresses_of_peer","as_error_source","as_error_source","backtrace","bootstrap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_addr","bound_addr","build","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","connected_peers","connected_peers","connected_peers","connecting_peers","connection_data","connection_state","default","default","default","default","description","deserialize","deserialize_msg","direct_request","direct_response","drain_publish_gossips","eq","error","extend_ignored_peers","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","gen_multiaddr","gen_transport","get_peers","get_peers_to_prune","get_random_handle","get_record","get_record","get_record_timeout","gossip","handle_sending","header","header","id","identity","identity","ignore_peers","ignored_peers","ignored_peers","ignored_peers","ignored_peers","in_current_span","in_current_span","inject_address_change","inject_connection_closed","inject_connection_established","inject_dial_failure","inject_event","inject_event","inject_event","inject_event","inject_event","inject_expired_external_addr","inject_expired_listen_addr","inject_listen_failure","inject_listener_closed","inject_listener_error","inject_new_external_addr","inject_new_listen_addr","inject_new_listener","into","into","into","into","into","into","into","into","into","into","into","is_bootstrapped","is_discovering_peers","is_killed","iter_unknown_addressess","known_peers","known_peers","known_peers","listen_addr","mark_killed","max_num_peers","max_num_peers","min_num_peers","min_num_peers","modify_state","network_node_handle_error","new","new","new","new_handler","new_put_uid","node_type","node_type","notify_webui","peer_id","peer_id","poll","publish_gossip","put_record","put_record","put_record_timeout","query_closest_peers","recv_kill","recv_network","register_webui_listener","remove_connected_peer","remove_peer","replication_factor","replication_factor","retry_put_dht","retry_put_dht","serialize","serialize_msg","set_discovering_peers","should_bootstrap","shutdown","source","spawn_handler","spawn_listeners","spin_up_swarm","start_listen","state","state_changed","state_wait_timeout_until","state_wait_timeout_until_with_trigger","state_wait_until","subscribe","subscribe_gossip","to_owned","to_owned","to_owned","to_owned","to_string","to_string","toggle_prune","toggle_pruning","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsubscribe","unsubscribe_gossip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_to_connect","0","0","0","0","0","0","0","0","1","1","1","1","1","key","key","notify","notify","value","0","0","0","1","1","2","0","0","source","source","source","source","source","source","source","CancelledRequest","CancelledRequestSnafu","DHTError","DialError","DialSnafu","Disagreement","DisagreementSnafu","GetRecord","GetRecordError","GetRecordSnafu","GetRecordWrapperError","GossipsubBuild","GossipsubBuildSnafu","GossipsubConfig","GossipsubConfigSnafu","NetworkError","NoKnownPeers","NoKnownPeersSnafu","NotFound","NotFoundSnafu","PublishError","PublishSnafu","PutRecord","PutRecordSnafu","StreamClosed","StreamClosedSnafu","Transport","TransportLaunch","TransportLaunchSnafu","TransportSnafu","as_error_source","as_error_source","as_error_source","backtrace","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","description","description","fail","fail","fail","fail","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","into_error","message","message","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","source","source","source","source","message","message","source","source","source","source","NetworkSnafu","NodeConfigSnafu","RecvSnafu","SendSnafu","SerializationSnafu","TimeoutSnafu","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","fail","fail","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_error","into_error","into_error","into_error","into_error","into_error","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Editing","InputMode","Normal","TableApp","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","connected_peer_list","fmt","fmt","from","from","input","input_mode","into","into","known_peer_list","message_buffer","new","next","previous","recv_swarm","run_app","send_swarm","state","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["libp2p_networking","","","","libp2p_networking::direct_message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::message","","","","","","","","","","","","","","","","","","","","libp2p_networking::network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::ClientRequest","","","","","","","","","","","","","","","","","","libp2p_networking::network::NetworkEvent","","","","","","libp2p_networking::network::NetworkNodeConfigBuilderError","","libp2p_networking::network::NetworkNodeHandleError","","","","","","","libp2p_networking::network::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::network::error::DHTError","","","libp2p_networking::network::error::GetRecordWrapperError","libp2p_networking::network::error::NetworkError","","","","","","libp2p_networking::network::network_node_handle_error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libp2p_networking::ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Direct Messages between two nodes","Example message used by the UI library","Network logic","UI library for clichat example","","","the codec for direct messages","the protocol for direct messages","wrapper type describing a serialized direct message","wrapper type describing the response to direct message","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","example message that may be sent to the swarm. Used in the …","","","","","the content of the message","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","the peerid of the sender","","","the topic associated with the msg","","","","","add vec of known peers or addresses","bootstrap node accepts all connections","The inner <code>NetworkNode</code> has already been killed","Actions to send from the client to the swarm","conductor node is never pruned","metadata about connections","Error in the kademlia DHT","Failure to deserialize a message","client request to send a direct serialized message","recv-ed a direct message from a node","client request to send a direct reply to a message","recv-ed a direct response from a node (that hopefully was …","Get(Key, Chan)","broadcast a serialized message","recv-ed a broadcast","Ignore peers. Only here for debugging purposes. Allows us …","Overarching network behaviour performing:","","Error generating network","events generated by the swarm that we wish to relay to the …","Network definition","describe the configuration of the network","Builder for <code>NetworkNodeConfig</code>.","Error type for NetworkNodeConfigBuilder","A handle containing:","Error wrapper type for interacting with swarm handle","this is mostly to estimate how many network connections a …","Error building Node config","disable or enable pruning of connections","Put(Key, Value) into DHT relay success back on channel","Error receiving message from network","regular node has a limit to the number of connections to …","Error sending request to network","Failure to serialize a message","kill the swarm","subscribe to a topic","Error waiting for connections","Uninitialized field","unsubscribe from a topic","Custom validation error","Add an address","Add a connected peer","Add a connecting peer","Add a direct request for a given peer","Add a direct response for a channel","Add a known peer","Tell libp2p about known network nodes","initialize the DHT with known peers add the peers to …","Add an unknown address","","","","","Bootstrap the network. Make sure at least 1 peer is known, …","","","","","","","","","","","","","","","","","","","","","","","address to bind to","address to bind to","Builds a new <code>NetworkNodeConfig</code>.","","","","","","","","","","Return a reference to the network config","Get a list of the connected peers","Get a clone of the connected peers list","set of currently connecting peers","set of peers that were at one point connected","Returns a reference to the internal <code>ConnectionData</code>","Get a clone of the internal connection state","","","","","","","deserialize an arbitrary message","Make a direct request to <code>peer_id</code> containing <code>msg</code>","Reply with <code>msg</code> to a request over <code>chan</code>","Attempt to drain the internal gossip list, publishing each …","","Contains the <code>NetworkError</code> snafu types","Add a list of peers to the ignored peers list","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","bind all interfaces on port <code>port</code> TODO something more …","Generate authenticated transport, copied from …","Get a list of peers, both connecting and connected","Return a list of peers to prune, based on given …","Given a slice of handles assumed to be larger than 0, …","Retrieve a value for a key from the DHT. Value …","Receive a record from the kademlia DHT if it exists. Must …","Get a record from the kademlia DHT with a timeout","Gossip a message to peers","periodically resend gossip messages if they have failed","","","Get a reference to the network node handle’s id.","optional identity","optional identity","Ignore <code>peers</code> when pruning e.g. maintain their connection","nodes to ignore","Get a clone of the ignored peers list","nodes to ignore","set of peers that are immune to pruning","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the bootstrap state is finished","Returns true if a peer discovery query is in progress","Returns <code>true</code> if the network state is killed","Iter all unknown addresses","Get a list of the known peers","Get a clone of the known peers list","set of known peers","Get a reference to the network node handle’s listen addr.","Mark this network as killed","max number of connections a node may have before it begins …","max number of connections a node may have before it begins …","Min number of connections a node may have before it begins …","Min number of connections a node may have before it begins …","Modify the state. This will automatically call …","Re-exports of the snafu errors that <code>NetworkNodeHandleError</code> …","Create a new instance of a <code>NetworkDef</code>","constructs a new node listening on <code>known_addr</code>","Creates a new <code>Network</code> with the given settings.","","generates new uid for put record query","The type of node: Either bootstrap (greedily connect to …","The type of node: Either bootstrap (greedily connect to …","Notify the webui that either the <code>state</code> or <code>connection_state</code> …","Get a reference to the network node handle’s peer id.","Get a reference to the network node’s peer id.","","Publish a given gossip","Publish a key/value to the kv store. Once replicated upon …","Insert a record into the kademlia DHT","Insert a record into the kademlia DHT with a timeout","Start a query for the closest peers","Get a clone of the internal <code>killed</code> receiver","Get a clone of the internal network receiver","Register a webui listener","Remove a connected peer","Remove a peer, both connecting and connected","replication factor for entries in the DHT default is …","replication factor for entries in the DHT default is …","attempt to put all unstarted put querys to DHT","periodically retry put requests to dht if they’ve failed","","serialize an arbitrary message","Toggle whether or not libp2p is discovering peers NOTE: …","Returns true if the bootstrap state is not started","Cleanly shuts down a swarm node This is done by sending a …","","Glue function that listens for events from the Swarm …","Spawn a task to listen for requests on the returned channel","a single node, connects them to each other and waits for …","starts the swarm listening on <code>listen_addr</code> and optionally …","Get a clone of the internal state","Get a reference to the internal Condvar. This will be …","Call <code>wait_timeout_until</code> on the state’s <code>SubscribableMutex</code>","Call <code>wait_timeout_until_with_trigger</code> on the state’s …","Call <code>wait_until</code> on the state’s <code>SubscribableMutex</code>","Subscribe to a topic","Subscribe to a given topic","","","","","","","Toggle pruning the number of connections","Toggle pruning","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsubscribe from a topic","Unsubscribe from a given topic","","","","","","","","","","","","Wait for a node to connect to other nodes","","","","","","","","","","","","","","Key to publish under","Key to search for","Channel to notify caller of result of publishing","Channel to notify caller of value (or failure to find …","Value to publish under","","","","","","","","","source of error","source of error","source of error","source of error","source of error","source of error","dummy source","request was ignored serverside","SNAFU context selector for the <code>DHTError::CancelledRequest</code> …","Error enum for querying store because for some reason, …","Error initiating dial of peer","SNAFU context selector for the <code>NetworkError::DialError</code> …","nodes disagreed on the value","SNAFU context selector for the <code>DHTError::Disagreement</code> …","Get Record Error","wrapper","SNAFU context selector for the <code>DHTError::GetRecord</code> variant","Wrapper Error enum for <code>libp2p::kad::GetRecordError</code>. …","Error building the gossipsub instance","SNAFU context selector for the <code>NetworkError::GossipsubBuild</code>…","Error building the gossipsub configuration","SNAFU context selector for the …","wrapper type for errors generated by the <code>Network</code>","Error when there are no known peers to bootstrap off","SNAFU context selector for the <code>NetworkError::NoKnownPeers</code> …","could not find 2 or more nodes that had the value","SNAFU context selector for the <code>DHTError::NotFound</code> variant","Error publishing a gossipsub message","SNAFU context selector for the <code>NetworkError::PublishError</code> …","Get Record Error","SNAFU context selector for the <code>DHTError::PutRecord</code> variant","Error if one of the channels to or from the swarm is closed","SNAFU context selector for the <code>NetworkError::StreamClosed</code> …","Error during dialing or listening","Error establishing backend connection","SNAFU context selector for the …","SNAFU context selector for the <code>NetworkError::Transport</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","source of error","source of error","source of error","source of error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","The underlying source of the error","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","SNAFU context selector for the …","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Struct for the TUI app","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,0,0,0,0,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,1,2,3,4,4,4,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,8,0,7,0,8,8,6,9,6,9,6,6,9,6,0,0,8,0,0,0,0,0,0,0,0,8,6,6,8,7,8,8,6,6,8,10,6,10,11,11,11,11,11,11,12,13,11,11,10,8,8,11,11,14,15,10,12,8,13,16,7,6,9,11,14,15,10,12,8,13,16,7,6,9,15,14,15,8,14,15,16,7,14,15,16,7,12,11,12,16,16,11,12,14,15,16,7,8,7,0,12,12,11,7,0,11,11,14,10,10,12,8,8,13,16,7,6,9,11,14,15,10,10,10,12,8,13,16,7,6,9,7,0,0,11,11,0,11,12,12,12,13,10,8,12,15,14,12,15,12,14,16,10,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,15,10,12,8,13,16,7,6,9,11,11,12,11,11,12,16,12,12,15,14,15,14,12,0,11,12,13,11,11,15,14,12,12,13,11,11,11,12,12,11,12,12,12,11,11,15,14,11,13,7,0,11,11,12,8,0,13,0,13,12,12,12,12,12,12,11,14,15,16,7,10,8,12,11,11,14,15,10,12,8,13,16,7,6,9,11,14,15,10,12,8,13,16,7,6,9,11,14,15,10,12,8,13,16,7,6,9,12,11,11,14,15,10,12,8,13,16,7,6,9,12,17,18,19,20,21,22,23,24,17,18,19,20,21,25,26,25,26,25,27,28,29,28,29,28,30,31,32,33,34,35,36,37,38,39,0,0,40,0,39,0,39,41,0,0,40,0,40,0,0,40,0,39,0,40,0,39,0,40,0,40,40,0,0,40,39,41,40,39,42,43,44,45,46,47,48,49,40,50,51,52,53,54,39,41,42,43,44,45,46,47,48,49,40,50,51,52,53,54,39,41,45,46,47,49,52,53,40,39,42,43,44,45,46,47,48,49,50,51,52,53,54,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,39,41,40,39,45,46,47,49,52,53,42,43,44,45,46,47,48,49,40,40,50,51,52,53,54,39,39,41,41,42,43,44,45,46,47,48,49,40,50,51,52,53,54,39,41,40,39,41,40,39,41,42,43,44,45,46,47,48,49,40,50,51,52,53,54,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,45,46,40,39,42,43,44,45,46,47,48,49,50,51,52,53,54,39,41,40,39,41,42,43,44,45,46,47,48,49,40,50,51,52,53,54,39,41,42,43,44,45,46,47,48,49,40,50,51,52,53,54,39,41,42,43,44,45,46,47,48,49,40,50,51,52,53,54,39,41,42,43,44,45,46,47,48,49,40,50,51,52,53,54,39,41,55,56,57,58,59,60,61,62,63,64,0,0,0,0,0,0,65,66,67,68,69,70,65,66,67,68,69,70,67,68,65,66,67,68,69,70,65,66,67,68,69,70,67,68,65,66,67,68,69,70,65,66,67,68,69,70,65,66,67,68,69,70,65,66,67,68,69,70,65,66,67,68,69,70,65,66,67,68,69,70,65,66,67,68,69,70,65,66,67,68,69,70,65,66,67,68,69,70,71,0,71,0,71,72,71,72,71,71,72,71,72,71,72,72,72,71,72,72,72,72,72,72,72,0,72,72,71,71,72,71,72,71,72,71,72],"f":[null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["directmessageprotocol",3]],[[["",0]],["directmessagecodec",3]],[[["",0]],["directmessagerequest",3]],[[["",0]],["directmessageresponse",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4]],[[["",0],["directmessagerequest",3]],["bool",0]],[[["",0],["directmessageresponse",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["directmessagerequest",3]],["bool",0]],[[["",0],["directmessageresponse",3]],["bool",0]],[[["",0]]],[[["",0],["directmessageprotocol",3],["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["directmessageprotocol",3],["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[["",0],["directmessageprotocol",3],["",0],["directmessagerequest",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["directmessageprotocol",3],["",0],["directmessageresponse",3]],["pin",3,[["box",3,[["future",8]]]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["message",3]],[[["",0],["",0]]],null,[[],["result",4]],[[["",0],["message",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["message",3]],["bool",0]],null,[[["",0]],["result",4]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["peerid",3],["multiaddr",3]]],[[["",0],["peerid",3]]],[[["",0],["peerid",3]]],[[["",0],["peerid",3],["vec",3,[["u8",0]]]]],[[["",0],["responsechannel",3,[["directmessageresponse",3]]],["vec",3,[["u8",0]]]]],[[["",0],["peerid",3]]],[[["",0],["vec",3]]],[[["",0]]],[[["",0],["multiaddr",3]]],[[["",0],["peerid",3]],["vec",3,[["multiaddr",3]]]],[[["",0]],["error",8]],[[["",0]],["error",8]],[[["",0]],["option",4,[["backtrace",3]]]],[[["",0]],["result",4,[["networkerror",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["into",8,[["multiaddr",3]]]],["",0]],null,[[["",0]],["result",4,[["networknodeconfig",3],["networknodeconfigbuildererror",4]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["networknodeconfig",3]],[[["",0]],["networknodeconfigbuilder",3]],[[["",0]],["connectiondata",3]],[[["",0]],["networknodetype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["networknodeconfig",3]],[[["",0]],["hashset",3,[["peerid",3]]]],[[["",0]]],null,null,[[["",0]],["arc",3,[["subscribablerwlock",3,[["connectiondata",3]]]]]],[[["",0]]],[[],["networknodeconfig",3]],[[]],[[],["connectiondata",3]],[[]],[[["",0]],["str",0]],[[],["result",4]],[[],["result",4,[["deserialize",8],["box",3,[["errorkind",4]]]]]],[[["",0],["peerid",3]]],[[["",0],["responsechannel",3,[["directmessageresponse",3]]]]],[[["",0]]],[[["",0],["networknodetype",4]],["bool",0]],null,[[["",0],["vec",3,[["peerid",3]]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["string",3]]],[[]],[[["uninitializedfielderror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["networknodetype",4]]]],[[["u16",0]],["multiaddr",3]],[[["keypair",4]]],[[["",0]],["hashset",3,[["peerid",3]]]],[[["",0],["usize",0]],["vec",3,[["peerid",3]]]],[[],["arc",3,[["networknodehandle",3]]]],[[["",0],["vec",3,[["u8",0]]],["sender",3,[["vec",3,[["u8",0]]]]],["nonzerousize",3]]],[[["",0]]],[[["",0],["duration",3]]],[[["",0],["string",3]]],[[["",0]]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[["",0]],["usize",0]],[[["",0],["into",8,[["keypair",4]]]],["",0]],null,[[["",0],["vec",3,[["peerid",3]]]]],[[["",0],["hashset",3,[["peerid",3]]]],["",0]],[[["",0]]],null,null,[[]],[[]],[[["",0],["peerid",3],["connectionid",3],["connectedpoint",4],["connectedpoint",4]]],[[["",0],["peerid",3],["connectionid",3],["connectedpoint",4],["usize",0]]],[[["",0],["peerid",3],["connectionid",3],["connectedpoint",4],["option",4,[["vec",3]]],["usize",0]]],[[["",0],["option",4,[["peerid",3]]],["dialerror",4]]],[[["",0],["requestresponseevent",4,[["directmessagerequest",3],["directmessageresponse",3]]]]],[[["",0],["identifyevent",4]]],[[["",0],["kademliaevent",4]]],[[["",0],["gossipsubevent",4]]],[[["",0],["peerid",3],["connectionid",3]]],[[["",0],["multiaddr",3]]],[[["",0],["listenerid",3],["multiaddr",3]]],[[["",0],["multiaddr",3],["multiaddr",3]]],[[["",0],["listenerid",3],["result",4,[["error",3]]]]],[[["",0],["listenerid",3],["error",8]]],[[["",0],["multiaddr",3]]],[[["",0],["listenerid",3],["multiaddr",3]]],[[["",0],["listenerid",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]],["hashset",3,[["peerid",3]]]],[[["",0]]],null,[[["",0]],["multiaddr",3]],[[["",0]]],[[["",0],["usize",0]],["",0]],null,[[["",0],["usize",0]],["",0]],null,[[["",0]]],null,[[["gossipsub",3],["kademlia",3,[["memorystore",3]]],["identify",3],["requestresponse",3,[["directmessagecodec",3]]],["bool",0],["hashset",3,[["peerid",3]]]],["networkdef",3]],[[["networknodeconfig",3],["usize",0]]],[[["networknodeconfig",3]]],[[["",0]]],[[["",0]],["usize",0]],[[["",0],["networknodetype",4]],["",0]],null,[[["",0]]],[[["",0]],["peerid",3]],[[["",0]],["peerid",3]],[[["",0],["context",3]],["poll",4,[["networkbehaviouraction",4]]]],[[["",0],["topic",6],["vec",3,[["u8",0]]]]],[[["",0],["kadputquery",3]]],[[["",0]]],[[["",0],["duration",3]]],[[["",0],["peerid",3]]],[[["",0]],["receiver",3]],[[["",0]],["receiver",3,[["networkevent",4]]]],[[["",0]]],[[["",0],["peerid",3]]],[[["",0],["peerid",3]]],[[["",0],["into",8,[["nonzerousize",3]]]],["",0]],null,[[["",0]]],[[["",0]]],[[["",0]],["result",4]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["box",3,[["errorkind",4]]]]]],[[["",0],["bool",0]]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]],["option",4,[["error",8]]]],[[["arc",3,[["networknodehandle",3,[["",26,[["send",8],["default",8],["debug",8]]]]]]]]],[[]],[[["duration",3],["vec",3],["networknodeconfig",3],["usize",0],["arc",3]]],[[["",0],["multiaddr",3]]],[[["",0]]],[[["",0]],["condvar",3]],[[["",0],["duration",3]]],[[["",0],["duration",3]],["timeout",3,[["futuresordered",3]]]],[[["",0]]],[[["",0],["string",3]]],[[["",0],["str",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0],["bool",0]]],[[["",0],["bool",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["string",3]]],[[["",0],["str",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arc",3,[["networknodehandle",3]]],["usize",0],["receiver",3,[["networkevent",4]]],["usize",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["error",8]],[[["",0]],["error",8]],[[["",0]],["error",8]],[[["",0]],["option",4,[["backtrace",3]]]],[[["",0]],["option",4,[["backtracenetworkerror",4]],[[],["networkerror",4]],[[],["networkerror",4]],[[],["networkerror",4]],[[],["dhterror",4]],[[],["dhterror",4]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["dialsnafu",3]],[[["",0]],["transportsnafu",3]],[[["",0]],["transportlaunchsnafu",3]],[[["",0]],["gossipsubconfigsnafu",3]],[[["",0]],["gossipsubbuildsnafu",3]],[[["",0]],["streamclosedsnafu",3]],[[["",0]],["publishsnafu",3]],[[["",0]],["noknownpeerssnafu",3]],[[["",0]],["getrecordsnafu",3]],[[["",0]],["putrecordsnafu",3]],[[["",0]],["disagreementsnafu",3]],[[["",0]],["notfoundsnafu",3]],[[["",0]],["cancelledrequestsnafu",3]],[[["",0]],["dhterror",4]],[[["",0]],["getrecordwrappererror",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[],["result",4,[["networkerror",4]]]],[[],["result",4,[["networkerror",4]]]],[[],["result",4,[["networkerror",4]]]],[[],["result",4,[["networkerror",4]]]],[[],["result",4,[["dhterror",4]]]],[[],["result",4,[["dhterror",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[],["indentedsection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["networkerror",4]],[[],["networkerror",4]],[[],["networkerror",4]],[[],["networkerror",4]],[[],["networkerror",4]],[[],["networkerror",4]],[[],["networkerror",4]],[[],["networkerror",4]],[[],["dhterror",4]],[[],["dhterror",4]],[[],["dhterror",4]],[[],["dhterror",4]],[[],["dhterror",4]],null,null,[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["networknodehandleerror",4]],[[],["networknodehandleerror",4]],[[["",0]],["networksnafu",3]],[[["",0]],["serializationsnafu",3]],[[["",0]],["sendsnafu",3]],[[["",0]],["recvsnafu",3]],[[["",0]],["nodeconfigsnafu",3]],[[["",0]],["timeoutsnafu",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4,[["networknodehandleerror",4]]]],[[],["result",4,[["networknodehandleerror",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["networknodehandleerror",4]],[[],["networknodehandleerror",4]],[[],["networknodehandleerror",4]],[[],["networknodehandleerror",4]],[[],["networknodehandleerror",4]],[[],["networknodehandleerror",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["inputmode",4]],[[["",0],["",0]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,null,[[]],[[]],null,null,[[["arc",3,[["mutex",6,[["vecdeque",3,[["message",3]]]]]]],["sender",3,[["clientrequest",4]]],["receiver",3,[["networkevent",4]]]]],[[["",0]]],[[["",0]]],null,[[["terminal",3],["tableapp",3]]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]]],"p":[[3,"DirectMessageRequest"],[3,"DirectMessageResponse"],[3,"DirectMessageProtocol"],[3,"DirectMessageCodec"],[3,"Message"],[4,"ClientRequest"],[4,"NetworkNodeType"],[4,"NetworkNodeHandleError"],[4,"NetworkEvent"],[4,"NetworkNodeConfigBuilderError"],[3,"NetworkDef"],[3,"NetworkNodeHandle"],[3,"NetworkNode"],[3,"NetworkNodeConfig"],[3,"NetworkNodeConfigBuilder"],[3,"ConnectionData"],[13,"GossipMsg"],[13,"Subscribe"],[13,"Unsubscribe"],[13,"DirectRequest"],[13,"DirectResponse"],[13,"Pruning"],[13,"AddKnownPeers"],[13,"IgnorePeers"],[13,"PutDHT"],[13,"GetDHT"],[13,"GossipMsg"],[13,"DirectRequest"],[13,"DirectResponse"],[13,"UninitializedField"],[13,"ValidationError"],[13,"NetworkError"],[13,"SerializationError"],[13,"DeserializationError"],[13,"NodeConfigError"],[13,"TimeoutError"],[13,"DHTError"],[13,"CantKillTwice"],[4,"DHTError"],[4,"NetworkError"],[4,"GetRecordWrapperError"],[3,"DialSnafu"],[3,"TransportSnafu"],[3,"TransportLaunchSnafu"],[3,"GossipsubConfigSnafu"],[3,"GossipsubBuildSnafu"],[3,"StreamClosedSnafu"],[3,"PublishSnafu"],[3,"NoKnownPeersSnafu"],[3,"GetRecordSnafu"],[3,"PutRecordSnafu"],[3,"DisagreementSnafu"],[3,"NotFoundSnafu"],[3,"CancelledRequestSnafu"],[13,"CancelledRequest"],[13,"GetRecord"],[13,"PutRecord"],[13,"GetRecordError"],[13,"GossipsubConfig"],[13,"GossipsubBuild"],[13,"DialError"],[13,"Transport"],[13,"TransportLaunch"],[13,"PublishError"],[3,"NetworkSnafu"],[3,"SerializationSnafu"],[3,"SendSnafu"],[3,"RecvSnafu"],[3,"NodeConfigSnafu"],[3,"TimeoutSnafu"],[4,"InputMode"],[3,"TableApp"]]},\
"multi_machine":{"doc":"","t":[6,3,17,11,11,11,12,11,11,11,5,5,12,5,11,5,11,11,11,11,11],"n":["Node","NodeOpt","TRANSACTION_COUNT","borrow","borrow_mut","clap","config","fmt","from","from_clap","get_host","get_networking","id","init_state_and_phaselock","into","main","parse_args","try_from","try_into","type_id","vzip"],"q":["multi_machine","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","Path to the node configuration file","","Returns the argument unchanged.","","Gets IP address and port number of a node from node …","Trys to get a networking implementation with the given id …","Id of the current node","Creates the initial state and phaselock for simulation.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,1,1],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["app",3]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[["value",4],["u64",0]]],[[["ed25519pub",3],["str",0],["u16",0]]],null,[[["usize",0],["usize",0],["u64",0],["wnetwork",3,[["message",3,[["dentryblock",3],["transaction",3],["state",3],["ed25519pub",3]]],["ed25519pub",3]]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"NodeOpt"]]},\
"multi_machine_libp2p":{"doc":"","t":[3,6,11,11,12,11,11,11,11,12,5,11,5,5,12,12,12,11,5,12,12,11,11,11,11],"n":["CliOpt","Node","borrow","borrow_mut","bound_addr","clap","fmt","from","from_clap","id","init_state_and_phaselock","into","main","new_libp2p_network","node_type","num_nodes","num_txns","parse_args","parse_node","seed","to_connect_addrs","try_from","try_into","type_id","vzip"],"q":["multi_machine_libp2p","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","internal interface to bind to","","","Returns the argument unchanged.","","Id of the current node","Creates the initial state and phaselock for simulation.","Calls <code>U::from(self)</code>.","","","the role this node plays","total number of nodes","number of txns to run","","convert node string into multi addr","seed used to generate ids","list of bootstrap node addrs","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[],["app",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],null,[[["usize",0],["usize",0],["u64",0],["libp2pnetwork",3,[["message",3,[["dentryblock",3],["transaction",3],["state",3],["ed25519pub",3]]],["ed25519pub",3]]]]],[[]],[[]],[[["ed25519pub",3],["vec",3,[["multiaddr",3]]],["usize",0],["networknodetype",4],["multiaddr",3]]],null,null,null,[[],["result",4]],[[["str",0]],["result",4,[["multiaddr",3],["error",4]]]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"CliOpt"]]},\
"phaselock":{"doc":"Provides a generic rust implementation of the <code>PhaseLock</code> …","t":[13,13,13,13,13,17,17,13,13,13,13,3,3,4,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,12,12,12,11,2,12,11,11,11,11,11,12,12,12,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,13,13,3,3,13,13,13,3,4,3,3,3,3,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,0,6,3,6,3,4,3,13,13,13,13,13,13,3,3,3,12,12,12,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,5,5,5,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,8,13,13,13,16,16,16,13,13,13,13,13,13,4,8,16,8,13,13,8,13,13,16,13,8,16,16,8,16,8,16,6,13,8,16,13,10,10,11,11,11,11,10,10,11,11,10,0,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,0,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,10,10,11,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,13,13,3,4,13,13,3,3,13,3,3,3,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12],"n":["BadBlock","BadOrForgedQC","Continue","FailedToBroadcast","FailedToMessageLeader","H_256","H_512","InconsistentBlock","InvalidState","ItemNotFound","NetworkFault","PhaseLock","PhaseLockConfig","PhaseLockError","PhaseLockInner","StorageError","TimeoutError","ViewTimeoutError","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone_into","clone_into","data","demos","description","documentation","extends_from","fmt","fmt","fmt","from","from","from","from","get_next_view_timeout","get_stage","get_state","header","in_current_span","init","into","into","into","into","known_nodes","mark_round_as_timed_out","max_transactions","new","next_view","next_view_timeout","propose_max_round_time","propose_min_round_time","publish_transaction_async","rand","round_start_delay","run_round","send_broadcast_message","send_direct_message","send_event","source","start_delay","threshold","timeout_ratio","to_owned","to_owned","to_string","total_nodes","traits","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","types","vzip","vzip","vzip","vzip","bad_qc","context","hash","source","source","source","source","source","stage","stage","stage","stage","stage","state","type_name","view_number","BlockHash","Commit","Decide","Leaf","LeafHash","None","PreCommit","Prepare","QuorumCertificate","Stage","StateHash","TransactionHash","VecQuorumCertificate","VerifyHash","as_ref","as_ref","as_ref","as_ref","as_ref","block_hash","block_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","create_verify_hash","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dummy","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","genesis","genesis","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","item","leaf_hash","ne","ne","ne","ne","ne","ne","ne","ne","new","parent","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","protocol_name","protocol_name","protocol_name","protocol_name","protocol_name","protocol_name","protocol_name","protocol_name","protocol_name","protocol_name","random","random","random","random","random","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signatures","signatures","stage","stage","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec_cert","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_number","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","dentry","Account","Addition","Balance","DEntryBlock","DEntryError","DEntryNode","InconsistentTransaction","InsufficentBalance","NoSuchInputAccount","NoSuchOutputAccount","PreviousStateMismatch","ReusedNonce","State","Subtraction","Transaction","account","account","add","add_transaction_raw","amount","amount","append","as_error_source","backtrace","balances","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","create_random_transaction","default","default","description","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_hash","get_starting_state","hash","hash","hash","hash","hash","hash","hash_leaf","hash_transaction","header","in_current_span","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","new","next_block","nonce","nonces","on_commit","previous_block","random_leaf","random_quorom_certificate","random_transaction","serialize","serialize","serialize","serialize","serialize","source","sub","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_block","validate_independence","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Block","Block","Block","BlockContents","ChannelSend","CouldNotDeliver","DHTError","Election","Error","Error","ExecutorError","FailedToBindListener","FailedToDeserialize","FailedToSerialize","IdentityHandshake","ListenerSend","NetworkError","NetworkReliability","Networking","NetworkingImplementation","NoSocketsError","NoSuchNode","NodeImplementation","Other","ShutDown","SignatureKey","SocketDecodeError","State","State","State","StatefulHandler","StatefulHandler","Storage","Storage","StorageResult","Timeout","Transaction","Transaction","WebSocket","add_transaction_raw","append","as_error_source","backtrace","borrow","borrow_mut","broadcast_message","broadcast_queue","cause","description","direct_queue","election","fmt","fmt","from","from","get_block","get_internal_state","get_leaf","get_leaf_by_block","get_newest_qc","get_qc","get_qc_for_view","get_record","get_state","hash","hash_leaf","hash_transaction","header","implementations","in_current_span","into","known_nodes","message_node","network_changes","next_block","next_broadcast","next_direct","notify","on_commit","put_record","ready","sample_delay","sample_keep","shut_down","source","to_string","try_from","try_into","type_id","update","validate_block","vzip","inner","input","input","source","source","source","source","source","source","source","StaticCommittee","borrow","borrow_mut","from","get_leader","get_stake_table","get_vote_count","get_votes","into","make_vote_token","new","try_from","try_into","type_id","vzip","AtomicStorage","DummyReliability","Libp2pNetwork","MasterMap","MemoryNetwork","MemoryStorage","PeerInfoVec","Stateless","WNetwork","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_message","broadcast_message","broadcast_message","broadcast_queue","broadcast_queue","broadcast_queue","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","connect_to","connection_table_size","construct_tmp_storage","construct_tmp_storage","create","default","default","direct_queue","direct_queue","direct_queue","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_task","generator","generator","generator","get_block","get_block","get_internal_state","get_internal_state","get_leaf","get_leaf","get_leaf_by_block","get_leaf_by_block","get_newest_qc","get_newest_qc","get_qc","get_qc","get_qc_for_view","get_qc_for_view","get_record","get_record","get_record","get_state","get_state","in_flight_message_count","in_flight_message_count","in_flight_message_count","init_from_loader","into","into","into","into","into","into","into","into","known_nodes","known_nodes","known_nodes","message_node","message_node","message_node","network_changes","network_changes","network_changes","new","new","new","new","new","next_broadcast","next_broadcast","next_broadcast","next_direct","next_direct","next_direct","notify","open","put_record","put_record","put_record","ready","ready","ready","sample_delay","sample_keep","shut_down","shut_down","shut_down","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Commit","Decide","Decide","Error","Event","EventType","Follower","Leader","Message","NewView","NewView","PhaseLockHandle","PreCommit","Prepare","Propose","Synced","ViewTimeout","Vote","available_events","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect_round_events","current_view","current_view","current_view","current_view","current_view","current_view","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","event","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_next_view_timeout","get_round_runner_state","get_state","hash","hash","hash","hash","hash","hash","high_qc","into","into","into","into","into","into","into","into","into","into","is_ready","justify","kind","leaf","leaf_hash","leaf_hash","leaf_hash","leaf_hash","ne","ne","ne","ne","ne","ne","networking","next_event","next_event_sync","pause","pause_sync","qc","qc","qc","run_one_round","run_one_round_sync","sender","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shut_down","signature","stage","start","start_sync","state","storage","submit_transaction","submit_transaction_sync","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_next_event","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","view_number","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","block","block","error","qcs","state","view_number","view_number","view_number","view_number","view_number"],"q":["phaselock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::PhaseLockError","","","","","","","","","","","","","","","","phaselock::dataphaselock::demos","phaselock::demos::dentry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phaselock::traits::NetworkError","","","","","","","","","","phaselock::traits::election","","","","","","","","","","","","","","","phaselock::traits::implementationsphaselock::typesphaselock::types::EventType","","","","","","","","",""],"d":["A block failed verification","Bad or forged quorum certificate","Internal value used to drive the state machine","Failed to broadcast a message on the network","Failed to Message the leader in the given stage","Length, in bytes, of a 256 bit hash","Length, in bytes, of a 512 bit hash","A block was not consistent with the existing state","Invalid state machine state","Item was not present in storage","Failure in networking layer","Thread safe, shared view of a <code>PhaseLock</code>","Holds configuration for a <code>PhaseLock</code>","Reexport error type Error type for <code>PhaseLock</code>","Holds the state needed to participate in <code>PhaseLock</code> …","Error accesing storage","Phaselock timed out waiting for msgs","Phaselock timed out during round","","","","","","","","","","","","","","","","Contains structures and functions for committee election …","Contains implementations of the <code>PhaseLock</code> traits used in …","","Hotshot: A linear time, committee electing, BFT Protocol.","Returns true if the proposed leaf extends from the given …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","return the timeout for a view for <code>self</code>","Returns the stage this error happened in, if such …","Returns a copy of the state","","","Initializes a new phaselock and does the work of setting …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","List of known node’s public keys, including own, sorted …","Marks a given view number as timed out. This should be …","Maximum transactions per block","Creates a new phaselock with the given configuration …","Sends out the next view message","Base duration for next-view timeout, in milliseconds","The maximum amount of time a leader can wait to start a …","The minimum amount of time a leader has to wait to start a …","Publishes a transaction to the network","Reexport rand crate","The delay a leader inserts before starting pre-commit, in …","Runs a single round of consensus","Send a broadcast message.","Send a direct message to a given recipient.","Sends an event over an event broadcaster if one is …","","Delay after init before starting consensus, in milliseconds","Nodes required to reach a decision","The exponential backoff ration for the next-view timeout","","","","Total number of nodes in the network","Contains traits consumed by <code>PhaseLock</code>","","","","","","","","","","","","","Contains types used by the crate","","","","","The bad quorum certificate","Context","Hash of the missing item","Underlying error","source of error","The underlying network fault","The underlying network fault","Underlying network fault","The stage the failure occurred in","The stage the failure occurred in","The stage the failure occurred in","The stage the error occurred in","The stage the error occurred in","The state that the round was in when it timed out","Name of the hash type that was not found. Can be easily …","view number","External wrapper type","Commit Phase","Decide Phase","A node in <code>PhaseLock</code>’s consensus-internal merkle tree.","External wrapper type","Between rounds","PreCommit Phase","Prepare Phase","The type used for Quorum Certificates","Represents the stages of consensus","External wrapper type","External wrapper type","<code>QuorumCertificate</code> variant using a <code>Vec</code> rather than a …","External wrapper type","","","","","","Hash of the block refereed to by this Quorum Certificate.","Block this QC refers to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This concatenates the encoding of <code>leaf_hash</code>, <code>view</code>, and …","","","","","","","","","","","","","","","Create a dummy <code>VecQuorumCertificate</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an array of the correct size directly into an <code>Self</code>","Converts an array of the correct size directly into an <code>Self</code>","Converts an array of the correct size directly into an <code>Self</code>","Converts an array of the correct size directly into an <code>Self</code>","Converts an array of the correct size directly into an <code>Self</code>","Temporary bypass for boostrapping","Temporary bypass for boostrapping","","","","","","","","","","","","","","","","Hashes the leaf with the hashing algorithm provided by the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The block contained in this <code>Leaf</code>","Hash of the <code>Leaf</code> referred to by this Quorum Certificate","","","","","","","","","Creates a new leaf with the specified block and parent","The hash of the parent <code>Leaf</code>","","","","","","","","","","","","","","","","Testing only random generation","Testing only random generation","Testing only random generation","Testing only random generation","Testing only random generation","","","","","","","","","","The list of signatures establishing the validity of this …","The signature portion of this QC","The <code>Stage</code> of consensus that this Quorum Certificate was …","The stage of consensus we were on when we made this …","","","","","","","","","","Clones the contents of this Hash into a <code>Vec&lt;u8&gt;</code>","Clones the contents of this Hash into a <code>Vec&lt;u8&gt;</code>","Clones the contents of this Hash into a <code>Vec&lt;u8&gt;</code>","Clones the contents of this Hash into a <code>Vec&lt;u8&gt;</code>","Clones the contents of this Hash into a <code>Vec&lt;u8&gt;</code>","Converts this Quorum Certificate to a version using a <code>Vec</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The view number this quorum certificate was generated …","The view we were on when we made this certificate","","","","","","","","","","Double entry accounting demo","The account identifier type used by the demo","Records an increase in an account balance","The account balance type used by the demo","The block for the dentry demo","The error type for the dentry demo","The node implementation for the dentry demo","The subtraction and addition amounts for this transaction …","Tried to move more money than was in the account","No such input account exists","No such output account exists","Previous state commitment does not match","Nonce was reused","The state for the dentry demo","Records a reduction in an account balance","The transaction for the dentry demo","An account identifier","An account identifier","An increment to an account balance","","An account balance","An account balance","","","","Key/value store of accounts and balances","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Provides a common starting state","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Create a new <code>DEntryNode</code>","","The nonce for a transaction, no two transactions can have …","Set of previously seen nonces","","Block state commitment","Provides a random <code>Leaf</code>","Provides a random <code>QuorumCertificate</code>","Provides a random valid transaction from the current state","","","","","","","A decrement to an account balance","","","","","","","","Transaction vector","","","","","","","","","","","","","","","","","","","","","","","Ensures that this transaction is at least consistent with …","","","","","","","","Block type for this consensus implementation","The type of block this state is associated with","Block type for this consensus implementation","Abstraction over the contents of a block","Channel error","Could not deliver a message to a specified recipient","DHT error","The election algorithm","The error type for this type of block","The error type for this particular type of ledger state","Error orginiating from within the executor","Failed to bind a listener socket","Failed to deserealize a message","Failed to serialize a message","Could not complete handshake","A Listener failed to send a message","Error type for networking","interface describing how reliable the network is","Networking type for this consensus implementation","Describes, generically, the behaviors a networking …","No sockets were open","Attempted to deliver a message to an unknown node","Node implementation aggregate trait","Generic error type for compatibility if needed","The underlying connection has been shut down","The signature key type for this implementation","Failed to decode a socket specification","Abstraction over the state that blocks modify","State type for this consensus implementation","State type for this consensus implementation","Trait for a stateful event handler","Stateful call back handler for this consensus …","Abstraction over on disk persistence of node state","Storage type for this consensus implementation","Result for a storage type","A timeout occurred","A transaction trait for <code>BlockContents</code>","The type of the transitions we are applying","WebSockets specific error","Attempts to add a transaction, returning an Error if it …","Appends the given block to this state, returning an new …","","","","","Broadcasts a message to the network","Moves out the entire queue of received broadcast messages, …","","","Moves out the entire queue of received direct messages to …","Sortition trait","","","","Returns the argument unchanged.","Retrieves a block from storage, returning <code>None</code> if it could …","Get the internal state of this storage system.","Retrieves a leaf by its hash","Retrieves a leaf by the hash of its block","Retrieves the newest Quorum Certificate","Retrieves a Quorum Certificate from storage, by the hash …","Retrieves the Quorum Certificate associated with a …","Get value stored in shared store under <code>key</code>","Retrieves a <code>State</code>, indexed by the hash of the <code>Leaf</code> that …","Produces a hash for the contents of the block","Produces a hash for an arbitrary sequence of bytes","Produces a hash for a transaction","","Module for publicly usable implementations of the traits","","Calls <code>U::from(self)</code>.","Node’s currently known to the networking implementation","Sends a direct message to a specific node","Returns a list of changes in the network that have been …","Returns an empty, template next block given this current …","Provides a future for the next received broadcast","Provides a future for the next received direct message to …","The <code>PhaseLock</code> implementation will call this method, with …","Gets called to notify the persistence backend that this …","Insert <code>value</code> into the shared store under <code>key</code>.","Returns true when node is successfully initialized into …","sample from uniform distribution to decide whether or not …","Sample from bernoulli distribution to decide whether or …","Shut down this network. Afterwards this network should no …","","","","","","Calls the given <code>update_fn</code> for a list of modifications, …","Returns true if and only if the provided block is valid …","","Originating error","Input that was given","Input that was given","Originating bincode error","originating bincode error","Originating websockets error","Originating async_std error","Originating io error","originating io error","Source of error","Dummy implementation of <code>Election</code>","","","Returns the argument unchanged.","Index the vector of public keys with the current view …","Clone the static table","If its a validated token, it always has one vote","Simply verify the signature and check the membership list","Calls <code>U::from(self)</code>.","Simply make the partial signature","Creates a new dummy elector","","","","","Persistent <code>Storage</code> implementation, based upon <code>atomic_store</code>.","dummy implementation of network reliability","Networking implementation that uses libp2p generic over <code>M</code> …","Shared state for in-memory mock networking.","In memory only network simulator.","In memory, ephemeral, storage for a <code>PhaseLock</code> instance","Type alias for a shared collection of peerid, multiaddrs","Dummy, do nothing implementation of <code>StatefulHandler</code>","Handle to the underlying networking implementation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a connection to the given node.","Returns the size of the internal connection table","","","Creates an atomic storage at a given path. If files exist, …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generates the background processing task","Returns a boxed function …","","","","","","","","","","","","","","","","","","","","","","","","","Open an atomic storage with a given <code>AtomicStoreLoader</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Constructs new network for a node. Note that this network …","Create a new, empty, <code>MasterMap</code>","Creates a new <code>MemoryNetwork</code> and hooks it up to the group …","Creates a new <code>WNetwork</code> preloaded with connections to the …","Creates a new, empty <code>MemoryStorage</code>","","","","","","","","Open an atomic storage at a given path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Commit</code> qc from the leader","Final decision","A new decision event was issued","A view encountered an error and was interrupted","A status event emitted by a <code>PhaseLock</code> instance","The type and contents of a status event emitted by a …","This node is a follower for this view","This node is the leader for this view","Incoming message","Signals the start of a new view","A new view was started by this node","Event streaming handle for a <code>PhaseLock</code> instance running in …","Pre-commit qc from the leader","Prepare qc from the leader","A new block was proposed","The node has been synced with the network","A view was canceled by a timeout interrupt","A nodes vote on the prepare field.","Will pull all the currently available events out of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","iterate through all events on a [<code>Node</code>] and determine if …","The current view","The current view","The view this vote was cast for","The current view","The current view","the current view","","","","","","","","","","","","","","The underlying event","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","return the timeout for a view of the underlying <code>Phaselock</code>","Get the state of the internal round runner. This is used …","Gets the current committed state of the <code>PhaseLock</code> instance","","","","","","","The current high qc","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Blocks until network is ready to be used (e.g. connected …","The justification qc for this view","The message kind","The item being proposed","Hash of the item being voted on","Hash of the item being worked on","Hash of the thing being worked on","Hash of the thing we just decided on","","","","","","","Provides a reference to the underlying networking …","Will return the next event in the queue","Synchronous version of <code>next_event</code>","Signals the underlying <code>PhaseLock</code> to pause","Synchronously signals the underlying <code>PhaseLock</code> to pause","The pre commit qc","The <code>Commit</code> qc","final qc for the round","Signals the underlying <code>PhaseLock</code> to run one round, if …","Synchronously signals the underlying <code>PhaseLock</code> to run one …","The sender of this message","","","","","","","","Shut down the the inner phaselock and wait until all …","The signature share associated with this vote","The stage that this event originates from","Signals to the underlying <code>PhaseLock</code> to unpause","Synchronously signals the underlying <code>PhaseLock</code> to unpause","The state this proposal results in","Provides a reference to the underlying storage for this …","Submits a transaction to the backing <code>PhaseLock</code> instance.","Synchronously submits a transaction to the backing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Will attempt to immediately pull an event out of the queue","","","","","","","","","","","The view number that this event originates from","","","","","","","","","","","The block that was proposed","The list of blocks that were committed by this decision","The underlying error","The quorum certificates that accompy this Decide","The list of states that were committed by this decision","The view being started","The view that timed out","The current view number","The current view number","The current view number"],"i":[1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,2,1,3,4,2,1,3,4,1,3,4,3,4,0,0,1,0,4,1,1,3,2,1,3,4,4,1,4,1,1,4,2,1,3,4,3,4,3,4,4,3,3,3,4,0,3,4,4,4,4,1,3,3,3,3,4,1,3,0,2,1,3,4,2,1,3,4,2,1,3,4,0,2,1,3,4,5,6,7,8,9,10,11,12,10,11,5,13,14,15,7,15,0,16,16,0,0,16,16,16,0,0,0,0,0,0,17,18,19,20,21,22,23,17,18,19,20,21,16,22,23,24,17,18,19,20,21,16,22,23,24,17,18,19,20,21,16,22,23,24,17,18,19,20,21,16,22,23,24,17,18,19,20,21,0,17,18,19,20,21,17,18,19,20,21,16,22,23,24,23,17,18,19,20,21,17,18,19,20,21,17,18,19,20,21,16,22,23,24,17,18,19,20,21,16,22,23,24,17,17,18,18,19,19,20,20,21,21,16,22,23,24,17,18,19,20,21,22,23,17,18,19,20,21,16,22,24,17,18,19,20,21,16,22,24,24,17,18,19,20,21,16,22,23,24,24,22,17,18,19,20,21,22,23,24,24,24,17,18,19,20,21,17,17,18,18,19,19,20,20,21,21,17,18,19,20,21,17,18,19,20,21,16,22,23,24,22,23,22,23,17,18,19,20,21,16,22,23,24,17,18,19,20,21,22,17,18,19,20,21,16,22,23,24,17,18,19,20,21,16,22,23,24,17,18,19,20,21,16,22,23,24,22,23,17,18,19,20,21,16,22,23,24,0,0,0,0,0,0,0,25,25,25,25,25,25,0,0,0,26,27,28,29,26,27,30,25,25,30,26,27,25,28,30,29,31,26,27,25,28,30,29,31,25,26,27,28,30,29,31,26,27,28,30,29,31,30,29,31,25,26,27,28,30,29,26,27,28,30,29,26,27,25,25,28,30,29,31,26,27,25,28,30,29,31,26,27,28,30,29,30,26,27,28,30,29,29,29,29,25,25,26,27,25,28,30,29,31,26,27,28,30,29,31,30,28,30,30,29,0,0,0,26,27,28,30,29,25,28,26,27,28,30,29,31,25,29,26,27,25,28,30,29,31,26,27,25,28,30,29,31,26,27,25,28,30,29,31,30,28,26,27,25,28,30,29,31,32,33,34,0,35,35,35,32,36,33,35,35,35,35,35,35,0,0,32,0,35,35,0,35,35,32,35,0,32,34,0,32,0,32,0,35,0,36,35,36,33,35,35,35,35,37,37,35,35,37,0,35,35,35,35,38,38,38,38,38,38,38,37,38,36,36,36,35,0,35,35,37,37,37,33,37,37,34,33,37,37,39,39,37,35,35,35,35,35,38,33,35,40,41,42,43,44,45,46,41,47,48,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,0,0,0,0,0,0,50,51,52,53,54,55,56,57,50,51,52,53,54,55,56,57,51,54,55,51,54,55,51,52,54,55,56,57,51,52,54,55,56,57,55,55,56,57,56,50,57,51,54,55,50,51,52,53,54,55,50,51,52,53,54,55,56,57,55,51,54,55,56,57,56,57,56,57,56,57,56,57,56,57,56,57,51,54,55,56,57,51,54,55,56,50,51,52,53,54,55,56,57,51,54,55,51,54,55,51,54,55,51,53,54,55,57,51,54,55,51,54,55,50,56,51,54,55,51,54,55,52,52,51,54,55,51,52,54,55,56,57,50,51,52,53,54,55,56,57,50,51,52,53,54,55,56,57,50,51,52,53,54,55,56,57,56,57,50,51,52,53,54,55,56,57,0,0,58,58,0,0,58,58,0,0,58,0,0,0,58,58,58,0,59,59,60,58,61,62,63,64,65,66,67,59,60,58,61,62,63,64,65,66,67,59,60,58,61,62,63,64,65,66,67,59,60,58,61,62,63,64,65,66,67,59,62,63,64,65,66,67,61,62,63,64,65,66,67,62,63,64,65,66,67,60,60,58,61,62,63,64,65,66,67,59,60,58,61,62,63,64,64,64,64,65,66,67,62,63,64,65,66,67,59,59,59,62,63,64,65,66,67,63,59,60,58,61,62,63,64,65,66,67,59,62,61,63,64,65,66,67,62,63,64,65,66,67,59,59,59,59,59,65,66,67,59,59,61,61,62,63,64,65,66,67,59,64,60,59,59,63,59,59,59,59,60,58,61,62,63,64,65,66,67,59,60,58,61,62,63,64,65,66,67,59,60,58,61,62,63,64,65,66,67,59,59,60,58,61,62,63,64,65,66,67,60,59,60,58,61,62,63,64,65,66,67,68,69,70,69,69,71,72,73,74,75],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["error",8]],[[["",0]],["option",4,[["backtrace",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["phaselockconfig",3]],[[["",0]],["phaselock",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["",0]],["str",0]],null,[[["",0],["leaf",3],["leafhash",3]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0]],["u64",0]],[[["",0]],["option",4,[["stage",4]]]],[[["",0]]],[[],["indentedsection",3]],[[]],[[["u64",0],["phaselockconfig",3]]],[[]],[[]],[[]],[[]],null,[[["",0],["viewnumber",3]]],null,[[["u64",0],["phaselockconfig",3]]],[[["",0],["viewnumber",3]]],null,null,null,[[["",0]]],null,null,[[["",0],["viewnumber",3]]],[[["",0]]],[[["",0]]],[[["",0],["event",3]]],[[["",0]],["option",4,[["error",8]]]],null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["blockhash",3]],[[["",0]],["leafhash",3]],[[["",0]],["transactionhash",3]],[[["",0]],["verifyhash",3]],[[["",0]],["statehash",3]],[[["",0]],["stage",4]],[[["",0]],["quorumcertificate",3]],[[["",0]],["vecquorumcertificate",3]],[[["",0]],["leaf",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["blockhash",3]],["ordering",4]],[[["",0],["leafhash",3]],["ordering",4]],[[["",0],["transactionhash",3]],["ordering",4]],[[["",0],["verifyhash",3]],["ordering",4]],[[["",0],["statehash",3]],["ordering",4]],[[["leafhash",3],["viewnumber",3],["stage",4]],["verifyhash",3]],[[],["blockhash",3]],[[],["leafhash",3]],[[],["transactionhash",3]],[[],["verifyhash",3]],[[],["statehash",3]],[[],["result",4,[["blockhash",3]]]],[[],["result",4,[["leafhash",3]]]],[[],["result",4,[["transactionhash",3]]]],[[],["result",4,[["verifyhash",3]]]],[[],["result",4,[["statehash",3]]]],[[],["result",4,[["stage",4]]]],[[],["result",4,[["quorumcertificate",3]]]],[[],["result",4,[["vecquorumcertificate",3]]]],[[],["result",4,[["leaf",3]]]],[[],["vecquorumcertificate",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["blockhash",3]],["bool",0]],[[["",0],["leafhash",3]],["bool",0]],[[["",0],["transactionhash",3]],["bool",0]],[[["",0],["verifyhash",3]],["bool",0]],[[["",0],["statehash",3]],["bool",0]],[[["",0],["stage",4]],["bool",0]],[[["",0],["quorumcertificate",3]],["bool",0]],[[["",0],["vecquorumcertificate",3]],["bool",0]],[[["",0],["leaf",3]],["bool",0]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[],["blockhash",3]],[[]],[[],["leafhash",3]],[[]],[[],["transactionhash",3]],[[],["verifyhash",3]],[[]],[[],["statehash",3]],[[]],[[]],[[]],[[]],[[]],[[],["blockhash",3]],[[],["leafhash",3]],[[],["transactionhash",3]],[[],["verifyhash",3]],[[],["statehash",3]],null,null,[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["leafhash",3]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0],["blockhash",3]],["bool",0]],[[["",0],["leafhash",3]],["bool",0]],[[["",0],["transactionhash",3]],["bool",0]],[[["",0],["verifyhash",3]],["bool",0]],[[["",0],["statehash",3]],["bool",0]],[[["",0],["quorumcertificate",3]],["bool",0]],[[["",0],["vecquorumcertificate",3]],["bool",0]],[[["",0],["leaf",3]],["bool",0]],[[["leafhash",3]],["leaf",3]],null,[[["",0],["blockhash",3]],["option",4,[["ordering",4]]]],[[["",0],["leafhash",3]],["option",4,[["ordering",4]]]],[[["",0],["transactionhash",3]],["option",4,[["ordering",4]]]],[[["",0],["verifyhash",3]],["option",4,[["ordering",4]]]],[[["",0],["statehash",3]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["blockhash",3]],[[],["leafhash",3]],[[],["transactionhash",3]],[[],["verifyhash",3]],[[],["statehash",3]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["vec",3,[["u8",0],["global",3]]]],[[],["vec",3,[["u8",0],["global",3]]]],[[],["vec",3,[["u8",0],["global",3]]]],[[],["vec",3,[["u8",0],["global",3]]]],[[],["vec",3,[["u8",0],["global",3]]]],[[["",0]],["vecquorumcertificate",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],null,null,[[["",0]],["result",4]],[[["",0]],["error",8]],[[["",0]],["option",4,[["backtrace",3]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["subtraction",3]],[[["",0]],["addition",3]],[[["",0]],["transaction",3]],[[["",0]],["state",3]],[[["",0]],["dentryblock",3]],[[["",0]],["dentrynode",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],[[],["dentryblock",3]],[[]],[[["",0]],["str",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["subtraction",3]],["bool",0]],[[["",0],["addition",3]],["bool",0]],[[["",0],["transaction",3]],["bool",0]],[[["",0],["state",3]],["bool",0]],[[["",0],["dentryblock",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["blockhash",3]],[[["",0],["",0]]],[[],["leafhash",3]],[[],["transactionhash",3]],[[],["indentedsection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["subtraction",3]],["bool",0]],[[["",0],["addition",3]],["bool",0]],[[["",0],["transaction",3]],["bool",0]],[[["",0],["state",3]],["bool",0]],[[["",0],["dentryblock",3]],["bool",0]],[[]],[[["",0]]],null,null,[[["",0]]],null,[[["dentryblock",3]],["leaf",3,[["dentryblock",3]]]],[[],["quorumcertificate",3]],[[["state",3],["",0]],["transaction",3]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["option",4,[["error",8]]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["error",8]],[[["",0]],["option",4,[["backtrace",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["str",0]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],null,[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["networknodehandleerror",4]],["networkerror",4]],[[]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["leafhash",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["viewnumber",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["leafhash",3]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["blockhash",3]],[[],["leafhash",3]],[[],["transactionhash",3]],[[],["indentedsection",3]],null,[[]],[[]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0],["vec",3,[["global",3]]],["vec",3,[["global",3]]]]],[[["",0]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["duration",3]],[[["",0]],["bool",0]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["pin",3,[["box",3,[["future",8],["global",3]]]]]],[[["",0]],["bool",0]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0],["viewnumber",3],["stage",4]],["ed25519pub",3]],[[["",0]]],[[["",0]],["u64",0]],[[["",0],["viewnumber",3],["ed25519pub",3],["statehash",3]],["option",4]],[[]],[[["",0],["viewnumber",3],["ed25519priv",3],["statehash",3]],["option",4]],[[["vec",3,[["ed25519pub",3]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["libp2pnetwork",3]],[[["",0]],["dummyreliability",3]],[[["",0]],["memorynetwork",3]],[[["",0]],["wnetwork",3]],[[["",0]],["atomicstorage",3]],[[["",0]],["memorystorage",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],[[["",0]]],[[],["storageresult",6]],[[],["storageresult",6]],[[["path",3]],["result",6]],[[],["stateless",3]],[[]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["sender",3]],["option",4,[["vec",3,[["boxfuture",6,[["result",4,[["networkerror",4]]]]]]]]]],[[["usize",0],["usize",0]],["box",3,[["fn",8]]]],[[["usize",0],["usize",0]],["box",3,[["fn",8]]]],[[["usize",0],["usize",0]],["box",3,[["fn",8]]]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["leafhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["leafhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["blockhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["viewnumber",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["viewnumber",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["leafhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["leafhash",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["atomicstoreloader",3],["option",4,[["tempdir",3]]]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["networknodeconfig",3],["arc",3,[["rwlock",3,[["vec",3]]]]],["usize",0]]],[[],["arc",3,[["mastermap",3]]]],[[["arc",3,[["mastermap",3]]],["option",4,[["arc",3,[["networkreliability",8]]]]]],["memorynetwork",3]],[[["str",0],["u16",0],["option",4,[["duration",3]]]]],[[]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["vec",3,[["global",3]]],["vec",3,[["global",3]]]]],[[["path",3]],["result",6]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["duration",3]],[[["",0]],["bool",0]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4,[["vec",3,[["event",3]]],["phaselockerror",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["event",3]],[[["",0]],["eventtype",4]],[[["",0]],["message",3]],[[["",0]],["newview",3]],[[["",0]],["prepare",3]],[[["",0]],["vote",3]],[[["",0]],["precommit",3]],[[["",0]],["commit",3]],[[["",0]],["decide",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],null,null,null,null,null,null,[[],["result",4,[["message",3]]]],[[],["result",4,[["newview",3]]]],[[],["result",4,[["prepare",3]]]],[[],["result",4,[["vote",3]]]],[[],["result",4,[["precommit",3]]]],[[],["result",4,[["commit",3]]]],[[],["result",4,[["decide",3]]]],[[["",0],["newview",3]],["bool",0]],[[["",0],["prepare",3]],["bool",0]],[[["",0],["vote",3]],["bool",0]],[[["",0],["precommit",3]],["bool",0]],[[["",0],["commit",3]],["bool",0]],[[["",0],["decide",3]],["bool",0]],null,[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["preparevote",3]],["vote",3]],[[["commitvote",3]],["vote",3]],[[]],[[["precommitvote",3]],["vote",3]],[[]],[[]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],null,null,null,null,null,null,null,[[["",0],["newview",3]],["bool",0]],[[["",0],["prepare",3]],["bool",0]],[[["",0],["vote",3]],["bool",0]],[[["",0],["precommit",3]],["bool",0]],[[["",0],["commit",3]],["bool",0]],[[["",0],["decide",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]],["result",4,[["event",3],["phaselockerror",4]]]],[[["",0]]],[[["",0]]],null,null,null,[[["",0]]],[[["",0]]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[]],null,null,[[["",0]]],[[["",0]]],null,[[["",0]]],[[["",0]]],[[["",0]],["result",4,[["phaselockerror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["result",4,[["option",4,[["event",3]]],["phaselockerror",4]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null],"p":[[4,"PhaseLockError"],[3,"PhaseLockInner"],[3,"PhaseLockConfig"],[3,"PhaseLock"],[13,"BadOrForgedQC"],[13,"InvalidState"],[13,"ItemNotFound"],[13,"StorageError"],[13,"TimeoutError"],[13,"FailedToMessageLeader"],[13,"FailedToBroadcast"],[13,"NetworkFault"],[13,"BadBlock"],[13,"InconsistentBlock"],[13,"ViewTimeoutError"],[4,"Stage"],[3,"BlockHash"],[3,"LeafHash"],[3,"TransactionHash"],[3,"VerifyHash"],[3,"StateHash"],[3,"QuorumCertificate"],[3,"VecQuorumCertificate"],[3,"Leaf"],[4,"DEntryError"],[3,"Subtraction"],[3,"Addition"],[3,"Transaction"],[3,"DEntryBlock"],[3,"State"],[3,"DEntryNode"],[8,"NodeImplementation"],[8,"State"],[8,"StatefulHandler"],[4,"NetworkError"],[8,"BlockContents"],[8,"NetworkingImplementation"],[8,"Storage"],[8,"NetworkReliability"],[13,"Other"],[13,"SocketDecodeError"],[13,"NoSocketsError"],[13,"FailedToSerialize"],[13,"FailedToDeserialize"],[13,"WebSocket"],[13,"ExecutorError"],[13,"FailedToBindListener"],[13,"Timeout"],[3,"StaticCommittee"],[3,"Stateless"],[3,"Libp2pNetwork"],[3,"DummyReliability"],[3,"MasterMap"],[3,"MemoryNetwork"],[3,"WNetwork"],[3,"AtomicStorage"],[3,"MemoryStorage"],[4,"EventType"],[3,"PhaseLockHandle"],[3,"Event"],[3,"Message"],[3,"NewView"],[3,"Prepare"],[3,"Vote"],[3,"PreCommit"],[3,"Commit"],[3,"Decide"],[13,"Propose"],[13,"Decide"],[13,"Error"],[13,"NewView"],[13,"ViewTimeout"],[13,"Leader"],[13,"Follower"],[13,"Synced"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};